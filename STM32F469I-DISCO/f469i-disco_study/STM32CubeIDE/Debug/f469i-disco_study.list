
f469i-disco_study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800fdcc  0800fdcc  0001fdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe74  0800fe74  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe74  0800fe74  0001fe74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe7c  0800fe7c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe7c  0800fe7c  0001fe7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe80  0800fe80  0001fe80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800fe84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00008f48  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008fe0  20008fe0  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038592  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000857f  00000000  00000000  0005865a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c08  00000000  00000000  00060be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002880  00000000  00000000  000637e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037361  00000000  00000000  00066068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f43b  00000000  00000000  0009d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001201a0  00000000  00000000  000dc804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fc9a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b8f0  00000000  00000000  001fc9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000098 	.word	0x20000098
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fdb4 	.word	0x0800fdb4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	0800fdb4 	.word	0x0800fdb4

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_CRC_Init+0x20>)
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <MX_CRC_Init+0x24>)
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_CRC_Init+0x20>)
 8000510:	f002 fa4e 	bl	80029b0 <HAL_CRC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800051a:	f000 ff15 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000b4 	.word	0x200000b4
 8000528:	40023000 	.word	0x40023000

0800052c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <HAL_CRC_MspInit+0x3c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10d      	bne.n	800055a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023000 	.word	0x40023000
 800056c:	40023800 	.word	0x40023800

08000570 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <MX_DMA2D_Init+0x60>)
 8000578:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a6:	f002 fab1 	bl	8002b0c <HAL_DMA2D_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005b0:	f000 feca 	bl	8001348 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005b4:	2101      	movs	r1, #1
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005b8:	f002 fc02 	bl	8002dc0 <HAL_DMA2D_ConfigLayer>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005c2:	f000 fec1 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000bc 	.word	0x200000bc
 80005d0:	4002b000 	.word	0x4002b000

080005d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_DMA2D_MspInit+0x48>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d115      	bne.n	8000612 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2105      	movs	r1, #5
 8000606:	205a      	movs	r0, #90	; 0x5a
 8000608:	f002 f9a8 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800060c:	205a      	movs	r0, #90	; 0x5a
 800060e:	f002 f9c1 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	4002b000 	.word	0x4002b000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0aa      	sub	sp, #168	; 0xa8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800062a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000636:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800063a:	2224      	movs	r2, #36	; 0x24
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00f fab2 	bl	800fba8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000644:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00f faa2 	bl	800fba8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00f fa9c 	bl	800fba8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000670:	4b6a      	ldr	r3, [pc, #424]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000672:	4a6b      	ldr	r2, [pc, #428]	; (8000820 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000674:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000676:	4b69      	ldr	r3, [pc, #420]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800067c:	4b67      	ldr	r3, [pc, #412]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800067e:	2204      	movs	r2, #4
 8000680:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000682:	4b66      	ldr	r3, [pc, #408]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000688:	237d      	movs	r3, #125	; 0x7d
 800068a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800069a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800069e:	4619      	mov	r1, r3
 80006a0:	485e      	ldr	r0, [pc, #376]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80006a2:	f002 fc1f 	bl	8002ee4 <HAL_DSI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80006ac:	f000 fe4c 	bl	8001348 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80006e6:	4619      	mov	r1, r3
 80006e8:	484c      	ldr	r0, [pc, #304]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80006ea:	f003 f8ab 	bl	8003844 <HAL_DSI_ConfigHostTimeouts>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80006f4:	f000 fe28 	bl	8001348 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80006f8:	231c      	movs	r3, #28
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006fc:	2321      	movs	r3, #33	; 0x21
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000700:	230f      	movs	r3, #15
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000704:	2319      	movs	r3, #25
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800070c:	230a      	movs	r3, #10
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000714:	4619      	mov	r1, r3
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000718:	f003 f82a 	bl	8003770 <HAL_DSI_ConfigPhyTimer>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000722:	f000 fe11 	bl	8001348 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000726:	2104      	movs	r1, #4
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800072a:	f002 fff9 	bl	8003720 <HAL_DSI_ConfigFlowControl>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000734:	f000 fe08 	bl	8001348 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000738:	f242 7110 	movw	r1, #10000	; 0x2710
 800073c:	4837      	ldr	r0, [pc, #220]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800073e:	f003 f947 	bl	80039d0 <HAL_DSI_SetLowPowerRXFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000748:	f000 fdfe 	bl	8001348 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000750:	f002 fce4 	bl	800311c <HAL_DSI_ConfigErrorMonitor>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800075a:	f000 fdf5 	bl	8001348 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800078e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800079a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800079e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80007a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	4619      	mov	r1, r3
 80007b0:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80007b2:	f002 ff57 	bl	8003664 <HAL_DSI_ConfigCommand>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80007bc:	f000 fdc4 	bl	8001348 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80007c4:	2305      	movs	r3, #5
 80007c6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80007c8:	23c8      	movs	r3, #200	; 0xc8
 80007ca:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80007cc:	2310      	movs	r3, #16
 80007ce:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80007d4:	2304      	movs	r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80007f2:	f002 fe5f 	bl	80034b4 <HAL_DSI_ConfigAdaptedCommandMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80007fc:	f000 fda4 	bl	8001348 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000804:	f002 fe2e 	bl	8003464 <HAL_DSI_SetGenericVCID>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800080e:	f000 fd9b 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	37a8      	adds	r7, #168	; 0xa8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000fc 	.word	0x200000fc
 8000820:	40016c00 	.word	0x40016c00

08000824 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_DSI_MspInit+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d133      	bne.n	80008ae <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_DSI_MspInit+0x98>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_DSI_MspInit+0x98>)
 800086c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800087e:	2304      	movs	r3, #4
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800088e:	230d      	movs	r3, #13
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_DSI_MspInit+0x9c>)
 800089a:	f003 f8c7 	bl	8003a2c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	205c      	movs	r0, #92	; 0x5c
 80008a4:	f002 f85a 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80008a8:	205c      	movs	r0, #92	; 0x5c
 80008aa:	f002 f873 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40016c00 	.word	0x40016c00
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40022400 	.word	0x40022400

080008c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_FMC_Init+0x98>)
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_FMC_Init+0x9c>)
 80008e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_FMC_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_FMC_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_FMC_Init+0x98>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_FMC_Init+0x98>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_FMC_Init+0x98>)
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_FMC_Init+0x98>)
 8000902:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000906:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_FMC_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_FMC_Init+0x98>)
 8000910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000914:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_FMC_Init+0x98>)
 8000918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_FMC_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000930:	2307      	movs	r3, #7
 8000932:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000934:	2303      	movs	r3, #3
 8000936:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_FMC_Init+0x98>)
 8000946:	f007 fde6 	bl	8008516 <HAL_SDRAM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000950:	f000 fcfa 	bl	8001348 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000118 	.word	0x20000118
 8000960:	a0000140 	.word	0xa0000140

08000964 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <HAL_FMC_MspInit+0x128>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	f040 8081 	bne.w	8000a84 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <HAL_FMC_MspInit+0x128>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 800098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000990:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6393      	str	r3, [r2, #56]	; 0x38
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 800099a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80009a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009a8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b6:	230c      	movs	r3, #12
 80009b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4835      	ldr	r0, [pc, #212]	; (8000a94 <HAL_FMC_MspInit+0x130>)
 80009c0:	f003 f834 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80009c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	482e      	ldr	r0, [pc, #184]	; (8000a98 <HAL_FMC_MspInit+0x134>)
 80009e0:	f003 f824 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80009e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009e8:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4827      	ldr	r0, [pc, #156]	; (8000a9c <HAL_FMC_MspInit+0x138>)
 8000a00:	f003 f814 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000a04:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a08:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a16:	230c      	movs	r3, #12
 8000a18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <HAL_FMC_MspInit+0x13c>)
 8000a20:	f003 f804 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a24:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a28:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <HAL_FMC_MspInit+0x140>)
 8000a40:	f002 fff4 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000a44:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000a48:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <HAL_FMC_MspInit+0x144>)
 8000a60:	f002 ffe4 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a74:	230c      	movs	r3, #12
 8000a76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_FMC_MspInit+0x148>)
 8000a7e:	f002 ffd5 	bl	8003a2c <HAL_GPIO_Init>
 8000a82:	e000      	b.n	8000a86 <HAL_FMC_MspInit+0x122>
    return;
 8000a84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000014c 	.word	0x2000014c
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40022000 	.word	0x40022000
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	40021c00 	.word	0x40021c00
 8000aac:	40020800 	.word	0x40020800

08000ab0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ab8:	f7ff ff54 	bl	8000964 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <vApplicationGetIdleTaskMemory+0x30>)
 8000b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000154 	.word	0x20000154
 8000b28:	200001ac 	.word	0x200001ac

08000b2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_FREERTOS_Init+0x30>)
 8000b34:	1d3c      	adds	r4, r7, #4
 8000b36:	461d      	mov	r5, r3
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00a fb05 	bl	800b158 <osThreadCreate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <MX_FREERTOS_Init+0x34>)
 8000b52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	0800fdd8 	.word	0x0800fdd8
 8000b60:	20000150 	.word	0x20000150

08000b64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b6c:	f001 fac4 	bl	80020f8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f00a fb3d 	bl	800b1f0 <osDelay>
 8000b76:	e7fb      	b.n	8000b70 <StartDefaultTask+0xc>

08000b78 <MX_GPIO_Init>:
/** Configure pins
     PB3   ------> I2S3_CK
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b92:	4bae      	ldr	r3, [pc, #696]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4aad      	ldr	r2, [pc, #692]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4bab      	ldr	r3, [pc, #684]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
 8000bae:	4ba7      	ldr	r3, [pc, #668]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4aa6      	ldr	r2, [pc, #664]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
 8000bca:	4ba0      	ldr	r3, [pc, #640]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a9f      	ldr	r2, [pc, #636]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b9d      	ldr	r3, [pc, #628]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	4b99      	ldr	r3, [pc, #612]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a98      	ldr	r2, [pc, #608]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b96      	ldr	r3, [pc, #600]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a91      	ldr	r2, [pc, #580]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b8b      	ldr	r3, [pc, #556]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a8a      	ldr	r2, [pc, #552]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b84      	ldr	r3, [pc, #528]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a83      	ldr	r2, [pc, #524]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a7c      	ldr	r2, [pc, #496]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b7a      	ldr	r3, [pc, #488]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b76      	ldr	r3, [pc, #472]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a75      	ldr	r2, [pc, #468]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6e      	ldr	r2, [pc, #440]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a67      	ldr	r2, [pc, #412]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210c      	movs	r1, #12
 8000cc6:	4862      	ldr	r0, [pc, #392]	; (8000e50 <MX_GPIO_Init+0x2d8>)
 8000cc8:	f003 f874 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2130      	movs	r1, #48	; 0x30
 8000cd0:	4860      	ldr	r0, [pc, #384]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000cd2:	f003 f86f 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2108      	movs	r1, #8
 8000cda:	485f      	ldr	r0, [pc, #380]	; (8000e58 <MX_GPIO_Init+0x2e0>)
 8000cdc:	f003 f86a 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	485d      	ldr	r0, [pc, #372]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000ce6:	f003 f865 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	485c      	ldr	r0, [pc, #368]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000cf0:	f003 f860 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	485a      	ldr	r0, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x2ec>)
 8000cfa:	f003 f85b 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	4859      	ldr	r0, [pc, #356]	; (8000e68 <MX_GPIO_Init+0x2f0>)
 8000d04:	f003 f856 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484c      	ldr	r0, [pc, #304]	; (8000e50 <MX_GPIO_Init+0x2d8>)
 8000d20:	f002 fe84 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000d24:	2308      	movs	r3, #8
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4848      	ldr	r0, [pc, #288]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000d40:	f002 fe74 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4841      	ldr	r0, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000d5a:	f002 fe67 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000d5e:	2330      	movs	r3, #48	; 0x30
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d62:	2311      	movs	r3, #17
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4837      	ldr	r0, [pc, #220]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000d76:	f002 fe59 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d7e:	2311      	movs	r3, #17
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_GPIO_Init+0x2e0>)
 8000d92:	f002 fe4b 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d9a:	2311      	movs	r3, #17
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000dae:	f002 fe3d 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000db2:	2305      	movs	r3, #5
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000dca:	f002 fe2f 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000de0:	2302      	movs	r3, #2
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	481a      	ldr	r0, [pc, #104]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000dec:	f002 fe1e 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000df0:	2304      	movs	r3, #4
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000e04:	f002 fe12 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_GPIO_Init+0x2f4>)
 8000e1e:	f002 fe05 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <MX_GPIO_Init+0x2ec>)
 8000e3a:	f002 fdf7 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e012      	b.n	8000e70 <MX_GPIO_Init+0x2f8>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40022800 	.word	0x40022800
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000e7e:	f002 fdd5 	bl	8003a2c <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3740      	adds	r7, #64	; 0x40
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000

08000e90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <MX_I2C1_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ece:	f004 fb95 	bl	80055fc <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fa36 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200003ac 	.word	0x200003ac
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	000186a0 	.word	0x000186a0

08000eec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <MX_I2C2_Init+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_I2C2_Init+0x58>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f2a:	f004 fb67 	bl	80055fc <HAL_I2C_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 fa08 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000400 	.word	0x20000400
 8000f40:	40005800 	.word	0x40005800
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a32      	ldr	r2, [pc, #200]	; (8001030 <HAL_I2C_MspInit+0xe8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d12d      	bne.n	8000fc6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a30      	ldr	r2, [pc, #192]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4825      	ldr	r0, [pc, #148]	; (8001038 <HAL_I2C_MspInit+0xf0>)
 8000fa4:	f002 fd42 	bl	8003a2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fc4:	e030      	b.n	8001028 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_I2C_MspInit+0xf4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d12b      	bne.n	8001028 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fde:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000fec:	2330      	movs	r3, #48	; 0x30
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <HAL_I2C_MspInit+0xf8>)
 8001008:	f002 fd10 	bl	8003a2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8001016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_I2C_MspInit+0xec>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400
 800103c:	40005800 	.word	0x40005800
 8001040:	40021c00 	.word	0x40021c00

08001044 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00e fda9 	bl	800fba8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001058:	4a38      	ldr	r2, [pc, #224]	; (800113c <MX_LTDC_Init+0xf8>)
 800105a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_LTDC_Init+0xf4>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_LTDC_Init+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_LTDC_Init+0xf4>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001088:	2201      	movs	r2, #1
 800108a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_LTDC_Init+0xf4>)
 800108e:	22c9      	movs	r2, #201	; 0xc9
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001094:	f240 12e1 	movw	r2, #481	; 0x1e1
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_LTDC_Init+0xf4>)
 800109c:	22ca      	movs	r2, #202	; 0xca
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010a2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010c2:	f004 fbdf 	bl	8005884 <HAL_LTDC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f93c 	bl	8001348 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 80010d4:	23c8      	movs	r3, #200	; 0xc8
 80010d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80010dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f4:	2307      	movs	r3, #7
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 80010fe:	23c8      	movs	r3, #200	; 0xc8
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001102:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001122:	f004 fd41 	bl	8005ba8 <HAL_LTDC_ConfigLayer>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800112c:	f000 f90c 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000454 	.word	0x20000454
 800113c:	40016800 	.word	0x40016800

08001140 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_LTDC_MspInit+0x48>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d115      	bne.n	800117e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 800115c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2058      	movs	r0, #88	; 0x58
 8001174:	f001 fbf2 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001178:	2058      	movs	r0, #88	; 0x58
 800117a:	f001 fc0b 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40016800 	.word	0x40016800
 800118c:	40023800 	.word	0x40023800

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f001 fac4 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f826 	bl	80011e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800119c:	f000 f896 	bl	80012cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f7ff fcea 	bl	8000b78 <MX_GPIO_Init>
  MX_CRC_Init();
 80011a4:	f7ff f9ae 	bl	8000504 <MX_CRC_Init>
  MX_DMA2D_Init();
 80011a8:	f7ff f9e2 	bl	8000570 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80011ac:	f7ff fa3a 	bl	8000624 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80011b0:	f7ff fb88 	bl	80008c4 <MX_FMC_Init>
  MX_I2C1_Init();
 80011b4:	f7ff fe6c 	bl	8000e90 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011b8:	f7ff fe98 	bl	8000eec <MX_I2C2_Init>
  MX_LTDC_Init();
 80011bc:	f7ff ff42 	bl	8001044 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80011c0:	f000 f8c8 	bl	8001354 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80011c4:	f000 f96c 	bl	80014a0 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 80011c8:	f000 fa28 	bl	800161c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80011cc:	f000 fbd4 	bl	8001978 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011d0:	f000 fc44 	bl	8001a5c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80011d4:	f000 fc6c 	bl	8001ab0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011d8:	f000 fd14 	bl	8001c04 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011dc:	f7ff fca6 	bl	8000b2c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011e0:	f009 ff97 	bl	800b112 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <main+0x54>
	...

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	; 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2234      	movs	r2, #52	; 0x34
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00e fcd6 	bl	800fba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <SystemClock_Config+0xdc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <SystemClock_Config+0xdc>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <SystemClock_Config+0xdc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <SystemClock_Config+0xe0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <SystemClock_Config+0xe0>)
 8001232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <SystemClock_Config+0xe0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124e:	2302      	movs	r3, #2
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800125c:	23b4      	movs	r3, #180	; 0xb4
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001264:	2306      	movs	r3, #6
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001268:	2306      	movs	r3, #6
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fc11 	bl	8006a98 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800127c:	f000 f864 	bl	8001348 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001280:	f004 fe68 	bl	8005f54 <HAL_PWREx_EnableOverDrive>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800128a:	f000 f85d 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2105      	movs	r1, #5
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 ff63 	bl	8006178 <HAL_RCC_ClockConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012b8:	f000 f846 	bl	8001348 <Error_Handler>
  }
}
 80012bc:	bf00      	nop
 80012be:	3750      	adds	r7, #80	; 0x50
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b090      	sub	sp, #64	; 0x40
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	223c      	movs	r2, #60	; 0x3c
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00e fc65 	bl	800fba8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80012de:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80012e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80012e4:	2390      	movs	r3, #144	; 0x90
 80012e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80012f0:	2306      	movs	r3, #6
 80012f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80012fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f005 f986 	bl	800661c <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001316:	f000 f817 	bl	8001348 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3740      	adds	r7, #64	; 0x40
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001336:	f001 fa15 	bl	8002764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40001000 	.word	0x40001000

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <MX_QUADSPI_Init+0x54>)
 800135c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001360:	2201      	movs	r2, #1
 8001362:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001366:	2201      	movs	r2, #1
 8001368:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 800136c:	2210      	movs	r2, #16
 800136e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001372:	2218      	movs	r2, #24
 8001374:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_QUADSPI_Init+0x50>)
 8001392:	f004 fe2f 	bl	8005ff4 <HAL_QSPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800139c:	f7ff ffd4 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200004fc 	.word	0x200004fc
 80013a8:	a0001000 	.word	0xa0001000

080013ac <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_QSPI_MspInit+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d15b      	bne.n	8001486 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a28      	ldr	r2, [pc, #160]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_QSPI_MspInit+0xe8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001422:	2340      	movs	r3, #64	; 0x40
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001432:	230a      	movs	r3, #10
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <HAL_QSPI_MspInit+0xec>)
 800143e:	f002 faf5 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001442:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001454:	2309      	movs	r3, #9
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <HAL_QSPI_MspInit+0xf0>)
 8001460:	f002 fae4 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001476:	230a      	movs	r3, #10
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_QSPI_MspInit+0xf0>)
 8001482:	f002 fad3 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	a0001000 	.word	0xa0001000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40021400 	.word	0x40021400

080014a0 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014a6:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <MX_SAI1_Init+0xb4>)
 80014a8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <MX_SAI1_Init+0xb8>)
 80014ea:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_SAI1_Init+0xb0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001506:	2208      	movs	r2, #8
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_SAI1_Init+0xb0>)
 800150c:	2201      	movs	r2, #1
 800150e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001512:	2200      	movs	r2, #0
 8001514:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001518:	2200      	movs	r2, #0
 800151a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_SAI1_Init+0xb0>)
 800151e:	2200      	movs	r2, #0
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001524:	2200      	movs	r2, #0
 8001526:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_SAI1_Init+0xb0>)
 800152a:	2200      	movs	r2, #0
 800152c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001530:	2201      	movs	r2, #1
 8001532:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_SAI1_Init+0xb0>)
 8001536:	2200      	movs	r2, #0
 8001538:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_SAI1_Init+0xb0>)
 800153c:	f005 fd30 	bl	8006fa0 <HAL_SAI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001546:	f7ff feff 	bl	8001348 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000548 	.word	0x20000548
 8001554:	40015804 	.word	0x40015804
 8001558:	0002ee00 	.word	0x0002ee00

0800155c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <HAL_SAI_MspInit+0xa8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d146      	bne.n	80015fc <HAL_SAI_MspInit+0xa0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_SAI_MspInit+0xac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_SAI_MspInit+0xb0>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_SAI_MspInit+0xb0>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_SAI_MspInit+0xb0>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_SAI_MspInit+0xac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_SAI_MspInit+0xac>)
 800159a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800159c:	2330      	movs	r3, #48	; 0x30
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015ac:	2306      	movs	r3, #6
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <HAL_SAI_MspInit+0xb4>)
 80015b8:	f002 fa38 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80015bc:	2340      	movs	r3, #64	; 0x40
 80015be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015cc:	2306      	movs	r3, #6
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_SAI_MspInit+0xb8>)
 80015d8:	f002 fa28 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015ec:	2306      	movs	r3, #6
 80015ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_SAI_MspInit+0xbc>)
 80015f8:	f002 fa18 	bl	8003a2c <HAL_GPIO_Init>

    }
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40015804 	.word	0x40015804
 8001608:	200005d0 	.word	0x200005d0
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021800 	.word	0x40021800

0800161c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 8001622:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <MX_SDIO_SD_Init+0x3c>)
 8001624:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <MX_SDIO_SD_Init+0x38>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	200005d4 	.word	0x200005d4
 8001658:	40012c00 	.word	0x40012c00

0800165c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_SD_MspInit+0xc0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d14a      	bne.n	8001714 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_SD_MspInit+0xc4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_SD_MspInit+0xc4>)
 8001688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_SD_MspInit+0xc4>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_SD_MspInit+0xc4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80016d2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016d6:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016e4:	230c      	movs	r3, #12
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <HAL_SD_MspInit+0xc8>)
 80016f0:	f002 f99c 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80016f4:	2304      	movs	r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001704:	230c      	movs	r3, #12
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <HAL_SD_MspInit+0xcc>)
 8001710:	f002 f98c 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40012c00 	.word	0x40012c00
 8001720:	40023800 	.word	0x40023800
 8001724:	40020800 	.word	0x40020800
 8001728:	40020c00 	.word	0x40020c00

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_MspInit+0x54>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_MspInit+0x54>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x54>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_MspInit+0x54>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_MspInit+0x54>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_MspInit+0x54>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	210f      	movs	r1, #15
 800176e:	f06f 0001 	mvn.w	r0, #1
 8001772:	f001 f8f3 	bl	800295c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_InitTick+0xe4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a32      	ldr	r2, [pc, #200]	; (8001868 <HAL_InitTick+0xe4>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_InitTick+0xe4>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b0:	f107 0210 	add.w	r2, r7, #16
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fefc 	bl	80065b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ca:	f004 fecd 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 80017ce:	6378      	str	r0, [r7, #52]	; 0x34
 80017d0:	e004      	b.n	80017dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017d2:	f004 fec9 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 80017d6:	4603      	mov	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_InitTick+0xe8>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	3b01      	subs	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_InitTick+0xec>)
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_InitTick+0xf0>)
 80017ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_InitTick+0xec>)
 80017f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_InitTick+0xec>)
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_InitTick+0xec>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_InitTick+0xec>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_InitTick+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <HAL_InitTick+0xec>)
 8001812:	f006 feb4 	bl	800857e <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800181c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11b      	bne.n	800185c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <HAL_InitTick+0xec>)
 8001826:	f006 fef9 	bl	800861c <HAL_TIM_Base_Start_IT>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f001 f8ab 	bl	8002994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d808      	bhi.n	8001856 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	2036      	movs	r0, #54	; 0x36
 800184a:	f001 f887 	bl	800295c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_InitTick+0xf4>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e002      	b.n	800185c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800185c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001860:	4618      	mov	r0, r3
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	431bde83 	.word	0x431bde83
 8001870:	20000658 	.word	0x20000658
 8001874:	40001000 	.word	0x40001000
 8001878:	20000008 	.word	0x20000008

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM6_DAC_IRQHandler+0x10>)
 80018ae:	f006 ff25 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000658 	.word	0x20000658

080018bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <OTG_FS_IRQHandler+0x10>)
 80018c2:	f002 fcfb 	bl	80042bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000b68 	.word	0x20000b68

080018d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <LTDC_IRQHandler+0x10>)
 80018d6:	f004 f8a5 	bl	8005a24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000454 	.word	0x20000454

080018e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA2D_IRQHandler+0x10>)
 80018ea:	f001 f958 	bl	8002b9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000bc 	.word	0x200000bc

080018f8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DSI_IRQHandler+0x10>)
 80018fe:	f001 fcca 	bl	8003296 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200000fc 	.word	0x200000fc

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f00e f8ec 	bl	800fb18 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20050000 	.word	0x20050000
 800196c:	00000400 	.word	0x00000400
 8001970:	200006a0 	.word	0x200006a0
 8001974:	20008fe0 	.word	0x20008fe0

08001978 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_TIM1_Init+0x98>)
 8001996:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <MX_TIM1_Init+0x9c>)
 8001998:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019c2:	f006 fddc 	bl	800857e <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019cc:	f7ff fcbc 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019de:	f006 ff95 	bl	800890c <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019e8:	f7ff fcae 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_TIM1_Init+0x98>)
 80019fa:	f007 f9b1 	bl	8008d60 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a04:	f7ff fca0 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200006a4 	.word	0x200006a4
 8001a14:	40010000 	.word	0x40010000

08001a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40023800 	.word	0x40023800

08001a5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART3_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a94:	f007 f9f4 	bl	8008e80 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f7ff fc53 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200006ec 	.word	0x200006ec
 8001aac:	40004800 	.word	0x40004800

08001ab0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART6_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART6_UART_Init+0x4c>)
 8001ae8:	f007 f9ca 	bl	8008e80 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f7ff fc29 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000730 	.word	0x20000730
 8001b00:	40011400 	.word	0x40011400

08001b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_UART_MspInit+0xec>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12d      	bne.n	8001b82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b70:	2307      	movs	r3, #7
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <HAL_UART_MspInit+0xf4>)
 8001b7c:	f001 ff56 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b80:	e031      	b.n	8001be6 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_UART_MspInit+0xf8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d12c      	bne.n	8001be6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_UART_MspInit+0xf0>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001bc4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <HAL_UART_MspInit+0xfc>)
 8001be2:	f001 ff23 	bl	8003a2c <HAL_GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	3730      	adds	r7, #48	; 0x30
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40004800 	.word	0x40004800
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40011400 	.word	0x40011400
 8001c00:	40021800 	.word	0x40021800

08001c04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <MX_FATFS_Init+0x18>)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_FATFS_Init+0x1c>)
 8001c0c:	f009 fa48 	bl	800b0a0 <FATFS_LinkDriver>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <MX_FATFS_Init+0x20>)
 8001c16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000778 	.word	0x20000778
 8001c20:	0800fe48 	.word	0x0800fe48
 8001c24:	20000774 	.word	0x20000774

08001c28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001c32:	f000 f87b 	bl	8001d2c <BSP_SD_IsDetected>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d001      	beq.n	8001c40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e012      	b.n	8001c66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <BSP_SD_Init+0x48>)
 8001c42:	f005 fbd5 	bl	80073f0 <HAL_SD_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <BSP_SD_Init+0x48>)
 8001c56:	f006 f817 	bl	8007c88 <HAL_SD_ConfigWideBusOperation>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200005d4 	.word	0x200005d4

08001c74 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8001c8c:	f005 fc60 	bl	8007550 <HAL_SD_ReadBlocks_DMA>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200005d4 	.word	0x200005d4

08001ca8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8001cc0:	f005 fd26 	bl	8007710 <HAL_SD_WriteBlocks_DMA>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200005d4 	.word	0x200005d4

08001cdc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <BSP_SD_GetCardState+0x1c>)
 8001ce2:	f006 f86b 	bl	8007dbc <HAL_SD_GetCardState>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200005d4 	.word	0x200005d4

08001cfc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4803      	ldr	r0, [pc, #12]	; (8001d14 <BSP_SD_GetCardInfo+0x18>)
 8001d08:	f005 ff92 	bl	8007c30 <HAL_SD_GetCardInfo>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200005d4 	.word	0x200005d4

08001d18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8001d20:	f000 f9b2 	bl	8002088 <BSP_SD_ReadCpltCallback>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001d32:	2301      	movs	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8001d36:	f000 f80b 	bl	8001d50 <BSP_PlatformIsDetected>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	b2db      	uxtb	r3, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8001d56:	2301      	movs	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <BSP_PlatformIsDetected+0x28>)
 8001d5e:	f002 f811 	bl	8003d84 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021800 	.word	0x40021800

08001d7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8001d84:	f009 f9d8 	bl	800b138 <osKernelSysTick>
 8001d88:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8001d8a:	e006      	b.n	8001d9a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001d8c:	f7ff ffa6 	bl	8001cdc <BSP_SD_GetCardState>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e009      	b.n	8001dae <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8001d9a:	f009 f9cd 	bl	800b138 <osKernelSysTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d8f0      	bhi.n	8001d8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <SD_CheckStatus+0x38>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001dc8:	f7ff ff88 	bl	8001cdc <BSP_SD_GetCardState>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <SD_CheckStatus+0x38>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SD_CheckStatus+0x38>)
 8001de0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <SD_CheckStatus+0x38>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000000 	.word	0x20000000

08001df4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <SD_initialize+0x8c>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8001e04:	f009 f98c 	bl	800b120 <osKernelRunning>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d030      	beq.n	8001e70 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001e0e:	f7ff ff0b 	bl	8001c28 <BSP_SD_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffcc 	bl	8001db8 <SD_CheckStatus>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <SD_initialize+0x8c>)
 8001e26:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <SD_initialize+0x8c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d01e      	beq.n	8001e70 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <SD_initialize+0x90>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <SD_initialize+0x94>)
 8001e3c:	f107 0408 	add.w	r4, r7, #8
 8001e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f009 f9e3 	bl	800b218 <osMessageCreate>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <SD_initialize+0x90>)
 8001e56:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <SD_initialize+0x90>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <SD_initialize+0x8c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SD_initialize+0x8c>)
 8001e6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <SD_initialize+0x8c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000
 8001e84:	2000077c 	.word	0x2000077c
 8001e88:	0800fdf4 	.word	0x0800fdf4

08001e8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff8d 	bl	8001db8 <SD_CheckStatus>
 8001e9e:	4603      	mov	r3, r0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001ebe:	f247 5030 	movw	r0, #30000	; 0x7530
 8001ec2:	f7ff ff5b 	bl	8001d7c <SD_CheckStatusWithTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da02      	bge.n	8001ed2 <SD_read+0x2a>
  {
    return res;
 8001ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ed0:	e032      	b.n	8001f38 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f7ff fecc 	bl	8001c74 <BSP_SD_ReadBlocks_DMA>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8001ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d124      	bne.n	8001f34 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <SD_read+0x98>)
 8001eec:	6819      	ldr	r1, [r3, #0]
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f009 f9f6 	bl	800b2e8 <osMessageGet>

    if (event.status == osEventMessage)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d118      	bne.n	8001f34 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d115      	bne.n	8001f34 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8001f08:	f009 f916 	bl	800b138 <osKernelSysTick>
 8001f0c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8001f0e:	e008      	b.n	8001f22 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001f10:	f7ff fee4 	bl	8001cdc <BSP_SD_GetCardState>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <SD_read+0x7a>
              {
                res = RES_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8001f20:	e008      	b.n	8001f34 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8001f22:	f009 f909 	bl	800b138 <osKernelSysTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d9ed      	bls.n	8001f10 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000077c 	.word	0x2000077c

08001f44 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001f5a:	f247 5030 	movw	r0, #30000	; 0x7530
 8001f5e:	f7ff ff0d 	bl	8001d7c <SD_CheckStatusWithTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da02      	bge.n	8001f6e <SD_write+0x2a>
  {
    return res;
 8001f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6c:	e02e      	b.n	8001fcc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68b8      	ldr	r0, [r7, #8]
 8001f74:	f7ff fe98 	bl	8001ca8 <BSP_SD_WriteBlocks_DMA>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d124      	bne.n	8001fc8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <SD_write+0x90>)
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	f247 5230 	movw	r2, #30000	; 0x7530
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f009 f9ac 	bl	800b2e8 <osMessageGet>

    if (event.status == osEventMessage)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d118      	bne.n	8001fc8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d115      	bne.n	8001fc8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8001f9c:	f009 f8cc 	bl	800b138 <osKernelSysTick>
 8001fa0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8001fa2:	e008      	b.n	8001fb6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001fa4:	f7ff fe9a 	bl	8001cdc <BSP_SD_GetCardState>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <SD_write+0x72>
          {
            res = RES_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001fb4:	e008      	b.n	8001fc8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8001fb6:	f009 f8bf 	bl	800b138 <osKernelSysTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f247 522f 	movw	r2, #29999	; 0x752f
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d9ed      	bls.n	8001fa4 <SD_write+0x60>
    }

  }
#endif

  return res;
 8001fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000077c 	.word	0x2000077c

08001fd8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	603a      	str	r2, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <SD_ioctl+0xac>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SD_ioctl+0x28>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e03c      	b.n	800207a <SD_ioctl+0xa2>

  switch (cmd)
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d834      	bhi.n	8002070 <SD_ioctl+0x98>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <SD_ioctl+0x34>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	0800201d 	.word	0x0800201d
 8002010:	08002025 	.word	0x08002025
 8002014:	0800203d 	.word	0x0800203d
 8002018:	08002057 	.word	0x08002057
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002022:	e028      	b.n	8002076 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fe67 	bl	8001cfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800203a:	e01c      	b.n	8002076 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fe5b 	bl	8001cfc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	b29a      	uxth	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002054:	e00f      	b.n	8002076 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fe4e 	bl	8001cfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	0a5a      	lsrs	r2, r3, #9
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800206e:	e002      	b.n	8002076 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8002070:	2304      	movs	r3, #4
 8002072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8002076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800207a:	4618      	mov	r0, r3
 800207c:	3730      	adds	r7, #48	; 0x30
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <BSP_SD_ReadCpltCallback+0x18>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f009 f8e7 	bl	800b268 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000077c 	.word	0x2000077c

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020aa:	490e      	ldr	r1, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c0:	4c0b      	ldr	r4, [pc, #44]	; (80020f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ce:	f000 fb15 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f00d fd27 	bl	800fb24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7ff f85b 	bl	8001190 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80020e8:	0800fe84 	.word	0x0800fe84
  ldr r2, =_sbss
 80020ec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80020f0:	20008fe0 	.word	0x20008fe0

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>
	...

080020f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80020fc:	2201      	movs	r2, #1
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <MX_USB_HOST_Init+0x40>)
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <MX_USB_HOST_Init+0x44>)
 8002102:	f00b fe85 	bl	800de10 <USBH_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800210c:	f7ff f91c 	bl	8001348 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8002110:	490b      	ldr	r1, [pc, #44]	; (8002140 <MX_USB_HOST_Init+0x48>)
 8002112:	480a      	ldr	r0, [pc, #40]	; (800213c <MX_USB_HOST_Init+0x44>)
 8002114:	f00b ff32 	bl	800df7c <USBH_RegisterClass>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800211e:	f7ff f913 	bl	8001348 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <MX_USB_HOST_Init+0x44>)
 8002124:	f00b ffb6 	bl	800e094 <USBH_Start>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800212e:	f7ff f90b 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	08002145 	.word	0x08002145
 800213c:	20000780 	.word	0x20000780
 8002140:	20000014 	.word	0x20000014

08002144 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	3b01      	subs	r3, #1
 8002154:	2b04      	cmp	r3, #4
 8002156:	d819      	bhi.n	800218c <USBH_UserProcess+0x48>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <USBH_UserProcess+0x1c>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	0800218d 	.word	0x0800218d
 8002164:	0800217d 	.word	0x0800217d
 8002168:	0800218d 	.word	0x0800218d
 800216c:	08002185 	.word	0x08002185
 8002170:	08002175 	.word	0x08002175
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <USBH_UserProcess+0x58>)
 8002176:	2203      	movs	r2, #3
 8002178:	701a      	strb	r2, [r3, #0]
  break;
 800217a:	e008      	b.n	800218e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <USBH_UserProcess+0x58>)
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
  break;
 8002182:	e004      	b.n	800218e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <USBH_UserProcess+0x58>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
  break;
 800218a:	e000      	b.n	800218e <USBH_UserProcess+0x4a>

  default:
  break;
 800218c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000b64 	.word	0x20000b64

080021a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c0:	d147      	bne.n	8002252 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_HCD_MspInit+0xbc>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <HAL_HCD_MspInit+0xbc>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_HCD_MspInit+0xbc>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80021de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021f0:	230a      	movs	r3, #10
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4819      	ldr	r0, [pc, #100]	; (8002260 <HAL_HCD_MspInit+0xc0>)
 80021fc:	f001 fc16 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4812      	ldr	r0, [pc, #72]	; (8002260 <HAL_HCD_MspInit+0xc0>)
 8002216:	f001 fc09 	bl	8003a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_HCD_MspInit+0xbc>)
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	4a0f      	ldr	r2, [pc, #60]	; (800225c <HAL_HCD_MspInit+0xbc>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6353      	str	r3, [r2, #52]	; 0x34
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_HCD_MspInit+0xbc>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_HCD_MspInit+0xbc>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_HCD_MspInit+0xbc>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	2043      	movs	r0, #67	; 0x43
 8002248:	f000 fb88 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800224c:	2043      	movs	r0, #67	; 0x43
 800224e:	f000 fba1 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000

08002264 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002272:	4618      	mov	r0, r3
 8002274:	f00c fbc5 	bl	800ea02 <USBH_LL_IncTimer>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800228e:	4618      	mov	r0, r3
 8002290:	f00c fc09 	bl	800eaa6 <USBH_LL_Connect>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00c fc1e 	bl	800eaec <USBH_LL_Disconnect>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00c fc53 	bl	800eb7a <USBH_LL_NotifyURBChange>
#endif
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00c fbb3 	bl	800ea56 <USBH_LL_PortEnabled>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002306:	4618      	mov	r0, r3
 8002308:	f00c fbbf 	bl	800ea8a <USBH_LL_PortDisabled>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8002322:	2b01      	cmp	r3, #1
 8002324:	d12a      	bne.n	800237c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <USBH_LL_Init+0x74>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <USBH_LL_Init+0x74>)
 8002332:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <USBH_LL_Init+0x74>)
 8002338:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800233c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <USBH_LL_Init+0x74>)
 8002340:	2208      	movs	r2, #8
 8002342:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <USBH_LL_Init+0x74>)
 8002346:	2201      	movs	r2, #1
 8002348:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <USBH_LL_Init+0x74>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <USBH_LL_Init+0x74>)
 8002352:	2202      	movs	r2, #2
 8002354:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <USBH_LL_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800235c:	480a      	ldr	r0, [pc, #40]	; (8002388 <USBH_LL_Init+0x74>)
 800235e:	f001 fd42 	bl	8003de6 <HAL_HCD_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8002368:	f7fe ffee 	bl	8001348 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <USBH_LL_Init+0x74>)
 800236e:	f002 f926 	bl	80045be <HAL_HCD_GetCurrentFrame>
 8002372:	4603      	mov	r3, r0
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f00c fb34 	bl	800e9e4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000b68 	.word	0x20000b68

0800238c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 f895 	bl	80044d2 <HAL_HCD_Start>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f95c 	bl	800266c <USBH_Get_USB_Status>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80023b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f89d 	bl	8004518 <HAL_HCD_Stop>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f941 	bl	800266c <USBH_Get_USB_Status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800240a:	4618      	mov	r0, r3
 800240c:	f002 f8e5 	bl	80045da <HAL_HCD_GetCurrentSpeed>
 8002410:	4603      	mov	r3, r0
 8002412:	2b02      	cmp	r3, #2
 8002414:	d00c      	beq.n	8002430 <USBH_LL_GetSpeed+0x38>
 8002416:	2b02      	cmp	r3, #2
 8002418:	d80d      	bhi.n	8002436 <USBH_LL_GetSpeed+0x3e>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <USBH_LL_GetSpeed+0x2c>
 800241e:	2b01      	cmp	r3, #1
 8002420:	d003      	beq.n	800242a <USBH_LL_GetSpeed+0x32>
 8002422:	e008      	b.n	8002436 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
    break;
 8002428:	e008      	b.n	800243c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
    break;
 800242e:	e005      	b.n	800243c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8002430:	2302      	movs	r3, #2
 8002432:	73fb      	strb	r3, [r7, #15]
    break;
 8002434:	e002      	b.n	800243c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
    break;
 800243a:	bf00      	nop
  }
  return  speed;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800245c:	4618      	mov	r0, r3
 800245e:	f002 f878 	bl	8004552 <HAL_HCD_ResetPort>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f8ff 	bl	800266c <USBH_Get_USB_Status>
 800246e:	4603      	mov	r3, r0
 8002470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002472:	7bbb      	ldrb	r3, [r7, #14]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f002 f87f 	bl	8004596 <HAL_HCD_HC_GetXferCount>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80024a2:	b590      	push	{r4, r7, lr}
 80024a4:	b089      	sub	sp, #36	; 0x24
 80024a6:	af04      	add	r7, sp, #16
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	4608      	mov	r0, r1
 80024ac:	4611      	mov	r1, r2
 80024ae:	461a      	mov	r2, r3
 80024b0:	4603      	mov	r3, r0
 80024b2:	70fb      	strb	r3, [r7, #3]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70bb      	strb	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80024ca:	787c      	ldrb	r4, [r7, #1]
 80024cc:	78ba      	ldrb	r2, [r7, #2]
 80024ce:	78f9      	ldrb	r1, [r7, #3]
 80024d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4623      	mov	r3, r4
 80024e2:	f001 fce2 	bl	8003eaa <HAL_HCD_HC_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f8bd 	bl	800266c <USBH_Get_USB_Status>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f001 fd52 	bl	8003fc8 <HAL_HCD_HC_Halt>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f89e 	bl	800266c <USBH_Get_USB_Status>
 8002530:	4603      	mov	r3, r0
 8002532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002534:	7bbb      	ldrb	r3, [r7, #14]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800253e:	b590      	push	{r4, r7, lr}
 8002540:	b089      	sub	sp, #36	; 0x24
 8002542:	af04      	add	r7, sp, #16
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	4608      	mov	r0, r1
 8002548:	4611      	mov	r1, r2
 800254a:	461a      	mov	r2, r3
 800254c:	4603      	mov	r3, r0
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	460b      	mov	r3, r1
 8002552:	70bb      	strb	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8002566:	787c      	ldrb	r4, [r7, #1]
 8002568:	78ba      	ldrb	r2, [r7, #2]
 800256a:	78f9      	ldrb	r1, [r7, #3]
 800256c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002570:	9303      	str	r3, [sp, #12]
 8002572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4623      	mov	r3, r4
 8002582:	f001 fd45 	bl	8004010 <HAL_HCD_HC_SubmitRequest>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f86d 	bl	800266c <USBH_Get_USB_Status>
 8002592:	4603      	mov	r3, r0
 8002594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002596:	7bbb      	ldrb	r3, [r7, #14]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}

080025a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 ffd9 	bl	800456e <HAL_HCD_HC_GetURBState>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d103      	bne.n	80025e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f870 	bl	80026c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80025e4:	20c8      	movs	r0, #200	; 0xc8
 80025e6:	f000 f8dd 	bl	80027a4 <HAL_Delay>
  return USBH_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800260a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333b      	adds	r3, #59	; 0x3b
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3354      	adds	r3, #84	; 0x54
 800262e:	78ba      	ldrb	r2, [r7, #2]
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e008      	b.n	8002646 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3355      	adds	r3, #85	; 0x55
 8002642:	78ba      	ldrb	r2, [r7, #2]
 8002644:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8a1 	bl	80027a4 <HAL_Delay>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d817      	bhi.n	80026b0 <USBH_Get_USB_Status+0x44>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <USBH_Get_USB_Status+0x1c>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	08002699 	.word	0x08002699
 800268c:	0800269f 	.word	0x0800269f
 8002690:	080026a5 	.word	0x080026a5
 8002694:	080026ab 	.word	0x080026ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
    break;
 800269c:	e00b      	b.n	80026b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800269e:	2302      	movs	r3, #2
 80026a0:	73fb      	strb	r3, [r7, #15]
    break;
 80026a2:	e008      	b.n	80026b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
    break;
 80026a8:	e005      	b.n	80026b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80026aa:	2302      	movs	r3, #2
 80026ac:	73fb      	strb	r3, [r7, #15]
    break;
 80026ae:	e002      	b.n	80026b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80026b0:	2302      	movs	r3, #2
 80026b2:	73fb      	strb	r3, [r7, #15]
    break;
 80026b4:	bf00      	nop
  }
  return usb_status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	461a      	mov	r2, r3
 80026e6:	2104      	movs	r1, #4
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <MX_DriverVbusFS+0x34>)
 80026ea:	f001 fb63 	bl	8003db4 <HAL_GPIO_WritePin>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40020400 	.word	0x40020400

080026fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_Init+0x40>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_Init+0x40>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x40>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f8fc 	bl	8002946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff f818 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7fe ffea 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000e6c 	.word	0x20000e6c

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000e6c 	.word	0x20000e6c

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000000c 	.word	0x2000000c

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ff4c 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296e:	f7ff ff61 	bl	8002834 <__NVIC_GetPriorityGrouping>
 8002972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7ff ffb1 	bl	80028e0 <NVIC_EncodePriority>
 800297e:	4602      	mov	r2, r0
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff80 	bl	800288c <__NVIC_SetPriority>
}
 800298c:	bf00      	nop
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff54 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fdaa 	bl	800052c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Start_IT+0x26>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e040      	b.n	8002a90 <HAL_DMA_Start_IT+0xa8>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d12f      	bne.n	8002a82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f83a 	bl	8002ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0216 	orr.w	r2, r2, #22
 8002a56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e005      	b.n	8002a8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d108      	bne.n	8002af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aee:	e007      	b.n	8002b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e03b      	b.n	8002b96 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fd4e 	bl	80005d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	f023 0107 	bic.w	r1, r3, #7
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d1      	ldr	r1, [r2, #12]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d026      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d021      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d026      	beq.n	8002c66 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d021      	beq.n	8002c66 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c30:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	f043 0202 	orr.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d026      	beq.n	8002cbe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d021      	beq.n	8002cbe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c88:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f853 	bl	8002d96 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d024      	beq.n	8002d44 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01f      	beq.n	8002d44 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01f      	beq.n	8002d8e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01a      	beq.n	8002d8e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f80e 	bl	8002daa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA2D_ConfigLayer+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e079      	b.n	8002ed4 <HAL_DMA2D_ConfigLayer+0x114>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	3318      	adds	r3, #24
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e0a:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b0a      	cmp	r3, #10
 8002e14:	d003      	beq.n	8002e1e <HAL_DMA2D_ConfigLayer+0x5e>
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b09      	cmp	r3, #9
 8002e1c:	d107      	bne.n	8002e2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e005      	b.n	8002e3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d120      	bne.n	8002e82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	ea02 0103 	and.w	r1, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA2D_ConfigLayer+0xb2>
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	d127      	bne.n	8002ec2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e80:	e01f      	b.n	8002ec2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	ea02 0103 	and.w	r1, r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b0a      	cmp	r3, #10
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d106      	bne.n	8002ec2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ec0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	ff03000f 	.word	0xff03000f

08002ee4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e10b      	b.n	8003110 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7c5b      	ldrb	r3, [r3, #17]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fc8e 	bl	8000824 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f22:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f36:	f7ff fc29 	bl	800278c <HAL_GetTick>
 8002f3a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002f3c:	e009      	b.n	8002f52 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f3e:	f7ff fc25 	bl	800278c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f4c:	d901      	bls.n	8002f52 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0de      	b.n	8003110 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ed      	beq.n	8002f3e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002f72:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002f76:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f8e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002f96:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff fbea 	bl	80027a4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fd0:	f7ff fbdc 	bl	800278c <HAL_GetTick>
 8002fd4:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002fd6:	e009      	b.n	8002fec <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002fd8:	f7ff fbd8 	bl	800278c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe6:	d901      	bls.n	8002fec <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e091      	b.n	8003110 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0206 	orr.w	r2, r2, #6
 800300c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0203 	bic.w	r2, r2, #3
 8003020:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0203 	bic.w	r2, r2, #3
 800304e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003076:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_DSI_Init+0x1b4>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	e000      	b.n	800309a <HAL_DSI_Init+0x1b6>
 8003098:	2301      	movs	r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_DSI_Init+0x234>)
 80030a0:	fb03 f202 	mul.w	r2, r3, r2
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	409a      	lsls	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80030d0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	003d0900 	.word	0x003d0900

0800311c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7c1b      	ldrb	r3, [r3, #16]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_DSI_ConfigErrorMonitor+0x16>
 800312e:	2302      	movs	r3, #2
 8003130:	e0ab      	b.n	800328a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800316c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003170:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800318e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0202 	orr.w	r2, r2, #2
 80031ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 020c 	orr.w	r2, r2, #12
 80031e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0210 	orr.w	r2, r2, #16
 8003206:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003260:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800327e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00f      	beq.n	80032ce <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8ad 	bl	8003428 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00f      	beq.n	80032fe <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f89f 	bl	800343c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 808c 	beq.w	8003420 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003310:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003328:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f818 	bl	8003450 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7c1b      	ldrb	r3, [r3, #16]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_DSI_SetGenericVCID+0x16>
 8003476:	2302      	movs	r3, #2
 8003478:	e016      	b.n	80034a8 <HAL_DSI_SetGenericVCID+0x44>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0203 	bic.w	r2, r2, #3
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7c1b      	ldrb	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0c5      	b.n	8003656 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0203 	bic.w	r2, r2, #3
 8003516:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0207 	bic.w	r2, r2, #7
 8003538:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6959      	ldr	r1, [r3, #20]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	431a      	orrs	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 020f 	bic.w	r2, r2, #15
 8003566:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 020e 	bic.w	r2, r2, #14
 800358a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	005a      	lsls	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0202 	orr.w	r2, r2, #2
 800364a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7c1b      	ldrb	r3, [r3, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_DSI_ConfigCommand+0x16>
 8003676:	2302      	movs	r3, #2
 8003678:	e049      	b.n	800370e <HAL_DSI_ConfigCommand+0xaa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_DSI_ConfigCommand+0xb8>)
 800368c:	400b      	ands	r3, r1
 800368e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800369e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80036a4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80036aa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80036b0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80036b6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80036bc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80036c2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80036c8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80036ce:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80036d4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80036da:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0202 	bic.w	r2, r2, #2
 80036f2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	fef080ff 	.word	0xfef080ff

08003720 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7c1b      	ldrb	r3, [r3, #16]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_DSI_ConfigFlowControl+0x16>
 8003732:	2302      	movs	r3, #2
 8003734:	e016      	b.n	8003764 <HAL_DSI_ConfigFlowControl+0x44>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 021f 	bic.w	r2, r2, #31
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7c1b      	ldrb	r3, [r3, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_DSI_ConfigPhyTimer+0x16>
 8003782:	2302      	movs	r3, #2
 8003784:	e058      	b.n	8003838 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4293      	cmp	r3, r2
 8003796:	bf38      	it	cc
 8003798:	4613      	movcc	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80037ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	041a      	lsls	r2, r3, #16
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80037da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	021a      	lsls	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7c1b      	ldrb	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_DSI_ConfigHostTimeouts+0x16>
 8003856:	2302      	movs	r3, #2
 8003858:	e0b4      	b.n	80039c4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800386e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b292      	uxth	r2, r2
 8003890:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800394e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7c1b      	ldrb	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e01b      	b.n	8003a1e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80039fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	065a      	lsls	r2, r3, #25
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e177      	b.n	8003d38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 8166 	bne.w	8003d32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d005      	beq.n	8003a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d130      	bne.n	8003ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d017      	beq.n	8003b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80c0 	beq.w	8003d32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a61      	ldr	r2, [pc, #388]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_GPIO_Init+0x32c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d037      	beq.n	8003c6a <HAL_GPIO_Init+0x23e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x330>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x23a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x236>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a55      	ldr	r2, [pc, #340]	; (8003d64 <HAL_GPIO_Init+0x338>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x232>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_GPIO_Init+0x33c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x22e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a53      	ldr	r2, [pc, #332]	; (8003d6c <HAL_GPIO_Init+0x340>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x22a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_GPIO_Init+0x344>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	; (8003d74 <HAL_GPIO_Init+0x348>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_GPIO_Init+0x34c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	; (8003d7c <HAL_GPIO_Init+0x350>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e012      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e010      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae84 	bls.w	8003a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022400 	.word	0x40022400
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e001      	b.n	8003da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dd0:	e003      	b.n	8003dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	041a      	lsls	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	619a      	str	r2, [r3, #24]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de8:	b08f      	sub	sp, #60	; 0x3c
 8003dea:	af0a      	add	r7, sp, #40	; 0x28
 8003dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e054      	b.n	8003ea2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe f9c4 	bl	80021a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f006 f97e 	bl	800a138 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	687e      	ldr	r6, [r7, #4]
 8003e44:	466d      	mov	r5, sp
 8003e46:	f106 0410 	add.w	r4, r6, #16
 8003e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e5a:	1d33      	adds	r3, r6, #4
 8003e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f006 f8f8 	bl	800a054 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f006 f975 	bl	800a15a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	687e      	ldr	r6, [r7, #4]
 8003e78:	466d      	mov	r5, sp
 8003e7a:	f106 0410 	add.w	r4, r6, #16
 8003e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e8e:	1d33      	adds	r3, r6, #4
 8003e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e92:	6838      	ldr	r0, [r7, #0]
 8003e94:	f006 fafe 	bl	800a494 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eaa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003eaa:	b590      	push	{r4, r7, lr}
 8003eac:	b089      	sub	sp, #36	; 0x24
 8003eae:	af04      	add	r7, sp, #16
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	70fb      	strb	r3, [r7, #3]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70bb      	strb	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_HCD_HC_Init+0x28>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e076      	b.n	8003fc0 <HAL_HCD_HC_Init+0x116>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	333d      	adds	r3, #61	; 0x3d
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3338      	adds	r3, #56	; 0x38
 8003efa:	787a      	ldrb	r2, [r7, #1]
 8003efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3340      	adds	r3, #64	; 0x40
 8003f0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f0e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3339      	adds	r3, #57	; 0x39
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	333f      	adds	r3, #63	; 0x3f
 8003f30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	78ba      	ldrb	r2, [r7, #2]
 8003f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f3e:	b2d0      	uxtb	r0, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	333a      	adds	r3, #58	; 0x3a
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	da09      	bge.n	8003f6c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	333b      	adds	r3, #59	; 0x3b
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e008      	b.n	8003f7e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	333b      	adds	r3, #59	; 0x3b
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	333c      	adds	r3, #60	; 0x3c
 8003f8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f90:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	787c      	ldrb	r4, [r7, #1]
 8003f98:	78ba      	ldrb	r2, [r7, #2]
 8003f9a:	78f9      	ldrb	r1, [r7, #3]
 8003f9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4623      	mov	r3, r4
 8003fae:	f006 fbeb 	bl	800a788 <USB_HC_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_HCD_HC_Halt+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e00f      	b.n	8004006 <HAL_HCD_HC_Halt+0x3e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f006 fe3b 	bl	800ac72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4603      	mov	r3, r0
 8004020:	70fb      	strb	r3, [r7, #3]
 8004022:	460b      	mov	r3, r1
 8004024:	70bb      	strb	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	333b      	adds	r3, #59	; 0x3b
 8004038:	78ba      	ldrb	r2, [r7, #2]
 800403a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	333f      	adds	r3, #63	; 0x3f
 800404a:	787a      	ldrb	r2, [r7, #1]
 800404c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800404e:	7c3b      	ldrb	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d112      	bne.n	800407a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3342      	adds	r3, #66	; 0x42
 8004062:	2203      	movs	r2, #3
 8004064:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	333d      	adds	r3, #61	; 0x3d
 8004074:	7f3a      	ldrb	r2, [r7, #28]
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e008      	b.n	800408c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3342      	adds	r3, #66	; 0x42
 8004088:	2202      	movs	r2, #2
 800408a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	2b03      	cmp	r3, #3
 8004090:	f200 80c6 	bhi.w	8004220 <HAL_HCD_HC_SubmitRequest+0x210>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	0800420d 	.word	0x0800420d
 80040a4:	08004111 	.word	0x08004111
 80040a8:	0800418f 	.word	0x0800418f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040ac:	7c3b      	ldrb	r3, [r7, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 80b8 	bne.w	8004224 <HAL_HCD_HC_SubmitRequest+0x214>
 80040b4:	78bb      	ldrb	r3, [r7, #2]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80b4 	bne.w	8004224 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040bc:	8b3b      	ldrh	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3355      	adds	r3, #85	; 0x55
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3355      	adds	r3, #85	; 0x55
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3342      	adds	r3, #66	; 0x42
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040fa:	e093      	b.n	8004224 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3342      	adds	r3, #66	; 0x42
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]
      break;
 800410e:	e089      	b.n	8004224 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004110:	78bb      	ldrb	r3, [r7, #2]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11d      	bne.n	8004152 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3355      	adds	r3, #85	; 0x55
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3342      	adds	r3, #66	; 0x42
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800413c:	e073      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3342      	adds	r3, #66	; 0x42
 800414c:	2202      	movs	r2, #2
 800414e:	701a      	strb	r2, [r3, #0]
      break;
 8004150:	e069      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3354      	adds	r3, #84	; 0x54
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	3342      	adds	r3, #66	; 0x42
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
      break;
 8004178:	e055      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3342      	adds	r3, #66	; 0x42
 8004188:	2202      	movs	r2, #2
 800418a:	701a      	strb	r2, [r3, #0]
      break;
 800418c:	e04b      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800418e:	78bb      	ldrb	r3, [r7, #2]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11d      	bne.n	80041d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3355      	adds	r3, #85	; 0x55
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3342      	adds	r3, #66	; 0x42
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041ba:	e034      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3342      	adds	r3, #66	; 0x42
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]
      break;
 80041ce:	e02a      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3354      	adds	r3, #84	; 0x54
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3342      	adds	r3, #66	; 0x42
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	e016      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3342      	adds	r3, #66	; 0x42
 8004206:	2202      	movs	r2, #2
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e00c      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3342      	adds	r3, #66	; 0x42
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e002      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004220:	bf00      	nop
 8004222:	e000      	b.n	8004226 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004224:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3344      	adds	r3, #68	; 0x44
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	8b3a      	ldrh	r2, [r7, #24]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	202c      	movs	r0, #44	; 0x2c
 8004240:	fb00 f303 	mul.w	r3, r0, r3
 8004244:	440b      	add	r3, r1
 8004246:	334c      	adds	r3, #76	; 0x4c
 8004248:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3360      	adds	r3, #96	; 0x60
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3350      	adds	r3, #80	; 0x50
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3339      	adds	r3, #57	; 0x39
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3361      	adds	r3, #97	; 0x61
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	222c      	movs	r2, #44	; 0x2c
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	3338      	adds	r3, #56	; 0x38
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	18d1      	adds	r1, r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	f006 fb8e 	bl	800a9cc <USB_HC_StartXfer>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop

080042bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f006 f89b 	bl	800a40e <USB_GetMode>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	f040 80f6 	bne.w	80044cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f006 f87f 	bl	800a3e8 <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80ec 	beq.w	80044ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f006 f876 	bl	800a3e8 <USB_ReadInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004306:	d104      	bne.n	8004312 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f006 f866 	bl	800a3e8 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d104      	bne.n	8004332 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f006 f856 	bl	800a3e8 <USB_ReadInterrupts>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004346:	d104      	bne.n	8004352 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f006 f846 	bl	800a3e8 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d103      	bne.n	800436e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2202      	movs	r2, #2
 800436c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f006 f838 	bl	800a3e8 <USB_ReadInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004382:	d11c      	bne.n	80043be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800438c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800439e:	2110      	movs	r1, #16
 80043a0:	6938      	ldr	r0, [r7, #16]
 80043a2:	f005 ff27 	bl	800a1f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80043a6:	6938      	ldr	r0, [r7, #16]
 80043a8:	f005 ff58 	bl	800a25c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f006 f922 	bl	800a5fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fd ff6f 	bl	800229c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f006 f810 	bl	800a3e8 <USB_ReadInterrupts>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d2:	d102      	bne.n	80043da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 f89e 	bl	8005516 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f006 f802 	bl	800a3e8 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d106      	bne.n	80043fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd ff38 	bl	8002264 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2208      	movs	r2, #8
 80043fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f005 fff1 	bl	800a3e8 <USB_ReadInterrupts>
 8004406:	4603      	mov	r3, r0
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b10      	cmp	r3, #16
 800440e:	d101      	bne.n	8004414 <HAL_HCD_IRQHandler+0x158>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_HCD_IRQHandler+0x15a>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d012      	beq.n	8004440 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0210 	bic.w	r2, r2, #16
 8004428:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 ffa1 	bl	8005372 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0210 	orr.w	r2, r2, #16
 800443e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f005 ffcf 	bl	800a3e8 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004454:	d13a      	bne.n	80044cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f006 fbf8 	bl	800ac50 <USB_HC_ReadInterrupt>
 8004460:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e025      	b.n	80044b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004492:	d106      	bne.n	80044a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8ab 	bl	80045f6 <HCD_HC_IN_IRQHandler>
 80044a0:	e005      	b.n	80044ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fbf9 	bl	8004ca0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d3d4      	bcc.n	8004468 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c6:	615a      	str	r2, [r3, #20]
 80044c8:	e000      	b.n	80044cc <HAL_HCD_IRQHandler+0x210>
      return;
 80044ca:	bf00      	nop
    }
  }
}
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_HCD_Start+0x16>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e013      	b.n	8004510 <HAL_HCD_Start+0x3e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f006 f8e4 	bl	800a6c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f005 fe08 	bl	800a116 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_HCD_Stop+0x16>
 800452a:	2302      	movs	r3, #2
 800452c:	e00d      	b.n	800454a <HAL_HCD_Stop+0x32>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f006 fcd2 	bl	800aee4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f006 f886 	bl	800a670 <USB_ResetPort>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3360      	adds	r3, #96	; 0x60
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	212c      	movs	r1, #44	; 0x2c
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	4413      	add	r3, r2
 80045ae:	3350      	adds	r3, #80	; 0x50
 80045b0:	681b      	ldr	r3, [r3, #0]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f006 f8ca 	bl	800a764 <USB_GetCurrentFrame>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f006 f8a5 	bl	800a736 <USB_GetHostSpeed>
 80045ec:	4603      	mov	r3, r0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d11a      	bne.n	800465c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	2304      	movs	r3, #4
 8004636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3361      	adds	r3, #97	; 0x61
 8004646:	2206      	movs	r2, #6
 8004648:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f006 fb0c 	bl	800ac72 <USB_HC_Halt>
 800465a:	e0af      	b.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d11b      	bne.n	80046ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	461a      	mov	r2, r3
 8004682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004686:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3361      	adds	r3, #97	; 0x61
 8004696:	2207      	movs	r2, #7
 8004698:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f006 fae4 	bl	800ac72 <USB_HC_Halt>
 80046aa:	e087      	b.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d109      	bne.n	80046d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	461a      	mov	r2, r3
 80046d0:	2320      	movs	r3, #32
 80046d2:	6093      	str	r3, [r2, #8]
 80046d4:	e072      	b.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d11a      	bne.n	8004722 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	2308      	movs	r3, #8
 80046fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3361      	adds	r3, #97	; 0x61
 800470c:	2205      	movs	r2, #5
 800470e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f006 faa9 	bl	800ac72 <USB_HC_Halt>
 8004720:	e04c      	b.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004738:	d11b      	bne.n	8004772 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	461a      	mov	r2, r3
 8004748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3361      	adds	r3, #97	; 0x61
 800475c:	2208      	movs	r2, #8
 800475e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f006 fa81 	bl	800ac72 <USB_HC_Halt>
 8004770:	e024      	b.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b80      	cmp	r3, #128	; 0x80
 8004786:	d119      	bne.n	80047bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	461a      	mov	r2, r3
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3361      	adds	r3, #97	; 0x61
 80047a8:	2206      	movs	r2, #6
 80047aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f006 fa5b 	bl	800ac72 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d2:	d112      	bne.n	80047fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f006 fa47 	bl	800ac72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80047f8:	e24e      	b.n	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80df 	bne.w	80049d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d019      	beq.n	800484e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	212c      	movs	r1, #44	; 0x2c
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	4413      	add	r3, r2
 8004826:	3348      	adds	r3, #72	; 0x48
 8004828:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	0159      	lsls	r1, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	440b      	add	r3, r1
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	202c      	movs	r0, #44	; 0x2c
 8004844:	fb00 f303 	mul.w	r3, r0, r3
 8004848:	440b      	add	r3, r1
 800484a:	3350      	adds	r3, #80	; 0x50
 800484c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3361      	adds	r3, #97	; 0x61
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	335c      	adds	r3, #92	; 0x5c
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	461a      	mov	r2, r3
 8004880:	2301      	movs	r3, #1
 8004882:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	333f      	adds	r3, #63	; 0x3f
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	333f      	adds	r3, #63	; 0x3f
 80048a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d111      	bne.n	80048d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f006 f9db 	bl	800ac72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	2310      	movs	r3, #16
 80048cc:	6093      	str	r3, [r2, #8]
 80048ce:	e03a      	b.n	8004946 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	333f      	adds	r3, #63	; 0x3f
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d009      	beq.n	80048f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	333f      	adds	r3, #63	; 0x3f
 80048f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d126      	bne.n	8004946 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	440a      	add	r2, r1
 800490e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004916:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3360      	adds	r3, #96	; 0x60
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	b2d9      	uxtb	r1, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	202c      	movs	r0, #44	; 0x2c
 8004934:	fb00 f303 	mul.w	r3, r0, r3
 8004938:	4413      	add	r3, r2
 800493a:	3360      	adds	r3, #96	; 0x60
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd fcb9 	bl	80022b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12b      	bne.n	80049a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3348      	adds	r3, #72	; 0x48
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	202c      	movs	r0, #44	; 0x2c
 8004964:	fb00 f202 	mul.w	r2, r0, r2
 8004968:	440a      	add	r2, r1
 800496a:	3240      	adds	r2, #64	; 0x40
 800496c:	8812      	ldrh	r2, [r2, #0]
 800496e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 818e 	beq.w	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3354      	adds	r3, #84	; 0x54
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f083 0301 	eor.w	r3, r3, #1
 8004990:	b2d8      	uxtb	r0, r3
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	3354      	adds	r3, #84	; 0x54
 80049a0:	4602      	mov	r2, r0
 80049a2:	701a      	strb	r2, [r3, #0]
}
 80049a4:	e178      	b.n	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	3354      	adds	r3, #84	; 0x54
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	f083 0301 	eor.w	r3, r3, #1
 80049ba:	b2d8      	uxtb	r0, r3
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3354      	adds	r3, #84	; 0x54
 80049ca:	4602      	mov	r2, r0
 80049cc:	701a      	strb	r2, [r3, #0]
}
 80049ce:	e163      	b.n	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	f040 80f6 	bne.w	8004bd4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3361      	adds	r3, #97	; 0x61
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d109      	bne.n	8004a10 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	212c      	movs	r1, #44	; 0x2c
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	3360      	adds	r3, #96	; 0x60
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e0c9      	b.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3361      	adds	r3, #97	; 0x61
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d109      	bne.n	8004a38 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3360      	adds	r3, #96	; 0x60
 8004a32:	2205      	movs	r2, #5
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e0b5      	b.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3361      	adds	r3, #97	; 0x61
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d009      	beq.n	8004a60 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3361      	adds	r3, #97	; 0x61
 8004a5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d150      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	335c      	adds	r3, #92	; 0x5c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	202c      	movs	r0, #44	; 0x2c
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	335c      	adds	r3, #92	; 0x5c
 8004a80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	335c      	adds	r3, #92	; 0x5c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d912      	bls.n	8004abc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	212c      	movs	r1, #44	; 0x2c
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	335c      	adds	r3, #92	; 0x5c
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3360      	adds	r3, #96	; 0x60
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aba:	e073      	b.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3360      	adds	r3, #96	; 0x60
 8004aca:	2202      	movs	r2, #2
 8004acc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b00:	e050      	b.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3361      	adds	r3, #97	; 0x61
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d122      	bne.n	8004b5c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	3360      	adds	r3, #96	; 0x60
 8004b24:	2202      	movs	r2, #2
 8004b26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e023      	b.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	212c      	movs	r1, #44	; 0x2c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3361      	adds	r3, #97	; 0x61
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b07      	cmp	r3, #7
 8004b6e:	d119      	bne.n	8004ba4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	335c      	adds	r3, #92	; 0x5c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	202c      	movs	r0, #44	; 0x2c
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	335c      	adds	r3, #92	; 0x5c
 8004b90:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3360      	adds	r3, #96	; 0x60
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	b2d9      	uxtb	r1, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	202c      	movs	r0, #44	; 0x2c
 8004bc0:	fb00 f303 	mul.w	r3, r0, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3360      	adds	r3, #96	; 0x60
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fd fb73 	bl	80022b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bd2:	e061      	b.n	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d156      	bne.n	8004c98 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	333f      	adds	r3, #63	; 0x3f
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d111      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	335c      	adds	r3, #92	; 0x5c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f006 f829 	bl	800ac72 <USB_HC_Halt>
 8004c20:	e031      	b.n	8004c86 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	333f      	adds	r3, #63	; 0x3f
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	333f      	adds	r3, #63	; 0x3f
 8004c44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d11d      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	335c      	adds	r3, #92	; 0x5c
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d110      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3361      	adds	r3, #97	; 0x61
 8004c72:	2203      	movs	r2, #3
 8004c74:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 fff6 	bl	800ac72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	2310      	movs	r3, #16
 8004c96:	6093      	str	r3, [r2, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d11a      	bne.n	8004d06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2304      	movs	r3, #4
 8004ce0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3361      	adds	r3, #97	; 0x61
 8004cf0:	2206      	movs	r2, #6
 8004cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f005 ffb7 	bl	800ac72 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004d04:	e331      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d12e      	bne.n	8004d7a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	333d      	adds	r3, #61	; 0x3d
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 8313 	bne.w	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	333d      	adds	r3, #61	; 0x3d
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3360      	adds	r3, #96	; 0x60
 8004d64:	2202      	movs	r2, #2
 8004d66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f005 ff7d 	bl	800ac72 <USB_HC_Halt>
}
 8004d78:	e2f7      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d112      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f005 ff5e 	bl	800ac72 <USB_HC_Halt>
}
 8004db6:	e2d8      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d140      	bne.n	8004e50 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	335c      	adds	r3, #92	; 0x5c
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d111      	bne.n	8004e1a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	212c      	movs	r1, #44	; 0x2c
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	333d      	adds	r3, #61	; 0x3d
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e14:	461a      	mov	r2, r3
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	2301      	movs	r3, #1
 8004e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	212c      	movs	r1, #44	; 0x2c
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3361      	adds	r3, #97	; 0x61
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 ff12 	bl	800ac72 <USB_HC_Halt>
}
 8004e4e:	e28c      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d12c      	bne.n	8004ec0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3361      	adds	r3, #97	; 0x61
 8004e74:	2204      	movs	r2, #4
 8004e76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	212c      	movs	r1, #44	; 0x2c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	333d      	adds	r3, #61	; 0x3d
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	335c      	adds	r3, #92	; 0x5c
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f005 fee3 	bl	800ac72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2340      	movs	r3, #64	; 0x40
 8004ebc:	6093      	str	r3, [r2, #8]
}
 8004ebe:	e254      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d11a      	bne.n	8004f0c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	212c      	movs	r1, #44	; 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3361      	adds	r3, #97	; 0x61
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 feb4 	bl	800ac72 <USB_HC_Halt>
}
 8004f0a:	e22e      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d140      	bne.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	335c      	adds	r3, #92	; 0x5c
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	3361      	adds	r3, #97	; 0x61
 8004f42:	2203      	movs	r2, #3
 8004f44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	333d      	adds	r3, #61	; 0x3d
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d112      	bne.n	8004f80 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	333c      	adds	r3, #60	; 0x3c
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	333d      	adds	r3, #61	; 0x3d
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 fe71 	bl	800ac72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	6093      	str	r3, [r2, #8]
}
 8004fa2:	e1e2      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d164      	bne.n	8005084 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d111      	bne.n	8004fe6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3361      	adds	r3, #97	; 0x61
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 fe47 	bl	800ac72 <USB_HC_Halt>
 8004fe4:	e044      	b.n	8005070 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	335c      	adds	r3, #92	; 0x5c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	202c      	movs	r0, #44	; 0x2c
 8004ffe:	fb00 f303 	mul.w	r3, r0, r3
 8005002:	440b      	add	r3, r1
 8005004:	335c      	adds	r3, #92	; 0x5c
 8005006:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	335c      	adds	r3, #92	; 0x5c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d920      	bls.n	800505e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	212c      	movs	r1, #44	; 0x2c
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	4413      	add	r3, r2
 8005028:	335c      	adds	r3, #92	; 0x5c
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	212c      	movs	r1, #44	; 0x2c
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	3360      	adds	r3, #96	; 0x60
 800503c:	2204      	movs	r2, #4
 800503e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	b2d9      	uxtb	r1, r3
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	202c      	movs	r0, #44	; 0x2c
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	4413      	add	r3, r2
 8005050:	3360      	adds	r3, #96	; 0x60
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f92e 	bl	80022b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800505c:	e008      	b.n	8005070 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	212c      	movs	r1, #44	; 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	3360      	adds	r3, #96	; 0x60
 800506c:	2202      	movs	r2, #2
 800506e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507c:	461a      	mov	r2, r3
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	6093      	str	r3, [r2, #8]
}
 8005082:	e172      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509a:	d11b      	bne.n	80050d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	212c      	movs	r1, #44	; 0x2c
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	3361      	adds	r3, #97	; 0x61
 80050aa:	2208      	movs	r2, #8
 80050ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f005 fdda 	bl	800ac72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d0:	6093      	str	r3, [r2, #8]
}
 80050d2:	e14a      	b.n	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	f040 813f 	bne.w	800536a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	212c      	movs	r1, #44	; 0x2c
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	3361      	adds	r3, #97	; 0x61
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d17d      	bne.n	80051fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	212c      	movs	r1, #44	; 0x2c
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	4413      	add	r3, r2
 800510c:	3360      	adds	r3, #96	; 0x60
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	212c      	movs	r1, #44	; 0x2c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	333f      	adds	r3, #63	; 0x3f
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d00a      	beq.n	800513c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	212c      	movs	r1, #44	; 0x2c
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	333f      	adds	r3, #63	; 0x3f
 8005134:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005136:	2b03      	cmp	r3, #3
 8005138:	f040 8100 	bne.w	800533c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d113      	bne.n	800516c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	212c      	movs	r1, #44	; 0x2c
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	3355      	adds	r3, #85	; 0x55
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2d8      	uxtb	r0, r3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	212c      	movs	r1, #44	; 0x2c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	3355      	adds	r3, #85	; 0x55
 8005168:	4602      	mov	r2, r0
 800516a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 80e3 	bne.w	800533c <HCD_HC_OUT_IRQHandler+0x69c>
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	212c      	movs	r1, #44	; 0x2c
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	334c      	adds	r3, #76	; 0x4c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80d8 	beq.w	800533c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	334c      	adds	r3, #76	; 0x4c
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	202c      	movs	r0, #44	; 0x2c
 80051a2:	fb00 f202 	mul.w	r2, r0, r2
 80051a6:	440a      	add	r2, r1
 80051a8:	3240      	adds	r2, #64	; 0x40
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	4413      	add	r3, r2
 80051ae:	3b01      	subs	r3, #1
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	202c      	movs	r0, #44	; 0x2c
 80051b6:	fb00 f202 	mul.w	r2, r0, r2
 80051ba:	440a      	add	r2, r1
 80051bc:	3240      	adds	r2, #64	; 0x40
 80051be:	8812      	ldrh	r2, [r2, #0]
 80051c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80b5 	beq.w	800533c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	212c      	movs	r1, #44	; 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	3355      	adds	r3, #85	; 0x55
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	f083 0301 	eor.w	r3, r3, #1
 80051e6:	b2d8      	uxtb	r0, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	3355      	adds	r3, #85	; 0x55
 80051f6:	4602      	mov	r2, r0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e09f      	b.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	212c      	movs	r1, #44	; 0x2c
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	3361      	adds	r3, #97	; 0x61
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d109      	bne.n	8005224 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	212c      	movs	r1, #44	; 0x2c
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	3360      	adds	r3, #96	; 0x60
 800521e:	2202      	movs	r2, #2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e08b      	b.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3361      	adds	r3, #97	; 0x61
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d109      	bne.n	800524c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	212c      	movs	r1, #44	; 0x2c
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	3360      	adds	r3, #96	; 0x60
 8005246:	2202      	movs	r2, #2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e077      	b.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	212c      	movs	r1, #44	; 0x2c
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	3361      	adds	r3, #97	; 0x61
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b05      	cmp	r3, #5
 800525e:	d109      	bne.n	8005274 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	3360      	adds	r3, #96	; 0x60
 800526e:	2205      	movs	r2, #5
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e063      	b.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	212c      	movs	r1, #44	; 0x2c
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	4413      	add	r3, r2
 8005280:	3361      	adds	r3, #97	; 0x61
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d009      	beq.n	800529c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	212c      	movs	r1, #44	; 0x2c
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	3361      	adds	r3, #97	; 0x61
 8005296:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005298:	2b08      	cmp	r3, #8
 800529a:	d14f      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	212c      	movs	r1, #44	; 0x2c
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	335c      	adds	r3, #92	; 0x5c
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	202c      	movs	r0, #44	; 0x2c
 80052b4:	fb00 f303 	mul.w	r3, r0, r3
 80052b8:	440b      	add	r3, r1
 80052ba:	335c      	adds	r3, #92	; 0x5c
 80052bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	212c      	movs	r1, #44	; 0x2c
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	4413      	add	r3, r2
 80052ca:	335c      	adds	r3, #92	; 0x5c
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d912      	bls.n	80052f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	4413      	add	r3, r2
 80052de:	335c      	adds	r3, #92	; 0x5c
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3360      	adds	r3, #96	; 0x60
 80052f2:	2204      	movs	r2, #4
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e021      	b.n	800533c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	212c      	movs	r1, #44	; 0x2c
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	3360      	adds	r3, #96	; 0x60
 8005306:	2202      	movs	r2, #2
 8005308:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005320:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005328:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	461a      	mov	r2, r3
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	2302      	movs	r3, #2
 800534c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	b2d9      	uxtb	r1, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	202c      	movs	r0, #44	; 0x2c
 8005358:	fb00 f303 	mul.w	r3, r0, r3
 800535c:	4413      	add	r3, r2
 800535e:	3360      	adds	r3, #96	; 0x60
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fc ffa7 	bl	80022b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800536a:	bf00      	nop
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	0c5b      	lsrs	r3, r3, #17
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d004      	beq.n	80053b8 <HCD_RXQLVL_IRQHandler+0x46>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	f000 80a9 	beq.w	8005508 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053b6:	e0aa      	b.n	800550e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80a6 	beq.w	800550c <HCD_RXQLVL_IRQHandler+0x19a>
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	212c      	movs	r1, #44	; 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	3344      	adds	r3, #68	; 0x44
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 809b 	beq.w	800550c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	212c      	movs	r1, #44	; 0x2c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	3350      	adds	r3, #80	; 0x50
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	441a      	add	r2, r3
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	202c      	movs	r0, #44	; 0x2c
 80053f0:	fb00 f303 	mul.w	r3, r0, r3
 80053f4:	440b      	add	r3, r1
 80053f6:	334c      	adds	r3, #76	; 0x4c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d87a      	bhi.n	80054f4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	3344      	adds	r3, #68	; 0x44
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	b292      	uxth	r2, r2
 8005416:	4619      	mov	r1, r3
 8005418:	f004 ff8e 	bl	800a338 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3344      	adds	r3, #68	; 0x44
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	441a      	add	r2, r3
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	202c      	movs	r0, #44	; 0x2c
 8005436:	fb00 f303 	mul.w	r3, r0, r3
 800543a:	440b      	add	r3, r1
 800543c:	3344      	adds	r3, #68	; 0x44
 800543e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	3350      	adds	r3, #80	; 0x50
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	441a      	add	r2, r3
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	202c      	movs	r0, #44	; 0x2c
 800545a:	fb00 f303 	mul.w	r3, r0, r3
 800545e:	440b      	add	r3, r1
 8005460:	3350      	adds	r3, #80	; 0x50
 8005462:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	0cdb      	lsrs	r3, r3, #19
 8005474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005478:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	212c      	movs	r1, #44	; 0x2c
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	4413      	add	r3, r2
 8005486:	3340      	adds	r3, #64	; 0x40
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4293      	cmp	r3, r2
 8005490:	d13c      	bne.n	800550c <HCD_RXQLVL_IRQHandler+0x19a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d039      	beq.n	800550c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	212c      	movs	r1, #44	; 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	3354      	adds	r3, #84	; 0x54
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f083 0301 	eor.w	r3, r3, #1
 80054de:	b2d8      	uxtb	r0, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3354      	adds	r3, #84	; 0x54
 80054ee:	4602      	mov	r2, r0
 80054f0:	701a      	strb	r2, [r3, #0]
      break;
 80054f2:	e00b      	b.n	800550c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3360      	adds	r3, #96	; 0x60
 8005502:	2204      	movs	r2, #4
 8005504:	701a      	strb	r2, [r3, #0]
      break;
 8005506:	e001      	b.n	800550c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005508:	bf00      	nop
 800550a:	e000      	b.n	800550e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800550c:	bf00      	nop
  }
}
 800550e:	bf00      	nop
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005542:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d10b      	bne.n	8005566 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d102      	bne.n	800555e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc fe91 	bl	8002280 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d132      	bne.n	80055d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f043 0308 	orr.w	r3, r3, #8
 8005576:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d126      	bne.n	80055d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d113      	bne.n	80055b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005590:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005594:	d106      	bne.n	80055a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f005 f82d 	bl	800a5fc <USB_InitFSLSPClkSel>
 80055a2:	e011      	b.n	80055c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f005 f826 	bl	800a5fc <USB_InitFSLSPClkSel>
 80055b0:	e00a      	b.n	80055c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d106      	bne.n	80055c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c0:	461a      	mov	r2, r3
 80055c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80055c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fc fe87 	bl	80022dc <HAL_HCD_PortEnabled_Callback>
 80055ce:	e002      	b.n	80055d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fc fe91 	bl	80022f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d103      	bne.n	80055e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f043 0320 	orr.w	r3, r3, #32
 80055e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6013      	str	r3, [r2, #0]
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e12b      	b.n	8005866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb fc90 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800564e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800565e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005660:	f000 ff82 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4a81      	ldr	r2, [pc, #516]	; (8005870 <HAL_I2C_Init+0x274>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d807      	bhi.n	8005680 <HAL_I2C_Init+0x84>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a80      	ldr	r2, [pc, #512]	; (8005874 <HAL_I2C_Init+0x278>)
 8005674:	4293      	cmp	r3, r2
 8005676:	bf94      	ite	ls
 8005678:	2301      	movls	r3, #1
 800567a:	2300      	movhi	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e006      	b.n	800568e <HAL_I2C_Init+0x92>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a7d      	ldr	r2, [pc, #500]	; (8005878 <HAL_I2C_Init+0x27c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	bf94      	ite	ls
 8005688:	2301      	movls	r3, #1
 800568a:	2300      	movhi	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0e7      	b.n	8005866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a78      	ldr	r2, [pc, #480]	; (800587c <HAL_I2C_Init+0x280>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	0c9b      	lsrs	r3, r3, #18
 80056a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a6a      	ldr	r2, [pc, #424]	; (8005870 <HAL_I2C_Init+0x274>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d802      	bhi.n	80056d0 <HAL_I2C_Init+0xd4>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3301      	adds	r3, #1
 80056ce:	e009      	b.n	80056e4 <HAL_I2C_Init+0xe8>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	4a69      	ldr	r2, [pc, #420]	; (8005880 <HAL_I2C_Init+0x284>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	3301      	adds	r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	495c      	ldr	r1, [pc, #368]	; (8005870 <HAL_I2C_Init+0x274>)
 8005700:	428b      	cmp	r3, r1
 8005702:	d819      	bhi.n	8005738 <HAL_I2C_Init+0x13c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e59      	subs	r1, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005718:	400b      	ands	r3, r1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_I2C_Init+0x138>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1e59      	subs	r1, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fbb1 f3f3 	udiv	r3, r1, r3
 800572c:	3301      	adds	r3, #1
 800572e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005732:	e051      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005734:	2304      	movs	r3, #4
 8005736:	e04f      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d111      	bne.n	8005764 <HAL_I2C_Init+0x168>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1e58      	subs	r0, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	440b      	add	r3, r1
 800574e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005752:	3301      	adds	r3, #1
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e012      	b.n	800578a <HAL_I2C_Init+0x18e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1e58      	subs	r0, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	0099      	lsls	r1, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	fbb0 f3f3 	udiv	r3, r0, r3
 800577a:	3301      	adds	r3, #1
 800577c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Init+0x196>
 800578e:	2301      	movs	r3, #1
 8005790:	e022      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10e      	bne.n	80057b8 <HAL_I2C_Init+0x1bc>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1e58      	subs	r0, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	440b      	add	r3, r1
 80057a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ac:	3301      	adds	r3, #1
 80057ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	e00f      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e58      	subs	r0, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	0099      	lsls	r1, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ce:	3301      	adds	r3, #1
 80057d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	6809      	ldr	r1, [r1, #0]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6911      	ldr	r1, [r2, #16]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	430b      	orrs	r3, r1
 800581a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	000186a0 	.word	0x000186a0
 8005874:	001e847f 	.word	0x001e847f
 8005878:	003d08ff 	.word	0x003d08ff
 800587c:	431bde83 	.word	0x431bde83
 8005880:	10624dd3 	.word	0x10624dd3

08005884 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0bf      	b.n	8005a16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb fc48 	bl	8001140 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80058c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 80058f8:	400b      	ands	r3, r1
 80058fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6899      	ldr	r1, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005926:	400b      	ands	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6919      	ldr	r1, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005954:	400b      	ands	r3, r1
 8005956:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6919      	ldr	r1, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6959      	ldr	r1, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005982:	400b      	ands	r3, r1
 8005984:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0206 	orr.w	r2, r2, #6
 80059f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	f000f800 	.word	0xf000f800

08005a24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d023      	beq.n	8005a8e <HAL_LTDC_IRQHandler+0x6a>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2204      	movs	r2, #4
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f86f 	bl	8005b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0xbc>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01e      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0202 	bic.w	r2, r2, #2
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ac0:	f043 0202 	orr.w	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f846 	bl	8005b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01b      	beq.n	8005b22 <HAL_LTDC_IRQHandler+0xfe>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f82f 	bl	8005b80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <HAL_LTDC_IRQHandler+0x140>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0208 	bic.w	r2, r2, #8
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f818 	bl	8005b94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_LTDC_ConfigLayer+0x1a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e02c      	b.n	8005c1c <HAL_LTDC_ConfigLayer+0x74>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2134      	movs	r1, #52	; 0x34
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f811 	bl	8005c24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2201      	movs	r2, #1
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}

08005c24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	4413      	add	r3, r2
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	4413      	add	r3, r2
 8005c52:	3384      	adds	r3, #132	; 0x84
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	01d2      	lsls	r2, r2, #7
 8005c60:	440a      	add	r2, r1
 8005c62:	3284      	adds	r2, #132	; 0x84
 8005c64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	440b      	add	r3, r1
 8005c8a:	3384      	adds	r3, #132	; 0x84
 8005c8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca2:	4413      	add	r3, r2
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	01db      	lsls	r3, r3, #7
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3384      	adds	r3, #132	; 0x84
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	01d2      	lsls	r2, r2, #7
 8005cc2:	440a      	add	r2, r1
 8005cc4:	3284      	adds	r2, #132	; 0x84
 8005cc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cda:	4413      	add	r3, r2
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	440b      	add	r3, r1
 8005cea:	3384      	adds	r3, #132	; 0x84
 8005cec:	4619      	mov	r1, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	; 0x84
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	01d2      	lsls	r2, r2, #7
 8005d0e:	440a      	add	r2, r1
 8005d10:	3284      	adds	r2, #132	; 0x84
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	01db      	lsls	r3, r3, #7
 8005d22:	4413      	add	r3, r2
 8005d24:	3384      	adds	r3, #132	; 0x84
 8005d26:	461a      	mov	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	01db      	lsls	r3, r3, #7
 8005d54:	4413      	add	r3, r2
 8005d56:	3384      	adds	r3, #132	; 0x84
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	01db      	lsls	r3, r3, #7
 8005d64:	4413      	add	r3, r2
 8005d66:	3384      	adds	r3, #132	; 0x84
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d74:	461a      	mov	r2, r3
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	01db      	lsls	r3, r3, #7
 8005d88:	440b      	add	r3, r1
 8005d8a:	3384      	adds	r3, #132	; 0x84
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	01db      	lsls	r3, r3, #7
 8005d9e:	4413      	add	r3, r2
 8005da0:	3384      	adds	r3, #132	; 0x84
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4611      	mov	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	01d2      	lsls	r2, r2, #7
 8005dae:	440a      	add	r2, r1
 8005db0:	3284      	adds	r2, #132	; 0x84
 8005db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	01db      	lsls	r3, r3, #7
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3384      	adds	r3, #132	; 0x84
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	01db      	lsls	r3, r3, #7
 8005dd8:	4413      	add	r3, r2
 8005dda:	3384      	adds	r3, #132	; 0x84
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	4611      	mov	r1, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	01d2      	lsls	r2, r2, #7
 8005de8:	440a      	add	r2, r1
 8005dea:	3284      	adds	r2, #132	; 0x84
 8005dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6809      	ldr	r1, [r1, #0]
 8005e02:	4608      	mov	r0, r1
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	01c9      	lsls	r1, r1, #7
 8005e08:	4401      	add	r1, r0
 8005e0a:	3184      	adds	r1, #132	; 0x84
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	; 0x84
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3384      	adds	r3, #132	; 0x84
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	01db      	lsls	r3, r3, #7
 8005e3e:	4413      	add	r3, r2
 8005e40:	3384      	adds	r3, #132	; 0x84
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e52:	2304      	movs	r3, #4
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e01b      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e60:	2303      	movs	r3, #3
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	e014      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d00b      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d007      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d003      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e82:	2b07      	cmp	r3, #7
 8005e84:	d102      	bne.n	8005e8c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005e86:	2302      	movs	r3, #2
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e001      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	01db      	lsls	r3, r3, #7
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3384      	adds	r3, #132	; 0x84
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	01d2      	lsls	r2, r2, #7
 8005eaa:	440a      	add	r2, r1
 8005eac:	3284      	adds	r2, #132	; 0x84
 8005eae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	1acb      	subs	r3, r1, r3
 8005eca:	69f9      	ldr	r1, [r7, #28]
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6809      	ldr	r1, [r1, #0]
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	01c9      	lsls	r1, r1, #7
 8005edc:	4401      	add	r1, r0
 8005ede:	3184      	adds	r1, #132	; 0x84
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	4413      	add	r3, r2
 8005ef0:	3384      	adds	r3, #132	; 0x84
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	01d2      	lsls	r2, r2, #7
 8005efe:	440a      	add	r2, r1
 8005f00:	3284      	adds	r2, #132	; 0x84
 8005f02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4413      	add	r3, r2
 8005f18:	3384      	adds	r3, #132	; 0x84
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	01db      	lsls	r3, r3, #7
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3384      	adds	r3, #132	; 0x84
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	4611      	mov	r1, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	01d2      	lsls	r2, r2, #7
 8005f3c:	440a      	add	r2, r1
 8005f3e:	3284      	adds	r2, #132	; 0x84
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f80:	f7fc fc04 	bl	800278c <HAL_GetTick>
 8005f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f86:	e009      	b.n	8005f9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f88:	f7fc fc00 	bl	800278c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f96:	d901      	bls.n	8005f9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01f      	b.n	8005fdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <HAL_PWREx_EnableOverDrive+0x98>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d1ee      	bne.n	8005f88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fb0:	f7fc fbec 	bl	800278c <HAL_GetTick>
 8005fb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fb6:	e009      	b.n	8005fcc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fb8:	f7fc fbe8 	bl	800278c <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc6:	d901      	bls.n	8005fcc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e007      	b.n	8005fdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <HAL_PWREx_EnableOverDrive+0x98>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fd8:	d1ee      	bne.n	8005fb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	420e0040 	.word	0x420e0040
 8005fec:	40007000 	.word	0x40007000
 8005ff0:	420e0044 	.word	0x420e0044

08005ff4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005ffc:	f7fc fbc6 	bl	800278c <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e069      	b.n	80060e0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb f9c3 	bl	80013ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006026:	f241 3188 	movw	r1, #5000	; 0x1388
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f85e 	bl	80060ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	3b01      	subs	r3, #1
 8006040:	021a      	lsls	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	2120      	movs	r1, #32
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f856 	bl	8006108 <QSPI_WaitFlagStateUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d137      	bne.n	80060d6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6852      	ldr	r2, [r2, #4]
 8006078:	0611      	lsls	r1, r2, #24
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68d2      	ldr	r2, [r2, #12]
 800607e:	4311      	orrs	r1, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	69d2      	ldr	r2, [r2, #28]
 8006084:	4311      	orrs	r1, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6a12      	ldr	r2, [r2, #32]
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	430b      	orrs	r3, r1
 8006092:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <HAL_QSPI_Init+0xf4>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6912      	ldr	r2, [r2, #16]
 80060a2:	0411      	lsls	r1, r2, #16
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6952      	ldr	r2, [r2, #20]
 80060a8:	4311      	orrs	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6992      	ldr	r2, [r2, #24]
 80060ae:	4311      	orrs	r1, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80060de:	7afb      	ldrb	r3, [r7, #11]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	ffe0f8fe 	.word	0xffe0f8fe

080060ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006118:	e01a      	b.n	8006150 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d016      	beq.n	8006150 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006122:	f7fc fb33 	bl	800278c <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2204      	movs	r2, #4
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e00e      	b.n	800616e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d1d6      	bne.n	800611a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0cc      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800618c:	4b68      	ldr	r3, [pc, #416]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d90c      	bls.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619a:	4b65      	ldr	r3, [pc, #404]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a2:	4b63      	ldr	r3, [pc, #396]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0b8      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061cc:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a58      	ldr	r2, [pc, #352]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e4:	4b53      	ldr	r3, [pc, #332]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a52      	ldr	r2, [pc, #328]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f0:	4b50      	ldr	r3, [pc, #320]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	494d      	ldr	r1, [pc, #308]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d044      	beq.n	8006298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d107      	bne.n	8006226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006216:	4b47      	ldr	r3, [pc, #284]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d119      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d003      	beq.n	8006236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006232:	2b03      	cmp	r3, #3
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006236:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e06f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006246:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e067      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 0203 	bic.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4934      	ldr	r1, [pc, #208]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006268:	f7fc fa90 	bl	800278c <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	e00a      	b.n	8006286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006270:	f7fc fa8c 	bl	800278c <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f241 3288 	movw	r2, #5000	; 0x1388
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 020c 	and.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	429a      	cmp	r2, r3
 8006296:	d1eb      	bne.n	8006270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d20c      	bcs.n	80062c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b22      	ldr	r3, [pc, #136]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ae:	4b20      	ldr	r3, [pc, #128]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e032      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4916      	ldr	r1, [pc, #88]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	490e      	ldr	r1, [pc, #56]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062fe:	f000 f821 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8006302:	4602      	mov	r2, r0
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	490a      	ldr	r1, [pc, #40]	; (8006338 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	5ccb      	ldrb	r3, [r1, r3]
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <HAL_RCC_ClockConfig+0x1c8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fb fa30 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023c00 	.word	0x40023c00
 8006334:	40023800 	.word	0x40023800
 8006338:	0800fe5c 	.word	0x0800fe5c
 800633c:	20000004 	.word	0x20000004
 8006340:	20000008 	.word	0x20000008

08006344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b094      	sub	sp, #80	; 0x50
 800634a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
 8006350:	2300      	movs	r3, #0
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	2300      	movs	r3, #0
 8006356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800635c:	4b79      	ldr	r3, [pc, #484]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b08      	cmp	r3, #8
 8006366:	d00d      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x40>
 8006368:	2b08      	cmp	r3, #8
 800636a:	f200 80e1 	bhi.w	8006530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x34>
 8006372:	2b04      	cmp	r3, #4
 8006374:	d003      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0x3a>
 8006376:	e0db      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006378:	4b73      	ldr	r3, [pc, #460]	; (8006548 <HAL_RCC_GetSysClockFreq+0x204>)
 800637a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800637c:	e0db      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800637e:	4b73      	ldr	r3, [pc, #460]	; (800654c <HAL_RCC_GetSysClockFreq+0x208>)
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006382:	e0d8      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006384:	4b6f      	ldr	r3, [pc, #444]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800638e:	4b6d      	ldr	r3, [pc, #436]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d063      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639a:	4b6a      	ldr	r3, [pc, #424]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	2200      	movs	r2, #0
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30
 80063ae:	2300      	movs	r3, #0
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
 80063b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063b6:	4622      	mov	r2, r4
 80063b8:	462b      	mov	r3, r5
 80063ba:	f04f 0000 	mov.w	r0, #0
 80063be:	f04f 0100 	mov.w	r1, #0
 80063c2:	0159      	lsls	r1, r3, #5
 80063c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063c8:	0150      	lsls	r0, r2, #5
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4621      	mov	r1, r4
 80063d0:	1a51      	subs	r1, r2, r1
 80063d2:	6139      	str	r1, [r7, #16]
 80063d4:	4629      	mov	r1, r5
 80063d6:	eb63 0301 	sbc.w	r3, r3, r1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e8:	4659      	mov	r1, fp
 80063ea:	018b      	lsls	r3, r1, #6
 80063ec:	4651      	mov	r1, sl
 80063ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063f2:	4651      	mov	r1, sl
 80063f4:	018a      	lsls	r2, r1, #6
 80063f6:	4651      	mov	r1, sl
 80063f8:	ebb2 0801 	subs.w	r8, r2, r1
 80063fc:	4659      	mov	r1, fp
 80063fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800640e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006416:	4690      	mov	r8, r2
 8006418:	4699      	mov	r9, r3
 800641a:	4623      	mov	r3, r4
 800641c:	eb18 0303 	adds.w	r3, r8, r3
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	462b      	mov	r3, r5
 8006424:	eb49 0303 	adc.w	r3, r9, r3
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006436:	4629      	mov	r1, r5
 8006438:	024b      	lsls	r3, r1, #9
 800643a:	4621      	mov	r1, r4
 800643c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006440:	4621      	mov	r1, r4
 8006442:	024a      	lsls	r2, r1, #9
 8006444:	4610      	mov	r0, r2
 8006446:	4619      	mov	r1, r3
 8006448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644a:	2200      	movs	r2, #0
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
 800644e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006454:	f7f9 fed4 	bl	8000200 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4613      	mov	r3, r2
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006460:	e058      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	2200      	movs	r2, #0
 800646a:	4618      	mov	r0, r3
 800646c:	4611      	mov	r1, r2
 800646e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006472:	623b      	str	r3, [r7, #32]
 8006474:	2300      	movs	r3, #0
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	f04f 0000 	mov.w	r0, #0
 8006484:	f04f 0100 	mov.w	r1, #0
 8006488:	0159      	lsls	r1, r3, #5
 800648a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800648e:	0150      	lsls	r0, r2, #5
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4641      	mov	r1, r8
 8006496:	ebb2 0a01 	subs.w	sl, r2, r1
 800649a:	4649      	mov	r1, r9
 800649c:	eb63 0b01 	sbc.w	fp, r3, r1
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064b4:	ebb2 040a 	subs.w	r4, r2, sl
 80064b8:	eb63 050b 	sbc.w	r5, r3, fp
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	00eb      	lsls	r3, r5, #3
 80064c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ca:	00e2      	lsls	r2, r4, #3
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	4643      	mov	r3, r8
 80064d2:	18e3      	adds	r3, r4, r3
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	464b      	mov	r3, r9
 80064d8:	eb45 0303 	adc.w	r3, r5, r3
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ea:	4629      	mov	r1, r5
 80064ec:	028b      	lsls	r3, r1, #10
 80064ee:	4621      	mov	r1, r4
 80064f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064f4:	4621      	mov	r1, r4
 80064f6:	028a      	lsls	r2, r1, #10
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fe:	2200      	movs	r2, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	61fa      	str	r2, [r7, #28]
 8006504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006508:	f7f9 fe7a 	bl	8000200 <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4613      	mov	r3, r2
 8006512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_RCC_GetSysClockFreq+0x200>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	3301      	adds	r3, #1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800652e:	e002      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetSysClockFreq+0x204>)
 8006532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006538:	4618      	mov	r0, r3
 800653a:	3750      	adds	r7, #80	; 0x50
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	40023800 	.word	0x40023800
 8006548:	00f42400 	.word	0x00f42400
 800654c:	007a1200 	.word	0x007a1200

08006550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <HAL_RCC_GetHCLKFreq+0x14>)
 8006556:	681b      	ldr	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000004 	.word	0x20000004

08006568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800656c:	f7ff fff0 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	0a9b      	lsrs	r3, r3, #10
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4903      	ldr	r1, [pc, #12]	; (800658c <HAL_RCC_GetPCLK1Freq+0x24>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40023800 	.word	0x40023800
 800658c:	0800fe6c 	.word	0x0800fe6c

08006590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006594:	f7ff ffdc 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0b5b      	lsrs	r3, r3, #13
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800fe6c 	.word	0x0800fe6c

080065b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	220f      	movs	r2, #15
 80065c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065c8:	4b12      	ldr	r3, [pc, #72]	; (8006614 <HAL_RCC_GetClockConfig+0x5c>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0203 	and.w	r2, r3, #3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <HAL_RCC_GetClockConfig+0x5c>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <HAL_RCC_GetClockConfig+0x5c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_RCC_GetClockConfig+0x5c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <HAL_RCC_GetClockConfig+0x60>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40023800 	.word	0x40023800
 8006618:	40023c00 	.word	0x40023c00

0800661c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	4963      	ldr	r1, [pc, #396]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006666:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	495a      	ldr	r1, [pc, #360]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800669c:	2b00      	cmp	r3, #0
 800669e:	d075      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066a0:	4b50      	ldr	r3, [pc, #320]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a6:	f7fc f871 	bl	800278c <HAL_GetTick>
 80066aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ae:	f7fc f86d 	bl	800278c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e1dc      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066c0:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f0      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	019a      	lsls	r2, r3, #6
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	071b      	lsls	r3, r3, #28
 80066e4:	493e      	ldr	r1, [pc, #248]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066f8:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fe:	0f1b      	lsrs	r3, r3, #28
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	019a      	lsls	r2, r3, #6
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	431a      	orrs	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	071b      	lsls	r3, r3, #28
 8006718:	4931      	ldr	r1, [pc, #196]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006726:	f023 021f 	bic.w	r2, r3, #31
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	3b01      	subs	r3, #1
 8006730:	492b      	ldr	r1, [pc, #172]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	019a      	lsls	r2, r3, #6
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	071b      	lsls	r3, r3, #28
 8006758:	4921      	ldr	r1, [pc, #132]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006760:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006766:	f7fc f811 	bl	800278c <HAL_GetTick>
 800676a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800676e:	f7fc f80d 	bl	800278c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e17c      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006780:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d112      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10c      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80ce 	beq.w	800694e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80067b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ba:	f040 80c8 	bne.w	800694e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067c4:	f7fb ffe2 	bl	800278c <HAL_GetTick>
 80067c8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067ca:	e00f      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067cc:	f7fb ffde 	bl	800278c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d908      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e14d      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800
 80067e4:	42470068 	.word	0x42470068
 80067e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067ec:	4ba5      	ldr	r3, [pc, #660]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f8:	d0e8      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d02e      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006806:	4b9f      	ldr	r3, [pc, #636]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	3301      	adds	r3, #1
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006818:	4b9a      	ldr	r3, [pc, #616]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	0f1b      	lsrs	r3, r3, #28
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	019a      	lsls	r2, r3, #6
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	3b01      	subs	r3, #1
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	071b      	lsls	r3, r3, #28
 8006842:	4990      	ldr	r1, [pc, #576]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800684a:	4b8e      	ldr	r3, [pc, #568]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006850:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	3b01      	subs	r3, #1
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	4989      	ldr	r1, [pc, #548]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02c      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006870:	4b84      	ldr	r3, [pc, #528]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	3301      	adds	r3, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006882:	4b80      	ldr	r3, [pc, #512]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	0e1b      	lsrs	r3, r3, #24
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	019a      	lsls	r2, r3, #6
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	3b01      	subs	r3, #1
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	431a      	orrs	r2, r3
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	061b      	lsls	r3, r3, #24
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	071b      	lsls	r3, r3, #28
 80068ac:	4975      	ldr	r1, [pc, #468]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068b4:	4b73      	ldr	r3, [pc, #460]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	4970      	ldr	r1, [pc, #448]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d024      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80068da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068de:	d11f      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068e0:	4b68      	ldr	r3, [pc, #416]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	0e1b      	lsrs	r3, r3, #24
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	0f1b      	lsrs	r3, r3, #28
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	019a      	lsls	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	431a      	orrs	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	431a      	orrs	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	071b      	lsls	r3, r3, #28
 8006918:	495a      	ldr	r1, [pc, #360]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006920:	4b59      	ldr	r3, [pc, #356]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006926:	f7fb ff31 	bl	800278c <HAL_GetTick>
 800692a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800692e:	f7fb ff2d 	bl	800278c <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e09c      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694c:	d1ef      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8083 	beq.w	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	4b48      	ldr	r3, [pc, #288]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	4a47      	ldr	r2, [pc, #284]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696a:	6413      	str	r3, [r2, #64]	; 0x40
 800696c:	4b45      	ldr	r3, [pc, #276]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006978:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a43      	ldr	r2, [pc, #268]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800697e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006982:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006984:	f7fb ff02 	bl	800278c <HAL_GetTick>
 8006988:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800698a:	e008      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800698c:	f7fb fefe 	bl	800278c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e06d      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800699e:	4b3b      	ldr	r3, [pc, #236]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02f      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d028      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d2:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069d8:	4b2d      	ldr	r3, [pc, #180]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069de:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069e4:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d114      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fb fecc 	bl	800278c <HAL_GetTick>
 80069f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f6:	e00a      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f8:	f7fb fec8 	bl	800278c <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e035      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0ee      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a26:	d10d      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006a28:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3c:	4911      	ldr	r1, [pc, #68]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	608b      	str	r3, [r1, #8]
 8006a42:	e005      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a4e:	6093      	str	r3, [r2, #8]
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5c:	4909      	ldr	r1, [pc, #36]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006a76:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800
 8006a88:	42470070 	.word	0x42470070
 8006a8c:	40007000 	.word	0x40007000
 8006a90:	42470e40 	.word	0x42470e40
 8006a94:	424711e0 	.word	0x424711e0

08006a98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e273      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d075      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ab6:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 030c 	and.w	r3, r3, #12
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d00c      	beq.n	8006adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac2:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d112      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ace:	4b82      	ldr	r3, [pc, #520]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ada:	d10b      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	4b7e      	ldr	r3, [pc, #504]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d05b      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x108>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d157      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e24e      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afc:	d106      	bne.n	8006b0c <HAL_RCC_OscConfig+0x74>
 8006afe:	4b76      	ldr	r3, [pc, #472]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a75      	ldr	r2, [pc, #468]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0x98>
 8006b16:	4b70      	ldr	r3, [pc, #448]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6f      	ldr	r2, [pc, #444]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b6d      	ldr	r3, [pc, #436]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6c      	ldr	r2, [pc, #432]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xb0>
 8006b30:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a68      	ldr	r2, [pc, #416]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b66      	ldr	r3, [pc, #408]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a65      	ldr	r2, [pc, #404]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fb fe1c 	bl	800278c <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fb fe18 	bl	800278c <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e213      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b5b      	ldr	r3, [pc, #364]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xc0>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fb fe08 	bl	800278c <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fb fe04 	bl	800278c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e1ff      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b51      	ldr	r3, [pc, #324]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0xe8>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d063      	beq.n	8006c76 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bae:	4b4a      	ldr	r3, [pc, #296]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bba:	4b47      	ldr	r3, [pc, #284]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bc6:	4b44      	ldr	r3, [pc, #272]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x152>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1d3      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b3b      	ldr	r3, [pc, #236]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4937      	ldr	r1, [pc, #220]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e03a      	b.n	8006c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <HAL_RCC_OscConfig+0x244>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fb fdbd 	bl	800278c <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fb fdb9 	bl	800278c <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e1b4      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c28:	4b2b      	ldr	r3, [pc, #172]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b28      	ldr	r3, [pc, #160]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4925      	ldr	r1, [pc, #148]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	600b      	str	r3, [r1, #0]
 8006c48:	e015      	b.n	8006c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4a:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <HAL_RCC_OscConfig+0x244>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fb fd9c 	bl	800278c <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c58:	f7fb fd98 	bl	800278c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e193      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d036      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d016      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8a:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <HAL_RCC_OscConfig+0x248>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fb fd7c 	bl	800278c <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fb fd78 	bl	800278c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e173      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0x200>
 8006cb6:	e01b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb8:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCC_OscConfig+0x248>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbe:	f7fb fd65 	bl	800278c <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc4:	e00e      	b.n	8006ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc6:	f7fb fd61 	bl	800278c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d907      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e15c      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	42470000 	.word	0x42470000
 8006ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce4:	4b8a      	ldr	r3, [pc, #552]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ea      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8097 	beq.w	8006e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d02:	4b83      	ldr	r3, [pc, #524]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
 8006d12:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	4a7e      	ldr	r2, [pc, #504]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1e:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2e:	4b79      	ldr	r3, [pc, #484]	; (8006f14 <HAL_RCC_OscConfig+0x47c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d118      	bne.n	8006d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3a:	4b76      	ldr	r3, [pc, #472]	; (8006f14 <HAL_RCC_OscConfig+0x47c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a75      	ldr	r2, [pc, #468]	; (8006f14 <HAL_RCC_OscConfig+0x47c>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d46:	f7fb fd21 	bl	800278c <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d4e:	f7fb fd1d 	bl	800278c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e118      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d60:	4b6c      	ldr	r3, [pc, #432]	; (8006f14 <HAL_RCC_OscConfig+0x47c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <HAL_RCC_OscConfig+0x2ea>
 8006d74:	4b66      	ldr	r3, [pc, #408]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d80:	e01c      	b.n	8006dbc <HAL_RCC_OscConfig+0x324>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x30c>
 8006d8a:	4b61      	ldr	r3, [pc, #388]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4a60      	ldr	r2, [pc, #384]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
 8006d96:	4b5e      	ldr	r3, [pc, #376]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a5d      	ldr	r2, [pc, #372]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
 8006da2:	e00b      	b.n	8006dbc <HAL_RCC_OscConfig+0x324>
 8006da4:	4b5a      	ldr	r3, [pc, #360]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a59      	ldr	r2, [pc, #356]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db4:	4a56      	ldr	r2, [pc, #344]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006db6:	f023 0304 	bic.w	r3, r3, #4
 8006dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fb fce2 	bl	800278c <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dcc:	f7fb fcde 	bl	800278c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e0d7      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ee      	beq.n	8006dcc <HAL_RCC_OscConfig+0x334>
 8006dee:	e014      	b.n	8006e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fb fccc 	bl	800278c <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fb fcc8 	bl	800278c <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e0c1      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0e:	4b40      	ldr	r3, [pc, #256]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1ee      	bne.n	8006df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d105      	bne.n	8006e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e20:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	4a3a      	ldr	r2, [pc, #232]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80ad 	beq.w	8006f90 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e36:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d060      	beq.n	8006f04 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d145      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4a:	4b33      	ldr	r3, [pc, #204]	; (8006f18 <HAL_RCC_OscConfig+0x480>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fb fc9c 	bl	800278c <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e58:	f7fb fc98 	bl	800278c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e093      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	019b      	lsls	r3, r3, #6
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	061b      	lsls	r3, r3, #24
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	071b      	lsls	r3, r3, #28
 8006ea2:	491b      	ldr	r1, [pc, #108]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <HAL_RCC_OscConfig+0x480>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fb fc6d 	bl	800278c <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eb6:	f7fb fc69 	bl	800278c <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e064      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec8:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x41e>
 8006ed4:	e05c      	b.n	8006f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <HAL_RCC_OscConfig+0x480>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006edc:	f7fb fc56 	bl	800278c <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee4:	f7fb fc52 	bl	800278c <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e04d      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x44c>
 8006f02:	e045      	b.n	8006f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e040      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40007000 	.word	0x40007000
 8006f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <HAL_RCC_OscConfig+0x504>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d030      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d129      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d122      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d119      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	3b01      	subs	r3, #1
 8006f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d10f      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40023800 	.word	0x40023800

08006fa0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e10c      	b.n	80071dc <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d106      	bne.n	8006fdc <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fa fac0 	bl	800155c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f903 	bl	80071f0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f938 	bl	8007260 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d030      	beq.n	800705a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f957 	bl	80072ac <SAI_GetInputClock>
 8006ffe:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a72      	ldr	r2, [pc, #456]	; (80071e4 <HAL_SAI_Init+0x244>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	08da      	lsrs	r2, r3, #3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	4b6e      	ldr	r3, [pc, #440]	; (80071e4 <HAL_SAI_Init+0x244>)
 800702a:	fba3 2301 	umull	r2, r3, r3, r1
 800702e:	08da      	lsrs	r2, r3, #3
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	1aca      	subs	r2, r1, r3
 800703a:	2a08      	cmp	r2, #8
 800703c:	d904      	bls.n	8007048 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	2b04      	cmp	r3, #4
 800704e:	d104      	bne.n	800705a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	085a      	lsrs	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_SAI_Init+0xca>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d109      	bne.n	800707e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_SAI_Init+0xd6>
 8007072:	2300      	movs	r3, #0
 8007074:	e001      	b.n	800707a <HAL_SAI_Init+0xda>
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e008      	b.n	8007090 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	2b01      	cmp	r3, #1
 8007084:	d102      	bne.n	800708c <HAL_SAI_Init+0xec>
 8007086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708a:	e000      	b.n	800708e <HAL_SAI_Init+0xee>
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b03      	cmp	r3, #3
 8007096:	d811      	bhi.n	80070bc <HAL_SAI_Init+0x11c>
 8007098:	2b02      	cmp	r3, #2
 800709a:	d20b      	bcs.n	80070b4 <HAL_SAI_Init+0x114>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_SAI_Init+0x106>
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d003      	beq.n	80070ac <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80070a4:	e00a      	b.n	80070bc <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
    break;
 80070aa:	e008      	b.n	80070be <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80070ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b0:	613b      	str	r3, [r7, #16]
    break;
 80070b2:	e004      	b.n	80070be <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80070b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070b8:	613b      	str	r3, [r7, #16]
    break;
 80070ba:	e000      	b.n	80070be <HAL_SAI_Init+0x11e>
      break;
 80070bc:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_SAI_Init+0x248>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	431a      	orrs	r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80070f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007102:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	051b      	lsls	r3, r3, #20
 800710a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007122:	f023 030f 	bic.w	r3, r3, #15
 8007126:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_SAI_Init+0x24c>)
 8007152:	400b      	ands	r3, r1
 8007154:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007166:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 800716c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8007172:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007178:	3b01      	subs	r3, #1
 800717a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800717c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68d9      	ldr	r1, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007194:	400b      	ands	r3, r1
 8007196:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68d9      	ldr	r1, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ac:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80071ae:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b4:	3b01      	subs	r3, #1
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	cccccccd 	.word	0xcccccccd
 80071e8:	ff05c010 	.word	0xff05c010
 80071ec:	fff88000 	.word	0xfff88000

080071f0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80071f8:	4b17      	ldr	r3, [pc, #92]	; (8007258 <SAI_Disable+0x68>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <SAI_Disable+0x6c>)
 80071fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007202:	0b1b      	lsrs	r3, r3, #12
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800721a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	60fa      	str	r2, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	72fb      	strb	r3, [r7, #11]
      break;
 800723a:	e006      	b.n	800724a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e8      	bne.n	800721c <SAI_Disable+0x2c>

  return status;
 800724a:	7afb      	ldrb	r3, [r7, #11]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	20000004 	.word	0x20000004
 800725c:	95cbec1b 	.word	0x95cbec1b

08007260 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d00c      	beq.n	800728a <SAI_BlockSynchroConfig+0x2a>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d80d      	bhi.n	8007290 <SAI_BlockSynchroConfig+0x30>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <SAI_BlockSynchroConfig+0x1e>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d003      	beq.n	8007284 <SAI_BlockSynchroConfig+0x24>
 800727c:	e008      	b.n	8007290 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
      break;
 8007282:	e008      	b.n	8007296 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007284:	2310      	movs	r3, #16
 8007286:	60fb      	str	r3, [r7, #12]
      break;
 8007288:	e005      	b.n	8007296 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800728a:	2320      	movs	r3, #32
 800728c:	60fb      	str	r3, [r7, #12]
      break;
 800728e:	e002      	b.n	8007296 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
      break;
 8007294:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007296:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <SAI_BlockSynchroConfig+0x48>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800729c:	bf00      	nop
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40015800 	.word	0x40015800

080072ac <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a44      	ldr	r2, [pc, #272]	; (80073d8 <SAI_GetInputClock+0x12c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d10b      	bne.n	80072e2 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80072ca:	4b44      	ldr	r3, [pc, #272]	; (80073dc <SAI_GetInputClock+0x130>)
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4940      	ldr	r1, [pc, #256]	; (80073dc <SAI_GetInputClock+0x130>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80072e0:	e00b      	b.n	80072fa <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <SAI_GetInputClock+0x130>)
 80072e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	493a      	ldr	r1, [pc, #232]	; (80073dc <SAI_GetInputClock+0x130>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80072fa:	4b38      	ldr	r3, [pc, #224]	; (80073dc <SAI_GetInputClock+0x130>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d108      	bne.n	8007318 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007306:	4b35      	ldr	r3, [pc, #212]	; (80073dc <SAI_GetInputClock+0x130>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800730e:	4a34      	ldr	r2, [pc, #208]	; (80073e0 <SAI_GetInputClock+0x134>)
 8007310:	fbb2 f3f3 	udiv	r3, r2, r3
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	e007      	b.n	8007328 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <SAI_GetInputClock+0x130>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007320:	4a30      	ldr	r2, [pc, #192]	; (80073e4 <SAI_GetInputClock+0x138>)
 8007322:	fbb2 f3f3 	udiv	r3, r2, r3
 8007326:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d121      	bne.n	8007374 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007330:	4b2a      	ldr	r3, [pc, #168]	; (80073dc <SAI_GetInputClock+0x130>)
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800733e:	4b27      	ldr	r3, [pc, #156]	; (80073dc <SAI_GetInputClock+0x130>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	099b      	lsrs	r3, r3, #6
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	fb03 f202 	mul.w	r2, r3, r2
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007358:	4b20      	ldr	r3, [pc, #128]	; (80073dc <SAI_GetInputClock+0x130>)
 800735a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e02a      	b.n	80073ca <SAI_GetInputClock+0x11e>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800737c:	d120      	bne.n	80073c0 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <SAI_GetInputClock+0x130>)
 8007380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007384:	0e1b      	lsrs	r3, r3, #24
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800738c:	4b13      	ldr	r3, [pc, #76]	; (80073dc <SAI_GetInputClock+0x130>)
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007392:	099b      	lsrs	r3, r3, #6
 8007394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	fb03 f202 	mul.w	r2, r3, r2
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <SAI_GetInputClock+0x130>)
 80073a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e004      	b.n	80073ca <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80073c0:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <SAI_GetInputClock+0x13c>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <SAI_GetInputClock+0x140>)
 80073c8:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	40015804 	.word	0x40015804
 80073dc:	40023800 	.word	0x40023800
 80073e0:	00f42400 	.word	0x00f42400
 80073e4:	007a1200 	.word	0x007a1200
 80073e8:	4247015c 	.word	0x4247015c
 80073ec:	00bb8000 	.word	0x00bb8000

080073f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e022      	b.n	8007448 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fa f921 	bl	800165c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2203      	movs	r2, #3
 800741e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f814 	bl	8007450 <HAL_SD_InitCard>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e00a      	b.n	8007448 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007450:	b5b0      	push	{r4, r5, r7, lr}
 8007452:	b08e      	sub	sp, #56	; 0x38
 8007454:	af04      	add	r7, sp, #16
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007458:	2300      	movs	r3, #0
 800745a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800746c:	2376      	movs	r3, #118	; 0x76
 800746e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681d      	ldr	r5, [r3, #0]
 8007474:	466c      	mov	r4, sp
 8007476:	f107 0314 	add.w	r3, r7, #20
 800747a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800747e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007488:	4628      	mov	r0, r5
 800748a:	f002 f881 	bl	8009590 <SDIO_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e04f      	b.n	8007540 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80074a0:	4b29      	ldr	r3, [pc, #164]	; (8007548 <HAL_SD_InitCard+0xf8>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f002 f8a8 	bl	8009600 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80074b0:	4b25      	ldr	r3, [pc, #148]	; (8007548 <HAL_SD_InitCard+0xf8>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80074b6:	2002      	movs	r0, #2
 80074b8:	f7fb f974 	bl	80027a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fe0b 	bl	80080d8 <SD_PowerON>
 80074c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e02e      	b.n	8007540 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fd2a 	bl	8007f3c <SD_InitCard>
 80074e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e01b      	b.n	8007540 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007510:	4618      	mov	r0, r3
 8007512:	f002 f907 	bl	8009724 <SDMMC_CmdBlockLength>
 8007516:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00f      	beq.n	800753e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <HAL_SD_InitCard+0xfc>)
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3728      	adds	r7, #40	; 0x28
 8007544:	46bd      	mov	sp, r7
 8007546:	bdb0      	pop	{r4, r5, r7, pc}
 8007548:	422580a0 	.word	0x422580a0
 800754c:	004005ff 	.word	0x004005ff

08007550 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	; 0x30
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0be      	b.n	80076f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	f040 80b7 	bne.w	80076f4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800758c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	441a      	add	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007596:	429a      	cmp	r2, r3
 8007598:	d907      	bls.n	80075aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0a5      	b.n	80076f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2203      	movs	r2, #3
 80075ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2200      	movs	r2, #0
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	4a4c      	ldr	r2, [pc, #304]	; (8007700 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80075d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	4a4b      	ldr	r2, [pc, #300]	; (8007704 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80075d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2200      	movs	r2, #0
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3380      	adds	r3, #128	; 0x80
 8007610:	4619      	mov	r1, r3
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	025b      	lsls	r3, r3, #9
 8007618:	089b      	lsrs	r3, r3, #2
 800761a:	f7fb f9e5 	bl	80029e8 <HAL_DMA_Start_IT>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d017      	beq.n	8007654 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007632:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a33      	ldr	r2, [pc, #204]	; (8007708 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e050      	b.n	80076f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007654:	4b2d      	ldr	r3, [pc, #180]	; (800770c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007656:	2201      	movs	r2, #1
 8007658:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	2b01      	cmp	r3, #1
 8007660:	d002      	beq.n	8007668 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	025b      	lsls	r3, r3, #9
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	025b      	lsls	r3, r3, #9
 8007672:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007674:	2390      	movs	r3, #144	; 0x90
 8007676:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007678:	2302      	movs	r3, #2
 800767a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800767c:	2300      	movs	r3, #0
 800767e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f107 0210 	add.w	r2, r7, #16
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f002 f81c 	bl	80096cc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d90a      	bls.n	80076b0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2282      	movs	r2, #130	; 0x82
 800769e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a6:	4618      	mov	r0, r3
 80076a8:	f002 f880 	bl	80097ac <SDMMC_CmdReadMultiBlock>
 80076ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076ae:	e009      	b.n	80076c4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2281      	movs	r2, #129	; 0x81
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 f853 	bl	8009768 <SDMMC_CmdReadSingleBlock>
 80076c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d012      	beq.n	80076f0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a0e      	ldr	r2, [pc, #56]	; (8007708 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	431a      	orrs	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e002      	b.n	80076f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e000      	b.n	80076f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3730      	adds	r7, #48	; 0x30
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	08007e27 	.word	0x08007e27
 8007704:	08007e99 	.word	0x08007e99
 8007708:	004005ff 	.word	0x004005ff
 800770c:	4225858c 	.word	0x4225858c

08007710 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	; 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d107      	bne.n	8007738 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0c1      	b.n	80078bc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	f040 80ba 	bne.w	80078ba <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800774c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007756:	429a      	cmp	r2, r3
 8007758:	d907      	bls.n	800776a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0a8      	b.n	80078bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2203      	movs	r2, #3
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 021a 	orr.w	r2, r2, #26
 8007788:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	4a4d      	ldr	r2, [pc, #308]	; (80078c4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007790:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	4a4c      	ldr	r2, [pc, #304]	; (80078c8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007798:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	2200      	movs	r2, #0
 80077a0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d002      	beq.n	80077b0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	025b      	lsls	r3, r3, #9
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d90a      	bls.n	80077cc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	22a0      	movs	r2, #160	; 0xa0
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c2:	4618      	mov	r0, r3
 80077c4:	f002 f836 	bl	8009834 <SDMMC_CmdWriteMultiBlock>
 80077c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80077ca:	e009      	b.n	80077e0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2290      	movs	r2, #144	; 0x90
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d8:	4618      	mov	r0, r3
 80077da:	f002 f809 	bl	80097f0 <SDMMC_CmdWriteSingleBlock>
 80077de:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d012      	beq.n	800780c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a38      	ldr	r2, [pc, #224]	; (80078cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e057      	b.n	80078bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800780c:	4b30      	ldr	r3, [pc, #192]	; (80078d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3380      	adds	r3, #128	; 0x80
 8007842:	461a      	mov	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	025b      	lsls	r3, r3, #9
 8007848:	089b      	lsrs	r3, r3, #2
 800784a:	f7fb f8cd 	bl	80029e8 <HAL_DMA_Start_IT>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01a      	beq.n	800788a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 021a 	bic.w	r2, r2, #26
 8007862:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a18      	ldr	r2, [pc, #96]	; (80078cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e018      	b.n	80078bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	025b      	lsls	r3, r3, #9
 8007894:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007896:	2390      	movs	r3, #144	; 0x90
 8007898:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800789e:	2300      	movs	r3, #0
 80078a0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80078a2:	2301      	movs	r3, #1
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f107 0210 	add.w	r2, r7, #16
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 ff0b 	bl	80096cc <SDIO_ConfigData>

      return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3730      	adds	r7, #48	; 0x30
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08007dfd 	.word	0x08007dfd
 80078c8:	08007e99 	.word	0x08007e99
 80078cc:	004005ff 	.word	0x004005ff
 80078d0:	4225858c 	.word	0x4225858c

080078d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f6:	0f9b      	lsrs	r3, r3, #30
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007902:	0e9b      	lsrs	r3, r3, #26
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	b2da      	uxtb	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007914:	0e1b      	lsrs	r3, r3, #24
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	b2da      	uxtb	r2, r3
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007926:	0c1b      	lsrs	r3, r3, #16
 8007928:	b2da      	uxtb	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	b2da      	uxtb	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800793e:	b2da      	uxtb	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007948:	0d1b      	lsrs	r3, r3, #20
 800794a:	b29a      	uxth	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	b2da      	uxtb	r2, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007966:	0bdb      	lsrs	r3, r3, #15
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007978:	0b9b      	lsrs	r3, r3, #14
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798a:	0b5b      	lsrs	r3, r3, #13
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	0b1b      	lsrs	r3, r3, #12
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d163      	bne.n	8007a80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079bc:	009a      	lsls	r2, r3, #2
 80079be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c2:	4013      	ands	r3, r2
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80079c8:	0f92      	lsrs	r2, r2, #30
 80079ca:	431a      	orrs	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d4:	0edb      	lsrs	r3, r3, #27
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e6:	0e1b      	lsrs	r3, r3, #24
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f8:	0d5b      	lsrs	r3, r3, #21
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0a:	0c9b      	lsrs	r3, r3, #18
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1c:	0bdb      	lsrs	r3, r3, #15
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	7e1b      	ldrb	r3, [r3, #24]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	3302      	adds	r3, #2
 8007a40:	2201      	movs	r2, #1
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a4a:	fb03 f202 	mul.w	r2, r3, r2
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	7a1b      	ldrb	r3, [r3, #8]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007a6c:	0a52      	lsrs	r2, r2, #9
 8007a6e:	fb03 f202 	mul.w	r2, r3, r2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7c:	661a      	str	r2, [r3, #96]	; 0x60
 8007a7e:	e031      	b.n	8007ae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d11d      	bne.n	8007ac4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8c:	041b      	lsls	r3, r3, #16
 8007a8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a96:	0c1b      	lsrs	r3, r3, #16
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	029a      	lsls	r2, r3, #10
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	661a      	str	r2, [r3, #96]	; 0x60
 8007ac2:	e00f      	b.n	8007ae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a58      	ldr	r2, [pc, #352]	; (8007c2c <HAL_SD_GetCardCSD+0x344>)
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e09d      	b.n	8007c20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae8:	0b9b      	lsrs	r3, r3, #14
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007afa:	09db      	lsrs	r3, r3, #7
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1c:	0fdb      	lsrs	r3, r3, #31
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b28:	0f5b      	lsrs	r3, r3, #29
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	0e9b      	lsrs	r3, r3, #26
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	0d9b      	lsrs	r3, r3, #22
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	0d5b      	lsrs	r3, r3, #21
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	0bdb      	lsrs	r3, r3, #15
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	0b9b      	lsrs	r3, r3, #14
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb6:	0b5b      	lsrs	r3, r3, #13
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	0b1b      	lsrs	r3, r3, #12
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	0a9b      	lsrs	r3, r3, #10
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	004005ff 	.word	0x004005ff

08007c30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007c88:	b5b0      	push	{r4, r5, r7, lr}
 8007c8a:	b08e      	sub	sp, #56	; 0x38
 8007c8c:	af04      	add	r7, sp, #16
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d02e      	beq.n	8007d06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cae:	d106      	bne.n	8007cbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38
 8007cbc:	e029      	b.n	8007d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc4:	d10a      	bne.n	8007cdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fabc 	bl	8008244 <SD_WideBus_Enable>
 8007ccc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8007cda:	e01a      	b.n	8007d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 faf9 	bl	80082da <SD_WideBus_Disable>
 8007ce8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8007cf6:	e00c      	b.n	8007d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
 8007d04:	e005      	b.n	8007d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00b      	beq.n	8007d32 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a26      	ldr	r2, [pc, #152]	; (8007db8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d30:	e01f      	b.n	8007d72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681d      	ldr	r5, [r3, #0]
 8007d58:	466c      	mov	r4, sp
 8007d5a:	f107 0314 	add.w	r3, r7, #20
 8007d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f001 fc0f 	bl	8009590 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fcd2 	bl	8009724 <SDMMC_CmdBlockLength>
 8007d80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bdb0      	pop	{r4, r5, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	004005ff 	.word	0x004005ff

08007dbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa10 	bl	80081f4 <SD_SendStatus>
 8007dd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	0a5b      	lsrs	r3, r3, #9
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007df2:	693b      	ldr	r3, [r7, #16]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	2b82      	cmp	r3, #130	; 0x82
 8007e3a:	d111      	bne.n	8007e60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fd19 	bl	8009878 <SDMMC_CmdStopTransfer>
 8007e46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d008      	beq.n	8007e60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fd3a 	bl	80078d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0208 	bic.w	r2, r2, #8
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7f9 ff45 	bl	8001d18 <HAL_SD_RxCpltCallback>
#endif
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fa fdf6 	bl	8002a98 <HAL_DMA_GetError>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d03e      	beq.n	8007f30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d002      	beq.n	8007ece <SD_DMAError+0x36>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d12d      	bne.n	8007f2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a19      	ldr	r2, [pc, #100]	; (8007f38 <SD_DMAError+0xa0>)
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007ee4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff ff62 	bl	8007dbc <HAL_SD_GetCardState>
 8007ef8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b06      	cmp	r3, #6
 8007efe:	d002      	beq.n	8007f06 <SD_DMAError+0x6e>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d10a      	bne.n	8007f1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fcb4 	bl	8009878 <SDMMC_CmdStopTransfer>
 8007f10:	4602      	mov	r2, r0
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	431a      	orrs	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2200      	movs	r2, #0
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007f2a:	6978      	ldr	r0, [r7, #20]
 8007f2c:	f7ff fcd2 	bl	80078d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007f30:	bf00      	nop
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	004005ff 	.word	0x004005ff

08007f3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f3c:	b5b0      	push	{r4, r5, r7, lr}
 8007f3e:	b094      	sub	sp, #80	; 0x50
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f44:	2301      	movs	r3, #1
 8007f46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 fb65 	bl	800961c <SDIO_GetPowerState>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f5c:	e0b8      	b.n	80080d0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d02f      	beq.n	8007fc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 fd8e 	bl	8009a8c <SDMMC_CmdSendCID>
 8007f70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <SD_InitCard+0x40>
    {
      return errorstate;
 8007f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7a:	e0a9      	b.n	80080d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 fb8f 	bl	80096a6 <SDIO_GetResponse>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2104      	movs	r1, #4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fb86 	bl	80096a6 <SDIO_GetResponse>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2108      	movs	r1, #8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 fb7d 	bl	80096a6 <SDIO_GetResponse>
 8007fac:	4602      	mov	r2, r0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	210c      	movs	r1, #12
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fb74 	bl	80096a6 <SDIO_GetResponse>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d00d      	beq.n	8007fea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f107 020e 	add.w	r2, r7, #14
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fd94 	bl	8009b06 <SDMMC_CmdSetRelAdd>
 8007fde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <SD_InitCard+0xae>
    {
      return errorstate;
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	e072      	b.n	80080d0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d036      	beq.n	8008060 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f001 fd5e 	bl	8009ac8 <SDMMC_CmdSendCSD>
 800800c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008016:	e05b      	b.n	80080d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fb41 	bl	80096a6 <SDIO_GetResponse>
 8008024:	4602      	mov	r2, r0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2104      	movs	r1, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fb38 	bl	80096a6 <SDIO_GetResponse>
 8008036:	4602      	mov	r2, r0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2108      	movs	r1, #8
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fb2f 	bl	80096a6 <SDIO_GetResponse>
 8008048:	4602      	mov	r2, r0
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	210c      	movs	r1, #12
 8008054:	4618      	mov	r0, r3
 8008056:	f001 fb26 	bl	80096a6 <SDIO_GetResponse>
 800805a:	4602      	mov	r2, r0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2104      	movs	r1, #4
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fb1d 	bl	80096a6 <SDIO_GetResponse>
 800806c:	4603      	mov	r3, r0
 800806e:	0d1a      	lsrs	r2, r3, #20
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008074:	f107 0310 	add.w	r3, r7, #16
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff fc34 	bl	80078e8 <HAL_SD_GetCardCSD>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008086:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800808a:	e021      	b.n	80080d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	2200      	movs	r2, #0
 8008098:	461c      	mov	r4, r3
 800809a:	4615      	mov	r5, r2
 800809c:	4622      	mov	r2, r4
 800809e:	462b      	mov	r3, r5
 80080a0:	4608      	mov	r0, r1
 80080a2:	f001 fc0b 	bl	80098bc <SDMMC_CmdSelDesel>
 80080a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80080a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <SD_InitCard+0x176>
  {
    return errorstate;
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	e00e      	b.n	80080d0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	466c      	mov	r4, sp
 80080ba:	f103 0210 	add.w	r2, r3, #16
 80080be:	ca07      	ldmia	r2, {r0, r1, r2}
 80080c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080c4:	3304      	adds	r3, #4
 80080c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080c8:	4628      	mov	r0, r5
 80080ca:	f001 fa61 	bl	8009590 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3740      	adds	r7, #64	; 0x40
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bdb0      	pop	{r4, r5, r7, pc}

080080d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fc06 	bl	8009902 <SDMMC_CmdGoIdleState>
 80080f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <SD_PowerON+0x2a>
  {
    return errorstate;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	e072      	b.n	80081e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fc19 	bl	800993e <SDMMC_CmdOperCond>
 800810c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00d      	beq.n	8008130 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fbef 	bl	8009902 <SDMMC_CmdGoIdleState>
 8008124:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <SD_PowerON+0x5e>
    {
      return errorstate;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	e05b      	b.n	80081e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813a:	2b01      	cmp	r3, #1
 800813c:	d137      	bne.n	80081ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fc19 	bl	800997c <SDMMC_CmdAppCommand>
 800814a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d02d      	beq.n	80081ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008152:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008156:	e047      	b.n	80081e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fc0c 	bl	800997c <SDMMC_CmdAppCommand>
 8008164:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <SD_PowerON+0x98>
    {
      return errorstate;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e03b      	b.n	80081e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	491e      	ldr	r1, [pc, #120]	; (80081f0 <SD_PowerON+0x118>)
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fc22 	bl	80099c0 <SDMMC_CmdAppOperCommand>
 800817c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008188:	e02e      	b.n	80081e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fa88 	bl	80096a6 <SDIO_GetResponse>
 8008196:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	0fdb      	lsrs	r3, r3, #31
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <SD_PowerON+0xcc>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <SD_PowerON+0xce>
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]

    count++;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d802      	bhi.n	80081be <SD_PowerON+0xe6>
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0cc      	beq.n	8008158 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d902      	bls.n	80081ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80081c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081cc:	e00c      	b.n	80081e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	645a      	str	r2, [r3, #68]	; 0x44
 80081de:	e002      	b.n	80081e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	c1100000 	.word	0xc1100000

080081f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008208:	e018      	b.n	800823c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f001 fc96 	bl	8009b48 <SDMMC_CmdSendStatus>
 800821c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	e009      	b.n	800823c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fa39 	bl	80096a6 <SDIO_GetResponse>
 8008234:	4602      	mov	r2, r0
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f001 fa23 	bl	80096a6 <SDIO_GetResponse>
 8008260:	4603      	mov	r3, r0
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800826a:	d102      	bne.n	8008272 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800826c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008270:	e02f      	b.n	80082d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f879 	bl	8008370 <SD_FindSCR>
 800827e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	e023      	b.n	80082d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01c      	beq.n	80082ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	041b      	lsls	r3, r3, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f001 fb6b 	bl	800997c <SDMMC_CmdAppCommand>
 80082a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	e00f      	b.n	80082d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2102      	movs	r1, #2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fba4 	bl	8009a06 <SDMMC_CmdBusWidth>
 80082be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	e003      	b.n	80082d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e001      	b.n	80082d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	2300      	movs	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f9d8 	bl	80096a6 <SDIO_GetResponse>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008300:	d102      	bne.n	8008308 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008306:	e02f      	b.n	8008368 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f82e 	bl	8008370 <SD_FindSCR>
 8008314:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	e023      	b.n	8008368 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01c      	beq.n	8008364 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f001 fb20 	bl	800997c <SDMMC_CmdAppCommand>
 800833c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	e00f      	b.n	8008368 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f001 fb59 	bl	8009a06 <SDMMC_CmdBusWidth>
 8008354:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	e003      	b.n	8008368 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008360:	2300      	movs	r3, #0
 8008362:	e001      	b.n	8008368 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b08f      	sub	sp, #60	; 0x3c
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800837a:	f7fa fa07 	bl	800278c <HAL_GetTick>
 800837e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008384:	2300      	movs	r3, #0
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2108      	movs	r1, #8
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f9c4 	bl	8009724 <SDMMC_CmdBlockLength>
 800839c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	e0b2      	b.n	800850e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f001 fae1 	bl	800997c <SDMMC_CmdAppCommand>
 80083ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	e0a3      	b.n	800850e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80083cc:	2308      	movs	r3, #8
 80083ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80083d0:	2330      	movs	r3, #48	; 0x30
 80083d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083d4:	2302      	movs	r3, #2
 80083d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80083d8:	2300      	movs	r3, #0
 80083da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80083dc:	2301      	movs	r3, #1
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f107 0210 	add.w	r2, r7, #16
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 f96e 	bl	80096cc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fb28 	bl	8009a4a <SDMMC_CmdSendSCR>
 80083fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02a      	beq.n	8008458 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	e083      	b.n	800850e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00f      	beq.n	8008434 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	f107 0208 	add.w	r2, r7, #8
 8008420:	18d4      	adds	r4, r2, r3
 8008422:	4608      	mov	r0, r1
 8008424:	f001 f8df 	bl	80095e6 <SDIO_ReadFIFO>
 8008428:	4603      	mov	r3, r0
 800842a:	6023      	str	r3, [r4, #0]
      index++;
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	3301      	adds	r3, #1
 8008430:	637b      	str	r3, [r7, #52]	; 0x34
 8008432:	e006      	b.n	8008442 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d012      	beq.n	8008468 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008442:	f7fa f9a3 	bl	800278c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008450:	d102      	bne.n	8008458 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008456:	e05a      	b.n	800850e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0cf      	beq.n	8008406 <SD_FindSCR+0x96>
 8008466:	e000      	b.n	800846a <SD_FindSCR+0xfa>
      break;
 8008468:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2208      	movs	r2, #8
 800847e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008480:	2308      	movs	r3, #8
 8008482:	e044      	b.n	800850e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2202      	movs	r2, #2
 8008498:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800849a:	2302      	movs	r3, #2
 800849c:	e037      	b.n	800850e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2220      	movs	r2, #32
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80084b4:	2320      	movs	r3, #32
 80084b6:	e02a      	b.n	800850e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	061a      	lsls	r2, r3, #24
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	601a      	str	r2, [r3, #0]
    scr++;
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	3304      	adds	r3, #4
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	061a      	lsls	r2, r3, #24
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008500:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	0e1b      	lsrs	r3, r3, #24
 8008506:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	373c      	adds	r7, #60	; 0x3c
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}

08008516 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e025      	b.n	8008576 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7f8 fab6 	bl	8000ab0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f000 ff54 	bl	8009404 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	461a      	mov	r2, r3
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	f000 ffa9 	bl	80094be <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e041      	b.n	8008614 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d106      	bne.n	80085aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7f9 fa37 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f000 fa95 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d001      	beq.n	8008634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e04e      	b.n	80086d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a23      	ldr	r2, [pc, #140]	; (80086e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d022      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865e:	d01d      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1f      	ldr	r2, [pc, #124]	; (80086e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d018      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1e      	ldr	r2, [pc, #120]	; (80086e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d013      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1c      	ldr	r2, [pc, #112]	; (80086ec <HAL_TIM_Base_Start_IT+0xd0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00e      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d009      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a19      	ldr	r2, [pc, #100]	; (80086f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x80>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a18      	ldr	r2, [pc, #96]	; (80086f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d111      	bne.n	80086c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b06      	cmp	r3, #6
 80086ac:	d010      	beq.n	80086d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086be:	e007      	b.n	80086d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40001800 	.word	0x40001800

080086fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b02      	cmp	r3, #2
 8008710:	d122      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d11b      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0202 	mvn.w	r2, #2
 8008728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9b5 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
 8008744:	e005      	b.n	8008752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9a7 	bl	8008a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f9b8 	bl	8008ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b04      	cmp	r3, #4
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b04      	cmp	r3, #4
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0204 	mvn.w	r2, #4
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f98b 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f97d 	bl	8008a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f98e 	bl	8008ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0208 	mvn.w	r2, #8
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f961 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f953 	bl	8008a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f964 	bl	8008ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b10      	cmp	r3, #16
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b10      	cmp	r3, #16
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0210 	mvn.w	r2, #16
 8008824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2208      	movs	r2, #8
 800882a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f937 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f929 	bl	8008a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f93a 	bl	8008ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10e      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d107      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0201 	mvn.w	r2, #1
 8008878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f8 fd52 	bl	8001324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	d10e      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008898:	2b80      	cmp	r3, #128	; 0x80
 800889a:	d107      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fae0 	bl	8008e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	d10e      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d107      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f8ff 	bl	8008ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d10e      	bne.n	8008904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d107      	bne.n	8008904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0220 	mvn.w	r2, #32
 80088fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 faaa 	bl	8008e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_TIM_ConfigClockSource+0x1c>
 8008924:	2302      	movs	r3, #2
 8008926:	e0b4      	b.n	8008a92 <HAL_TIM_ConfigClockSource+0x186>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800894e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008960:	d03e      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008966:	f200 8087 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 800896a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896e:	f000 8086 	beq.w	8008a7e <HAL_TIM_ConfigClockSource+0x172>
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	d87f      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 8008978:	2b70      	cmp	r3, #112	; 0x70
 800897a:	d01a      	beq.n	80089b2 <HAL_TIM_ConfigClockSource+0xa6>
 800897c:	2b70      	cmp	r3, #112	; 0x70
 800897e:	d87b      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 8008980:	2b60      	cmp	r3, #96	; 0x60
 8008982:	d050      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x11a>
 8008984:	2b60      	cmp	r3, #96	; 0x60
 8008986:	d877      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b50      	cmp	r3, #80	; 0x50
 800898a:	d03c      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0xfa>
 800898c:	2b50      	cmp	r3, #80	; 0x50
 800898e:	d873      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d058      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0x13a>
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d86f      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b30      	cmp	r3, #48	; 0x30
 800899a:	d064      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x15a>
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d86b      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b20      	cmp	r3, #32
 80089a2:	d060      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x15a>
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d867      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d05c      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b10      	cmp	r3, #16
 80089ae:	d05a      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x15a>
 80089b0:	e062      	b.n	8008a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6899      	ldr	r1, [r3, #8]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f000 f9ad 	bl	8008d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	609a      	str	r2, [r3, #8]
      break;
 80089de:	e04f      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6899      	ldr	r1, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f000 f996 	bl	8008d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a02:	609a      	str	r2, [r3, #8]
      break;
 8008a04:	e03c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6859      	ldr	r1, [r3, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f000 f90a 	bl	8008c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2150      	movs	r1, #80	; 0x50
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f963 	bl	8008cea <TIM_ITRx_SetConfig>
      break;
 8008a24:	e02c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	461a      	mov	r2, r3
 8008a34:	f000 f929 	bl	8008c8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2160      	movs	r1, #96	; 0x60
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f953 	bl	8008cea <TIM_ITRx_SetConfig>
      break;
 8008a44:	e01c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 f8ea 	bl	8008c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2140      	movs	r1, #64	; 0x40
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f943 	bl	8008cea <TIM_ITRx_SetConfig>
      break;
 8008a64:	e00c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f000 f93a 	bl	8008cea <TIM_ITRx_SetConfig>
      break;
 8008a76:	e003      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7c:	e000      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
	...

08008aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a40      	ldr	r2, [pc, #256]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d013      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0a:	d00f      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a3d      	ldr	r2, [pc, #244]	; (8008c04 <TIM_Base_SetConfig+0x118>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00b      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a3c      	ldr	r2, [pc, #240]	; (8008c08 <TIM_Base_SetConfig+0x11c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d007      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <TIM_Base_SetConfig+0x120>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a3a      	ldr	r2, [pc, #232]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d108      	bne.n	8008b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a2f      	ldr	r2, [pc, #188]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d02b      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4c:	d027      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a2c      	ldr	r2, [pc, #176]	; (8008c04 <TIM_Base_SetConfig+0x118>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d023      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a2b      	ldr	r2, [pc, #172]	; (8008c08 <TIM_Base_SetConfig+0x11c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d01f      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <TIM_Base_SetConfig+0x120>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d01b      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a29      	ldr	r2, [pc, #164]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d017      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a28      	ldr	r2, [pc, #160]	; (8008c14 <TIM_Base_SetConfig+0x128>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <TIM_Base_SetConfig+0x12c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00f      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <TIM_Base_SetConfig+0x130>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00b      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a25      	ldr	r2, [pc, #148]	; (8008c20 <TIM_Base_SetConfig+0x134>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d007      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a24      	ldr	r2, [pc, #144]	; (8008c24 <TIM_Base_SetConfig+0x138>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d003      	beq.n	8008b9e <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a23      	ldr	r2, [pc, #140]	; (8008c28 <TIM_Base_SetConfig+0x13c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d108      	bne.n	8008bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0xf8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a0c      	ldr	r2, [pc, #48]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d103      	bne.n	8008bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	615a      	str	r2, [r3, #20]
}
 8008bf2:	bf00      	nop
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40010400 	.word	0x40010400
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800
 8008c20:	40001800 	.word	0x40001800
 8008c24:	40001c00 	.word	0x40001c00
 8008c28:	40002000 	.word	0x40002000

08008c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f023 0201 	bic.w	r2, r3, #1
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 030a 	bic.w	r3, r3, #10
 8008c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b087      	sub	sp, #28
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f023 0210 	bic.w	r2, r3, #16
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	031b      	lsls	r3, r3, #12
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	f043 0307 	orr.w	r3, r3, #7
 8008d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	609a      	str	r2, [r3, #8]
}
 8008d14:	bf00      	nop
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	021a      	lsls	r2, r3, #8
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	609a      	str	r2, [r3, #8]
}
 8008d54:	bf00      	nop
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e05a      	b.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d022      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc4:	d01d      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a1d      	ldr	r2, [pc, #116]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d018      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a1b      	ldr	r2, [pc, #108]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d013      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1a      	ldr	r2, [pc, #104]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00e      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d009      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d004      	beq.n	8008e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d10c      	bne.n	8008e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40010000 	.word	0x40010000
 8008e40:	40000400 	.word	0x40000400
 8008e44:	40000800 	.word	0x40000800
 8008e48:	40000c00 	.word	0x40000c00
 8008e4c:	40010400 	.word	0x40010400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40001800 	.word	0x40001800

08008e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e03f      	b.n	8008f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7f8 fe2c 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2224      	movs	r2, #36	; 0x24
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f829 	bl	8008f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f20:	b0c0      	sub	sp, #256	; 0x100
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f38:	68d9      	ldr	r1, [r3, #12]
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	ea40 0301 	orr.w	r3, r0, r1
 8008f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f74:	f021 010c 	bic.w	r1, r1, #12
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f82:	430b      	orrs	r3, r1
 8008f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f96:	6999      	ldr	r1, [r3, #24]
 8008f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	ea40 0301 	orr.w	r3, r0, r1
 8008fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	4b8f      	ldr	r3, [pc, #572]	; (80091e8 <UART_SetConfig+0x2cc>)
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d005      	beq.n	8008fbc <UART_SetConfig+0xa0>
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4b8d      	ldr	r3, [pc, #564]	; (80091ec <UART_SetConfig+0x2d0>)
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d104      	bne.n	8008fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fbc:	f7fd fae8 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8008fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008fc4:	e003      	b.n	8008fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fc6:	f7fd facf 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8008fca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd8:	f040 810c 	bne.w	80091f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008fee:	4622      	mov	r2, r4
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	1891      	adds	r1, r2, r2
 8008ff4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ff6:	415b      	adcs	r3, r3
 8008ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ffe:	4621      	mov	r1, r4
 8009000:	eb12 0801 	adds.w	r8, r2, r1
 8009004:	4629      	mov	r1, r5
 8009006:	eb43 0901 	adc.w	r9, r3, r1
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800901a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800901e:	4690      	mov	r8, r2
 8009020:	4699      	mov	r9, r3
 8009022:	4623      	mov	r3, r4
 8009024:	eb18 0303 	adds.w	r3, r8, r3
 8009028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800902c:	462b      	mov	r3, r5
 800902e:	eb49 0303 	adc.w	r3, r9, r3
 8009032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800904a:	460b      	mov	r3, r1
 800904c:	18db      	adds	r3, r3, r3
 800904e:	653b      	str	r3, [r7, #80]	; 0x50
 8009050:	4613      	mov	r3, r2
 8009052:	eb42 0303 	adc.w	r3, r2, r3
 8009056:	657b      	str	r3, [r7, #84]	; 0x54
 8009058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800905c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009060:	f7f7 f8ce 	bl	8000200 <__aeabi_uldivmod>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4b61      	ldr	r3, [pc, #388]	; (80091f0 <UART_SetConfig+0x2d4>)
 800906a:	fba3 2302 	umull	r2, r3, r3, r2
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	011c      	lsls	r4, r3, #4
 8009072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009076:	2200      	movs	r2, #0
 8009078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800907c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	1891      	adds	r1, r2, r2
 800908a:	64b9      	str	r1, [r7, #72]	; 0x48
 800908c:	415b      	adcs	r3, r3
 800908e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009094:	4641      	mov	r1, r8
 8009096:	eb12 0a01 	adds.w	sl, r2, r1
 800909a:	4649      	mov	r1, r9
 800909c:	eb43 0b01 	adc.w	fp, r3, r1
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	f04f 0300 	mov.w	r3, #0
 80090a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090b4:	4692      	mov	sl, r2
 80090b6:	469b      	mov	fp, r3
 80090b8:	4643      	mov	r3, r8
 80090ba:	eb1a 0303 	adds.w	r3, sl, r3
 80090be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090c2:	464b      	mov	r3, r9
 80090c4:	eb4b 0303 	adc.w	r3, fp, r3
 80090c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80090dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090e0:	460b      	mov	r3, r1
 80090e2:	18db      	adds	r3, r3, r3
 80090e4:	643b      	str	r3, [r7, #64]	; 0x40
 80090e6:	4613      	mov	r3, r2
 80090e8:	eb42 0303 	adc.w	r3, r2, r3
 80090ec:	647b      	str	r3, [r7, #68]	; 0x44
 80090ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80090f6:	f7f7 f883 	bl	8000200 <__aeabi_uldivmod>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	4b3b      	ldr	r3, [pc, #236]	; (80091f0 <UART_SetConfig+0x2d4>)
 8009102:	fba3 2301 	umull	r2, r3, r3, r1
 8009106:	095b      	lsrs	r3, r3, #5
 8009108:	2264      	movs	r2, #100	; 0x64
 800910a:	fb02 f303 	mul.w	r3, r2, r3
 800910e:	1acb      	subs	r3, r1, r3
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009116:	4b36      	ldr	r3, [pc, #216]	; (80091f0 <UART_SetConfig+0x2d4>)
 8009118:	fba3 2302 	umull	r2, r3, r3, r2
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009124:	441c      	add	r4, r3
 8009126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800912a:	2200      	movs	r2, #0
 800912c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009130:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009138:	4642      	mov	r2, r8
 800913a:	464b      	mov	r3, r9
 800913c:	1891      	adds	r1, r2, r2
 800913e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009140:	415b      	adcs	r3, r3
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009148:	4641      	mov	r1, r8
 800914a:	1851      	adds	r1, r2, r1
 800914c:	6339      	str	r1, [r7, #48]	; 0x30
 800914e:	4649      	mov	r1, r9
 8009150:	414b      	adcs	r3, r1
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
 8009154:	f04f 0200 	mov.w	r2, #0
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009160:	4659      	mov	r1, fp
 8009162:	00cb      	lsls	r3, r1, #3
 8009164:	4651      	mov	r1, sl
 8009166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800916a:	4651      	mov	r1, sl
 800916c:	00ca      	lsls	r2, r1, #3
 800916e:	4610      	mov	r0, r2
 8009170:	4619      	mov	r1, r3
 8009172:	4603      	mov	r3, r0
 8009174:	4642      	mov	r2, r8
 8009176:	189b      	adds	r3, r3, r2
 8009178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800917c:	464b      	mov	r3, r9
 800917e:	460a      	mov	r2, r1
 8009180:	eb42 0303 	adc.w	r3, r2, r3
 8009184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800919c:	460b      	mov	r3, r1
 800919e:	18db      	adds	r3, r3, r3
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a2:	4613      	mov	r3, r2
 80091a4:	eb42 0303 	adc.w	r3, r2, r3
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091b2:	f7f7 f825 	bl	8000200 <__aeabi_uldivmod>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <UART_SetConfig+0x2d4>)
 80091bc:	fba3 1302 	umull	r1, r3, r3, r2
 80091c0:	095b      	lsrs	r3, r3, #5
 80091c2:	2164      	movs	r1, #100	; 0x64
 80091c4:	fb01 f303 	mul.w	r3, r1, r3
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	3332      	adds	r3, #50	; 0x32
 80091ce:	4a08      	ldr	r2, [pc, #32]	; (80091f0 <UART_SetConfig+0x2d4>)
 80091d0:	fba2 2303 	umull	r2, r3, r2, r3
 80091d4:	095b      	lsrs	r3, r3, #5
 80091d6:	f003 0207 	and.w	r2, r3, #7
 80091da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4422      	add	r2, r4
 80091e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091e4:	e105      	b.n	80093f2 <UART_SetConfig+0x4d6>
 80091e6:	bf00      	nop
 80091e8:	40011000 	.word	0x40011000
 80091ec:	40011400 	.word	0x40011400
 80091f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009206:	4642      	mov	r2, r8
 8009208:	464b      	mov	r3, r9
 800920a:	1891      	adds	r1, r2, r2
 800920c:	6239      	str	r1, [r7, #32]
 800920e:	415b      	adcs	r3, r3
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
 8009212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009216:	4641      	mov	r1, r8
 8009218:	1854      	adds	r4, r2, r1
 800921a:	4649      	mov	r1, r9
 800921c:	eb43 0501 	adc.w	r5, r3, r1
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	00eb      	lsls	r3, r5, #3
 800922a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800922e:	00e2      	lsls	r2, r4, #3
 8009230:	4614      	mov	r4, r2
 8009232:	461d      	mov	r5, r3
 8009234:	4643      	mov	r3, r8
 8009236:	18e3      	adds	r3, r4, r3
 8009238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800923c:	464b      	mov	r3, r9
 800923e:	eb45 0303 	adc.w	r3, r5, r3
 8009242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009262:	4629      	mov	r1, r5
 8009264:	008b      	lsls	r3, r1, #2
 8009266:	4621      	mov	r1, r4
 8009268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800926c:	4621      	mov	r1, r4
 800926e:	008a      	lsls	r2, r1, #2
 8009270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009274:	f7f6 ffc4 	bl	8000200 <__aeabi_uldivmod>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4b60      	ldr	r3, [pc, #384]	; (8009400 <UART_SetConfig+0x4e4>)
 800927e:	fba3 2302 	umull	r2, r3, r3, r2
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	011c      	lsls	r4, r3, #4
 8009286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800928a:	2200      	movs	r2, #0
 800928c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009290:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	1891      	adds	r1, r2, r2
 800929e:	61b9      	str	r1, [r7, #24]
 80092a0:	415b      	adcs	r3, r3
 80092a2:	61fb      	str	r3, [r7, #28]
 80092a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092a8:	4641      	mov	r1, r8
 80092aa:	1851      	adds	r1, r2, r1
 80092ac:	6139      	str	r1, [r7, #16]
 80092ae:	4649      	mov	r1, r9
 80092b0:	414b      	adcs	r3, r1
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092c0:	4659      	mov	r1, fp
 80092c2:	00cb      	lsls	r3, r1, #3
 80092c4:	4651      	mov	r1, sl
 80092c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ca:	4651      	mov	r1, sl
 80092cc:	00ca      	lsls	r2, r1, #3
 80092ce:	4610      	mov	r0, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	4642      	mov	r2, r8
 80092d6:	189b      	adds	r3, r3, r2
 80092d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092dc:	464b      	mov	r3, r9
 80092de:	460a      	mov	r2, r1
 80092e0:	eb42 0303 	adc.w	r3, r2, r3
 80092e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80092f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009300:	4649      	mov	r1, r9
 8009302:	008b      	lsls	r3, r1, #2
 8009304:	4641      	mov	r1, r8
 8009306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800930a:	4641      	mov	r1, r8
 800930c:	008a      	lsls	r2, r1, #2
 800930e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009312:	f7f6 ff75 	bl	8000200 <__aeabi_uldivmod>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4b39      	ldr	r3, [pc, #228]	; (8009400 <UART_SetConfig+0x4e4>)
 800931c:	fba3 1302 	umull	r1, r3, r3, r2
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	2164      	movs	r1, #100	; 0x64
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	3332      	adds	r3, #50	; 0x32
 800932e:	4a34      	ldr	r2, [pc, #208]	; (8009400 <UART_SetConfig+0x4e4>)
 8009330:	fba2 2303 	umull	r2, r3, r2, r3
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800933a:	441c      	add	r4, r3
 800933c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009340:	2200      	movs	r2, #0
 8009342:	673b      	str	r3, [r7, #112]	; 0x70
 8009344:	677a      	str	r2, [r7, #116]	; 0x74
 8009346:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800934a:	4642      	mov	r2, r8
 800934c:	464b      	mov	r3, r9
 800934e:	1891      	adds	r1, r2, r2
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	415b      	adcs	r3, r3
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800935a:	4641      	mov	r1, r8
 800935c:	1851      	adds	r1, r2, r1
 800935e:	6039      	str	r1, [r7, #0]
 8009360:	4649      	mov	r1, r9
 8009362:	414b      	adcs	r3, r1
 8009364:	607b      	str	r3, [r7, #4]
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	f04f 0300 	mov.w	r3, #0
 800936e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009372:	4659      	mov	r1, fp
 8009374:	00cb      	lsls	r3, r1, #3
 8009376:	4651      	mov	r1, sl
 8009378:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800937c:	4651      	mov	r1, sl
 800937e:	00ca      	lsls	r2, r1, #3
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	4603      	mov	r3, r0
 8009386:	4642      	mov	r2, r8
 8009388:	189b      	adds	r3, r3, r2
 800938a:	66bb      	str	r3, [r7, #104]	; 0x68
 800938c:	464b      	mov	r3, r9
 800938e:	460a      	mov	r2, r1
 8009390:	eb42 0303 	adc.w	r3, r2, r3
 8009394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	663b      	str	r3, [r7, #96]	; 0x60
 80093a0:	667a      	str	r2, [r7, #100]	; 0x64
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80093ae:	4649      	mov	r1, r9
 80093b0:	008b      	lsls	r3, r1, #2
 80093b2:	4641      	mov	r1, r8
 80093b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b8:	4641      	mov	r1, r8
 80093ba:	008a      	lsls	r2, r1, #2
 80093bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80093c0:	f7f6 ff1e 	bl	8000200 <__aeabi_uldivmod>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <UART_SetConfig+0x4e4>)
 80093ca:	fba3 1302 	umull	r1, r3, r3, r2
 80093ce:	095b      	lsrs	r3, r3, #5
 80093d0:	2164      	movs	r1, #100	; 0x64
 80093d2:	fb01 f303 	mul.w	r3, r1, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	3332      	adds	r3, #50	; 0x32
 80093dc:	4a08      	ldr	r2, [pc, #32]	; (8009400 <UART_SetConfig+0x4e4>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	095b      	lsrs	r3, r3, #5
 80093e4:	f003 020f 	and.w	r2, r3, #15
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4422      	add	r2, r4
 80093f0:	609a      	str	r2, [r3, #8]
}
 80093f2:	bf00      	nop
 80093f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80093f8:	46bd      	mov	sp, r7
 80093fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093fe:	bf00      	nop
 8009400:	51eb851f 	.word	0x51eb851f

08009404 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d123      	bne.n	800945e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800941e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	6851      	ldr	r1, [r2, #4]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	6892      	ldr	r2, [r2, #8]
 800942a:	4311      	orrs	r1, r2
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	68d2      	ldr	r2, [r2, #12]
 8009430:	4311      	orrs	r1, r2
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	6912      	ldr	r2, [r2, #16]
 8009436:	4311      	orrs	r1, r2
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	6952      	ldr	r2, [r2, #20]
 800943c:	4311      	orrs	r1, r2
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	6992      	ldr	r2, [r2, #24]
 8009442:	4311      	orrs	r1, r2
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	69d2      	ldr	r2, [r2, #28]
 8009448:	4311      	orrs	r1, r2
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	6a12      	ldr	r2, [r2, #32]
 800944e:	4311      	orrs	r1, r2
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009454:	430a      	orrs	r2, r1
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e028      	b.n	80094b0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	69d9      	ldr	r1, [r3, #28]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	4319      	orrs	r1, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	430b      	orrs	r3, r1
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	6851      	ldr	r1, [r2, #4]
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	6892      	ldr	r2, [r2, #8]
 8009490:	4311      	orrs	r1, r2
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	68d2      	ldr	r2, [r2, #12]
 8009496:	4311      	orrs	r1, r2
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	6912      	ldr	r2, [r2, #16]
 800949c:	4311      	orrs	r1, r2
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	6952      	ldr	r2, [r2, #20]
 80094a2:	4311      	orrs	r1, r2
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	6992      	ldr	r2, [r2, #24]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80094be:	b480      	push	{r7}
 80094c0:	b085      	sub	sp, #20
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d128      	bne.n	8009522 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	1e59      	subs	r1, r3, #1
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	4319      	orrs	r1, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	4319      	orrs	r1, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	031b      	lsls	r3, r3, #12
 80094fa:	4319      	orrs	r1, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	3b01      	subs	r3, #1
 8009502:	041b      	lsls	r3, r3, #16
 8009504:	4319      	orrs	r1, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	3b01      	subs	r3, #1
 800950c:	051b      	lsls	r3, r3, #20
 800950e:	4319      	orrs	r1, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	3b01      	subs	r3, #1
 8009516:	061b      	lsls	r3, r3, #24
 8009518:	430b      	orrs	r3, r1
 800951a:	431a      	orrs	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	609a      	str	r2, [r3, #8]
 8009520:	e02f      	b.n	8009582 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800952a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	68d2      	ldr	r2, [r2, #12]
 8009532:	3a01      	subs	r2, #1
 8009534:	0311      	lsls	r1, r2, #12
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	6952      	ldr	r2, [r2, #20]
 800953a:	3a01      	subs	r2, #1
 800953c:	0512      	lsls	r2, r2, #20
 800953e:	430a      	orrs	r2, r1
 8009540:	431a      	orrs	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	1e59      	subs	r1, r3, #1
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	3b01      	subs	r3, #1
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	4319      	orrs	r1, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	3b01      	subs	r3, #1
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	4319      	orrs	r1, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	3b01      	subs	r3, #1
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	4319      	orrs	r1, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	3b01      	subs	r3, #1
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	430b      	orrs	r3, r1
 800957c:	431a      	orrs	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009590:	b084      	sub	sp, #16
 8009592:	b480      	push	{r7}
 8009594:	b085      	sub	sp, #20
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	f107 001c 	add.w	r0, r7, #28
 800959e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80095a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80095a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80095aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80095ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80095b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80095b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80095ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80095ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	b004      	add	sp, #16
 80095e4:	4770      	bx	lr

080095e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2203      	movs	r2, #3
 800960c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0303 	and.w	r3, r3, #3
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009656:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800965c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009662:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009672:	f023 030f 	bic.w	r3, r3, #15
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	b2db      	uxtb	r3, r3
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b085      	sub	sp, #20
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3314      	adds	r3, #20
 80096b4:	461a      	mov	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	4413      	add	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
}  
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80096f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80096fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	431a      	orrs	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009716:	2300      	movs	r3, #0

}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009732:	2310      	movs	r3, #16
 8009734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800973a:	2300      	movs	r3, #0
 800973c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800973e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff ff74 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	2110      	movs	r1, #16
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fa18 	bl	8009b8c <SDMMC_GetCmdResp1>
 800975c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800975e:	69fb      	ldr	r3, [r7, #28]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3720      	adds	r7, #32
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009776:	2311      	movs	r3, #17
 8009778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800977a:	2340      	movs	r3, #64	; 0x40
 800977c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009788:	f107 0308 	add.w	r3, r7, #8
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff ff52 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009794:	f241 3288 	movw	r2, #5000	; 0x1388
 8009798:	2111      	movs	r1, #17
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9f6 	bl	8009b8c <SDMMC_GetCmdResp1>
 80097a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a2:	69fb      	ldr	r3, [r7, #28]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80097ba:	2312      	movs	r3, #18
 80097bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097be:	2340      	movs	r3, #64	; 0x40
 80097c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff ff30 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097dc:	2112      	movs	r1, #18
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f9d4 	bl	8009b8c <SDMMC_GetCmdResp1>
 80097e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80097fe:	2318      	movs	r3, #24
 8009800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009802:	2340      	movs	r3, #64	; 0x40
 8009804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800980a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009810:	f107 0308 	add.w	r3, r7, #8
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ff0e 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	2118      	movs	r1, #24
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f9b2 	bl	8009b8c <SDMMC_GetCmdResp1>
 8009828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800982a:	69fb      	ldr	r3, [r7, #28]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3720      	adds	r7, #32
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009842:	2319      	movs	r3, #25
 8009844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800984e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff feec 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009860:	f241 3288 	movw	r2, #5000	; 0x1388
 8009864:	2119      	movs	r1, #25
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f990 	bl	8009b8c <SDMMC_GetCmdResp1>
 800986c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800986e:	69fb      	ldr	r3, [r7, #28]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009884:	230c      	movs	r3, #12
 8009886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff fecb 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80098a2:	4a05      	ldr	r2, [pc, #20]	; (80098b8 <SDMMC_CmdStopTransfer+0x40>)
 80098a4:	210c      	movs	r1, #12
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f970 	bl	8009b8c <SDMMC_GetCmdResp1>
 80098ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ae:	69fb      	ldr	r3, [r7, #28]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	05f5e100 	.word	0x05f5e100

080098bc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	; 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80098cc:	2307      	movs	r3, #7
 80098ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098dc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098de:	f107 0310 	add.w	r3, r7, #16
 80098e2:	4619      	mov	r1, r3
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7ff fea7 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80098ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ee:	2107      	movs	r1, #7
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 f94b 	bl	8009b8c <SDMMC_GetCmdResp1>
 80098f6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3728      	adds	r7, #40	; 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b088      	sub	sp, #32
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009916:	2300      	movs	r3, #0
 8009918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800991a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009920:	f107 0308 	add.w	r3, r7, #8
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff fe86 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fb65 	bl	8009ffc <SDMMC_GetCmdError>
 8009932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009934:	69fb      	ldr	r3, [r7, #28]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3720      	adds	r7, #32
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b088      	sub	sp, #32
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009946:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800994a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800994c:	2308      	movs	r3, #8
 800994e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800995c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800995e:	f107 0308 	add.w	r3, r7, #8
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff fe67 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 faf8 	bl	8009f60 <SDMMC_GetCmdResp7>
 8009970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009972:	69fb      	ldr	r3, [r7, #28]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800998a:	2337      	movs	r3, #55	; 0x37
 800998c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800998e:	2340      	movs	r3, #64	; 0x40
 8009990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fe48 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80099a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ac:	2137      	movs	r1, #55	; 0x37
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8ec 	bl	8009b8c <SDMMC_GetCmdResp1>
 80099b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b6:	69fb      	ldr	r3, [r7, #28]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80099d6:	2329      	movs	r3, #41	; 0x29
 80099d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099da:	2340      	movs	r3, #64	; 0x40
 80099dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099de:	2300      	movs	r3, #0
 80099e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff fe22 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9ff 	bl	8009df8 <SDMMC_GetCmdResp3>
 80099fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099fc:	69fb      	ldr	r3, [r7, #28]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a14:	2306      	movs	r3, #6
 8009a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fe03 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a36:	2106      	movs	r1, #6
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8a7 	bl	8009b8c <SDMMC_GetCmdResp1>
 8009a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a40:	69fb      	ldr	r3, [r7, #28]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a56:	2333      	movs	r3, #51	; 0x33
 8009a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fde2 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a78:	2133      	movs	r1, #51	; 0x33
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f886 	bl	8009b8c <SDMMC_GetCmdResp1>
 8009a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a82:	69fb      	ldr	r3, [r7, #28]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a9c:	23c0      	movs	r3, #192	; 0xc0
 8009a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fdc1 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f956 	bl	8009d68 <SDMMC_GetCmdResp2>
 8009abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009abe:	69fb      	ldr	r3, [r7, #28]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009ad6:	2309      	movs	r3, #9
 8009ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ada:	23c0      	movs	r3, #192	; 0xc0
 8009adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ae8:	f107 0308 	add.w	r3, r7, #8
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fda2 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f937 	bl	8009d68 <SDMMC_GetCmdResp2>
 8009afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009afc:	69fb      	ldr	r3, [r7, #28]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3720      	adds	r7, #32
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b088      	sub	sp, #32
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b14:	2303      	movs	r3, #3
 8009b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b18:	2340      	movs	r3, #64	; 0x40
 8009b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff fd83 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	2103      	movs	r1, #3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f99c 	bl	8009e74 <SDMMC_GetCmdResp6>
 8009b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b56:	230d      	movs	r3, #13
 8009b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b5a:	2340      	movs	r3, #64	; 0x40
 8009b5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff fd62 	bl	8009638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b78:	210d      	movs	r1, #13
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f806 	bl	8009b8c <SDMMC_GetCmdResp1>
 8009b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b82:	69fb      	ldr	r3, [r7, #28]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b9a:	4b70      	ldr	r3, [pc, #448]	; (8009d5c <SDMMC_GetCmdResp1+0x1d0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a70      	ldr	r2, [pc, #448]	; (8009d60 <SDMMC_GetCmdResp1+0x1d4>)
 8009ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba4:	0a5a      	lsrs	r2, r3, #9
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	fb02 f303 	mul.w	r3, r2, r3
 8009bac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	61fa      	str	r2, [r7, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bbc:	e0c9      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0ef      	beq.n	8009bae <SDMMC_GetCmdResp1+0x22>
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ea      	bne.n	8009bae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2204      	movs	r2, #4
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bea:	2304      	movs	r3, #4
 8009bec:	e0b1      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e0a6      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	22c5      	movs	r2, #197	; 0xc5
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff fd3e 	bl	800968c <SDIO_GetCommandResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d001      	beq.n	8009c1e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e099      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c1e:	2100      	movs	r1, #0
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7ff fd40 	bl	80096a6 <SDIO_GetResponse>
 8009c26:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4b4e      	ldr	r3, [pc, #312]	; (8009d64 <SDMMC_GetCmdResp1+0x1d8>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009c32:	2300      	movs	r3, #0
 8009c34:	e08d      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da02      	bge.n	8009c42 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c40:	e087      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	e080      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c5a:	2380      	movs	r3, #128	; 0x80
 8009c5c:	e079      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6c:	e071      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c7c:	e069      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8c:	e061      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c9c:	e059      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cac:	e051      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cbc:	e049      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ccc:	e041      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cdc:	e039      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009cec:	e031      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009cf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cfc:	e029      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d0c:	e021      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d1c:	e019      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d2c:	e011      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d3c:	e009      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d4c:	e001      	b.n	8009d52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000004 	.word	0x20000004
 8009d60:	10624dd3 	.word	0x10624dd3
 8009d64:	fdffe008 	.word	0xfdffe008

08009d68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d70:	4b1f      	ldr	r3, [pc, #124]	; (8009df0 <SDMMC_GetCmdResp2+0x88>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1f      	ldr	r2, [pc, #124]	; (8009df4 <SDMMC_GetCmdResp2+0x8c>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	0a5b      	lsrs	r3, r3, #9
 8009d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d80:	fb02 f303 	mul.w	r3, r2, r3
 8009d84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	1e5a      	subs	r2, r3, #1
 8009d8a:	60fa      	str	r2, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d94:	e026      	b.n	8009de4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0ef      	beq.n	8009d86 <SDMMC_GetCmdResp2+0x1e>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ea      	bne.n	8009d86 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	e00e      	b.n	8009de4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e003      	b.n	8009de4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	22c5      	movs	r2, #197	; 0xc5
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000004 	.word	0x20000004
 8009df4:	10624dd3 	.word	0x10624dd3

08009df8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <SDMMC_GetCmdResp3+0x74>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a1a      	ldr	r2, [pc, #104]	; (8009e70 <SDMMC_GetCmdResp3+0x78>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	0a5b      	lsrs	r3, r3, #9
 8009e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
 8009e14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1e5a      	subs	r2, r3, #1
 8009e1a:	60fa      	str	r2, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e24:	e01b      	b.n	8009e5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <SDMMC_GetCmdResp3+0x1e>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ea      	bne.n	8009e16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e52:	2304      	movs	r3, #4
 8009e54:	e003      	b.n	8009e5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	22c5      	movs	r2, #197	; 0xc5
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000004 	.word	0x20000004
 8009e70:	10624dd3 	.word	0x10624dd3

08009e74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e82:	4b35      	ldr	r3, [pc, #212]	; (8009f58 <SDMMC_GetCmdResp6+0xe4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a35      	ldr	r2, [pc, #212]	; (8009f5c <SDMMC_GetCmdResp6+0xe8>)
 8009e88:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8c:	0a5b      	lsrs	r3, r3, #9
 8009e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e92:	fb02 f303 	mul.w	r3, r2, r3
 8009e96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	1e5a      	subs	r2, r3, #1
 8009e9c:	61fa      	str	r2, [r7, #28]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ea2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ea6:	e052      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0ef      	beq.n	8009e98 <SDMMC_GetCmdResp6+0x24>
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1ea      	bne.n	8009e98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	f003 0304 	and.w	r3, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2204      	movs	r2, #4
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	e03a      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e02f      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fbcc 	bl	800968c <SDIO_GetCommandResponse>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d001      	beq.n	8009f02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e025      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	22c5      	movs	r2, #197	; 0xc5
 8009f06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7ff fbcb 	bl	80096a6 <SDIO_GetResponse>
 8009f10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d106      	bne.n	8009f2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	0c1b      	lsrs	r3, r3, #16
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	e011      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f38:	e009      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f48:	e001      	b.n	8009f4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3720      	adds	r7, #32
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000004 	.word	0x20000004
 8009f5c:	10624dd3 	.word	0x10624dd3

08009f60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f68:	4b22      	ldr	r3, [pc, #136]	; (8009ff4 <SDMMC_GetCmdResp7+0x94>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a22      	ldr	r2, [pc, #136]	; (8009ff8 <SDMMC_GetCmdResp7+0x98>)
 8009f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f72:	0a5b      	lsrs	r3, r3, #9
 8009f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f78:	fb02 f303 	mul.w	r3, r2, r3
 8009f7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	1e5a      	subs	r2, r3, #1
 8009f82:	60fa      	str	r2, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f8c:	e02c      	b.n	8009fe8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0ef      	beq.n	8009f7e <SDMMC_GetCmdResp7+0x1e>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1ea      	bne.n	8009f7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d004      	beq.n	8009fbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2204      	movs	r2, #4
 8009fb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fba:	2304      	movs	r3, #4
 8009fbc:	e014      	b.n	8009fe8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e009      	b.n	8009fe8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2240      	movs	r2, #64	; 0x40
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009fe6:	2300      	movs	r3, #0
  
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000004 	.word	0x20000004
 8009ff8:	10624dd3 	.word	0x10624dd3

08009ffc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a004:	4b11      	ldr	r3, [pc, #68]	; (800a04c <SDMMC_GetCmdError+0x50>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a11      	ldr	r2, [pc, #68]	; (800a050 <SDMMC_GetCmdError+0x54>)
 800a00a:	fba2 2303 	umull	r2, r3, r2, r3
 800a00e:	0a5b      	lsrs	r3, r3, #9
 800a010:	f241 3288 	movw	r2, #5000	; 0x1388
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	1e5a      	subs	r2, r3, #1
 800a01e:	60fa      	str	r2, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a028:	e009      	b.n	800a03e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f1      	beq.n	800a01a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	22c5      	movs	r2, #197	; 0xc5
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000004 	.word	0x20000004
 800a050:	10624dd3 	.word	0x10624dd3

0800a054 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a054:	b084      	sub	sp, #16
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	f107 001c 	add.w	r0, r7, #28
 800a062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d122      	bne.n	800a0b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a096:	2b01      	cmp	r3, #1
 800a098:	d105      	bne.n	800a0a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f9c0 	bl	800a42c <USB_CoreReset>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	e01a      	b.n	800a0e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9b4 	bl	800a42c <USB_CoreReset>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	639a      	str	r2, [r3, #56]	; 0x38
 800a0da:	e005      	b.n	800a0e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d10b      	bne.n	800a106 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f043 0206 	orr.w	r2, r3, #6
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f043 0220 	orr.w	r2, r3, #32
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a112:	b004      	add	sp, #16
 800a114:	4770      	bx	lr

0800a116 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f043 0201 	orr.w	r2, r3, #1
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f023 0201 	bic.w	r2, r3, #1
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d115      	bne.n	800a1a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a188:	2001      	movs	r0, #1
 800a18a:	f7f8 fb0b 	bl	80027a4 <HAL_Delay>
      ms++;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3301      	adds	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f93a 	bl	800a40e <USB_GetMode>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d01e      	beq.n	800a1de <USB_SetCurrentMode+0x84>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b31      	cmp	r3, #49	; 0x31
 800a1a4:	d9f0      	bls.n	800a188 <USB_SetCurrentMode+0x2e>
 800a1a6:	e01a      	b.n	800a1de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d115      	bne.n	800a1da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	f7f8 faf2 	bl	80027a4 <HAL_Delay>
      ms++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f921 	bl	800a40e <USB_GetMode>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <USB_SetCurrentMode+0x84>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b31      	cmp	r3, #49	; 0x31
 800a1d6:	d9f0      	bls.n	800a1ba <USB_SetCurrentMode+0x60>
 800a1d8:	e001      	b.n	800a1de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e005      	b.n	800a1ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b32      	cmp	r3, #50	; 0x32
 800a1e2:	d101      	bne.n	800a1e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e000      	b.n	800a1ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4a13      	ldr	r2, [pc, #76]	; (800a258 <USB_FlushTxFifo+0x64>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d901      	bls.n	800a214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e01b      	b.n	800a24c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	daf2      	bge.n	800a202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	019b      	lsls	r3, r3, #6
 800a224:	f043 0220 	orr.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4a08      	ldr	r2, [pc, #32]	; (800a258 <USB_FlushTxFifo+0x64>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d901      	bls.n	800a23e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e006      	b.n	800a24c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b20      	cmp	r3, #32
 800a248:	d0f0      	beq.n	800a22c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	00030d40 	.word	0x00030d40

0800a25c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3301      	adds	r3, #1
 800a26c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4a11      	ldr	r2, [pc, #68]	; (800a2b8 <USB_FlushRxFifo+0x5c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d901      	bls.n	800a27a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e018      	b.n	800a2ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	daf2      	bge.n	800a268 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2210      	movs	r2, #16
 800a28a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4a08      	ldr	r2, [pc, #32]	; (800a2b8 <USB_FlushRxFifo+0x5c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e006      	b.n	800a2ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f003 0310 	and.w	r3, r3, #16
 800a2a6:	2b10      	cmp	r3, #16
 800a2a8:	d0f0      	beq.n	800a28c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	00030d40 	.word	0x00030d40

0800a2bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b089      	sub	sp, #36	; 0x24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	71fb      	strb	r3, [r7, #7]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a2da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d123      	bne.n	800a32a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a2e2:	88bb      	ldrh	r3, [r7, #4]
 800a2e4:	3303      	adds	r3, #3
 800a2e6:	089b      	lsrs	r3, r3, #2
 800a2e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	e018      	b.n	800a322 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	031a      	lsls	r2, r3, #12
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	3301      	adds	r3, #1
 800a308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	3301      	adds	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	3301      	adds	r3, #1
 800a314:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	3301      	adds	r3, #1
 800a31a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	3301      	adds	r3, #1
 800a320:	61bb      	str	r3, [r7, #24]
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	429a      	cmp	r2, r3
 800a328:	d3e2      	bcc.n	800a2f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3724      	adds	r7, #36	; 0x24
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a338:	b480      	push	{r7}
 800a33a:	b08b      	sub	sp, #44	; 0x2c
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a34e:	88fb      	ldrh	r3, [r7, #6]
 800a350:	089b      	lsrs	r3, r3, #2
 800a352:	b29b      	uxth	r3, r3
 800a354:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a35e:	2300      	movs	r3, #0
 800a360:	623b      	str	r3, [r7, #32]
 800a362:	e014      	b.n	800a38e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	3301      	adds	r3, #1
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	3301      	adds	r3, #1
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	3301      	adds	r3, #1
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	3301      	adds	r3, #1
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	3301      	adds	r3, #1
 800a38c:	623b      	str	r3, [r7, #32]
 800a38e:	6a3a      	ldr	r2, [r7, #32]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	429a      	cmp	r2, r3
 800a394:	d3e6      	bcc.n	800a364 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a396:	8bfb      	ldrh	r3, [r7, #30]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01e      	beq.n	800a3da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f107 0310 	add.w	r3, r7, #16
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	701a      	strb	r2, [r3, #0]
      i++;
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a3ce:	8bfb      	ldrh	r3, [r7, #30]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a3d4:	8bfb      	ldrh	r3, [r7, #30]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1ea      	bne.n	800a3b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	372c      	adds	r7, #44	; 0x2c
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a400:	68fb      	ldr	r3, [r7, #12]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	f003 0301 	and.w	r3, r3, #1
}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
	...

0800a42c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a13      	ldr	r2, [pc, #76]	; (800a490 <USB_CoreReset+0x64>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d901      	bls.n	800a44a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e01b      	b.n	800a482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	daf2      	bge.n	800a438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	f043 0201 	orr.w	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3301      	adds	r3, #1
 800a466:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4a09      	ldr	r2, [pc, #36]	; (800a490 <USB_CoreReset+0x64>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d901      	bls.n	800a474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e006      	b.n	800a482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d0f0      	beq.n	800a462 <USB_CoreReset+0x36>

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	00030d40 	.word	0x00030d40

0800a494 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a494:	b084      	sub	sp, #16
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d018      	beq.n	800a504 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10a      	bne.n	800a4ee <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4e6:	f043 0304 	orr.w	r3, r3, #4
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	e014      	b.n	800a518 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4fc:	f023 0304 	bic.w	r3, r3, #4
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	e009      	b.n	800a518 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a512:	f023 0304 	bic.w	r3, r3, #4
 800a516:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a518:	2110      	movs	r1, #16
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fe6a 	bl	800a1f4 <USB_FlushTxFifo>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff fe96 	bl	800a25c <USB_FlushRxFifo>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]
 800a53e:	e015      	b.n	800a56c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54c:	461a      	mov	r2, r3
 800a54e:	f04f 33ff 	mov.w	r3, #4294967295
 800a552:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a560:	461a      	mov	r2, r3
 800a562:	2300      	movs	r3, #0
 800a564:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	613b      	str	r3, [r7, #16]
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	429a      	cmp	r2, r3
 800a572:	d3e5      	bcc.n	800a540 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295
 800a580:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a13      	ldr	r2, [pc, #76]	; (800a5e8 <USB_HostInit+0x154>)
 800a59a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a13      	ldr	r2, [pc, #76]	; (800a5ec <USB_HostInit+0x158>)
 800a5a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a5a4:	e009      	b.n	800a5ba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2280      	movs	r2, #128	; 0x80
 800a5aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a10      	ldr	r2, [pc, #64]	; (800a5f0 <USB_HostInit+0x15c>)
 800a5b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a0f      	ldr	r2, [pc, #60]	; (800a5f4 <USB_HostInit+0x160>)
 800a5b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	f043 0210 	orr.w	r2, r3, #16
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699a      	ldr	r2, [r3, #24]
 800a5d0:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <USB_HostInit+0x164>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5e4:	b004      	add	sp, #16
 800a5e6:	4770      	bx	lr
 800a5e8:	01000200 	.word	0x01000200
 800a5ec:	00e00300 	.word	0x00e00300
 800a5f0:	00600080 	.word	0x00600080
 800a5f4:	004000e0 	.word	0x004000e0
 800a5f8:	a3200008 	.word	0xa3200008

0800a5fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	68f9      	ldr	r1, [r7, #12]
 800a630:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a634:	4313      	orrs	r3, r2
 800a636:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d107      	bne.n	800a64e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a644:	461a      	mov	r2, r3
 800a646:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a64a:	6053      	str	r3, [r2, #4]
 800a64c:	e009      	b.n	800a662 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	2b02      	cmp	r3, #2
 800a652:	d106      	bne.n	800a662 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a65a:	461a      	mov	r2, r3
 800a65c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a660:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a690:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a69e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a6a0:	2064      	movs	r0, #100	; 0x64
 800a6a2:	f7f8 f87f 	bl	80027a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a6b4:	200a      	movs	r0, #10
 800a6b6:	f7f8 f875 	bl	80027a4 <HAL_Delay>

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a6e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d109      	bne.n	800a708 <USB_DriveVbus+0x44>
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d106      	bne.n	800a708 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a706:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a712:	d109      	bne.n	800a728 <USB_DriveVbus+0x64>
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a726:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	0c5b      	lsrs	r3, r3, #17
 800a754:	f003 0303 	and.w	r3, r3, #3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	b29b      	uxth	r3, r3
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
	...

0800a788 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	461a      	mov	r2, r3
 800a796:	4603      	mov	r3, r0
 800a798:	70fb      	strb	r3, [r7, #3]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70bb      	strb	r3, [r7, #2]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a7be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d87e      	bhi.n	800a8c4 <USB_HC_Init+0x13c>
 800a7c6:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <USB_HC_Init+0x44>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a7dd 	.word	0x0800a7dd
 800a7d0:	0800a887 	.word	0x0800a887
 800a7d4:	0800a7dd 	.word	0x0800a7dd
 800a7d8:	0800a849 	.word	0x0800a849
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f240 439d 	movw	r3, #1181	; 0x49d
 800a7ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a7f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	da10      	bge.n	800a81a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	0151      	lsls	r1, r2, #5
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	440a      	add	r2, r1
 800a80e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a816:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a818:	e057      	b.n	800a8ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a822:	2b00      	cmp	r3, #0
 800a824:	d051      	beq.n	800a8ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a840:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a844:	60d3      	str	r3, [r2, #12]
      break;
 800a846:	e040      	b.n	800a8ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a854:	461a      	mov	r2, r3
 800a856:	f240 639d 	movw	r3, #1693	; 0x69d
 800a85a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a85c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a860:	2b00      	cmp	r3, #0
 800a862:	da34      	bge.n	800a8ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	78fa      	ldrb	r2, [r7, #3]
 800a874:	0151      	lsls	r1, r2, #5
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	440a      	add	r2, r1
 800a87a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a87e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a882:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a884:	e023      	b.n	800a8ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a892:	461a      	mov	r2, r3
 800a894:	f240 2325 	movw	r3, #549	; 0x225
 800a898:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a89a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	da17      	bge.n	800a8d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	0151      	lsls	r1, r2, #5
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	440a      	add	r2, r1
 800a8b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a8c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a8c2:	e006      	b.n	800a8d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	77fb      	strb	r3, [r7, #31]
      break;
 800a8c8:	e004      	b.n	800a8d4 <USB_HC_Init+0x14c>
      break;
 800a8ca:	bf00      	nop
 800a8cc:	e002      	b.n	800a8d4 <USB_HC_Init+0x14c>
      break;
 800a8ce:	bf00      	nop
 800a8d0:	e000      	b.n	800a8d4 <USB_HC_Init+0x14c>
      break;
 800a8d2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	78fa      	ldrb	r2, [r7, #3]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ee:	f043 0302 	orr.w	r3, r3, #2
 800a8f2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	f003 030f 	and.w	r3, r3, #15
 800a902:	2101      	movs	r1, #1
 800a904:	fa01 f303 	lsl.w	r3, r1, r3
 800a908:	6939      	ldr	r1, [r7, #16]
 800a90a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a90e:	4313      	orrs	r3, r2
 800a910:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a91e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a922:	2b00      	cmp	r3, #0
 800a924:	da03      	bge.n	800a92e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	61bb      	str	r3, [r7, #24]
 800a92c:	e001      	b.n	800a932 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff feff 	bl	800a736 <USB_GetHostSpeed>
 800a938:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a93a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d106      	bne.n	800a950 <USB_HC_Init+0x1c8>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d003      	beq.n	800a950 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	e001      	b.n	800a954 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a954:	787b      	ldrb	r3, [r7, #1]
 800a956:	059b      	lsls	r3, r3, #22
 800a958:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a95c:	78bb      	ldrb	r3, [r7, #2]
 800a95e:	02db      	lsls	r3, r3, #11
 800a960:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a964:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a966:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a96a:	049b      	lsls	r3, r3, #18
 800a96c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a970:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a972:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a974:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a978:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	0159      	lsls	r1, r3, #5
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	440b      	add	r3, r1
 800a986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a990:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a992:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a996:	2b03      	cmp	r3, #3
 800a998:	d003      	beq.n	800a9a2 <USB_HC_Init+0x21a>
 800a99a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d10f      	bne.n	800a9c2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a9c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08c      	sub	sp, #48	; 0x30
 800a9d0:	af02      	add	r7, sp, #8
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a9e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d02d      	beq.n	800aa52 <USB_HC_StartXfer+0x86>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	791b      	ldrb	r3, [r3, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d129      	bne.n	800aa52 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d117      	bne.n	800aa34 <USB_HC_StartXfer+0x68>
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	79db      	ldrb	r3, [r3, #7]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <USB_HC_StartXfer+0x48>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	79db      	ldrb	r3, [r3, #7]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d10f      	bne.n	800aa34 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa32:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800aa34:	79fb      	ldrb	r3, [r7, #7]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <USB_HC_StartXfer+0x86>
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	795b      	ldrb	r3, [r3, #5]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d107      	bne.n	800aa52 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	785b      	ldrb	r3, [r3, #1]
 800aa46:	4619      	mov	r1, r3
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 fa0f 	bl	800ae6c <USB_DoPing>
      return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e0f8      	b.n	800ac44 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d018      	beq.n	800aa8c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	8912      	ldrh	r2, [r2, #8]
 800aa62:	4413      	add	r3, r2
 800aa64:	3b01      	subs	r3, #1
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	8912      	ldrh	r2, [r2, #8]
 800aa6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa6e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aa70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa72:	8b7b      	ldrh	r3, [r7, #26]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d90b      	bls.n	800aa90 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aa78:	8b7b      	ldrh	r3, [r7, #26]
 800aa7a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aa7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	8912      	ldrh	r2, [r2, #8]
 800aa82:	fb03 f202 	mul.w	r2, r3, r2
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	611a      	str	r2, [r3, #16]
 800aa8a:	e001      	b.n	800aa90 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	78db      	ldrb	r3, [r3, #3]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aa98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	8912      	ldrh	r2, [r2, #8]
 800aa9e:	fb03 f202 	mul.w	r2, r3, r2
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	611a      	str	r2, [r3, #16]
 800aaa6:	e003      	b.n	800aab0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	695a      	ldr	r2, [r3, #20]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aab8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aaba:	04d9      	lsls	r1, r3, #19
 800aabc:	4b63      	ldr	r3, [pc, #396]	; (800ac4c <USB_HC_StartXfer+0x280>)
 800aabe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aac0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	7a9b      	ldrb	r3, [r3, #10]
 800aac6:	075b      	lsls	r3, r3, #29
 800aac8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aacc:	69f9      	ldr	r1, [r7, #28]
 800aace:	0148      	lsls	r0, r1, #5
 800aad0:	6a39      	ldr	r1, [r7, #32]
 800aad2:	4401      	add	r1, r0
 800aad4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aad8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aada:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	68d9      	ldr	r1, [r3, #12]
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aaf6:	6a3b      	ldr	r3, [r7, #32]
 800aaf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f003 0301 	and.w	r3, r3, #1
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf0c      	ite	eq
 800ab06:	2301      	moveq	r3, #1
 800ab08:	2300      	movne	r3, #0
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	015a      	lsls	r2, r3, #5
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	4413      	add	r3, r2
 800ab16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	0151      	lsls	r1, r2, #5
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	440a      	add	r2, r1
 800ab24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab2c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	7e7b      	ldrb	r3, [r7, #25]
 800ab3e:	075b      	lsls	r3, r3, #29
 800ab40:	69f9      	ldr	r1, [r7, #28]
 800ab42:	0148      	lsls	r0, r1, #5
 800ab44:	6a39      	ldr	r1, [r7, #32]
 800ab46:	4401      	add	r1, r0
 800ab48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab66:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	78db      	ldrb	r3, [r3, #3]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	e003      	b.n	800ab82 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab80:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab88:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab96:	461a      	mov	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e04e      	b.n	800ac44 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d149      	bne.n	800ac42 <USB_HC_StartXfer+0x276>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d045      	beq.n	800ac42 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	79db      	ldrb	r3, [r3, #7]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d830      	bhi.n	800ac20 <USB_HC_StartXfer+0x254>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <USB_HC_StartXfer+0x1f8>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abf9 	.word	0x0800abf9
 800abcc:	0800abd5 	.word	0x0800abd5
 800abd0:	0800abf9 	.word	0x0800abf9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	3303      	adds	r3, #3
 800abda:	089b      	lsrs	r3, r3, #2
 800abdc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800abde:	8afa      	ldrh	r2, [r7, #22]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d91c      	bls.n	800ac24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	f043 0220 	orr.w	r2, r3, #32
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	619a      	str	r2, [r3, #24]
        }
        break;
 800abf6:	e015      	b.n	800ac24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	3303      	adds	r3, #3
 800abfe:	089b      	lsrs	r3, r3, #2
 800ac00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac02:	8afa      	ldrh	r2, [r7, #22]
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d90a      	bls.n	800ac28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac1e:	e003      	b.n	800ac28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ac20:	bf00      	nop
 800ac22:	e002      	b.n	800ac2a <USB_HC_StartXfer+0x25e>
        break;
 800ac24:	bf00      	nop
 800ac26:	e000      	b.n	800ac2a <USB_HC_StartXfer+0x25e>
        break;
 800ac28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	68d9      	ldr	r1, [r3, #12]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	785a      	ldrb	r2, [r3, #1]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	2000      	movs	r0, #0
 800ac3a:	9000      	str	r0, [sp, #0]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff fb3d 	bl	800a2bc <USB_WritePacket>
  }

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3728      	adds	r7, #40	; 0x28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	1ff80000 	.word	0x1ff80000

0800ac50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	b29b      	uxth	r3, r3
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b089      	sub	sp, #36	; 0x24
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	0c9b      	lsrs	r3, r3, #18
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	0fdb      	lsrs	r3, r3, #31
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	d104      	bne.n	800accc <USB_HC_Halt+0x5a>
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	e0c8      	b.n	800ae5e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <USB_HC_Halt+0x66>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d163      	bne.n	800ada0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	0151      	lsls	r1, r2, #5
 800acea:	69fa      	ldr	r2, [r7, #28]
 800acec:	440a      	add	r2, r1
 800acee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acf6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f040 80ab 	bne.w	800ae5c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d133      	bne.n	800ad7a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	0151      	lsls	r1, r2, #5
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	440a      	add	r2, r1
 800ad28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad50:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3301      	adds	r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad5e:	d81d      	bhi.n	800ad9c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad76:	d0ec      	beq.n	800ad52 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad78:	e070      	b.n	800ae5c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	0151      	lsls	r1, r2, #5
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	440a      	add	r2, r1
 800ad90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad9a:	e05f      	b.n	800ae5c <USB_HC_Halt+0x1ea>
            break;
 800ad9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad9e:	e05d      	b.n	800ae5c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	0151      	lsls	r1, r2, #5
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	440a      	add	r2, r1
 800adb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adbe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d133      	bne.n	800ae38 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae0e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	3301      	adds	r3, #1
 800ae14:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae1c:	d81d      	bhi.n	800ae5a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae34:	d0ec      	beq.n	800ae10 <USB_HC_Halt+0x19e>
 800ae36:	e011      	b.n	800ae5c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	e000      	b.n	800ae5c <USB_HC_Halt+0x1ea>
          break;
 800ae5a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3724      	adds	r7, #36	; 0x24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ae80:	2301      	movs	r3, #1
 800ae82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	04da      	lsls	r2, r3, #19
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <USB_DoPing+0x74>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aeb4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeca:	461a      	mov	r2, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	1ff80000 	.word	0x1ff80000

0800aee4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff f91d 	bl	800a138 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aefe:	2110      	movs	r1, #16
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff f977 	bl	800a1f4 <USB_FlushTxFifo>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff f9a3 	bl	800a25c <USB_FlushRxFifo>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af20:	2300      	movs	r3, #0
 800af22:	61bb      	str	r3, [r7, #24]
 800af24:	e01f      	b.n	800af66 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	4413      	add	r3, r2
 800af56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af5a:	461a      	mov	r2, r3
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	3301      	adds	r3, #1
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b0f      	cmp	r3, #15
 800af6a:	d9dc      	bls.n	800af26 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800af6c:	2300      	movs	r3, #0
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	e034      	b.n	800afdc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa6:	461a      	mov	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afb8:	d80c      	bhi.n	800afd4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afd0:	d0ec      	beq.n	800afac <USB_StopHost+0xc8>
 800afd2:	e000      	b.n	800afd6 <USB_StopHost+0xf2>
        break;
 800afd4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	3301      	adds	r3, #1
 800afda:	61bb      	str	r3, [r7, #24]
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b0f      	cmp	r3, #15
 800afe0:	d9c7      	bls.n	800af72 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe8:	461a      	mov	r2, r3
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295
 800aff6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff f88c 	bl	800a116 <USB_EnableGlobalInt>

  return ret;
 800affe:	7ffb      	ldrb	r3, [r7, #31]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	4613      	mov	r3, r2
 800b014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b016:	2301      	movs	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b01e:	4b1f      	ldr	r3, [pc, #124]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b020:	7a5b      	ldrb	r3, [r3, #9]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	d131      	bne.n	800b08c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b028:	4b1c      	ldr	r3, [pc, #112]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b02a:	7a5b      	ldrb	r3, [r3, #9]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b032:	2100      	movs	r1, #0
 800b034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b036:	4b19      	ldr	r3, [pc, #100]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4a17      	ldr	r2, [pc, #92]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b048:	7a5b      	ldrb	r3, [r3, #9]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b050:	4413      	add	r3, r2
 800b052:	79fa      	ldrb	r2, [r7, #7]
 800b054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b058:	7a5b      	ldrb	r3, [r3, #9]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	b2d1      	uxtb	r1, r2
 800b060:	4a0e      	ldr	r2, [pc, #56]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b062:	7251      	strb	r1, [r2, #9]
 800b064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b066:	7dbb      	ldrb	r3, [r7, #22]
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	3301      	adds	r3, #1
 800b074:	223a      	movs	r2, #58	; 0x3a
 800b076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3302      	adds	r3, #2
 800b07c:	222f      	movs	r2, #47	; 0x2f
 800b07e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	3303      	adds	r3, #3
 800b084:	2200      	movs	r2, #0
 800b086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	20000e70 	.word	0x20000e70

0800b0a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffaa 	bl	800b008 <FATFS_LinkDriverEx>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b085      	sub	sp, #20
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b0cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0d0:	2b84      	cmp	r3, #132	; 0x84
 800b0d2:	d005      	beq.n	800b0e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b0d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	3303      	adds	r3, #3
 800b0de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f4:	f3ef 8305 	mrs	r3, IPSR
 800b0f8:	607b      	str	r3, [r7, #4]
  return(result);
 800b0fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bf14      	ite	ne
 800b100:	2301      	movne	r3, #1
 800b102:	2300      	moveq	r3, #0
 800b104:	b2db      	uxtb	r3, r3
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b116:	f001 fd65 	bl	800cbe4 <vTaskStartScheduler>
  
  return osOK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b124:	f002 f9a4 	bl	800d470 <xTaskGetSchedulerState>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d101      	bne.n	800b132 <osKernelRunning+0x12>
    return 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	e000      	b.n	800b134 <osKernelRunning+0x14>
  else
    return 1;
 800b132:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b134:	4618      	mov	r0, r3
 800b136:	bd80      	pop	{r7, pc}

0800b138 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b13c:	f7ff ffd7 	bl	800b0ee <inHandlerMode>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b146:	f001 fe67 	bl	800ce18 <xTaskGetTickCountFromISR>
 800b14a:	4603      	mov	r3, r0
 800b14c:	e002      	b.n	800b154 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b14e:	f001 fe53 	bl	800cdf8 <xTaskGetTickCount>
 800b152:	4603      	mov	r3, r0
  }
}
 800b154:	4618      	mov	r0, r3
 800b156:	bd80      	pop	{r7, pc}

0800b158 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15a:	b089      	sub	sp, #36	; 0x24
 800b15c:	af04      	add	r7, sp, #16
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d020      	beq.n	800b1ac <osThreadCreate+0x54>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01c      	beq.n	800b1ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685c      	ldr	r4, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681d      	ldr	r5, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691e      	ldr	r6, [r3, #16]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff ff9a 	bl	800b0be <makeFreeRtosPriority>
 800b18a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b194:	9202      	str	r2, [sp, #8]
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	9100      	str	r1, [sp, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	4632      	mov	r2, r6
 800b19e:	4629      	mov	r1, r5
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 fb4d 	bl	800c840 <xTaskCreateStatic>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e01c      	b.n	800b1e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685c      	ldr	r4, [r3, #4]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1b8:	b29e      	uxth	r6, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ff7c 	bl	800b0be <makeFreeRtosPriority>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	9200      	str	r2, [sp, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f001 fb8f 	bl	800c8fa <xTaskCreate>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d001      	beq.n	800b1e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e000      	b.n	800b1e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <osDelay+0x16>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	e000      	b.n	800b208 <osDelay+0x18>
 800b206:	2301      	movs	r3, #1
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fcb7 	bl	800cb7c <vTaskDelay>
  
  return osOK;
 800b20e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b218:	b590      	push	{r4, r7, lr}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d011      	beq.n	800b24e <osMessageCreate+0x36>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00d      	beq.n	800b24e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6859      	ldr	r1, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	2400      	movs	r4, #0
 800b244:	9400      	str	r4, [sp, #0]
 800b246:	f000 fe1f 	bl	800be88 <xQueueGenericCreateStatic>
 800b24a:	4603      	mov	r3, r0
 800b24c:	e008      	b.n	800b260 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	4619      	mov	r1, r3
 800b25a:	f000 fe8d 	bl	800bf78 <xQueueGenericCreate>
 800b25e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	bd90      	pop	{r4, r7, pc}

0800b268 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b274:	2300      	movs	r3, #0
 800b276:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <osMessagePut+0x1e>
    ticks = 1;
 800b282:	2301      	movs	r3, #1
 800b284:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b286:	f7ff ff32 	bl	800b0ee <inHandlerMode>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d018      	beq.n	800b2c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b290:	f107 0210 	add.w	r2, r7, #16
 800b294:	f107 0108 	add.w	r1, r7, #8
 800b298:	2300      	movs	r3, #0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 ffc4 	bl	800c228 <xQueueGenericSendFromISR>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d001      	beq.n	800b2aa <osMessagePut+0x42>
      return osErrorOS;
 800b2a6:	23ff      	movs	r3, #255	; 0xff
 800b2a8:	e018      	b.n	800b2dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d014      	beq.n	800b2da <osMessagePut+0x72>
 800b2b0:	4b0c      	ldr	r3, [pc, #48]	; (800b2e4 <osMessagePut+0x7c>)
 800b2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	e00b      	b.n	800b2da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b2c2:	f107 0108 	add.w	r1, r7, #8
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 feae 	bl	800c02c <xQueueGenericSend>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d001      	beq.n	800b2da <osMessagePut+0x72>
      return osErrorOS;
 800b2d6:	23ff      	movs	r3, #255	; 0xff
 800b2d8:	e000      	b.n	800b2dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	e000ed04 	.word	0xe000ed04

0800b2e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b2e8:	b590      	push	{r4, r7, lr}
 800b2ea:	b08b      	sub	sp, #44	; 0x2c
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10a      	bne.n	800b318 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b302:	2380      	movs	r3, #128	; 0x80
 800b304:	617b      	str	r3, [r7, #20]
    return event;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	461c      	mov	r4, r3
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b316:	e054      	b.n	800b3c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b326:	d103      	bne.n	800b330 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
 800b32e:	e009      	b.n	800b344 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d006      	beq.n	800b344 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <osMessageGet+0x5c>
      ticks = 1;
 800b340:	2301      	movs	r3, #1
 800b342:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b344:	f7ff fed3 	bl	800b0ee <inHandlerMode>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d01c      	beq.n	800b388 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b34e:	f107 0220 	add.w	r2, r7, #32
 800b352:	f107 0314 	add.w	r3, r7, #20
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	68b8      	ldr	r0, [r7, #8]
 800b35c:	f001 f8e0 	bl	800c520 <xQueueReceiveFromISR>
 800b360:	4603      	mov	r3, r0
 800b362:	2b01      	cmp	r3, #1
 800b364:	d102      	bne.n	800b36c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b366:	2310      	movs	r3, #16
 800b368:	617b      	str	r3, [r7, #20]
 800b36a:	e001      	b.n	800b370 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d01d      	beq.n	800b3b2 <osMessageGet+0xca>
 800b376:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <osMessageGet+0xe4>)
 800b378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	e014      	b.n	800b3b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b388:	f107 0314 	add.w	r3, r7, #20
 800b38c:	3304      	adds	r3, #4
 800b38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b390:	4619      	mov	r1, r3
 800b392:	68b8      	ldr	r0, [r7, #8]
 800b394:	f000 ffe4 	bl	800c360 <xQueueReceive>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d102      	bne.n	800b3a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b39e:	2310      	movs	r3, #16
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	e006      	b.n	800b3b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <osMessageGet+0xc6>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e000      	b.n	800b3b0 <osMessageGet+0xc8>
 800b3ae:	2340      	movs	r3, #64	; 0x40
 800b3b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	f107 0314 	add.w	r3, r7, #20
 800b3ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	372c      	adds	r7, #44	; 0x2c
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd90      	pop	{r4, r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	e000ed04 	.word	0xe000ed04

0800b3d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08a      	sub	sp, #40	; 0x28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3dc:	f001 fc62 	bl	800cca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3e0:	4b5d      	ldr	r3, [pc, #372]	; (800b558 <pvPortMalloc+0x188>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3e8:	f000 f924 	bl	800b634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3ec:	4b5b      	ldr	r3, [pc, #364]	; (800b55c <pvPortMalloc+0x18c>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f040 8093 	bne.w	800b520 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01d      	beq.n	800b43c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b400:	2208      	movs	r2, #8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4413      	add	r3, r2
 800b406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d014      	beq.n	800b43c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f023 0307 	bic.w	r3, r3, #7
 800b418:	3308      	adds	r3, #8
 800b41a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f003 0307 	and.w	r3, r3, #7
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d06e      	beq.n	800b520 <pvPortMalloc+0x150>
 800b442:	4b47      	ldr	r3, [pc, #284]	; (800b560 <pvPortMalloc+0x190>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d869      	bhi.n	800b520 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b44c:	4b45      	ldr	r3, [pc, #276]	; (800b564 <pvPortMalloc+0x194>)
 800b44e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b450:	4b44      	ldr	r3, [pc, #272]	; (800b564 <pvPortMalloc+0x194>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b456:	e004      	b.n	800b462 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d903      	bls.n	800b474 <pvPortMalloc+0xa4>
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f1      	bne.n	800b458 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b474:	4b38      	ldr	r3, [pc, #224]	; (800b558 <pvPortMalloc+0x188>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d050      	beq.n	800b520 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2208      	movs	r2, #8
 800b484:	4413      	add	r3, r2
 800b486:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	2308      	movs	r3, #8
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d91f      	bls.n	800b4e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <pvPortMalloc+0xf8>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	613b      	str	r3, [r7, #16]
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4da:	69b8      	ldr	r0, [r7, #24]
 800b4dc:	f000 f90c 	bl	800b6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4e0:	4b1f      	ldr	r3, [pc, #124]	; (800b560 <pvPortMalloc+0x190>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	4a1d      	ldr	r2, [pc, #116]	; (800b560 <pvPortMalloc+0x190>)
 800b4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ee:	4b1c      	ldr	r3, [pc, #112]	; (800b560 <pvPortMalloc+0x190>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <pvPortMalloc+0x198>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d203      	bcs.n	800b502 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4fa:	4b19      	ldr	r3, [pc, #100]	; (800b560 <pvPortMalloc+0x190>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a1a      	ldr	r2, [pc, #104]	; (800b568 <pvPortMalloc+0x198>)
 800b500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	4b15      	ldr	r3, [pc, #84]	; (800b55c <pvPortMalloc+0x18c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b516:	4b15      	ldr	r3, [pc, #84]	; (800b56c <pvPortMalloc+0x19c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3301      	adds	r3, #1
 800b51c:	4a13      	ldr	r2, [pc, #76]	; (800b56c <pvPortMalloc+0x19c>)
 800b51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b520:	f001 fbce 	bl	800ccc0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b52a:	f7f5 fadd 	bl	8000ae8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <pvPortMalloc+0x17e>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	60fb      	str	r3, [r7, #12]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <pvPortMalloc+0x17c>
	return pvReturn;
 800b54e:	69fb      	ldr	r3, [r7, #28]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3728      	adds	r7, #40	; 0x28
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20008e84 	.word	0x20008e84
 800b55c:	20008e98 	.word	0x20008e98
 800b560:	20008e88 	.word	0x20008e88
 800b564:	20008e7c 	.word	0x20008e7c
 800b568:	20008e8c 	.word	0x20008e8c
 800b56c:	20008e90 	.word	0x20008e90

0800b570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d04d      	beq.n	800b61e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b582:	2308      	movs	r3, #8
 800b584:	425b      	negs	r3, r3
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4413      	add	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	4b24      	ldr	r3, [pc, #144]	; (800b628 <vPortFree+0xb8>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4013      	ands	r3, r2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10a      	bne.n	800b5b4 <vPortFree+0x44>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	60fb      	str	r3, [r7, #12]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00a      	beq.n	800b5d2 <vPortFree+0x62>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	60bb      	str	r3, [r7, #8]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <vPortFree+0xb8>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4013      	ands	r3, r2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01e      	beq.n	800b61e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d11a      	bne.n	800b61e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	4b0e      	ldr	r3, [pc, #56]	; (800b628 <vPortFree+0xb8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	43db      	mvns	r3, r3
 800b5f2:	401a      	ands	r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5f8:	f001 fb54 	bl	800cca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <vPortFree+0xbc>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4413      	add	r3, r2
 800b606:	4a09      	ldr	r2, [pc, #36]	; (800b62c <vPortFree+0xbc>)
 800b608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b60a:	6938      	ldr	r0, [r7, #16]
 800b60c:	f000 f874 	bl	800b6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b610:	4b07      	ldr	r3, [pc, #28]	; (800b630 <vPortFree+0xc0>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	4a06      	ldr	r2, [pc, #24]	; (800b630 <vPortFree+0xc0>)
 800b618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b61a:	f001 fb51 	bl	800ccc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b61e:	bf00      	nop
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20008e98 	.word	0x20008e98
 800b62c:	20008e88 	.word	0x20008e88
 800b630:	20008e94 	.word	0x20008e94

0800b634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b640:	4b27      	ldr	r3, [pc, #156]	; (800b6e0 <prvHeapInit+0xac>)
 800b642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00c      	beq.n	800b668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3307      	adds	r3, #7
 800b652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f023 0307 	bic.w	r3, r3, #7
 800b65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	4a1f      	ldr	r2, [pc, #124]	; (800b6e0 <prvHeapInit+0xac>)
 800b664:	4413      	add	r3, r2
 800b666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b66c:	4a1d      	ldr	r2, [pc, #116]	; (800b6e4 <prvHeapInit+0xb0>)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b672:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <prvHeapInit+0xb0>)
 800b674:	2200      	movs	r2, #0
 800b676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	4413      	add	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b680:	2208      	movs	r2, #8
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	1a9b      	subs	r3, r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 0307 	bic.w	r3, r3, #7
 800b68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4a15      	ldr	r2, [pc, #84]	; (800b6e8 <prvHeapInit+0xb4>)
 800b694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <prvHeapInit+0xb4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2200      	movs	r2, #0
 800b69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b69e:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <prvHeapInit+0xb4>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <prvHeapInit+0xb4>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4a0a      	ldr	r2, [pc, #40]	; (800b6ec <prvHeapInit+0xb8>)
 800b6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	4a09      	ldr	r2, [pc, #36]	; (800b6f0 <prvHeapInit+0xbc>)
 800b6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6cc:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <prvHeapInit+0xc0>)
 800b6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6d2:	601a      	str	r2, [r3, #0]
}
 800b6d4:	bf00      	nop
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	20000e7c 	.word	0x20000e7c
 800b6e4:	20008e7c 	.word	0x20008e7c
 800b6e8:	20008e84 	.word	0x20008e84
 800b6ec:	20008e8c 	.word	0x20008e8c
 800b6f0:	20008e88 	.word	0x20008e88
 800b6f4:	20008e98 	.word	0x20008e98

0800b6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b700:	4b28      	ldr	r3, [pc, #160]	; (800b7a4 <prvInsertBlockIntoFreeList+0xac>)
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	e002      	b.n	800b70c <prvInsertBlockIntoFreeList+0x14>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	429a      	cmp	r2, r3
 800b714:	d8f7      	bhi.n	800b706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4413      	add	r3, r2
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	429a      	cmp	r2, r3
 800b726:	d108      	bne.n	800b73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	441a      	add	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	441a      	add	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d118      	bne.n	800b780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d00d      	beq.n	800b776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	441a      	add	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	e008      	b.n	800b788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	e003      	b.n	800b788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d002      	beq.n	800b796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b796:	bf00      	nop
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20008e7c 	.word	0x20008e7c
 800b7a8:	20008e84 	.word	0x20008e84

0800b7ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f103 0208 	add.w	r2, r3, #8
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f103 0208 	add.w	r2, r3, #8
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f103 0208 	add.w	r2, r3, #8
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7fa:	bf00      	nop
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b806:	b480      	push	{r7}
 800b808:	b085      	sub	sp, #20
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b84e:	b480      	push	{r7}
 800b850:	b085      	sub	sp, #20
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b864:	d103      	bne.n	800b86e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	e00c      	b.n	800b888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3308      	adds	r3, #8
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	e002      	b.n	800b87c <vListInsert+0x2e>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	429a      	cmp	r2, r3
 800b886:	d2f6      	bcs.n	800b876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]
}
 800b8b4:	bf00      	nop
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	6892      	ldr	r2, [r2, #8]
 800b8d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	6852      	ldr	r2, [r2, #4]
 800b8e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d103      	bne.n	800b8f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	689a      	ldr	r2, [r3, #8]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	1e5a      	subs	r2, r3, #1
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3b04      	subs	r3, #4
 800b924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b92c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3b04      	subs	r3, #4
 800b932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f023 0201 	bic.w	r2, r3, #1
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b04      	subs	r3, #4
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b944:	4a0c      	ldr	r2, [pc, #48]	; (800b978 <pxPortInitialiseStack+0x64>)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3b14      	subs	r3, #20
 800b94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3b04      	subs	r3, #4
 800b95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f06f 0202 	mvn.w	r2, #2
 800b962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	3b20      	subs	r3, #32
 800b968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b96a:	68fb      	ldr	r3, [r7, #12]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	0800b97d 	.word	0x0800b97d

0800b97c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <prvTaskExitError+0x54>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d00a      	beq.n	800b9a6 <prvTaskExitError+0x2a>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <prvTaskExitError+0x28>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	60bb      	str	r3, [r7, #8]
}
 800b9b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9ba:	bf00      	nop
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0fc      	beq.n	800b9bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9c2:	bf00      	nop
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	20000010 	.word	0x20000010
	...

0800b9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <pxCurrentTCBConst2>)
 800b9e2:	6819      	ldr	r1, [r3, #0]
 800b9e4:	6808      	ldr	r0, [r1, #0]
 800b9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ea:	f380 8809 	msr	PSP, r0
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f04f 0000 	mov.w	r0, #0
 800b9f6:	f380 8811 	msr	BASEPRI, r0
 800b9fa:	4770      	bx	lr
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst2>:
 800ba00:	20008ea4 	.word	0x20008ea4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba08:	4808      	ldr	r0, [pc, #32]	; (800ba2c <prvPortStartFirstTask+0x24>)
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	f380 8808 	msr	MSP, r0
 800ba12:	f04f 0000 	mov.w	r0, #0
 800ba16:	f380 8814 	msr	CONTROL, r0
 800ba1a:	b662      	cpsie	i
 800ba1c:	b661      	cpsie	f
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	df00      	svc	0
 800ba28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba2a:	bf00      	nop
 800ba2c:	e000ed08 	.word	0xe000ed08

0800ba30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba36:	4b46      	ldr	r3, [pc, #280]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a46      	ldr	r2, [pc, #280]	; (800bb54 <xPortStartScheduler+0x124>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10a      	bne.n	800ba56 <xPortStartScheduler+0x26>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	613b      	str	r3, [r7, #16]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba56:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a3f      	ldr	r2, [pc, #252]	; (800bb58 <xPortStartScheduler+0x128>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d10a      	bne.n	800ba76 <xPortStartScheduler+0x46>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba76:	4b39      	ldr	r3, [pc, #228]	; (800bb5c <xPortStartScheduler+0x12c>)
 800ba78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	22ff      	movs	r2, #255	; 0xff
 800ba86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <xPortStartScheduler+0x130>)
 800ba9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba9e:	4b31      	ldr	r3, [pc, #196]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa0:	2207      	movs	r2, #7
 800baa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa4:	e009      	b.n	800baba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800baa6:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	4a2d      	ldr	r2, [pc, #180]	; (800bb64 <xPortStartScheduler+0x134>)
 800baae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac2:	2b80      	cmp	r3, #128	; 0x80
 800bac4:	d0ef      	beq.n	800baa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bac6:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <xPortStartScheduler+0x134>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1c3 0307 	rsb	r3, r3, #7
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d00a      	beq.n	800bae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60bb      	str	r3, [r7, #8]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bae8:	4b1e      	ldr	r3, [pc, #120]	; (800bb64 <xPortStartScheduler+0x134>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	021b      	lsls	r3, r3, #8
 800baee:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bafa:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <xPortStartScheduler+0x134>)
 800bafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a14      	ldr	r2, [pc, #80]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb1e:	f000 f8dd 	bl	800bcdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb22:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <xPortStartScheduler+0x13c>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb28:	f000 f8fc 	bl	800bd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb2c:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0f      	ldr	r2, [pc, #60]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb38:	f7ff ff66 	bl	800ba08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb3c:	f001 fa36 	bl	800cfac <vTaskSwitchContext>
	prvTaskExitError();
 800bb40:	f7ff ff1c 	bl	800b97c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	e000ed00 	.word	0xe000ed00
 800bb54:	410fc271 	.word	0x410fc271
 800bb58:	410fc270 	.word	0x410fc270
 800bb5c:	e000e400 	.word	0xe000e400
 800bb60:	20008e9c 	.word	0x20008e9c
 800bb64:	20008ea0 	.word	0x20008ea0
 800bb68:	e000ed20 	.word	0xe000ed20
 800bb6c:	20000010 	.word	0x20000010
 800bb70:	e000ef34 	.word	0xe000ef34

0800bb74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	4a0d      	ldr	r2, [pc, #52]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d10f      	bne.n	800bbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <vPortEnterCritical+0x5c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	603b      	str	r3, [r7, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <vPortEnterCritical+0x4a>
	}
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20000010 	.word	0x20000010
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbda:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <vPortExitCritical+0x50>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <vPortExitCritical+0x24>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <vPortExitCritical+0x50>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	4a09      	ldr	r2, [pc, #36]	; (800bc24 <vPortExitCritical+0x50>)
 800bc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc02:	4b08      	ldr	r3, [pc, #32]	; (800bc24 <vPortExitCritical+0x50>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d105      	bne.n	800bc16 <vPortExitCritical+0x42>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20000010 	.word	0x20000010
	...

0800bc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc30:	f3ef 8009 	mrs	r0, PSP
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <pxCurrentTCBConst>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f01e 0f10 	tst.w	lr, #16
 800bc40:	bf08      	it	eq
 800bc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	6010      	str	r0, [r2, #0]
 800bc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc54:	f380 8811 	msr	BASEPRI, r0
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f001 f9a4 	bl	800cfac <vTaskSwitchContext>
 800bc64:	f04f 0000 	mov.w	r0, #0
 800bc68:	f380 8811 	msr	BASEPRI, r0
 800bc6c:	bc09      	pop	{r0, r3}
 800bc6e:	6819      	ldr	r1, [r3, #0]
 800bc70:	6808      	ldr	r0, [r1, #0]
 800bc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc76:	f01e 0f10 	tst.w	lr, #16
 800bc7a:	bf08      	it	eq
 800bc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc80:	f380 8809 	msr	PSP, r0
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst>:
 800bc90:	20008ea4 	.word	0x20008ea4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	607b      	str	r3, [r7, #4]
}
 800bcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcb2:	f001 f8c3 	bl	800ce3c <xTaskIncrementTick>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcbc:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <SysTick_Handler+0x40>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f383 8811 	msr	BASEPRI, r3
}
 800bcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <vPortSetupTimerInterrupt+0x38>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <vPortSetupTimerInterrupt+0x3c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <vPortSetupTimerInterrupt+0x40>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	099b      	lsrs	r3, r3, #6
 800bcf8:	4a09      	ldr	r2, [pc, #36]	; (800bd20 <vPortSetupTimerInterrupt+0x44>)
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	e000e010 	.word	0xe000e010
 800bd14:	e000e018 	.word	0xe000e018
 800bd18:	20000004 	.word	0x20000004
 800bd1c:	10624dd3 	.word	0x10624dd3
 800bd20:	e000e014 	.word	0xe000e014

0800bd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd34 <vPortEnableVFP+0x10>
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd2e:	6001      	str	r1, [r0, #0]
 800bd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd32:	bf00      	nop
 800bd34:	e000ed88 	.word	0xe000ed88

0800bd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd3e:	f3ef 8305 	mrs	r3, IPSR
 800bd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b0f      	cmp	r3, #15
 800bd48:	d914      	bls.n	800bd74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd4a:	4a17      	ldr	r2, [pc, #92]	; (800bda8 <vPortValidateInterruptPriority+0x70>)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4413      	add	r3, r2
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd54:	4b15      	ldr	r3, [pc, #84]	; (800bdac <vPortValidateInterruptPriority+0x74>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	7afa      	ldrb	r2, [r7, #11]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d20a      	bcs.n	800bd74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	607b      	str	r3, [r7, #4]
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd74:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <vPortValidateInterruptPriority+0x78>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd7c:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <vPortValidateInterruptPriority+0x7c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d90a      	bls.n	800bd9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	603b      	str	r3, [r7, #0]
}
 800bd96:	bf00      	nop
 800bd98:	e7fe      	b.n	800bd98 <vPortValidateInterruptPriority+0x60>
	}
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	e000e3f0 	.word	0xe000e3f0
 800bdac:	20008e9c 	.word	0x20008e9c
 800bdb0:	e000ed0c 	.word	0xe000ed0c
 800bdb4:	20008ea0 	.word	0x20008ea0

0800bdb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <xQueueGenericReset+0x2a>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	60bb      	str	r3, [r7, #8]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bde2:	f7ff fec7 	bl	800bb74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdf2:	fb01 f303 	mul.w	r3, r1, r3
 800bdf6:	441a      	add	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	3b01      	subs	r3, #1
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be18:	fb01 f303 	mul.w	r3, r1, r3
 800be1c:	441a      	add	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	22ff      	movs	r2, #255	; 0xff
 800be26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	22ff      	movs	r2, #255	; 0xff
 800be2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d114      	bne.n	800be62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01a      	beq.n	800be76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3310      	adds	r3, #16
 800be44:	4618      	mov	r0, r3
 800be46:	f001 f955 	bl	800d0f4 <xTaskRemoveFromEventList>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d012      	beq.n	800be76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <xQueueGenericReset+0xcc>)
 800be52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	e009      	b.n	800be76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3310      	adds	r3, #16
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff fca0 	bl	800b7ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3324      	adds	r3, #36	; 0x24
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff fc9b 	bl	800b7ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be76:	f7ff fead 	bl	800bbd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be7a:	2301      	movs	r3, #1
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	e000ed04 	.word	0xe000ed04

0800be88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08e      	sub	sp, #56	; 0x38
 800be8c:	af02      	add	r7, sp, #8
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <xQueueGenericCreateStatic+0x52>
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <xQueueGenericCreateStatic+0x56>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <xQueueGenericCreateStatic+0x58>
 800bede:	2300      	movs	r3, #0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	623b      	str	r3, [r7, #32]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <xQueueGenericCreateStatic+0x7e>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <xQueueGenericCreateStatic+0x82>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e000      	b.n	800bf0c <xQueueGenericCreateStatic+0x84>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10a      	bne.n	800bf26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	61fb      	str	r3, [r7, #28]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf26:	2348      	movs	r3, #72	; 0x48
 800bf28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b48      	cmp	r3, #72	; 0x48
 800bf2e:	d00a      	beq.n	800bf46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	61bb      	str	r3, [r7, #24]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	4613      	mov	r3, r2
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 f83f 	bl	800bfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3730      	adds	r7, #48	; 0x30
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	4613      	mov	r3, r2
 800bf84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	613b      	str	r3, [r7, #16]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	fb02 f303 	mul.w	r3, r2, r3
 800bfaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	3348      	adds	r3, #72	; 0x48
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fa0d 	bl	800b3d0 <pvPortMalloc>
 800bfb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d011      	beq.n	800bfe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	3348      	adds	r3, #72	; 0x48
 800bfc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfd0:	79fa      	ldrb	r2, [r7, #7]
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	68b9      	ldr	r1, [r7, #8]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 f805 	bl	800bfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfe2:	69bb      	ldr	r3, [r7, #24]
	}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3720      	adds	r7, #32
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d103      	bne.n	800c008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	e002      	b.n	800c00e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c01a:	2101      	movs	r1, #1
 800c01c:	69b8      	ldr	r0, [r7, #24]
 800c01e:	f7ff fecb 	bl	800bdb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c022:	bf00      	nop
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
	...

0800c02c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08e      	sub	sp, #56	; 0x38
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c03a:	2300      	movs	r3, #0
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <xQueueGenericSend+0x32>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d103      	bne.n	800c06c <xQueueGenericSend+0x40>
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <xQueueGenericSend+0x44>
 800c06c:	2301      	movs	r3, #1
 800c06e:	e000      	b.n	800c072 <xQueueGenericSend+0x46>
 800c070:	2300      	movs	r3, #0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <xQueueGenericSend+0x60>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d103      	bne.n	800c09a <xQueueGenericSend+0x6e>
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <xQueueGenericSend+0x72>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e000      	b.n	800c0a0 <xQueueGenericSend+0x74>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10a      	bne.n	800c0ba <xQueueGenericSend+0x8e>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	623b      	str	r3, [r7, #32]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0ba:	f001 f9d9 	bl	800d470 <xTaskGetSchedulerState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <xQueueGenericSend+0x9e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <xQueueGenericSend+0xa2>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <xQueueGenericSend+0xa4>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <xQueueGenericSend+0xbe>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	61fb      	str	r3, [r7, #28]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ea:	f7ff fd43 	bl	800bb74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d302      	bcc.n	800c100 <xQueueGenericSend+0xd4>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d129      	bne.n	800c154 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	68b9      	ldr	r1, [r7, #8]
 800c104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c106:	f000 fa8b 	bl	800c620 <prvCopyDataToQueue>
 800c10a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	2b00      	cmp	r3, #0
 800c112:	d010      	beq.n	800c136 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	3324      	adds	r3, #36	; 0x24
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 ffeb 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d013      	beq.n	800c14c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c124:	4b3f      	ldr	r3, [pc, #252]	; (800c224 <xQueueGenericSend+0x1f8>)
 800c126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	e00a      	b.n	800c14c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c13c:	4b39      	ldr	r3, [pc, #228]	; (800c224 <xQueueGenericSend+0x1f8>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c14c:	f7ff fd42 	bl	800bbd4 <vPortExitCritical>
				return pdPASS;
 800c150:	2301      	movs	r3, #1
 800c152:	e063      	b.n	800c21c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d103      	bne.n	800c162 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c15a:	f7ff fd3b 	bl	800bbd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	e05c      	b.n	800c21c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c168:	f107 0314 	add.w	r3, r7, #20
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 f823 	bl	800d1b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c176:	f7ff fd2d 	bl	800bbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c17a:	f000 fd93 	bl	800cca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c17e:	f7ff fcf9 	bl	800bb74 <vPortEnterCritical>
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c188:	b25b      	sxtb	r3, r3
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	d103      	bne.n	800c198 <xQueueGenericSend+0x16c>
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c19e:	b25b      	sxtb	r3, r3
 800c1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a4:	d103      	bne.n	800c1ae <xQueueGenericSend+0x182>
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1ae:	f7ff fd11 	bl	800bbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1b2:	1d3a      	adds	r2, r7, #4
 800c1b4:	f107 0314 	add.w	r3, r7, #20
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f001 f812 	bl	800d1e4 <xTaskCheckForTimeOut>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d124      	bne.n	800c210 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1c8:	f000 fb22 	bl	800c810 <prvIsQueueFull>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d018      	beq.n	800c204 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	3310      	adds	r3, #16
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 ff66 	bl	800d0ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e2:	f000 faad 	bl	800c740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1e6:	f000 fd6b 	bl	800ccc0 <xTaskResumeAll>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f47f af7c 	bne.w	800c0ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c1f2:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <xQueueGenericSend+0x1f8>)
 800c1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	e772      	b.n	800c0ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c206:	f000 fa9b 	bl	800c740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c20a:	f000 fd59 	bl	800ccc0 <xTaskResumeAll>
 800c20e:	e76c      	b.n	800c0ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c212:	f000 fa95 	bl	800c740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c216:	f000 fd53 	bl	800ccc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c21a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3738      	adds	r7, #56	; 0x38
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	e000ed04 	.word	0xe000ed04

0800c228 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b090      	sub	sp, #64	; 0x40
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d103      	bne.n	800c264 <xQueueGenericSendFromISR+0x3c>
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <xQueueGenericSendFromISR+0x40>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <xQueueGenericSendFromISR+0x42>
 800c268:	2300      	movs	r3, #0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10a      	bne.n	800c284 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c280:	bf00      	nop
 800c282:	e7fe      	b.n	800c282 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d103      	bne.n	800c292 <xQueueGenericSendFromISR+0x6a>
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d101      	bne.n	800c296 <xQueueGenericSendFromISR+0x6e>
 800c292:	2301      	movs	r3, #1
 800c294:	e000      	b.n	800c298 <xQueueGenericSendFromISR+0x70>
 800c296:	2300      	movs	r3, #0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10a      	bne.n	800c2b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	623b      	str	r3, [r7, #32]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2b2:	f7ff fd41 	bl	800bd38 <vPortValidateInterruptPriority>
	__asm volatile
 800c2b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	61fa      	str	r2, [r7, #28]
 800c2cc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d302      	bcc.n	800c2e4 <xQueueGenericSendFromISR+0xbc>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d12f      	bne.n	800c344 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	68b9      	ldr	r1, [r7, #8]
 800c2f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2fa:	f000 f991 	bl	800c620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c306:	d112      	bne.n	800c32e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d016      	beq.n	800c33e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	3324      	adds	r3, #36	; 0x24
 800c314:	4618      	mov	r0, r3
 800c316:	f000 feed 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00e      	beq.n	800c33e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00b      	beq.n	800c33e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	e007      	b.n	800c33e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c32e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c332:	3301      	adds	r3, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	b25a      	sxtb	r2, r3
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c33e:	2301      	movs	r3, #1
 800c340:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c342:	e001      	b.n	800c348 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c344:	2300      	movs	r3, #0
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f383 8811 	msr	BASEPRI, r3
}
 800c352:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c356:	4618      	mov	r0, r3
 800c358:	3740      	adds	r7, #64	; 0x40
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08c      	sub	sp, #48	; 0x30
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c36c:	2300      	movs	r3, #0
 800c36e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10a      	bne.n	800c390 <xQueueReceive+0x30>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	623b      	str	r3, [r7, #32]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d103      	bne.n	800c39e <xQueueReceive+0x3e>
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <xQueueReceive+0x42>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <xQueueReceive+0x44>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10a      	bne.n	800c3be <xQueueReceive+0x5e>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	61fb      	str	r3, [r7, #28]
}
 800c3ba:	bf00      	nop
 800c3bc:	e7fe      	b.n	800c3bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3be:	f001 f857 	bl	800d470 <xTaskGetSchedulerState>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <xQueueReceive+0x6e>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <xQueueReceive+0x72>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <xQueueReceive+0x74>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <xQueueReceive+0x8e>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	61bb      	str	r3, [r7, #24]
}
 800c3ea:	bf00      	nop
 800c3ec:	e7fe      	b.n	800c3ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ee:	f7ff fbc1 	bl	800bb74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01f      	beq.n	800c43e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 f977 	bl	800c6f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	1e5a      	subs	r2, r3, #1
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00f      	beq.n	800c436 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	3310      	adds	r3, #16
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fe6a 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d007      	beq.n	800c436 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c426:	4b3d      	ldr	r3, [pc, #244]	; (800c51c <xQueueReceive+0x1bc>)
 800c428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c436:	f7ff fbcd 	bl	800bbd4 <vPortExitCritical>
				return pdPASS;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e069      	b.n	800c512 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c444:	f7ff fbc6 	bl	800bbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c448:	2300      	movs	r3, #0
 800c44a:	e062      	b.n	800c512 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	4618      	mov	r0, r3
 800c458:	f000 feae 	bl	800d1b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c45c:	2301      	movs	r3, #1
 800c45e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c460:	f7ff fbb8 	bl	800bbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c464:	f000 fc1e 	bl	800cca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c468:	f7ff fb84 	bl	800bb74 <vPortEnterCritical>
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c472:	b25b      	sxtb	r3, r3
 800c474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c478:	d103      	bne.n	800c482 <xQueueReceive+0x122>
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c488:	b25b      	sxtb	r3, r3
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	d103      	bne.n	800c498 <xQueueReceive+0x138>
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c498:	f7ff fb9c 	bl	800bbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c49c:	1d3a      	adds	r2, r7, #4
 800c49e:	f107 0310 	add.w	r3, r7, #16
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fe9d 	bl	800d1e4 <xTaskCheckForTimeOut>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d123      	bne.n	800c4f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b2:	f000 f997 	bl	800c7e4 <prvIsQueueEmpty>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d017      	beq.n	800c4ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	3324      	adds	r3, #36	; 0x24
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 fdf1 	bl	800d0ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4cc:	f000 f938 	bl	800c740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d0:	f000 fbf6 	bl	800ccc0 <xTaskResumeAll>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d189      	bne.n	800c3ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4da:	4b10      	ldr	r3, [pc, #64]	; (800c51c <xQueueReceive+0x1bc>)
 800c4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	e780      	b.n	800c3ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ee:	f000 f927 	bl	800c740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f2:	f000 fbe5 	bl	800ccc0 <xTaskResumeAll>
 800c4f6:	e77a      	b.n	800c3ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4fa:	f000 f921 	bl	800c740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4fe:	f000 fbdf 	bl	800ccc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c504:	f000 f96e 	bl	800c7e4 <prvIsQueueEmpty>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f43f af6f 	beq.w	800c3ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c512:	4618      	mov	r0, r3
 800c514:	3730      	adds	r7, #48	; 0x30
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	e000ed04 	.word	0xe000ed04

0800c520 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08e      	sub	sp, #56	; 0x38
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	623b      	str	r3, [r7, #32]
}
 800c548:	bf00      	nop
 800c54a:	e7fe      	b.n	800c54a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <xQueueReceiveFromISR+0x3a>
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <xQueueReceiveFromISR+0x3e>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <xQueueReceiveFromISR+0x40>
 800c55e:	2300      	movs	r3, #0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10a      	bne.n	800c57a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	61fb      	str	r3, [r7, #28]
}
 800c576:	bf00      	nop
 800c578:	e7fe      	b.n	800c578 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c57a:	f7ff fbdd 	bl	800bd38 <vPortValidateInterruptPriority>
	__asm volatile
 800c57e:	f3ef 8211 	mrs	r2, BASEPRI
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	61ba      	str	r2, [r7, #24]
 800c594:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c596:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d02f      	beq.n	800c606 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5b4:	f000 f89e 	bl	800c6f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	1e5a      	subs	r2, r3, #1
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c8:	d112      	bne.n	800c5f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d016      	beq.n	800c600 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	3310      	adds	r3, #16
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 fd8c 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00e      	beq.n	800c600 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00b      	beq.n	800c600 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e007      	b.n	800c600 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	b25a      	sxtb	r2, r3
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c600:	2301      	movs	r3, #1
 800c602:	637b      	str	r3, [r7, #52]	; 0x34
 800c604:	e001      	b.n	800c60a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c606:	2300      	movs	r3, #0
 800c608:	637b      	str	r3, [r7, #52]	; 0x34
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f383 8811 	msr	BASEPRI, r3
}
 800c614:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3738      	adds	r7, #56	; 0x38
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10d      	bne.n	800c65a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d14d      	bne.n	800c6e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 ff2e 	bl	800d4ac <xTaskPriorityDisinherit>
 800c650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	609a      	str	r2, [r3, #8]
 800c658:	e043      	b.n	800c6e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d119      	bne.n	800c694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6858      	ldr	r0, [r3, #4]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c668:	461a      	mov	r2, r3
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	f003 fa8e 	bl	800fb8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c678:	441a      	add	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	d32b      	bcc.n	800c6e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	605a      	str	r2, [r3, #4]
 800c692:	e026      	b.n	800c6e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	68d8      	ldr	r0, [r3, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69c:	461a      	mov	r2, r3
 800c69e:	68b9      	ldr	r1, [r7, #8]
 800c6a0:	f003 fa74 	bl	800fb8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68da      	ldr	r2, [r3, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ac:	425b      	negs	r3, r3
 800c6ae:	441a      	add	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	68da      	ldr	r2, [r3, #12]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d207      	bcs.n	800c6d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	689a      	ldr	r2, [r3, #8]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c8:	425b      	negs	r3, r3
 800c6ca:	441a      	add	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d105      	bne.n	800c6e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c6ea:	697b      	ldr	r3, [r7, #20]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c702:	2b00      	cmp	r3, #0
 800c704:	d018      	beq.n	800c738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68da      	ldr	r2, [r3, #12]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70e:	441a      	add	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68da      	ldr	r2, [r3, #12]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d303      	bcc.n	800c728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68d9      	ldr	r1, [r3, #12]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	461a      	mov	r2, r3
 800c732:	6838      	ldr	r0, [r7, #0]
 800c734:	f003 fa2a 	bl	800fb8c <memcpy>
	}
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c748:	f7ff fa14 	bl	800bb74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c754:	e011      	b.n	800c77a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d012      	beq.n	800c784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3324      	adds	r3, #36	; 0x24
 800c762:	4618      	mov	r0, r3
 800c764:	f000 fcc6 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c76e:	f000 fd9b 	bl	800d2a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	3b01      	subs	r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dce9      	bgt.n	800c756 <prvUnlockQueue+0x16>
 800c782:	e000      	b.n	800c786 <prvUnlockQueue+0x46>
					break;
 800c784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	22ff      	movs	r2, #255	; 0xff
 800c78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c78e:	f7ff fa21 	bl	800bbd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c792:	f7ff f9ef 	bl	800bb74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c79c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c79e:	e011      	b.n	800c7c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d012      	beq.n	800c7ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3310      	adds	r3, #16
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fca1 	bl	800d0f4 <xTaskRemoveFromEventList>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7b8:	f000 fd76 	bl	800d2a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7bc:	7bbb      	ldrb	r3, [r7, #14]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	dce9      	bgt.n	800c7a0 <prvUnlockQueue+0x60>
 800c7cc:	e000      	b.n	800c7d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	22ff      	movs	r2, #255	; 0xff
 800c7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7d8:	f7ff f9fc 	bl	800bbd4 <vPortExitCritical>
}
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7ec:	f7ff f9c2 	bl	800bb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d102      	bne.n	800c7fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	e001      	b.n	800c802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c802:	f7ff f9e7 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800c806:	68fb      	ldr	r3, [r7, #12]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c818:	f7ff f9ac 	bl	800bb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c824:	429a      	cmp	r2, r3
 800c826:	d102      	bne.n	800c82e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c828:	2301      	movs	r3, #1
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	e001      	b.n	800c832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c832:	f7ff f9cf 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800c836:	68fb      	ldr	r3, [r7, #12]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08e      	sub	sp, #56	; 0x38
 800c844:	af04      	add	r7, sp, #16
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10a      	bne.n	800c86a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	623b      	str	r3, [r7, #32]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <xTaskCreateStatic+0x46>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	61fb      	str	r3, [r7, #28]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c886:	2358      	movs	r3, #88	; 0x58
 800c888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b58      	cmp	r3, #88	; 0x58
 800c88e:	d00a      	beq.n	800c8a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	61bb      	str	r3, [r7, #24]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d01e      	beq.n	800c8ec <xTaskCreateStatic+0xac>
 800c8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01b      	beq.n	800c8ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	f107 0314 	add.w	r3, r7, #20
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 f850 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8e6:	f000 f8df 	bl	800caa8 <prvAddNewTaskToReadyList>
 800c8ea:	e001      	b.n	800c8f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8f0:	697b      	ldr	r3, [r7, #20]
	}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3728      	adds	r7, #40	; 0x28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b08c      	sub	sp, #48	; 0x30
 800c8fe:	af04      	add	r7, sp, #16
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	603b      	str	r3, [r7, #0]
 800c906:	4613      	mov	r3, r2
 800c908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fd5e 	bl	800b3d0 <pvPortMalloc>
 800c914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00e      	beq.n	800c93a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c91c:	2058      	movs	r0, #88	; 0x58
 800c91e:	f7fe fd57 	bl	800b3d0 <pvPortMalloc>
 800c922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	631a      	str	r2, [r3, #48]	; 0x30
 800c930:	e005      	b.n	800c93e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f7fe fe1c 	bl	800b570 <vPortFree>
 800c938:	e001      	b.n	800c93e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d017      	beq.n	800c974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	2300      	movs	r3, #0
 800c950:	9303      	str	r3, [sp, #12]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	9302      	str	r3, [sp, #8]
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f80e 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c968:	69f8      	ldr	r0, [r7, #28]
 800c96a:	f000 f89d 	bl	800caa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c96e:	2301      	movs	r3, #1
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e002      	b.n	800c97a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c974:	f04f 33ff 	mov.w	r3, #4294967295
 800c978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c97a:	69bb      	ldr	r3, [r7, #24]
	}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3720      	adds	r7, #32
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	461a      	mov	r2, r3
 800c99c:	21a5      	movs	r1, #165	; 0xa5
 800c99e:	f003 f903 	bl	800fba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f023 0307 	bic.w	r3, r3, #7
 800c9ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	617b      	str	r3, [r7, #20]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01f      	beq.n	800ca22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61fb      	str	r3, [r7, #28]
 800c9e6:	e012      	b.n	800ca0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	7819      	ldrb	r1, [r3, #0]
 800c9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3334      	adds	r3, #52	; 0x34
 800c9f8:	460a      	mov	r2, r1
 800c9fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	4413      	add	r3, r2
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	61fb      	str	r3, [r7, #28]
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	2b0f      	cmp	r3, #15
 800ca12:	d9e9      	bls.n	800c9e8 <prvInitialiseNewTask+0x64>
 800ca14:	e000      	b.n	800ca18 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca20:	e003      	b.n	800ca2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	2b06      	cmp	r3, #6
 800ca2e:	d901      	bls.n	800ca34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca30:	2306      	movs	r3, #6
 800ca32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	2200      	movs	r2, #0
 800ca44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fece 	bl	800b7ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	3318      	adds	r3, #24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fe fec9 	bl	800b7ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	f1c3 0207 	rsb	r2, r3, #7
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	2200      	movs	r2, #0
 800ca74:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	2200      	movs	r2, #0
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca84:	683a      	ldr	r2, [r7, #0]
 800ca86:	68f9      	ldr	r1, [r7, #12]
 800ca88:	69b8      	ldr	r0, [r7, #24]
 800ca8a:	f7fe ff43 	bl	800b914 <pxPortInitialiseStack>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d002      	beq.n	800caa0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caa0:	bf00      	nop
 800caa2:	3720      	adds	r7, #32
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cab0:	f7ff f860 	bl	800bb74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cab4:	4b2a      	ldr	r3, [pc, #168]	; (800cb60 <prvAddNewTaskToReadyList+0xb8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	4a29      	ldr	r2, [pc, #164]	; (800cb60 <prvAddNewTaskToReadyList+0xb8>)
 800cabc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cabe:	4b29      	ldr	r3, [pc, #164]	; (800cb64 <prvAddNewTaskToReadyList+0xbc>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d109      	bne.n	800cada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cac6:	4a27      	ldr	r2, [pc, #156]	; (800cb64 <prvAddNewTaskToReadyList+0xbc>)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cacc:	4b24      	ldr	r3, [pc, #144]	; (800cb60 <prvAddNewTaskToReadyList+0xb8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d110      	bne.n	800caf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cad4:	f000 fc0e 	bl	800d2f4 <prvInitialiseTaskLists>
 800cad8:	e00d      	b.n	800caf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cada:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <prvAddNewTaskToReadyList+0xc0>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d109      	bne.n	800caf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cae2:	4b20      	ldr	r3, [pc, #128]	; (800cb64 <prvAddNewTaskToReadyList+0xbc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	429a      	cmp	r2, r3
 800caee:	d802      	bhi.n	800caf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800caf0:	4a1c      	ldr	r2, [pc, #112]	; (800cb64 <prvAddNewTaskToReadyList+0xbc>)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caf6:	4b1d      	ldr	r3, [pc, #116]	; (800cb6c <prvAddNewTaskToReadyList+0xc4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	3301      	adds	r3, #1
 800cafc:	4a1b      	ldr	r2, [pc, #108]	; (800cb6c <prvAddNewTaskToReadyList+0xc4>)
 800cafe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	2201      	movs	r2, #1
 800cb06:	409a      	lsls	r2, r3
 800cb08:	4b19      	ldr	r3, [pc, #100]	; (800cb70 <prvAddNewTaskToReadyList+0xc8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	4a18      	ldr	r2, [pc, #96]	; (800cb70 <prvAddNewTaskToReadyList+0xc8>)
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4a15      	ldr	r2, [pc, #84]	; (800cb74 <prvAddNewTaskToReadyList+0xcc>)
 800cb20:	441a      	add	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7fe fe6c 	bl	800b806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb2e:	f7ff f851 	bl	800bbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb32:	4b0d      	ldr	r3, [pc, #52]	; (800cb68 <prvAddNewTaskToReadyList+0xc0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb3a:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <prvAddNewTaskToReadyList+0xbc>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d207      	bcs.n	800cb58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb48:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <prvAddNewTaskToReadyList+0xd0>)
 800cb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb58:	bf00      	nop
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20008fa4 	.word	0x20008fa4
 800cb64:	20008ea4 	.word	0x20008ea4
 800cb68:	20008fb0 	.word	0x20008fb0
 800cb6c:	20008fc0 	.word	0x20008fc0
 800cb70:	20008fac 	.word	0x20008fac
 800cb74:	20008ea8 	.word	0x20008ea8
 800cb78:	e000ed04 	.word	0xe000ed04

0800cb7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb84:	2300      	movs	r3, #0
 800cb86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d017      	beq.n	800cbbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb8e:	4b13      	ldr	r3, [pc, #76]	; (800cbdc <vTaskDelay+0x60>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00a      	beq.n	800cbac <vTaskDelay+0x30>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	60bb      	str	r3, [r7, #8]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbac:	f000 f87a 	bl	800cca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fd00 	bl	800d5b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbb8:	f000 f882 	bl	800ccc0 <xTaskResumeAll>
 800cbbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d107      	bne.n	800cbd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbc4:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <vTaskDelay+0x64>)
 800cbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	20008fcc 	.word	0x20008fcc
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	; 0x28
 800cbe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	1d39      	adds	r1, r7, #4
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f3 ff7c 	bl	8000af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	9202      	str	r2, [sp, #8]
 800cc08:	9301      	str	r3, [sp, #4]
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	460a      	mov	r2, r1
 800cc12:	491e      	ldr	r1, [pc, #120]	; (800cc8c <vTaskStartScheduler+0xa8>)
 800cc14:	481e      	ldr	r0, [pc, #120]	; (800cc90 <vTaskStartScheduler+0xac>)
 800cc16:	f7ff fe13 	bl	800c840 <xTaskCreateStatic>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4a1d      	ldr	r2, [pc, #116]	; (800cc94 <vTaskStartScheduler+0xb0>)
 800cc1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc20:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <vTaskStartScheduler+0xb0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	e001      	b.n	800cc32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d116      	bne.n	800cc66 <vTaskStartScheduler+0x82>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	613b      	str	r3, [r7, #16]
}
 800cc4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc4c:	4b12      	ldr	r3, [pc, #72]	; (800cc98 <vTaskStartScheduler+0xb4>)
 800cc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc54:	4b11      	ldr	r3, [pc, #68]	; (800cc9c <vTaskStartScheduler+0xb8>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc5a:	4b11      	ldr	r3, [pc, #68]	; (800cca0 <vTaskStartScheduler+0xbc>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc60:	f7fe fee6 	bl	800ba30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc64:	e00e      	b.n	800cc84 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6c:	d10a      	bne.n	800cc84 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	60fb      	str	r3, [r7, #12]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <vTaskStartScheduler+0x9e>
}
 800cc84:	bf00      	nop
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	0800fe04 	.word	0x0800fe04
 800cc90:	0800d2c1 	.word	0x0800d2c1
 800cc94:	20008fc8 	.word	0x20008fc8
 800cc98:	20008fc4 	.word	0x20008fc4
 800cc9c:	20008fb0 	.word	0x20008fb0
 800cca0:	20008fa8 	.word	0x20008fa8

0800cca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cca8:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <vTaskSuspendAll+0x18>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3301      	adds	r3, #1
 800ccae:	4a03      	ldr	r2, [pc, #12]	; (800ccbc <vTaskSuspendAll+0x18>)
 800ccb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccb2:	bf00      	nop
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	20008fcc 	.word	0x20008fcc

0800ccc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccce:	4b41      	ldr	r3, [pc, #260]	; (800cdd4 <xTaskResumeAll+0x114>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <xTaskResumeAll+0x2c>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	603b      	str	r3, [r7, #0]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccec:	f7fe ff42 	bl	800bb74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccf0:	4b38      	ldr	r3, [pc, #224]	; (800cdd4 <xTaskResumeAll+0x114>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	4a37      	ldr	r2, [pc, #220]	; (800cdd4 <xTaskResumeAll+0x114>)
 800ccf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccfa:	4b36      	ldr	r3, [pc, #216]	; (800cdd4 <xTaskResumeAll+0x114>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d161      	bne.n	800cdc6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd02:	4b35      	ldr	r3, [pc, #212]	; (800cdd8 <xTaskResumeAll+0x118>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d05d      	beq.n	800cdc6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd0a:	e02e      	b.n	800cd6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0c:	4b33      	ldr	r3, [pc, #204]	; (800cddc <xTaskResumeAll+0x11c>)
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	3318      	adds	r3, #24
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe fdd1 	bl	800b8c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3304      	adds	r3, #4
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe fdcc 	bl	800b8c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	409a      	lsls	r2, r3
 800cd30:	4b2b      	ldr	r3, [pc, #172]	; (800cde0 <xTaskResumeAll+0x120>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	4a2a      	ldr	r2, [pc, #168]	; (800cde0 <xTaskResumeAll+0x120>)
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4a27      	ldr	r2, [pc, #156]	; (800cde4 <xTaskResumeAll+0x124>)
 800cd48:	441a      	add	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4610      	mov	r0, r2
 800cd52:	f7fe fd58 	bl	800b806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	4b23      	ldr	r3, [pc, #140]	; (800cde8 <xTaskResumeAll+0x128>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d302      	bcc.n	800cd6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cd64:	4b21      	ldr	r3, [pc, #132]	; (800cdec <xTaskResumeAll+0x12c>)
 800cd66:	2201      	movs	r2, #1
 800cd68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd6a:	4b1c      	ldr	r3, [pc, #112]	; (800cddc <xTaskResumeAll+0x11c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1cc      	bne.n	800cd0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd78:	f000 fb5a 	bl	800d430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd7c:	4b1c      	ldr	r3, [pc, #112]	; (800cdf0 <xTaskResumeAll+0x130>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d010      	beq.n	800cdaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd88:	f000 f858 	bl	800ce3c <xTaskIncrementTick>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cd92:	4b16      	ldr	r3, [pc, #88]	; (800cdec <xTaskResumeAll+0x12c>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1f1      	bne.n	800cd88 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <xTaskResumeAll+0x130>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdaa:	4b10      	ldr	r3, [pc, #64]	; (800cdec <xTaskResumeAll+0x12c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d009      	beq.n	800cdc6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <xTaskResumeAll+0x134>)
 800cdb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdc6:	f7fe ff05 	bl	800bbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800cdca:	68bb      	ldr	r3, [r7, #8]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	20008fcc 	.word	0x20008fcc
 800cdd8:	20008fa4 	.word	0x20008fa4
 800cddc:	20008f64 	.word	0x20008f64
 800cde0:	20008fac 	.word	0x20008fac
 800cde4:	20008ea8 	.word	0x20008ea8
 800cde8:	20008ea4 	.word	0x20008ea4
 800cdec:	20008fb8 	.word	0x20008fb8
 800cdf0:	20008fb4 	.word	0x20008fb4
 800cdf4:	e000ed04 	.word	0xe000ed04

0800cdf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <xTaskGetTickCount+0x1c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce04:	687b      	ldr	r3, [r7, #4]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20008fa8 	.word	0x20008fa8

0800ce18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce1e:	f7fe ff8b 	bl	800bd38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ce26:	4b04      	ldr	r3, [pc, #16]	; (800ce38 <xTaskGetTickCountFromISR+0x20>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce2c:	683b      	ldr	r3, [r7, #0]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20008fa8 	.word	0x20008fa8

0800ce3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce46:	4b4e      	ldr	r3, [pc, #312]	; (800cf80 <xTaskIncrementTick+0x144>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f040 808e 	bne.w	800cf6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce50:	4b4c      	ldr	r3, [pc, #304]	; (800cf84 <xTaskIncrementTick+0x148>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce58:	4a4a      	ldr	r2, [pc, #296]	; (800cf84 <xTaskIncrementTick+0x148>)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d120      	bne.n	800cea6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce64:	4b48      	ldr	r3, [pc, #288]	; (800cf88 <xTaskIncrementTick+0x14c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00a      	beq.n	800ce84 <xTaskIncrementTick+0x48>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	603b      	str	r3, [r7, #0]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <xTaskIncrementTick+0x46>
 800ce84:	4b40      	ldr	r3, [pc, #256]	; (800cf88 <xTaskIncrementTick+0x14c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	4b40      	ldr	r3, [pc, #256]	; (800cf8c <xTaskIncrementTick+0x150>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a3e      	ldr	r2, [pc, #248]	; (800cf88 <xTaskIncrementTick+0x14c>)
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	4a3e      	ldr	r2, [pc, #248]	; (800cf8c <xTaskIncrementTick+0x150>)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	4b3d      	ldr	r3, [pc, #244]	; (800cf90 <xTaskIncrementTick+0x154>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	4a3c      	ldr	r2, [pc, #240]	; (800cf90 <xTaskIncrementTick+0x154>)
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	f000 fac5 	bl	800d430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cea6:	4b3b      	ldr	r3, [pc, #236]	; (800cf94 <xTaskIncrementTick+0x158>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d348      	bcc.n	800cf42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceb0:	4b35      	ldr	r3, [pc, #212]	; (800cf88 <xTaskIncrementTick+0x14c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d104      	bne.n	800cec4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceba:	4b36      	ldr	r3, [pc, #216]	; (800cf94 <xTaskIncrementTick+0x158>)
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	601a      	str	r2, [r3, #0]
					break;
 800cec2:	e03e      	b.n	800cf42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec4:	4b30      	ldr	r3, [pc, #192]	; (800cf88 <xTaskIncrementTick+0x14c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d203      	bcs.n	800cee4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cedc:	4a2d      	ldr	r2, [pc, #180]	; (800cf94 <xTaskIncrementTick+0x158>)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cee2:	e02e      	b.n	800cf42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fce9 	bl	800b8c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d004      	beq.n	800cf00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	3318      	adds	r3, #24
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fce0 	bl	800b8c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	2201      	movs	r2, #1
 800cf06:	409a      	lsls	r2, r3
 800cf08:	4b23      	ldr	r3, [pc, #140]	; (800cf98 <xTaskIncrementTick+0x15c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	4a22      	ldr	r2, [pc, #136]	; (800cf98 <xTaskIncrementTick+0x15c>)
 800cf10:	6013      	str	r3, [r2, #0]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf16:	4613      	mov	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4a1f      	ldr	r2, [pc, #124]	; (800cf9c <xTaskIncrementTick+0x160>)
 800cf20:	441a      	add	r2, r3
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	3304      	adds	r3, #4
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	f7fe fc6c 	bl	800b806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	4b1b      	ldr	r3, [pc, #108]	; (800cfa0 <xTaskIncrementTick+0x164>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d3b9      	bcc.n	800ceb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf40:	e7b6      	b.n	800ceb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf42:	4b17      	ldr	r3, [pc, #92]	; (800cfa0 <xTaskIncrementTick+0x164>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf48:	4914      	ldr	r1, [pc, #80]	; (800cf9c <xTaskIncrementTick+0x160>)
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	440b      	add	r3, r1
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d901      	bls.n	800cf5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf5e:	4b11      	ldr	r3, [pc, #68]	; (800cfa4 <xTaskIncrementTick+0x168>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d007      	beq.n	800cf76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	e004      	b.n	800cf76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf6c:	4b0e      	ldr	r3, [pc, #56]	; (800cfa8 <xTaskIncrementTick+0x16c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3301      	adds	r3, #1
 800cf72:	4a0d      	ldr	r2, [pc, #52]	; (800cfa8 <xTaskIncrementTick+0x16c>)
 800cf74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf76:	697b      	ldr	r3, [r7, #20]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20008fcc 	.word	0x20008fcc
 800cf84:	20008fa8 	.word	0x20008fa8
 800cf88:	20008f5c 	.word	0x20008f5c
 800cf8c:	20008f60 	.word	0x20008f60
 800cf90:	20008fbc 	.word	0x20008fbc
 800cf94:	20008fc4 	.word	0x20008fc4
 800cf98:	20008fac 	.word	0x20008fac
 800cf9c:	20008ea8 	.word	0x20008ea8
 800cfa0:	20008ea4 	.word	0x20008ea4
 800cfa4:	20008fb8 	.word	0x20008fb8
 800cfa8:	20008fb4 	.word	0x20008fb4

0800cfac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfb2:	4b39      	ldr	r3, [pc, #228]	; (800d098 <vTaskSwitchContext+0xec>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d003      	beq.n	800cfc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfba:	4b38      	ldr	r3, [pc, #224]	; (800d09c <vTaskSwitchContext+0xf0>)
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfc0:	e066      	b.n	800d090 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800cfc2:	4b36      	ldr	r3, [pc, #216]	; (800d09c <vTaskSwitchContext+0xf0>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cfc8:	4b35      	ldr	r3, [pc, #212]	; (800d0a0 <vTaskSwitchContext+0xf4>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	61fb      	str	r3, [r7, #28]
 800cfd0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cfd4:	61bb      	str	r3, [r7, #24]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69ba      	ldr	r2, [r7, #24]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d111      	bne.n	800d004 <vTaskSwitchContext+0x58>
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d10b      	bne.n	800d004 <vTaskSwitchContext+0x58>
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	3308      	adds	r3, #8
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d105      	bne.n	800d004 <vTaskSwitchContext+0x58>
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	330c      	adds	r3, #12
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	d008      	beq.n	800d016 <vTaskSwitchContext+0x6a>
 800d004:	4b26      	ldr	r3, [pc, #152]	; (800d0a0 <vTaskSwitchContext+0xf4>)
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <vTaskSwitchContext+0xf4>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3334      	adds	r3, #52	; 0x34
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7f3 fd5e 	bl	8000ad2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d016:	4b23      	ldr	r3, [pc, #140]	; (800d0a4 <vTaskSwitchContext+0xf8>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	fab3 f383 	clz	r3, r3
 800d022:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d024:	7afb      	ldrb	r3, [r7, #11]
 800d026:	f1c3 031f 	rsb	r3, r3, #31
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	491e      	ldr	r1, [pc, #120]	; (800d0a8 <vTaskSwitchContext+0xfc>)
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	4613      	mov	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	440b      	add	r3, r1
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <vTaskSwitchContext+0xaa>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	607b      	str	r3, [r7, #4]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <vTaskSwitchContext+0xa8>
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4a11      	ldr	r2, [pc, #68]	; (800d0a8 <vTaskSwitchContext+0xfc>)
 800d062:	4413      	add	r3, r2
 800d064:	613b      	str	r3, [r7, #16]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	605a      	str	r2, [r3, #4]
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	3308      	adds	r3, #8
 800d078:	429a      	cmp	r2, r3
 800d07a:	d104      	bne.n	800d086 <vTaskSwitchContext+0xda>
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	605a      	str	r2, [r3, #4]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <vTaskSwitchContext+0xf4>)
 800d08e:	6013      	str	r3, [r2, #0]
}
 800d090:	bf00      	nop
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20008fcc 	.word	0x20008fcc
 800d09c:	20008fb8 	.word	0x20008fb8
 800d0a0:	20008ea4 	.word	0x20008ea4
 800d0a4:	20008fac 	.word	0x20008fac
 800d0a8:	20008ea8 	.word	0x20008ea8

0800d0ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	60fb      	str	r3, [r7, #12]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0d2:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <vTaskPlaceOnEventList+0x44>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3318      	adds	r3, #24
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7fe fbb7 	bl	800b84e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	6838      	ldr	r0, [r7, #0]
 800d0e4:	f000 fa68 	bl	800d5b8 <prvAddCurrentTaskToDelayedList>
}
 800d0e8:	bf00      	nop
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20008ea4 	.word	0x20008ea4

0800d0f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10a      	bne.n	800d120 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	60fb      	str	r3, [r7, #12]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	3318      	adds	r3, #24
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe fbcb 	bl	800b8c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d12a:	4b1d      	ldr	r3, [pc, #116]	; (800d1a0 <xTaskRemoveFromEventList+0xac>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d11c      	bne.n	800d16c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe fbc2 	bl	800b8c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d140:	2201      	movs	r2, #1
 800d142:	409a      	lsls	r2, r3
 800d144:	4b17      	ldr	r3, [pc, #92]	; (800d1a4 <xTaskRemoveFromEventList+0xb0>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4313      	orrs	r3, r2
 800d14a:	4a16      	ldr	r2, [pc, #88]	; (800d1a4 <xTaskRemoveFromEventList+0xb0>)
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a13      	ldr	r2, [pc, #76]	; (800d1a8 <xTaskRemoveFromEventList+0xb4>)
 800d15c:	441a      	add	r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	3304      	adds	r3, #4
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe fb4e 	bl	800b806 <vListInsertEnd>
 800d16a:	e005      	b.n	800d178 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	3318      	adds	r3, #24
 800d170:	4619      	mov	r1, r3
 800d172:	480e      	ldr	r0, [pc, #56]	; (800d1ac <xTaskRemoveFromEventList+0xb8>)
 800d174:	f7fe fb47 	bl	800b806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	4b0c      	ldr	r3, [pc, #48]	; (800d1b0 <xTaskRemoveFromEventList+0xbc>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d182:	429a      	cmp	r2, r3
 800d184:	d905      	bls.n	800d192 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d186:	2301      	movs	r3, #1
 800d188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <xTaskRemoveFromEventList+0xc0>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	e001      	b.n	800d196 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d196:	697b      	ldr	r3, [r7, #20]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20008fcc 	.word	0x20008fcc
 800d1a4:	20008fac 	.word	0x20008fac
 800d1a8:	20008ea8 	.word	0x20008ea8
 800d1ac:	20008f64 	.word	0x20008f64
 800d1b0:	20008ea4 	.word	0x20008ea4
 800d1b4:	20008fb8 	.word	0x20008fb8

0800d1b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1c0:	4b06      	ldr	r3, [pc, #24]	; (800d1dc <vTaskInternalSetTimeOutState+0x24>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1c8:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <vTaskInternalSetTimeOutState+0x28>)
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	605a      	str	r2, [r3, #4]
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	20008fbc 	.word	0x20008fbc
 800d1e0:	20008fa8 	.word	0x20008fa8

0800d1e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10a      	bne.n	800d20a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	613b      	str	r3, [r7, #16]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10a      	bne.n	800d226 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	60fb      	str	r3, [r7, #12]
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d226:	f7fe fca5 	bl	800bb74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d22a:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <xTaskCheckForTimeOut+0xbc>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	69ba      	ldr	r2, [r7, #24]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d242:	d102      	bne.n	800d24a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d244:	2300      	movs	r3, #0
 800d246:	61fb      	str	r3, [r7, #28]
 800d248:	e023      	b.n	800d292 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	4b15      	ldr	r3, [pc, #84]	; (800d2a4 <xTaskCheckForTimeOut+0xc0>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	429a      	cmp	r2, r3
 800d254:	d007      	beq.n	800d266 <xTaskCheckForTimeOut+0x82>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d302      	bcc.n	800d266 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	61fb      	str	r3, [r7, #28]
 800d264:	e015      	b.n	800d292 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d20b      	bcs.n	800d288 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7ff ff9b 	bl	800d1b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d282:	2300      	movs	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
 800d286:	e004      	b.n	800d292 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d28e:	2301      	movs	r3, #1
 800d290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d292:	f7fe fc9f 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800d296:	69fb      	ldr	r3, [r7, #28]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3720      	adds	r7, #32
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20008fa8 	.word	0x20008fa8
 800d2a4:	20008fbc 	.word	0x20008fbc

0800d2a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2ac:	4b03      	ldr	r3, [pc, #12]	; (800d2bc <vTaskMissedYield+0x14>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	601a      	str	r2, [r3, #0]
}
 800d2b2:	bf00      	nop
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	20008fb8 	.word	0x20008fb8

0800d2c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2c8:	f000 f854 	bl	800d374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2cc:	4b07      	ldr	r3, [pc, #28]	; (800d2ec <prvIdleTask+0x2c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d907      	bls.n	800d2e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d2d4:	4b06      	ldr	r3, [pc, #24]	; (800d2f0 <prvIdleTask+0x30>)
 800d2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d2e4:	f7f3 fbee 	bl	8000ac4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d2e8:	e7ee      	b.n	800d2c8 <prvIdleTask+0x8>
 800d2ea:	bf00      	nop
 800d2ec:	20008ea8 	.word	0x20008ea8
 800d2f0:	e000ed04 	.word	0xe000ed04

0800d2f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	e00c      	b.n	800d31a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	4613      	mov	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4413      	add	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4a12      	ldr	r2, [pc, #72]	; (800d354 <prvInitialiseTaskLists+0x60>)
 800d30c:	4413      	add	r3, r2
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe fa4c 	bl	800b7ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3301      	adds	r3, #1
 800d318:	607b      	str	r3, [r7, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b06      	cmp	r3, #6
 800d31e:	d9ef      	bls.n	800d300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d320:	480d      	ldr	r0, [pc, #52]	; (800d358 <prvInitialiseTaskLists+0x64>)
 800d322:	f7fe fa43 	bl	800b7ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d326:	480d      	ldr	r0, [pc, #52]	; (800d35c <prvInitialiseTaskLists+0x68>)
 800d328:	f7fe fa40 	bl	800b7ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d32c:	480c      	ldr	r0, [pc, #48]	; (800d360 <prvInitialiseTaskLists+0x6c>)
 800d32e:	f7fe fa3d 	bl	800b7ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d332:	480c      	ldr	r0, [pc, #48]	; (800d364 <prvInitialiseTaskLists+0x70>)
 800d334:	f7fe fa3a 	bl	800b7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d338:	480b      	ldr	r0, [pc, #44]	; (800d368 <prvInitialiseTaskLists+0x74>)
 800d33a:	f7fe fa37 	bl	800b7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d33e:	4b0b      	ldr	r3, [pc, #44]	; (800d36c <prvInitialiseTaskLists+0x78>)
 800d340:	4a05      	ldr	r2, [pc, #20]	; (800d358 <prvInitialiseTaskLists+0x64>)
 800d342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d344:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <prvInitialiseTaskLists+0x7c>)
 800d346:	4a05      	ldr	r2, [pc, #20]	; (800d35c <prvInitialiseTaskLists+0x68>)
 800d348:	601a      	str	r2, [r3, #0]
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20008ea8 	.word	0x20008ea8
 800d358:	20008f34 	.word	0x20008f34
 800d35c:	20008f48 	.word	0x20008f48
 800d360:	20008f64 	.word	0x20008f64
 800d364:	20008f78 	.word	0x20008f78
 800d368:	20008f90 	.word	0x20008f90
 800d36c:	20008f5c 	.word	0x20008f5c
 800d370:	20008f60 	.word	0x20008f60

0800d374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d37a:	e019      	b.n	800d3b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d37c:	f7fe fbfa 	bl	800bb74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d380:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <prvCheckTasksWaitingTermination+0x50>)
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3304      	adds	r3, #4
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe fa97 	bl	800b8c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d392:	4b0d      	ldr	r3, [pc, #52]	; (800d3c8 <prvCheckTasksWaitingTermination+0x54>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	4a0b      	ldr	r2, [pc, #44]	; (800d3c8 <prvCheckTasksWaitingTermination+0x54>)
 800d39a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d39c:	4b0b      	ldr	r3, [pc, #44]	; (800d3cc <prvCheckTasksWaitingTermination+0x58>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	4a0a      	ldr	r2, [pc, #40]	; (800d3cc <prvCheckTasksWaitingTermination+0x58>)
 800d3a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3a6:	f7fe fc15 	bl	800bbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f810 	bl	800d3d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <prvCheckTasksWaitingTermination+0x58>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e1      	bne.n	800d37c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3b8:	bf00      	nop
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20008f78 	.word	0x20008f78
 800d3c8:	20008fa4 	.word	0x20008fa4
 800d3cc:	20008f8c 	.word	0x20008f8c

0800d3d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d108      	bne.n	800d3f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe f8c2 	bl	800b570 <vPortFree>
				vPortFree( pxTCB );
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7fe f8bf 	bl	800b570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d3f2:	e018      	b.n	800d426 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d103      	bne.n	800d406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7fe f8b6 	bl	800b570 <vPortFree>
	}
 800d404:	e00f      	b.n	800d426 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d00a      	beq.n	800d426 <prvDeleteTCB+0x56>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <prvDeleteTCB+0x54>
	}
 800d426:	bf00      	nop
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
	...

0800d430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d436:	4b0c      	ldr	r3, [pc, #48]	; (800d468 <prvResetNextTaskUnblockTime+0x38>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d104      	bne.n	800d44a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <prvResetNextTaskUnblockTime+0x3c>)
 800d442:	f04f 32ff 	mov.w	r2, #4294967295
 800d446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d448:	e008      	b.n	800d45c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <prvResetNextTaskUnblockTime+0x38>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	4a04      	ldr	r2, [pc, #16]	; (800d46c <prvResetNextTaskUnblockTime+0x3c>)
 800d45a:	6013      	str	r3, [r2, #0]
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	20008f5c 	.word	0x20008f5c
 800d46c:	20008fc4 	.word	0x20008fc4

0800d470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d476:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <xTaskGetSchedulerState+0x34>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d47e:	2301      	movs	r3, #1
 800d480:	607b      	str	r3, [r7, #4]
 800d482:	e008      	b.n	800d496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d484:	4b08      	ldr	r3, [pc, #32]	; (800d4a8 <xTaskGetSchedulerState+0x38>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d48c:	2302      	movs	r3, #2
 800d48e:	607b      	str	r3, [r7, #4]
 800d490:	e001      	b.n	800d496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d492:	2300      	movs	r3, #0
 800d494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d496:	687b      	ldr	r3, [r7, #4]
	}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20008fb0 	.word	0x20008fb0
 800d4a8:	20008fcc 	.word	0x20008fcc

0800d4ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d06e      	beq.n	800d5a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4c2:	4b3a      	ldr	r3, [pc, #232]	; (800d5ac <xTaskPriorityDisinherit+0x100>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d00a      	beq.n	800d4e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60fb      	str	r3, [r7, #12]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	60bb      	str	r3, [r7, #8]
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d504:	1e5a      	subs	r2, r3, #1
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d512:	429a      	cmp	r2, r3
 800d514:	d044      	beq.n	800d5a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d140      	bne.n	800d5a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fe f9cc 	bl	800b8c0 <uxListRemove>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d115      	bne.n	800d55a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d532:	491f      	ldr	r1, [pc, #124]	; (800d5b0 <xTaskPriorityDisinherit+0x104>)
 800d534:	4613      	mov	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10a      	bne.n	800d55a <xTaskPriorityDisinherit+0xae>
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d548:	2201      	movs	r2, #1
 800d54a:	fa02 f303 	lsl.w	r3, r2, r3
 800d54e:	43da      	mvns	r2, r3
 800d550:	4b18      	ldr	r3, [pc, #96]	; (800d5b4 <xTaskPriorityDisinherit+0x108>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4013      	ands	r3, r2
 800d556:	4a17      	ldr	r2, [pc, #92]	; (800d5b4 <xTaskPriorityDisinherit+0x108>)
 800d558:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d566:	f1c3 0207 	rsb	r2, r3, #7
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	2201      	movs	r2, #1
 800d574:	409a      	lsls	r2, r3
 800d576:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <xTaskPriorityDisinherit+0x108>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	4a0d      	ldr	r2, [pc, #52]	; (800d5b4 <xTaskPriorityDisinherit+0x108>)
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4a08      	ldr	r2, [pc, #32]	; (800d5b0 <xTaskPriorityDisinherit+0x104>)
 800d58e:	441a      	add	r2, r3
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	3304      	adds	r3, #4
 800d594:	4619      	mov	r1, r3
 800d596:	4610      	mov	r0, r2
 800d598:	f7fe f935 	bl	800b806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d59c:	2301      	movs	r3, #1
 800d59e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5a0:	697b      	ldr	r3, [r7, #20]
	}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20008ea4 	.word	0x20008ea4
 800d5b0:	20008ea8 	.word	0x20008ea8
 800d5b4:	20008fac 	.word	0x20008fac

0800d5b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5c2:	4b29      	ldr	r3, [pc, #164]	; (800d668 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fe f976 	bl	800b8c0 <uxListRemove>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10b      	bne.n	800d5f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d5da:	4b24      	ldr	r3, [pc, #144]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e6:	43da      	mvns	r2, r3
 800d5e8:	4b21      	ldr	r3, [pc, #132]	; (800d670 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	4a20      	ldr	r2, [pc, #128]	; (800d670 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d10a      	bne.n	800d610 <prvAddCurrentTaskToDelayedList+0x58>
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d007      	beq.n	800d610 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d600:	4b1a      	ldr	r3, [pc, #104]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3304      	adds	r3, #4
 800d606:	4619      	mov	r1, r3
 800d608:	481a      	ldr	r0, [pc, #104]	; (800d674 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d60a:	f7fe f8fc 	bl	800b806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d60e:	e026      	b.n	800d65e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4413      	add	r3, r2
 800d616:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d618:	4b14      	ldr	r3, [pc, #80]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	429a      	cmp	r2, r3
 800d626:	d209      	bcs.n	800d63c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d628:	4b13      	ldr	r3, [pc, #76]	; (800d678 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	4b0f      	ldr	r3, [pc, #60]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3304      	adds	r3, #4
 800d632:	4619      	mov	r1, r3
 800d634:	4610      	mov	r0, r2
 800d636:	f7fe f90a 	bl	800b84e <vListInsert>
}
 800d63a:	e010      	b.n	800d65e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d63c:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	4b0a      	ldr	r3, [pc, #40]	; (800d66c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fe f900 	bl	800b84e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d64e:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	429a      	cmp	r2, r3
 800d656:	d202      	bcs.n	800d65e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d658:	4a09      	ldr	r2, [pc, #36]	; (800d680 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6013      	str	r3, [r2, #0]
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20008fa8 	.word	0x20008fa8
 800d66c:	20008ea4 	.word	0x20008ea4
 800d670:	20008fac 	.word	0x20008fac
 800d674:	20008f90 	.word	0x20008f90
 800d678:	20008f60 	.word	0x20008f60
 800d67c:	20008f5c 	.word	0x20008f5c
 800d680:	20008fc4 	.word	0x20008fc4

0800d684 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b089      	sub	sp, #36	; 0x24
 800d688:	af04      	add	r7, sp, #16
 800d68a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d68c:	2301      	movs	r3, #1
 800d68e:	2202      	movs	r2, #2
 800d690:	2102      	movs	r1, #2
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fcb8 	bl	800e008 <USBH_FindInterface>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	2bff      	cmp	r3, #255	; 0xff
 800d6a0:	d002      	beq.n	800d6a8 <USBH_CDC_InterfaceInit+0x24>
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d901      	bls.n	800d6ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	e13d      	b.n	800d928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 fc8d 	bl	800dfd0 <USBH_SelectInterface>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e131      	b.n	800d928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d6ca:	2050      	movs	r0, #80	; 0x50
 800d6cc:	f002 fa4e 	bl	800fb6c <malloc>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e11f      	b.n	800d928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d6e8:	2250      	movs	r2, #80	; 0x50
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	68b8      	ldr	r0, [r7, #8]
 800d6ee:	f002 fa5b 	bl	800fba8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	211a      	movs	r1, #26
 800d6f8:	fb01 f303 	mul.w	r3, r1, r3
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b25b      	sxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	da15      	bge.n	800d736 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	211a      	movs	r1, #26
 800d710:	fb01 f303 	mul.w	r3, r1, r3
 800d714:	4413      	add	r3, r2
 800d716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d71a:	781a      	ldrb	r2, [r3, #0]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	211a      	movs	r1, #26
 800d726:	fb01 f303 	mul.w	r3, r1, r3
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d730:	881a      	ldrh	r2, [r3, #0]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	4619      	mov	r1, r3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f002 f988 	bl	800fa52 <USBH_AllocPipe>
 800d742:	4603      	mov	r3, r0
 800d744:	461a      	mov	r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	7819      	ldrb	r1, [r3, #0]
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	7858      	ldrb	r0, [r3, #1]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	8952      	ldrh	r2, [r2, #10]
 800d762:	9202      	str	r2, [sp, #8]
 800d764:	2203      	movs	r2, #3
 800d766:	9201      	str	r2, [sp, #4]
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	4623      	mov	r3, r4
 800d76c:	4602      	mov	r2, r0
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f002 f940 	bl	800f9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2200      	movs	r2, #0
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7f4 ff39 	bl	80025f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d782:	2300      	movs	r3, #0
 800d784:	2200      	movs	r2, #0
 800d786:	210a      	movs	r1, #10
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fc3d 	bl	800e008 <USBH_FindInterface>
 800d78e:	4603      	mov	r3, r0
 800d790:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	2bff      	cmp	r3, #255	; 0xff
 800d796:	d002      	beq.n	800d79e <USBH_CDC_InterfaceInit+0x11a>
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d901      	bls.n	800d7a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d79e:	2302      	movs	r3, #2
 800d7a0:	e0c2      	b.n	800d928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	211a      	movs	r1, #26
 800d7a8:	fb01 f303 	mul.w	r3, r1, r3
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	b25b      	sxtb	r3, r3
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	da16      	bge.n	800d7e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	211a      	movs	r1, #26
 800d7c0:	fb01 f303 	mul.w	r3, r1, r3
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7ca:	781a      	ldrb	r2, [r3, #0]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	211a      	movs	r1, #26
 800d7d6:	fb01 f303 	mul.w	r3, r1, r3
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d7e0:	881a      	ldrh	r2, [r3, #0]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	835a      	strh	r2, [r3, #26]
 800d7e6:	e015      	b.n	800d814 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	211a      	movs	r1, #26
 800d7ee:	fb01 f303 	mul.w	r3, r1, r3
 800d7f2:	4413      	add	r3, r2
 800d7f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7f8:	781a      	ldrb	r2, [r3, #0]
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	211a      	movs	r1, #26
 800d804:	fb01 f303 	mul.w	r3, r1, r3
 800d808:	4413      	add	r3, r2
 800d80a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d80e:	881a      	ldrh	r2, [r3, #0]
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	211a      	movs	r1, #26
 800d81a:	fb01 f303 	mul.w	r3, r1, r3
 800d81e:	4413      	add	r3, r2
 800d820:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	b25b      	sxtb	r3, r3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	da16      	bge.n	800d85a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	211a      	movs	r1, #26
 800d832:	fb01 f303 	mul.w	r3, r1, r3
 800d836:	4413      	add	r3, r2
 800d838:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d83c:	781a      	ldrb	r2, [r3, #0]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d842:	7bfb      	ldrb	r3, [r7, #15]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	211a      	movs	r1, #26
 800d848:	fb01 f303 	mul.w	r3, r1, r3
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d852:	881a      	ldrh	r2, [r3, #0]
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	835a      	strh	r2, [r3, #26]
 800d858:	e015      	b.n	800d886 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	211a      	movs	r1, #26
 800d860:	fb01 f303 	mul.w	r3, r1, r3
 800d864:	4413      	add	r3, r2
 800d866:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	211a      	movs	r1, #26
 800d876:	fb01 f303 	mul.w	r3, r1, r3
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d880:	881a      	ldrh	r2, [r3, #0]
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	7b9b      	ldrb	r3, [r3, #14]
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f002 f8e0 	bl	800fa52 <USBH_AllocPipe>
 800d892:	4603      	mov	r3, r0
 800d894:	461a      	mov	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	7bdb      	ldrb	r3, [r3, #15]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f002 f8d6 	bl	800fa52 <USBH_AllocPipe>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	7b59      	ldrb	r1, [r3, #13]
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	7b98      	ldrb	r0, [r3, #14]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	8b12      	ldrh	r2, [r2, #24]
 800d8c6:	9202      	str	r2, [sp, #8]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	9201      	str	r2, [sp, #4]
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	4623      	mov	r3, r4
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f002 f88e 	bl	800f9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	7b19      	ldrb	r1, [r3, #12]
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	7bd8      	ldrb	r0, [r3, #15]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	8b52      	ldrh	r2, [r2, #26]
 800d8f0:	9202      	str	r2, [sp, #8]
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	9201      	str	r2, [sp, #4]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f002 f879 	bl	800f9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	7b5b      	ldrb	r3, [r3, #13]
 800d90e:	2200      	movs	r2, #0
 800d910:	4619      	mov	r1, r3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7f4 fe6e 	bl	80025f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	7b1b      	ldrb	r3, [r3, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7f4 fe67 	bl	80025f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd90      	pop	{r4, r7, pc}

0800d930 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00e      	beq.n	800d968 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f002 f86e 	bl	800fa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f002 f899 	bl	800fa94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7b1b      	ldrb	r3, [r3, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	7b1b      	ldrb	r3, [r3, #12]
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f002 f85b 	bl	800fa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	7b1b      	ldrb	r3, [r3, #12]
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f002 f886 	bl	800fa94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	7b5b      	ldrb	r3, [r3, #13]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00e      	beq.n	800d9b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	7b5b      	ldrb	r3, [r3, #13]
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f002 f848 	bl	800fa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	7b5b      	ldrb	r3, [r3, #13]
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f002 f873 	bl	800fa94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9ba:	69db      	ldr	r3, [r3, #28]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00b      	beq.n	800d9d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9c6:	69db      	ldr	r3, [r3, #28]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 f8d7 	bl	800fb7c <free>
    phost->pActiveClass->pData = 0U;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	3340      	adds	r3, #64	; 0x40
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f8b1 	bl	800db62 <GetLineCoding>
 800da00:	4603      	mov	r3, r0
 800da02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d105      	bne.n	800da16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da10:	2102      	movs	r1, #2
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800da16:	7afb      	ldrb	r3, [r7, #11]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800da28:	2301      	movs	r3, #1
 800da2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800da40:	2b04      	cmp	r3, #4
 800da42:	d877      	bhi.n	800db34 <USBH_CDC_Process+0x114>
 800da44:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <USBH_CDC_Process+0x2c>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800da61 	.word	0x0800da61
 800da50:	0800da67 	.word	0x0800da67
 800da54:	0800da97 	.word	0x0800da97
 800da58:	0800db0b 	.word	0x0800db0b
 800da5c:	0800db19 	.word	0x0800db19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]
      break;
 800da64:	e06d      	b.n	800db42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f897 	bl	800dba0 <SetLineCoding>
 800da72:	4603      	mov	r3, r0
 800da74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da76:	7bbb      	ldrb	r3, [r7, #14]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d104      	bne.n	800da86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2202      	movs	r2, #2
 800da80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800da84:	e058      	b.n	800db38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d055      	beq.n	800db38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2204      	movs	r2, #4
 800da90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800da94:	e050      	b.n	800db38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	3340      	adds	r3, #64	; 0x40
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f860 	bl	800db62 <GetLineCoding>
 800daa2:	4603      	mov	r3, r0
 800daa4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d126      	bne.n	800dafa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dabe:	791b      	ldrb	r3, [r3, #4]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d13b      	bne.n	800db3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dace:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d133      	bne.n	800db3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dade:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d12b      	bne.n	800db3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800daee:	429a      	cmp	r2, r3
 800daf0:	d124      	bne.n	800db3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f982 	bl	800ddfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800daf8:	e020      	b.n	800db3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d01d      	beq.n	800db3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2204      	movs	r2, #4
 800db04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800db08:	e018      	b.n	800db3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 f867 	bl	800dbde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 f8f6 	bl	800dd02 <CDC_ProcessReception>
      break;
 800db16:	e014      	b.n	800db42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800db18:	2100      	movs	r1, #0
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f001 f95b 	bl	800edd6 <USBH_ClrFeature>
 800db20:	4603      	mov	r3, r0
 800db22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d10a      	bne.n	800db40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800db32:	e005      	b.n	800db40 <USBH_CDC_Process+0x120>

    default:
      break;
 800db34:	bf00      	nop
 800db36:	e004      	b.n	800db42 <USBH_CDC_Process+0x122>
      break;
 800db38:	bf00      	nop
 800db3a:	e002      	b.n	800db42 <USBH_CDC_Process+0x122>
      break;
 800db3c:	bf00      	nop
 800db3e:	e000      	b.n	800db42 <USBH_CDC_Process+0x122>
      break;
 800db40:	bf00      	nop

  }

  return status;
 800db42:	7bfb      	ldrb	r3, [r7, #15]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b082      	sub	sp, #8
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	22a1      	movs	r2, #161	; 0xa1
 800db70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2221      	movs	r2, #33	; 0x21
 800db76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2207      	movs	r2, #7
 800db88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	2207      	movs	r2, #7
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f001 fbed 	bl	800f370 <USBH_CtlReq>
 800db96:	4603      	mov	r3, r0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2221      	movs	r2, #33	; 0x21
 800dbae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2207      	movs	r2, #7
 800dbc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2207      	movs	r2, #7
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 fbce 	bl	800f370 <USBH_CtlReq>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b086      	sub	sp, #24
 800dbe2:	af02      	add	r7, sp, #8
 800dbe4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbec:	69db      	ldr	r3, [r3, #28]
 800dbee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d002      	beq.n	800dc04 <CDC_ProcessTransmission+0x26>
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d023      	beq.n	800dc4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800dc02:	e07a      	b.n	800dcfa <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	8b12      	ldrh	r2, [r2, #24]
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d90b      	bls.n	800dc28 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	69d9      	ldr	r1, [r3, #28]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	8b1a      	ldrh	r2, [r3, #24]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	7b5b      	ldrb	r3, [r3, #13]
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	9000      	str	r0, [sp, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fea4 	bl	800f96e <USBH_BulkSendData>
 800dc26:	e00b      	b.n	800dc40 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	7b5b      	ldrb	r3, [r3, #13]
 800dc36:	2001      	movs	r0, #1
 800dc38:	9000      	str	r0, [sp, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f001 fe97 	bl	800f96e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dc48:	e057      	b.n	800dcfa <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	7b5b      	ldrb	r3, [r3, #13]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7f4 fca5 	bl	80025a0 <USBH_LL_GetURBState>
 800dc56:	4603      	mov	r3, r0
 800dc58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800dc5a:	7afb      	ldrb	r3, [r7, #11]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d136      	bne.n	800dcce <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	8b12      	ldrh	r2, [r2, #24]
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d90e      	bls.n	800dc8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	8b12      	ldrh	r2, [r2, #24]
 800dc74:	1a9a      	subs	r2, r3, r2
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	69db      	ldr	r3, [r3, #28]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	8b12      	ldrh	r2, [r2, #24]
 800dc82:	441a      	add	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	61da      	str	r2, [r3, #28]
 800dc88:	e002      	b.n	800dc90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dca0:	e006      	b.n	800dcb0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f892 	bl	800ddd4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2204      	movs	r2, #4
 800dcb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	f7fd face 	bl	800b268 <osMessagePut>
      break;
 800dccc:	e014      	b.n	800dcf8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800dcce:	7afb      	ldrb	r3, [r7, #11]
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d111      	bne.n	800dcf8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2204      	movs	r2, #4
 800dce0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	f7fd fab8 	bl	800b268 <osMessagePut>
      break;
 800dcf8:	bf00      	nop
  }
}
 800dcfa:	bf00      	nop
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b086      	sub	sp, #24
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d002      	beq.n	800dd28 <CDC_ProcessReception+0x26>
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d00e      	beq.n	800dd44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dd26:	e051      	b.n	800ddcc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	6a19      	ldr	r1, [r3, #32]
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	8b5a      	ldrh	r2, [r3, #26]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	7b1b      	ldrb	r3, [r3, #12]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f001 fe3f 	bl	800f9b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dd42:	e043      	b.n	800ddcc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	7b1b      	ldrb	r3, [r3, #12]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7f4 fc28 	bl	80025a0 <USBH_LL_GetURBState>
 800dd50:	4603      	mov	r3, r0
 800dd52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dd54:	7cfb      	ldrb	r3, [r7, #19]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d137      	bne.n	800ddca <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	7b1b      	ldrb	r3, [r3, #12]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7f4 fb8b 	bl	800247c <USBH_LL_GetLastXferSize>
 800dd66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d016      	beq.n	800dda0 <CDC_ProcessReception+0x9e>
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	8b5b      	ldrh	r3, [r3, #26]
 800dd76:	461a      	mov	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d910      	bls.n	800dda0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	1ad2      	subs	r2, r2, r3
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	6a1a      	ldr	r2, [r3, #32]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	441a      	add	r2, r3
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2203      	movs	r2, #3
 800dd9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dd9e:	e006      	b.n	800ddae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f81d 	bl	800dde8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2204      	movs	r2, #4
 800ddb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f7fd fa4f 	bl	800b268 <osMessagePut>
      break;
 800ddca:	bf00      	nop
  }
}
 800ddcc:	bf00      	nop
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800de10:	b5b0      	push	{r4, r5, r7, lr}
 800de12:	b090      	sub	sp, #64	; 0x40
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	4613      	mov	r3, r2
 800de1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800de24:	2302      	movs	r3, #2
 800de26:	e04d      	b.n	800dec4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	79fa      	ldrb	r2, [r7, #7]
 800de2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2200      	movs	r2, #0
 800de34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 f847 	bl	800ded4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800de74:	4b15      	ldr	r3, [pc, #84]	; (800decc <USBH_Init+0xbc>)
 800de76:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800de7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800de80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de84:	2100      	movs	r1, #0
 800de86:	4618      	mov	r0, r3
 800de88:	f7fd f9c6 	bl	800b218 <osMessageCreate>
 800de8c:	4602      	mov	r2, r0
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800de94:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <USBH_Init+0xc0>)
 800de96:	f107 0414 	add.w	r4, r7, #20
 800de9a:	461d      	mov	r5, r3
 800de9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dea0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800dea8:	f107 0314 	add.w	r3, r7, #20
 800deac:	68f9      	ldr	r1, [r7, #12]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fd f952 	bl	800b158 <osThreadCreate>
 800deb4:	4602      	mov	r2, r0
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f7f4 fa29 	bl	8002314 <USBH_LL_Init>

  return USBH_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3740      	adds	r7, #64	; 0x40
 800dec8:	46bd      	mov	sp, r7
 800deca:	bdb0      	pop	{r4, r5, r7, pc}
 800decc:	0800fe1c 	.word	0x0800fe1c
 800ded0:	0800fe2c 	.word	0x0800fe2c

0800ded4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dedc:	2300      	movs	r3, #0
 800dede:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dee0:	2300      	movs	r3, #0
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e009      	b.n	800defa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	33e0      	adds	r3, #224	; 0xe0
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	2200      	movs	r2, #0
 800def2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b0f      	cmp	r3, #15
 800defe:	d9f2      	bls.n	800dee6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	e009      	b.n	800df1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800df10:	2200      	movs	r2, #0
 800df12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3301      	adds	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df20:	d3f1      	bcc.n	800df06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2240      	movs	r2, #64	; 0x40
 800df46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d016      	beq.n	800dfbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10e      	bne.n	800dfb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dfa0:	1c59      	adds	r1, r3, #1
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	33de      	adds	r3, #222	; 0xde
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	73fb      	strb	r3, [r7, #15]
 800dfb6:	e004      	b.n	800dfc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800dfb8:	2302      	movs	r3, #2
 800dfba:	73fb      	strb	r3, [r7, #15]
 800dfbc:	e001      	b.n	800dfc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800dfe6:	78fa      	ldrb	r2, [r7, #3]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d204      	bcs.n	800dff6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	78fa      	ldrb	r2, [r7, #3]
 800dff0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800dff4:	e001      	b.n	800dffa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dff6:	2302      	movs	r3, #2
 800dff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	4608      	mov	r0, r1
 800e012:	4611      	mov	r1, r2
 800e014:	461a      	mov	r2, r3
 800e016:	4603      	mov	r3, r0
 800e018:	70fb      	strb	r3, [r7, #3]
 800e01a:	460b      	mov	r3, r1
 800e01c:	70bb      	strb	r3, [r7, #2]
 800e01e:	4613      	mov	r3, r2
 800e020:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e022:	2300      	movs	r3, #0
 800e024:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e026:	2300      	movs	r3, #0
 800e028:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e030:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e032:	e025      	b.n	800e080 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	221a      	movs	r2, #26
 800e038:	fb02 f303 	mul.w	r3, r2, r3
 800e03c:	3308      	adds	r3, #8
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	4413      	add	r3, r2
 800e042:	3302      	adds	r3, #2
 800e044:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	795b      	ldrb	r3, [r3, #5]
 800e04a:	78fa      	ldrb	r2, [r7, #3]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d002      	beq.n	800e056 <USBH_FindInterface+0x4e>
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	2bff      	cmp	r3, #255	; 0xff
 800e054:	d111      	bne.n	800e07a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e05a:	78ba      	ldrb	r2, [r7, #2]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d002      	beq.n	800e066 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e060:	78bb      	ldrb	r3, [r7, #2]
 800e062:	2bff      	cmp	r3, #255	; 0xff
 800e064:	d109      	bne.n	800e07a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e06a:	787a      	ldrb	r2, [r7, #1]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d002      	beq.n	800e076 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e070:	787b      	ldrb	r3, [r7, #1]
 800e072:	2bff      	cmp	r3, #255	; 0xff
 800e074:	d101      	bne.n	800e07a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	e006      	b.n	800e088 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	3301      	adds	r3, #1
 800e07e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d9d6      	bls.n	800e034 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e086:	23ff      	movs	r3, #255	; 0xff
}
 800e088:	4618      	mov	r0, r3
 800e08a:	371c      	adds	r7, #28
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7f4 f975 	bl	800238c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7f4 fa8e 	bl	80025c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af04      	add	r7, sp, #16
 800e0ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e0bc:	2302      	movs	r3, #2
 800e0be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d102      	bne.n	800e0d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2203      	movs	r2, #3
 800e0d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b0b      	cmp	r3, #11
 800e0de:	f200 8247 	bhi.w	800e570 <USBH_Process+0x4bc>
 800e0e2:	a201      	add	r2, pc, #4	; (adr r2, 800e0e8 <USBH_Process+0x34>)
 800e0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e8:	0800e119 	.word	0x0800e119
 800e0ec:	0800e167 	.word	0x0800e167
 800e0f0:	0800e1eb 	.word	0x0800e1eb
 800e0f4:	0800e4ef 	.word	0x0800e4ef
 800e0f8:	0800e571 	.word	0x0800e571
 800e0fc:	0800e2ab 	.word	0x0800e2ab
 800e100:	0800e479 	.word	0x0800e479
 800e104:	0800e2fd 	.word	0x0800e2fd
 800e108:	0800e339 	.word	0x0800e339
 800e10c:	0800e373 	.word	0x0800e373
 800e110:	0800e3d1 	.word	0x0800e3d1
 800e114:	0800e4d7 	.word	0x0800e4d7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 8227 	beq.w	800e574 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e12c:	20c8      	movs	r0, #200	; 0xc8
 800e12e:	f7f4 fa91 	bl	8002654 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7f4 f987 	bl	8002446 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e15c:	2200      	movs	r2, #0
 800e15e:	4619      	mov	r1, r3
 800e160:	f7fd f882 	bl	800b268 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e164:	e206      	b.n	800e574 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d107      	bne.n	800e180 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	e025      	b.n	800e1cc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e18a:	d914      	bls.n	800e1b6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e192:	3301      	adds	r3, #1
 800e194:	b2da      	uxtb	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e1a2:	2b03      	cmp	r3, #3
 800e1a4:	d903      	bls.n	800e1ae <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	220d      	movs	r2, #13
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	e00e      	b.n	800e1cc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	701a      	strb	r2, [r3, #0]
 800e1b4:	e00a      	b.n	800e1cc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e1bc:	f103 020a 	add.w	r2, r3, #10
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e1c6:	200a      	movs	r0, #10
 800e1c8:	f7f4 fa44 	bl	8002654 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	f7fd f840 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e1e8:	e1cb      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d005      	beq.n	800e200 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1fa:	2104      	movs	r1, #4
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e200:	2064      	movs	r0, #100	; 0x64
 800e202:	f7f4 fa27 	bl	8002654 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7f4 f8f6 	bl	80023f8 <USBH_LL_GetSpeed>
 800e20c:	4603      	mov	r3, r0
 800e20e:	461a      	mov	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2205      	movs	r2, #5
 800e21a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e21c:	2100      	movs	r1, #0
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f001 fc17 	bl	800fa52 <USBH_AllocPipe>
 800e224:	4603      	mov	r3, r0
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e22c:	2180      	movs	r1, #128	; 0x80
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f001 fc0f 	bl	800fa52 <USBH_AllocPipe>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7919      	ldrb	r1, [r3, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e250:	b292      	uxth	r2, r2
 800e252:	9202      	str	r2, [sp, #8]
 800e254:	2200      	movs	r2, #0
 800e256:	9201      	str	r2, [sp, #4]
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	4603      	mov	r3, r0
 800e25c:	2280      	movs	r2, #128	; 0x80
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 fbc8 	bl	800f9f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7959      	ldrb	r1, [r3, #5]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e278:	b292      	uxth	r2, r2
 800e27a:	9202      	str	r2, [sp, #8]
 800e27c:	2200      	movs	r2, #0
 800e27e:	9201      	str	r2, [sp, #4]
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	4603      	mov	r3, r0
 800e284:	2200      	movs	r2, #0
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f001 fbb4 	bl	800f9f4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	f7fc ffe0 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e2a8:	e16b      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f96e 	bl	800e58c <USBH_HandleEnum>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e2b4:	7bbb      	ldrb	r3, [r7, #14]
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f040 815d 	bne.w	800e578 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d103      	bne.n	800e2d8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2208      	movs	r2, #8
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	e002      	b.n	800e2de <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2207      	movs	r2, #7
 800e2dc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2205      	movs	r2, #5
 800e2e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7fc ffb7 	bl	800b268 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e2fa:	e13d      	b.n	800e578 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 813a 	beq.w	800e57c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e30e:	2101      	movs	r1, #1
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2208      	movs	r2, #8
 800e318:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2205      	movs	r2, #5
 800e31e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e32e:	2200      	movs	r2, #0
 800e330:	4619      	mov	r1, r3
 800e332:	f7fc ff99 	bl	800b268 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e336:	e121      	b.n	800e57c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e33e:	b29b      	uxth	r3, r3
 800e340:	4619      	mov	r1, r3
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 fd00 	bl	800ed48 <USBH_SetCfg>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d102      	bne.n	800e354 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2209      	movs	r2, #9
 800e352:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e368:	2200      	movs	r2, #0
 800e36a:	4619      	mov	r1, r3
 800e36c:	f7fc ff7c 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e370:	e107      	b.n	800e582 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e378:	f003 0320 	and.w	r3, r3, #32
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d015      	beq.n	800e3ac <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e380:	2101      	movs	r1, #1
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fd03 	bl	800ed8e <USBH_SetFeature>
 800e388:	4603      	mov	r3, r0
 800e38a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d103      	bne.n	800e39c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	220a      	movs	r2, #10
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	e00a      	b.n	800e3b2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d106      	bne.n	800e3b2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	220a      	movs	r2, #10
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	e002      	b.n	800e3b2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	220a      	movs	r2, #10
 800e3b0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7fc ff4d 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e3ce:	e0d8      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d03f      	beq.n	800e45a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]
 800e3e6:	e016      	b.n	800e416 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e3e8:	7bfa      	ldrb	r2, [r7, #15]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	32de      	adds	r2, #222	; 0xde
 800e3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f2:	791a      	ldrb	r2, [r3, #4]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d108      	bne.n	800e410 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e3fe:	7bfa      	ldrb	r2, [r7, #15]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	32de      	adds	r2, #222	; 0xde
 800e404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e40e:	e005      	b.n	800e41c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	3301      	adds	r3, #1
 800e414:	73fb      	strb	r3, [r7, #15]
 800e416:	7bfb      	ldrb	r3, [r7, #15]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d0e5      	beq.n	800e3e8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e422:	2b00      	cmp	r3, #0
 800e424:	d016      	beq.n	800e454 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	4798      	blx	r3
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d109      	bne.n	800e44c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2206      	movs	r2, #6
 800e43c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e444:	2103      	movs	r1, #3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	4798      	blx	r3
 800e44a:	e006      	b.n	800e45a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	220d      	movs	r2, #13
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	e002      	b.n	800e45a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	220d      	movs	r2, #13
 800e458:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2205      	movs	r2, #5
 800e45e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e46e:	2200      	movs	r2, #0
 800e470:	4619      	mov	r1, r3
 800e472:	f7fc fef9 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e476:	e084      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d017      	beq.n	800e4b2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	4798      	blx	r3
 800e48e:	4603      	mov	r3, r0
 800e490:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d103      	bne.n	800e4a2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	220b      	movs	r2, #11
 800e49e:	701a      	strb	r2, [r3, #0]
 800e4a0:	e00a      	b.n	800e4b8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800e4a2:	7bbb      	ldrb	r3, [r7, #14]
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d106      	bne.n	800e4b8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	220d      	movs	r2, #13
 800e4ae:	701a      	strb	r2, [r3, #0]
 800e4b0:	e002      	b.n	800e4b8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	220d      	movs	r2, #13
 800e4b6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2205      	movs	r2, #5
 800e4bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	f7fc feca 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e4d4:	e055      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d04f      	beq.n	800e580 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	4798      	blx	r3
      }
      break;
 800e4ec:	e048      	b.n	800e580 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff fcec 	bl	800ded4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e502:	2b00      	cmp	r3, #0
 800e504:	d009      	beq.n	800e51a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e52a:	2105      	movs	r1, #5
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d107      	bne.n	800e54c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff fda5 	bl	800e094 <USBH_Start>
 800e54a:	e002      	b.n	800e552 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7f3 ff1d 	bl	800238c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e566:	2200      	movs	r2, #0
 800e568:	4619      	mov	r1, r3
 800e56a:	f7fc fe7d 	bl	800b268 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e56e:	e008      	b.n	800e582 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800e570:	bf00      	nop
 800e572:	e006      	b.n	800e582 <USBH_Process+0x4ce>
      break;
 800e574:	bf00      	nop
 800e576:	e004      	b.n	800e582 <USBH_Process+0x4ce>
      break;
 800e578:	bf00      	nop
 800e57a:	e002      	b.n	800e582 <USBH_Process+0x4ce>
    break;
 800e57c:	bf00      	nop
 800e57e:	e000      	b.n	800e582 <USBH_Process+0x4ce>
      break;
 800e580:	bf00      	nop
  }
  return USBH_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af04      	add	r7, sp, #16
 800e592:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e594:	2301      	movs	r3, #1
 800e596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e598:	2301      	movs	r3, #1
 800e59a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	2b07      	cmp	r3, #7
 800e5a2:	f200 8208 	bhi.w	800e9b6 <USBH_HandleEnum+0x42a>
 800e5a6:	a201      	add	r2, pc, #4	; (adr r2, 800e5ac <USBH_HandleEnum+0x20>)
 800e5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ac:	0800e5cd 	.word	0x0800e5cd
 800e5b0:	0800e68b 	.word	0x0800e68b
 800e5b4:	0800e6f5 	.word	0x0800e6f5
 800e5b8:	0800e783 	.word	0x0800e783
 800e5bc:	0800e7ed 	.word	0x0800e7ed
 800e5c0:	0800e85d 	.word	0x0800e85d
 800e5c4:	0800e8f9 	.word	0x0800e8f9
 800e5c8:	0800e977 	.word	0x0800e977
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e5cc:	2108      	movs	r1, #8
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 faea 	bl	800eba8 <USBH_Get_DevDesc>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5d8:	7bbb      	ldrb	r3, [r7, #14]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d130      	bne.n	800e640 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	7919      	ldrb	r1, [r3, #4]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e602:	b292      	uxth	r2, r2
 800e604:	9202      	str	r2, [sp, #8]
 800e606:	2200      	movs	r2, #0
 800e608:	9201      	str	r2, [sp, #4]
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	4603      	mov	r3, r0
 800e60e:	2280      	movs	r2, #128	; 0x80
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f001 f9ef 	bl	800f9f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7959      	ldrb	r1, [r3, #5]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e62a:	b292      	uxth	r2, r2
 800e62c:	9202      	str	r2, [sp, #8]
 800e62e:	2200      	movs	r2, #0
 800e630:	9201      	str	r2, [sp, #4]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	4603      	mov	r3, r0
 800e636:	2200      	movs	r2, #0
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f001 f9db 	bl	800f9f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e63e:	e1bc      	b.n	800e9ba <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e640:	7bbb      	ldrb	r3, [r7, #14]
 800e642:	2b03      	cmp	r3, #3
 800e644:	f040 81b9 	bne.w	800e9ba <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e64e:	3301      	adds	r3, #1
 800e650:	b2da      	uxtb	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d903      	bls.n	800e66a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	220d      	movs	r2, #13
 800e666:	701a      	strb	r2, [r3, #0]
      break;
 800e668:	e1a7      	b.n	800e9ba <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	795b      	ldrb	r3, [r3, #5]
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f001 fa0f 	bl	800fa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	791b      	ldrb	r3, [r3, #4]
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f001 fa09 	bl	800fa94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	701a      	strb	r2, [r3, #0]
      break;
 800e688:	e197      	b.n	800e9ba <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e68a:	2112      	movs	r1, #18
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fa8b 	bl	800eba8 <USBH_Get_DevDesc>
 800e692:	4603      	mov	r3, r0
 800e694:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e696:	7bbb      	ldrb	r3, [r7, #14]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d103      	bne.n	800e6a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2202      	movs	r2, #2
 800e6a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e6a2:	e18c      	b.n	800e9be <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6a4:	7bbb      	ldrb	r3, [r7, #14]
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	f040 8189 	bne.w	800e9be <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d903      	bls.n	800e6ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	220d      	movs	r2, #13
 800e6ca:	701a      	strb	r2, [r3, #0]
      break;
 800e6cc:	e177      	b.n	800e9be <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	795b      	ldrb	r3, [r3, #5]
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f001 f9dd 	bl	800fa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	791b      	ldrb	r3, [r3, #4]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 f9d7 	bl	800fa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	701a      	strb	r2, [r3, #0]
      break;
 800e6f2:	e164      	b.n	800e9be <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fb02 	bl	800ed00 <USBH_SetAddress>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e700:	7bbb      	ldrb	r3, [r7, #14]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d132      	bne.n	800e76c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e706:	2002      	movs	r0, #2
 800e708:	f7f3 ffa4 	bl	8002654 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2203      	movs	r2, #3
 800e718:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7919      	ldrb	r1, [r3, #4]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e72e:	b292      	uxth	r2, r2
 800e730:	9202      	str	r2, [sp, #8]
 800e732:	2200      	movs	r2, #0
 800e734:	9201      	str	r2, [sp, #4]
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4603      	mov	r3, r0
 800e73a:	2280      	movs	r2, #128	; 0x80
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 f959 	bl	800f9f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7959      	ldrb	r1, [r3, #5]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e756:	b292      	uxth	r2, r2
 800e758:	9202      	str	r2, [sp, #8]
 800e75a:	2200      	movs	r2, #0
 800e75c:	9201      	str	r2, [sp, #4]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4603      	mov	r3, r0
 800e762:	2200      	movs	r2, #0
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f001 f945 	bl	800f9f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e76a:	e12a      	b.n	800e9c2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
 800e76e:	2b03      	cmp	r3, #3
 800e770:	f040 8127 	bne.w	800e9c2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	220d      	movs	r2, #13
 800e778:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	705a      	strb	r2, [r3, #1]
      break;
 800e780:	e11f      	b.n	800e9c2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e782:	2109      	movs	r1, #9
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fa37 	bl	800ebf8 <USBH_Get_CfgDesc>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e78e:	7bbb      	ldrb	r3, [r7, #14]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d103      	bne.n	800e79c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2204      	movs	r2, #4
 800e798:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e79a:	e114      	b.n	800e9c6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	f040 8111 	bne.w	800e9c6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d903      	bls.n	800e7c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	220d      	movs	r2, #13
 800e7c2:	701a      	strb	r2, [r3, #0]
      break;
 800e7c4:	e0ff      	b.n	800e9c6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	795b      	ldrb	r3, [r3, #5]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f001 f961 	bl	800fa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	791b      	ldrb	r3, [r3, #4]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f001 f95b 	bl	800fa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	701a      	strb	r2, [r3, #0]
      break;
 800e7ea:	e0ec      	b.n	800e9c6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 f9ff 	bl	800ebf8 <USBH_Get_CfgDesc>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d103      	bne.n	800e80c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2205      	movs	r2, #5
 800e808:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e80a:	e0de      	b.n	800e9ca <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e80c:	7bbb      	ldrb	r3, [r7, #14]
 800e80e:	2b03      	cmp	r3, #3
 800e810:	f040 80db 	bne.w	800e9ca <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e81a:	3301      	adds	r3, #1
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	d903      	bls.n	800e836 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	220d      	movs	r2, #13
 800e832:	701a      	strb	r2, [r3, #0]
      break;
 800e834:	e0c9      	b.n	800e9ca <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	795b      	ldrb	r3, [r3, #5]
 800e83a:	4619      	mov	r1, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f001 f929 	bl	800fa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	791b      	ldrb	r3, [r3, #4]
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f001 f923 	bl	800fa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	701a      	strb	r2, [r3, #0]
      break;
 800e85a:	e0b6      	b.n	800e9ca <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e862:	2b00      	cmp	r3, #0
 800e864:	d036      	beq.n	800e8d4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e872:	23ff      	movs	r3, #255	; 0xff
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f9e3 	bl	800ec40 <USBH_Get_StringDesc>
 800e87a:	4603      	mov	r3, r0
 800e87c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e87e:	7bbb      	ldrb	r3, [r7, #14]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d111      	bne.n	800e8a8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2206      	movs	r2, #6
 800e888:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2205      	movs	r2, #5
 800e88e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e89e:	2200      	movs	r2, #0
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f7fc fce1 	bl	800b268 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e8a6:	e092      	b.n	800e9ce <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8a8:	7bbb      	ldrb	r3, [r7, #14]
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	f040 808f 	bne.w	800e9ce <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2206      	movs	r2, #6
 800e8b4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2205      	movs	r2, #5
 800e8ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	f7fc fccb 	bl	800b268 <osMessagePut>
      break;
 800e8d2:	e07c      	b.n	800e9ce <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2206      	movs	r2, #6
 800e8d8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2205      	movs	r2, #5
 800e8de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	f7fc fcb9 	bl	800b268 <osMessagePut>
      break;
 800e8f6:	e06a      	b.n	800e9ce <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d027      	beq.n	800e952 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e90e:	23ff      	movs	r3, #255	; 0xff
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f995 	bl	800ec40 <USBH_Get_StringDesc>
 800e916:	4603      	mov	r3, r0
 800e918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e91a:	7bbb      	ldrb	r3, [r7, #14]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d103      	bne.n	800e928 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2207      	movs	r2, #7
 800e924:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e926:	e054      	b.n	800e9d2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	2b03      	cmp	r3, #3
 800e92c:	d151      	bne.n	800e9d2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2207      	movs	r2, #7
 800e932:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2205      	movs	r2, #5
 800e938:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e948:	2200      	movs	r2, #0
 800e94a:	4619      	mov	r1, r3
 800e94c:	f7fc fc8c 	bl	800b268 <osMessagePut>
      break;
 800e950:	e03f      	b.n	800e9d2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2207      	movs	r2, #7
 800e956:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2205      	movs	r2, #5
 800e95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e96c:	2200      	movs	r2, #0
 800e96e:	4619      	mov	r1, r3
 800e970:	f7fc fc7a 	bl	800b268 <osMessagePut>
      break;
 800e974:	e02d      	b.n	800e9d2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d017      	beq.n	800e9b0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e98c:	23ff      	movs	r3, #255	; 0xff
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f956 	bl	800ec40 <USBH_Get_StringDesc>
 800e994:	4603      	mov	r3, r0
 800e996:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e998:	7bbb      	ldrb	r3, [r7, #14]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e9a2:	e018      	b.n	800e9d6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d115      	bne.n	800e9d6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ae:	e012      	b.n	800e9d6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9b4:	e00f      	b.n	800e9d6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e9b6:	bf00      	nop
 800e9b8:	e00e      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9ba:	bf00      	nop
 800e9bc:	e00c      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9be:	bf00      	nop
 800e9c0:	e00a      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9c2:	bf00      	nop
 800e9c4:	e008      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9c6:	bf00      	nop
 800e9c8:	e006      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9ca:	bf00      	nop
 800e9cc:	e004      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9ce:	bf00      	nop
 800e9d0:	e002      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9d2:	bf00      	nop
 800e9d4:	e000      	b.n	800e9d8 <USBH_HandleEnum+0x44c>
      break;
 800e9d6:	bf00      	nop
  }
  return Status;
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop

0800e9e4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	683a      	ldr	r2, [r7, #0]
 800e9f2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e9f6:	bf00      	nop
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b082      	sub	sp, #8
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f804 	bl	800ea26 <USBH_HandleSof>
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b0b      	cmp	r3, #11
 800ea36:	d10a      	bne.n	800ea4e <USBH_HandleSof+0x28>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d005      	beq.n	800ea4e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	4798      	blx	r3
  }
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7fc fbf3 	bl	800b268 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ea82:	bf00      	nop
}
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b083      	sub	sp, #12
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ea9a:	bf00      	nop
}
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eada:	2200      	movs	r2, #0
 800eadc:	4619      	mov	r1, r3
 800eade:	f7fc fbc3 	bl	800b268 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7f3 fc58 	bl	80023c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	791b      	ldrb	r3, [r3, #4]
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 ffbb 	bl	800fa94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	795b      	ldrb	r3, [r3, #5]
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 ffb5 	bl	800fa94 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4619      	mov	r1, r3
 800eb42:	f7fc fb91 	bl	800b268 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800eb5e:	f107 030c 	add.w	r3, r7, #12
 800eb62:	f04f 32ff 	mov.w	r2, #4294967295
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fc fbbe 	bl	800b2e8 <osMessageGet>
    if (event.status == osEventMessage)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2b10      	cmp	r3, #16
 800eb70:	d1f2      	bne.n	800eb58 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff fa9e 	bl	800e0b4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800eb78:	e7ee      	b.n	800eb58 <USBH_Process_OS+0x8>

0800eb7a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb96:	2200      	movs	r2, #0
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f7fc fb65 	bl	800b268 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f864 	bl	800ec96 <USBH_GetDescriptor>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebe4:	78fa      	ldrb	r2, [r7, #3]
 800ebe6:	b292      	uxth	r2, r2
 800ebe8:	4619      	mov	r1, r3
 800ebea:	f000 f918 	bl	800ee1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af02      	add	r7, sp, #8
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	331c      	adds	r3, #28
 800ec08:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ec0a:	887b      	ldrh	r3, [r7, #2]
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec14:	2100      	movs	r1, #0
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f83d 	bl	800ec96 <USBH_GetDescriptor>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d107      	bne.n	800ec36 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ec26:	887b      	ldrh	r3, [r7, #2]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f987 	bl	800ef40 <USBH_ParseCfgDesc>
 800ec32:	4603      	mov	r3, r0
 800ec34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	607a      	str	r2, [r7, #4]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	72fb      	strb	r3, [r7, #11]
 800ec50:	4613      	mov	r3, r2
 800ec52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ec5c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ec64:	893b      	ldrh	r3, [r7, #8]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f000 f812 	bl	800ec96 <USBH_GetDescriptor>
 800ec72:	4603      	mov	r3, r0
 800ec74:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d107      	bne.n	800ec8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec82:	893a      	ldrh	r2, [r7, #8]
 800ec84:	6879      	ldr	r1, [r7, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f000 fb24 	bl	800f2d4 <USBH_ParseStringDesc>
  }

  return status;
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b084      	sub	sp, #16
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	607b      	str	r3, [r7, #4]
 800eca0:	460b      	mov	r3, r1
 800eca2:	72fb      	strb	r3, [r7, #11]
 800eca4:	4613      	mov	r3, r2
 800eca6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	789b      	ldrb	r3, [r3, #2]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d11c      	bne.n	800ecea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ecb0:	7afb      	ldrb	r3, [r7, #11]
 800ecb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2206      	movs	r2, #6
 800ecc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	893a      	ldrh	r2, [r7, #8]
 800ecc6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ecc8:	893b      	ldrh	r3, [r7, #8]
 800ecca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ecce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecd2:	d104      	bne.n	800ecde <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f240 4209 	movw	r2, #1033	; 0x409
 800ecda:	829a      	strh	r2, [r3, #20]
 800ecdc:	e002      	b.n	800ece4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2200      	movs	r2, #0
 800ece2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	8b3a      	ldrh	r2, [r7, #24]
 800ece8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ecea:	8b3b      	ldrh	r3, [r7, #24]
 800ecec:	461a      	mov	r2, r3
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 fb3d 	bl	800f370 <USBH_CtlReq>
 800ecf6:	4603      	mov	r3, r0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	789b      	ldrb	r3, [r3, #2]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d10f      	bne.n	800ed34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2205      	movs	r2, #5
 800ed1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ed34:	2200      	movs	r2, #0
 800ed36:	2100      	movs	r1, #0
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fb19 	bl	800f370 <USBH_CtlReq>
 800ed3e:	4603      	mov	r3, r0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	789b      	ldrb	r3, [r3, #2]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d10e      	bne.n	800ed7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2209      	movs	r2, #9
 800ed66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	887a      	ldrh	r2, [r7, #2]
 800ed6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 faf6 	bl	800f370 <USBH_CtlReq>
 800ed84:	4603      	mov	r3, r0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	460b      	mov	r3, r1
 800ed98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	789b      	ldrb	r3, [r3, #2]
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d10f      	bne.n	800edc2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2203      	movs	r2, #3
 800edac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800edae:	78fb      	ldrb	r3, [r7, #3]
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800edc2:	2200      	movs	r2, #0
 800edc4:	2100      	movs	r1, #0
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 fad2 	bl	800f370 <USBH_CtlReq>
 800edcc:	4603      	mov	r3, r0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b082      	sub	sp, #8
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	789b      	ldrb	r3, [r3, #2]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d10f      	bne.n	800ee0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2202      	movs	r2, #2
 800edee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800edfc:	78fb      	ldrb	r3, [r7, #3]
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 faae 	bl	800f370 <USBH_CtlReq>
 800ee14:	4603      	mov	r3, r0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b085      	sub	sp, #20
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	60f8      	str	r0, [r7, #12]
 800ee26:	60b9      	str	r1, [r7, #8]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	785a      	ldrb	r2, [r3, #1]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	3302      	adds	r3, #2
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	3303      	adds	r3, #3
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4313      	orrs	r3, r2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	791a      	ldrb	r2, [r3, #4]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	795a      	ldrb	r2, [r3, #5]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	799a      	ldrb	r2, [r3, #6]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	79da      	ldrb	r2, [r3, #7]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	79db      	ldrb	r3, [r3, #7]
 800ee7c:	2b20      	cmp	r3, #32
 800ee7e:	dc11      	bgt.n	800eea4 <USBH_ParseDevDesc+0x86>
 800ee80:	2b08      	cmp	r3, #8
 800ee82:	db16      	blt.n	800eeb2 <USBH_ParseDevDesc+0x94>
 800ee84:	3b08      	subs	r3, #8
 800ee86:	2201      	movs	r2, #1
 800ee88:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ee90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	bf14      	ite	ne
 800ee98:	2301      	movne	r3, #1
 800ee9a:	2300      	moveq	r3, #0
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d102      	bne.n	800eea8 <USBH_ParseDevDesc+0x8a>
 800eea2:	e006      	b.n	800eeb2 <USBH_ParseDevDesc+0x94>
 800eea4:	2b40      	cmp	r3, #64	; 0x40
 800eea6:	d104      	bne.n	800eeb2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	79da      	ldrb	r2, [r3, #7]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	71da      	strb	r2, [r3, #7]
      break;
 800eeb0:	e003      	b.n	800eeba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2240      	movs	r2, #64	; 0x40
 800eeb6:	71da      	strb	r2, [r3, #7]
      break;
 800eeb8:	bf00      	nop
  }

  if (length > 8U)
 800eeba:	88fb      	ldrh	r3, [r7, #6]
 800eebc:	2b08      	cmp	r3, #8
 800eebe:	d939      	bls.n	800ef34 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3308      	adds	r3, #8
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	3309      	adds	r3, #9
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	b29b      	uxth	r3, r3
 800eed0:	021b      	lsls	r3, r3, #8
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4313      	orrs	r3, r2
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	330a      	adds	r3, #10
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	330b      	adds	r3, #11
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	021b      	lsls	r3, r3, #8
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	330c      	adds	r3, #12
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	330d      	adds	r3, #13
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	7b9a      	ldrb	r2, [r3, #14]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	7bda      	ldrb	r2, [r3, #15]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	7c1a      	ldrb	r2, [r3, #16]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	7c5a      	ldrb	r2, [r3, #17]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	745a      	strb	r2, [r3, #17]
  }
}
 800ef34:	bf00      	nop
 800ef36:	3714      	adds	r7, #20
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08c      	sub	sp, #48	; 0x30
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ef54:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ef56:	2300      	movs	r3, #0
 800ef58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ef66:	2300      	movs	r3, #0
 800ef68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	785a      	ldrb	r2, [r3, #1]
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	3302      	adds	r3, #2
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	3303      	adds	r3, #3
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	021b      	lsls	r3, r3, #8
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	4313      	orrs	r3, r2
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef9c:	bf28      	it	cs
 800ef9e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	791a      	ldrb	r2, [r3, #4]
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	795a      	ldrb	r2, [r3, #5]
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	799a      	ldrb	r2, [r3, #6]
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	79da      	ldrb	r2, [r3, #7]
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	7a1a      	ldrb	r2, [r3, #8]
 800efcc:	6a3b      	ldr	r3, [r7, #32]
 800efce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800efd0:	6a3b      	ldr	r3, [r7, #32]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b09      	cmp	r3, #9
 800efd6:	d002      	beq.n	800efde <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	2209      	movs	r2, #9
 800efdc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800efde:	88fb      	ldrh	r3, [r7, #6]
 800efe0:	2b09      	cmp	r3, #9
 800efe2:	f240 809d 	bls.w	800f120 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800efe6:	2309      	movs	r3, #9
 800efe8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800efea:	2300      	movs	r3, #0
 800efec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800efee:	e081      	b.n	800f0f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eff0:	f107 0316 	add.w	r3, r7, #22
 800eff4:	4619      	mov	r1, r3
 800eff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff8:	f000 f99f 	bl	800f33a <USBH_GetNextDesc>
 800effc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	785b      	ldrb	r3, [r3, #1]
 800f002:	2b04      	cmp	r3, #4
 800f004:	d176      	bne.n	800f0f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b09      	cmp	r3, #9
 800f00c:	d002      	beq.n	800f014 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f010:	2209      	movs	r2, #9
 800f012:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f018:	221a      	movs	r2, #26
 800f01a:	fb02 f303 	mul.w	r3, r2, r3
 800f01e:	3308      	adds	r3, #8
 800f020:	6a3a      	ldr	r2, [r7, #32]
 800f022:	4413      	add	r3, r2
 800f024:	3302      	adds	r3, #2
 800f026:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f02a:	69f8      	ldr	r0, [r7, #28]
 800f02c:	f000 f87e 	bl	800f12c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f030:	2300      	movs	r3, #0
 800f032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f036:	2300      	movs	r3, #0
 800f038:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f03a:	e043      	b.n	800f0c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f03c:	f107 0316 	add.w	r3, r7, #22
 800f040:	4619      	mov	r1, r3
 800f042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f044:	f000 f979 	bl	800f33a <USBH_GetNextDesc>
 800f048:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b05      	cmp	r3, #5
 800f050:	d138      	bne.n	800f0c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	795b      	ldrb	r3, [r3, #5]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d10f      	bne.n	800f07a <USBH_ParseCfgDesc+0x13a>
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	799b      	ldrb	r3, [r3, #6]
 800f05e:	2b02      	cmp	r3, #2
 800f060:	d10b      	bne.n	800f07a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	79db      	ldrb	r3, [r3, #7]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10f      	bne.n	800f08a <USBH_ParseCfgDesc+0x14a>
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d00b      	beq.n	800f08a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	2209      	movs	r2, #9
 800f076:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f078:	e007      	b.n	800f08a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b07      	cmp	r3, #7
 800f080:	d004      	beq.n	800f08c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f084:	2207      	movs	r2, #7
 800f086:	701a      	strb	r2, [r3, #0]
 800f088:	e000      	b.n	800f08c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f08a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f090:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f094:	3201      	adds	r2, #1
 800f096:	00d2      	lsls	r2, r2, #3
 800f098:	211a      	movs	r1, #26
 800f09a:	fb01 f303 	mul.w	r3, r1, r3
 800f09e:	4413      	add	r3, r2
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	6a3a      	ldr	r2, [r7, #32]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0ac:	69b9      	ldr	r1, [r7, #24]
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f000 f86b 	bl	800f18a <USBH_ParseEPDesc>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f0ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0be:	3301      	adds	r3, #1
 800f0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	791b      	ldrb	r3, [r3, #4]
 800f0c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d204      	bcs.n	800f0da <USBH_ParseCfgDesc+0x19a>
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	885a      	ldrh	r2, [r3, #2]
 800f0d4:	8afb      	ldrh	r3, [r7, #22]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d8b0      	bhi.n	800f03c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	791b      	ldrb	r3, [r3, #4]
 800f0de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d201      	bcs.n	800f0ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e01c      	b.n	800f124 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800f0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d805      	bhi.n	800f108 <USBH_ParseCfgDesc+0x1c8>
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	885a      	ldrh	r2, [r3, #2]
 800f100:	8afb      	ldrh	r3, [r7, #22]
 800f102:	429a      	cmp	r2, r3
 800f104:	f63f af74 	bhi.w	800eff0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	791b      	ldrb	r3, [r3, #4]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	bf28      	it	cs
 800f110:	2302      	movcs	r3, #2
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f118:	429a      	cmp	r2, r3
 800f11a:	d201      	bcs.n	800f120 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800f11c:	2303      	movs	r3, #3
 800f11e:	e001      	b.n	800f124 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800f120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f124:	4618      	mov	r0, r3
 800f126:	3730      	adds	r7, #48	; 0x30
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781a      	ldrb	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	785a      	ldrb	r2, [r3, #1]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	789a      	ldrb	r2, [r3, #2]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	78da      	ldrb	r2, [r3, #3]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	791a      	ldrb	r2, [r3, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	795a      	ldrb	r2, [r3, #5]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	799a      	ldrb	r2, [r3, #6]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	79da      	ldrb	r2, [r3, #7]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	7a1a      	ldrb	r2, [r3, #8]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	721a      	strb	r2, [r3, #8]
}
 800f17e:	bf00      	nop
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b087      	sub	sp, #28
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	781a      	ldrb	r2, [r3, #0]
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	785a      	ldrb	r2, [r3, #1]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	789a      	ldrb	r2, [r3, #2]
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	78da      	ldrb	r2, [r3, #3]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3305      	adds	r3, #5
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	021b      	lsls	r3, r3, #8
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	799a      	ldrb	r2, [r3, #6]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	889b      	ldrh	r3, [r3, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	75fb      	strb	r3, [r7, #23]
 800f1ea:	e033      	b.n	800f254 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	889b      	ldrh	r3, [r3, #4]
 800f1f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f1f4:	f023 0307 	bic.w	r3, r3, #7
 800f1f8:	b29a      	uxth	r2, r3
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	889b      	ldrh	r3, [r3, #4]
 800f202:	b21a      	sxth	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	3304      	adds	r3, #4
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	b299      	uxth	r1, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3305      	adds	r3, #5
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	b29b      	uxth	r3, r3
 800f214:	021b      	lsls	r3, r3, #8
 800f216:	b29b      	uxth	r3, r3
 800f218:	430b      	orrs	r3, r1
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f220:	2b00      	cmp	r3, #0
 800f222:	d110      	bne.n	800f246 <USBH_ParseEPDesc+0xbc>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	3304      	adds	r3, #4
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	b299      	uxth	r1, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3305      	adds	r3, #5
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	b29b      	uxth	r3, r3
 800f234:	021b      	lsls	r3, r3, #8
 800f236:	b29b      	uxth	r3, r3
 800f238:	430b      	orrs	r3, r1
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	b21b      	sxth	r3, r3
 800f23e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f242:	b21b      	sxth	r3, r3
 800f244:	e001      	b.n	800f24a <USBH_ParseEPDesc+0xc0>
 800f246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f24a:	4313      	orrs	r3, r2
 800f24c:	b21b      	sxth	r3, r3
 800f24e:	b29a      	uxth	r2, r3
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d116      	bne.n	800f28c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	78db      	ldrb	r3, [r3, #3]
 800f262:	f003 0303 	and.w	r3, r3, #3
 800f266:	2b01      	cmp	r3, #1
 800f268:	d005      	beq.n	800f276 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	78db      	ldrb	r3, [r3, #3]
 800f26e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f272:	2b03      	cmp	r3, #3
 800f274:	d127      	bne.n	800f2c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	799b      	ldrb	r3, [r3, #6]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d003      	beq.n	800f286 <USBH_ParseEPDesc+0xfc>
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	799b      	ldrb	r3, [r3, #6]
 800f282:	2b10      	cmp	r3, #16
 800f284:	d91f      	bls.n	800f2c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f286:	2303      	movs	r3, #3
 800f288:	75fb      	strb	r3, [r7, #23]
 800f28a:	e01c      	b.n	800f2c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	78db      	ldrb	r3, [r3, #3]
 800f290:	f003 0303 	and.w	r3, r3, #3
 800f294:	2b01      	cmp	r3, #1
 800f296:	d10a      	bne.n	800f2ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	799b      	ldrb	r3, [r3, #6]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <USBH_ParseEPDesc+0x11e>
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	799b      	ldrb	r3, [r3, #6]
 800f2a4:	2b10      	cmp	r3, #16
 800f2a6:	d90e      	bls.n	800f2c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	75fb      	strb	r3, [r7, #23]
 800f2ac:	e00b      	b.n	800f2c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	78db      	ldrb	r3, [r3, #3]
 800f2b2:	f003 0303 	and.w	r3, r3, #3
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d105      	bne.n	800f2c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	799b      	ldrb	r3, [r3, #6]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d101      	bne.n	800f2c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	371c      	adds	r7, #28
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b087      	sub	sp, #28
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d120      	bne.n	800f32e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	1e9a      	subs	r2, r3, #2
 800f2f2:	88fb      	ldrh	r3, [r7, #6]
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	bf28      	it	cs
 800f2f8:	4613      	movcs	r3, r2
 800f2fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	3302      	adds	r3, #2
 800f300:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f302:	2300      	movs	r3, #0
 800f304:	82fb      	strh	r3, [r7, #22]
 800f306:	e00b      	b.n	800f320 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f308:	8afb      	ldrh	r3, [r7, #22]
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	4413      	add	r3, r2
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	3301      	adds	r3, #1
 800f318:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f31a:	8afb      	ldrh	r3, [r7, #22]
 800f31c:	3302      	adds	r3, #2
 800f31e:	82fb      	strh	r3, [r7, #22]
 800f320:	8afa      	ldrh	r2, [r7, #22]
 800f322:	8abb      	ldrh	r3, [r7, #20]
 800f324:	429a      	cmp	r2, r3
 800f326:	d3ef      	bcc.n	800f308 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	2200      	movs	r2, #0
 800f32c:	701a      	strb	r2, [r3, #0]
  }
}
 800f32e:	bf00      	nop
 800f330:	371c      	adds	r7, #28
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr

0800f33a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f33a:	b480      	push	{r7}
 800f33c:	b085      	sub	sp, #20
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	881a      	ldrh	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	4413      	add	r3, r2
 800f350:	b29a      	uxth	r2, r3
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4413      	add	r3, r2
 800f360:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f362:	68fb      	ldr	r3, [r7, #12]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	4613      	mov	r3, r2
 800f37c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f37e:	2301      	movs	r3, #1
 800f380:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	789b      	ldrb	r3, [r3, #2]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d002      	beq.n	800f390 <USBH_CtlReq+0x20>
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	d01d      	beq.n	800f3ca <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f38e:	e043      	b.n	800f418 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68ba      	ldr	r2, [r7, #8]
 800f394:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	88fa      	ldrh	r2, [r7, #6]
 800f39a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2203      	movs	r2, #3
 800f3b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	f7fb ff50 	bl	800b268 <osMessagePut>
      break;
 800f3c8:	e026      	b.n	800f418 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f000 f82a 	bl	800f424 <USBH_HandleControl>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d002      	beq.n	800f3e0 <USBH_CtlReq+0x70>
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
 800f3dc:	2b03      	cmp	r3, #3
 800f3de:	d106      	bne.n	800f3ee <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	761a      	strb	r2, [r3, #24]
 800f3ec:	e005      	b.n	800f3fa <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f3ee:	7dfb      	ldrb	r3, [r7, #23]
 800f3f0:	2b02      	cmp	r3, #2
 800f3f2:	d102      	bne.n	800f3fa <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2203      	movs	r2, #3
 800f3fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f40e:	2200      	movs	r2, #0
 800f410:	4619      	mov	r1, r3
 800f412:	f7fb ff29 	bl	800b268 <osMessagePut>
      break;
 800f416:	bf00      	nop
  }
  return status;
 800f418:	7dfb      	ldrb	r3, [r7, #23]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3718      	adds	r7, #24
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
	...

0800f424 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af02      	add	r7, sp, #8
 800f42a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f42c:	2301      	movs	r3, #1
 800f42e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f430:	2300      	movs	r3, #0
 800f432:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	7e1b      	ldrb	r3, [r3, #24]
 800f438:	3b01      	subs	r3, #1
 800f43a:	2b0a      	cmp	r3, #10
 800f43c:	f200 8229 	bhi.w	800f892 <USBH_HandleControl+0x46e>
 800f440:	a201      	add	r2, pc, #4	; (adr r2, 800f448 <USBH_HandleControl+0x24>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f475 	.word	0x0800f475
 800f44c:	0800f48f 	.word	0x0800f48f
 800f450:	0800f531 	.word	0x0800f531
 800f454:	0800f557 	.word	0x0800f557
 800f458:	0800f5e3 	.word	0x0800f5e3
 800f45c:	0800f60d 	.word	0x0800f60d
 800f460:	0800f6cf 	.word	0x0800f6cf
 800f464:	0800f6f1 	.word	0x0800f6f1
 800f468:	0800f783 	.word	0x0800f783
 800f46c:	0800f7a9 	.word	0x0800f7a9
 800f470:	0800f83b 	.word	0x0800f83b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f103 0110 	add.w	r1, r3, #16
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	795b      	ldrb	r3, [r3, #5]
 800f47e:	461a      	mov	r2, r3
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fa17 	bl	800f8b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2202      	movs	r2, #2
 800f48a:	761a      	strb	r2, [r3, #24]
      break;
 800f48c:	e20c      	b.n	800f8a8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	795b      	ldrb	r3, [r3, #5]
 800f492:	4619      	mov	r1, r3
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7f3 f883 	bl	80025a0 <USBH_LL_GetURBState>
 800f49a:	4603      	mov	r3, r0
 800f49c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f49e:	7bbb      	ldrb	r3, [r7, #14]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d12c      	bne.n	800f4fe <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	7c1b      	ldrb	r3, [r3, #16]
 800f4a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f4ac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8adb      	ldrh	r3, [r3, #22]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f4b6:	7b7b      	ldrb	r3, [r7, #13]
 800f4b8:	2b80      	cmp	r3, #128	; 0x80
 800f4ba:	d103      	bne.n	800f4c4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2203      	movs	r2, #3
 800f4c0:	761a      	strb	r2, [r3, #24]
 800f4c2:	e00d      	b.n	800f4e0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2205      	movs	r2, #5
 800f4c8:	761a      	strb	r2, [r3, #24]
 800f4ca:	e009      	b.n	800f4e0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f4cc:	7b7b      	ldrb	r3, [r7, #13]
 800f4ce:	2b80      	cmp	r3, #128	; 0x80
 800f4d0:	d103      	bne.n	800f4da <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2209      	movs	r2, #9
 800f4d6:	761a      	strb	r2, [r3, #24]
 800f4d8:	e002      	b.n	800f4e0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2207      	movs	r2, #7
 800f4de:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2203      	movs	r2, #3
 800f4e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	f7fb feb6 	bl	800b268 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f4fc:	e1cb      	b.n	800f896 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
 800f500:	2b04      	cmp	r3, #4
 800f502:	d003      	beq.n	800f50c <USBH_HandleControl+0xe8>
 800f504:	7bbb      	ldrb	r3, [r7, #14]
 800f506:	2b02      	cmp	r3, #2
 800f508:	f040 81c5 	bne.w	800f896 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	220b      	movs	r2, #11
 800f510:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2203      	movs	r2, #3
 800f516:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f526:	2200      	movs	r2, #0
 800f528:	4619      	mov	r1, r3
 800f52a:	f7fb fe9d 	bl	800b268 <osMessagePut>
      break;
 800f52e:	e1b2      	b.n	800f896 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6899      	ldr	r1, [r3, #8]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	899a      	ldrh	r2, [r3, #12]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	791b      	ldrb	r3, [r3, #4]
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f9f2 	bl	800f932 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2204      	movs	r2, #4
 800f552:	761a      	strb	r2, [r3, #24]
      break;
 800f554:	e1a8      	b.n	800f8a8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	791b      	ldrb	r3, [r3, #4]
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7f3 f81f 	bl	80025a0 <USBH_LL_GetURBState>
 800f562:	4603      	mov	r3, r0
 800f564:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f566:	7bbb      	ldrb	r3, [r7, #14]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d110      	bne.n	800f58e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2209      	movs	r2, #9
 800f570:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2203      	movs	r2, #3
 800f576:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f586:	2200      	movs	r2, #0
 800f588:	4619      	mov	r1, r3
 800f58a:	f7fb fe6d 	bl	800b268 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f58e:	7bbb      	ldrb	r3, [r7, #14]
 800f590:	2b05      	cmp	r3, #5
 800f592:	d110      	bne.n	800f5b6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f594:	2303      	movs	r3, #3
 800f596:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2203      	movs	r2, #3
 800f59c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	f7fb fe5a 	bl	800b268 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f5b4:	e171      	b.n	800f89a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f5b6:	7bbb      	ldrb	r3, [r7, #14]
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	f040 816e 	bne.w	800f89a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	220b      	movs	r2, #11
 800f5c2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2203      	movs	r2, #3
 800f5c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f7fb fe44 	bl	800b268 <osMessagePut>
      break;
 800f5e0:	e15b      	b.n	800f89a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6899      	ldr	r1, [r3, #8]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	899a      	ldrh	r2, [r3, #12]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	795b      	ldrb	r3, [r3, #5]
 800f5ee:	2001      	movs	r0, #1
 800f5f0:	9000      	str	r0, [sp, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f978 	bl	800f8e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2206      	movs	r2, #6
 800f608:	761a      	strb	r2, [r3, #24]
      break;
 800f60a:	e14d      	b.n	800f8a8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	795b      	ldrb	r3, [r3, #5]
 800f610:	4619      	mov	r1, r3
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7f2 ffc4 	bl	80025a0 <USBH_LL_GetURBState>
 800f618:	4603      	mov	r3, r0
 800f61a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f61c:	7bbb      	ldrb	r3, [r7, #14]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d111      	bne.n	800f646 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2207      	movs	r2, #7
 800f626:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2203      	movs	r2, #3
 800f62c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f63c:	2200      	movs	r2, #0
 800f63e:	4619      	mov	r1, r3
 800f640:	f7fb fe12 	bl	800b268 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f644:	e12b      	b.n	800f89e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f646:	7bbb      	ldrb	r3, [r7, #14]
 800f648:	2b05      	cmp	r3, #5
 800f64a:	d113      	bne.n	800f674 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	220c      	movs	r2, #12
 800f650:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f652:	2303      	movs	r3, #3
 800f654:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2203      	movs	r2, #3
 800f65a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f66a:	2200      	movs	r2, #0
 800f66c:	4619      	mov	r1, r3
 800f66e:	f7fb fdfb 	bl	800b268 <osMessagePut>
      break;
 800f672:	e114      	b.n	800f89e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f674:	7bbb      	ldrb	r3, [r7, #14]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d111      	bne.n	800f69e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2205      	movs	r2, #5
 800f67e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2203      	movs	r2, #3
 800f684:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f694:	2200      	movs	r2, #0
 800f696:	4619      	mov	r1, r3
 800f698:	f7fb fde6 	bl	800b268 <osMessagePut>
      break;
 800f69c:	e0ff      	b.n	800f89e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f69e:	7bbb      	ldrb	r3, [r7, #14]
 800f6a0:	2b04      	cmp	r3, #4
 800f6a2:	f040 80fc 	bne.w	800f89e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	220b      	movs	r2, #11
 800f6aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2203      	movs	r2, #3
 800f6b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	f7fb fdce 	bl	800b268 <osMessagePut>
      break;
 800f6cc:	e0e7      	b.n	800f89e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	791b      	ldrb	r3, [r3, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 f92b 	bl	800f932 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2208      	movs	r2, #8
 800f6ec:	761a      	strb	r2, [r3, #24]

      break;
 800f6ee:	e0db      	b.n	800f8a8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	791b      	ldrb	r3, [r3, #4]
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7f2 ff52 	bl	80025a0 <USBH_LL_GetURBState>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f700:	7bbb      	ldrb	r3, [r7, #14]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d113      	bne.n	800f72e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	220d      	movs	r2, #13
 800f70a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f70c:	2300      	movs	r3, #0
 800f70e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2203      	movs	r2, #3
 800f714:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f724:	2200      	movs	r2, #0
 800f726:	4619      	mov	r1, r3
 800f728:	f7fb fd9e 	bl	800b268 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f72c:	e0b9      	b.n	800f8a2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f72e:	7bbb      	ldrb	r3, [r7, #14]
 800f730:	2b04      	cmp	r3, #4
 800f732:	d111      	bne.n	800f758 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	220b      	movs	r2, #11
 800f738:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2203      	movs	r2, #3
 800f73e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f74e:	2200      	movs	r2, #0
 800f750:	4619      	mov	r1, r3
 800f752:	f7fb fd89 	bl	800b268 <osMessagePut>
      break;
 800f756:	e0a4      	b.n	800f8a2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800f758:	7bbb      	ldrb	r3, [r7, #14]
 800f75a:	2b05      	cmp	r3, #5
 800f75c:	f040 80a1 	bne.w	800f8a2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800f760:	2303      	movs	r3, #3
 800f762:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2203      	movs	r2, #3
 800f768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f778:	2200      	movs	r2, #0
 800f77a:	4619      	mov	r1, r3
 800f77c:	f7fb fd74 	bl	800b268 <osMessagePut>
      break;
 800f780:	e08f      	b.n	800f8a2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	795b      	ldrb	r3, [r3, #5]
 800f786:	2201      	movs	r2, #1
 800f788:	9200      	str	r2, [sp, #0]
 800f78a:	2200      	movs	r2, #0
 800f78c:	2100      	movs	r1, #0
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 f8aa 	bl	800f8e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	220a      	movs	r2, #10
 800f7a4:	761a      	strb	r2, [r3, #24]
      break;
 800f7a6:	e07f      	b.n	800f8a8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	795b      	ldrb	r3, [r3, #5]
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7f2 fef6 	bl	80025a0 <USBH_LL_GetURBState>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f7b8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d113      	bne.n	800f7e6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	220d      	movs	r2, #13
 800f7c6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2203      	movs	r2, #3
 800f7cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f7dc:	2200      	movs	r2, #0
 800f7de:	4619      	mov	r1, r3
 800f7e0:	f7fb fd42 	bl	800b268 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f7e4:	e05f      	b.n	800f8a6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f7e6:	7bbb      	ldrb	r3, [r7, #14]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d111      	bne.n	800f810 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2209      	movs	r2, #9
 800f7f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2203      	movs	r2, #3
 800f7f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f806:	2200      	movs	r2, #0
 800f808:	4619      	mov	r1, r3
 800f80a:	f7fb fd2d 	bl	800b268 <osMessagePut>
      break;
 800f80e:	e04a      	b.n	800f8a6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800f810:	7bbb      	ldrb	r3, [r7, #14]
 800f812:	2b04      	cmp	r3, #4
 800f814:	d147      	bne.n	800f8a6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	220b      	movs	r2, #11
 800f81a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2203      	movs	r2, #3
 800f820:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f830:	2200      	movs	r2, #0
 800f832:	4619      	mov	r1, r3
 800f834:	f7fb fd18 	bl	800b268 <osMessagePut>
      break;
 800f838:	e035      	b.n	800f8a6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	7e5b      	ldrb	r3, [r3, #25]
 800f83e:	3301      	adds	r3, #1
 800f840:	b2da      	uxtb	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	765a      	strb	r2, [r3, #25]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7e5b      	ldrb	r3, [r3, #25]
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d806      	bhi.n	800f85c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2201      	movs	r2, #1
 800f852:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f85a:	e025      	b.n	800f8a8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f862:	2106      	movs	r1, #6
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	795b      	ldrb	r3, [r3, #5]
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 f90d 	bl	800fa94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	791b      	ldrb	r3, [r3, #4]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 f907 	bl	800fa94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2200      	movs	r2, #0
 800f88a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f88c:	2302      	movs	r3, #2
 800f88e:	73fb      	strb	r3, [r7, #15]
      break;
 800f890:	e00a      	b.n	800f8a8 <USBH_HandleControl+0x484>

    default:
      break;
 800f892:	bf00      	nop
 800f894:	e008      	b.n	800f8a8 <USBH_HandleControl+0x484>
      break;
 800f896:	bf00      	nop
 800f898:	e006      	b.n	800f8a8 <USBH_HandleControl+0x484>
      break;
 800f89a:	bf00      	nop
 800f89c:	e004      	b.n	800f8a8 <USBH_HandleControl+0x484>
      break;
 800f89e:	bf00      	nop
 800f8a0:	e002      	b.n	800f8a8 <USBH_HandleControl+0x484>
      break;
 800f8a2:	bf00      	nop
 800f8a4:	e000      	b.n	800f8a8 <USBH_HandleControl+0x484>
      break;
 800f8a6:	bf00      	nop
  }

  return status;
 800f8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop

0800f8b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b088      	sub	sp, #32
 800f8b8:	af04      	add	r7, sp, #16
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f8c2:	79f9      	ldrb	r1, [r7, #7]
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	2308      	movs	r3, #8
 800f8ca:	9302      	str	r3, [sp, #8]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7f2 fe30 	bl	800253e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af04      	add	r7, sp, #16
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	80fb      	strh	r3, [r7, #6]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f904:	2b00      	cmp	r3, #0
 800f906:	d001      	beq.n	800f90c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f908:	2300      	movs	r3, #0
 800f90a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f90c:	7979      	ldrb	r1, [r7, #5]
 800f90e:	7e3b      	ldrb	r3, [r7, #24]
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	88fb      	ldrh	r3, [r7, #6]
 800f914:	9302      	str	r3, [sp, #8]
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	9301      	str	r3, [sp, #4]
 800f91a:	2301      	movs	r3, #1
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	2300      	movs	r3, #0
 800f920:	2200      	movs	r2, #0
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f7f2 fe0b 	bl	800253e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b088      	sub	sp, #32
 800f936:	af04      	add	r7, sp, #16
 800f938:	60f8      	str	r0, [r7, #12]
 800f93a:	60b9      	str	r1, [r7, #8]
 800f93c:	4611      	mov	r1, r2
 800f93e:	461a      	mov	r2, r3
 800f940:	460b      	mov	r3, r1
 800f942:	80fb      	strh	r3, [r7, #6]
 800f944:	4613      	mov	r3, r2
 800f946:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f948:	7979      	ldrb	r1, [r7, #5]
 800f94a:	2300      	movs	r3, #0
 800f94c:	9303      	str	r3, [sp, #12]
 800f94e:	88fb      	ldrh	r3, [r7, #6]
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	2301      	movs	r3, #1
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	2300      	movs	r3, #0
 800f95c:	2201      	movs	r2, #1
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f7f2 fded 	bl	800253e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f964:	2300      	movs	r3, #0

}
 800f966:	4618      	mov	r0, r3
 800f968:	3710      	adds	r7, #16
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b088      	sub	sp, #32
 800f972:	af04      	add	r7, sp, #16
 800f974:	60f8      	str	r0, [r7, #12]
 800f976:	60b9      	str	r1, [r7, #8]
 800f978:	4611      	mov	r1, r2
 800f97a:	461a      	mov	r2, r3
 800f97c:	460b      	mov	r3, r1
 800f97e:	80fb      	strh	r3, [r7, #6]
 800f980:	4613      	mov	r3, r2
 800f982:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f98e:	2300      	movs	r3, #0
 800f990:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f992:	7979      	ldrb	r1, [r7, #5]
 800f994:	7e3b      	ldrb	r3, [r7, #24]
 800f996:	9303      	str	r3, [sp, #12]
 800f998:	88fb      	ldrh	r3, [r7, #6]
 800f99a:	9302      	str	r3, [sp, #8]
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	9301      	str	r3, [sp, #4]
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	2302      	movs	r3, #2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7f2 fdc8 	bl	800253e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	af04      	add	r7, sp, #16
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	80fb      	strh	r3, [r7, #6]
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f9ce:	7979      	ldrb	r1, [r7, #5]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9303      	str	r3, [sp, #12]
 800f9d4:	88fb      	ldrh	r3, [r7, #6]
 800f9d6:	9302      	str	r3, [sp, #8]
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	9301      	str	r3, [sp, #4]
 800f9dc:	2301      	movs	r3, #1
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f7f2 fdaa 	bl	800253e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af04      	add	r7, sp, #16
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	4611      	mov	r1, r2
 800fa00:	461a      	mov	r2, r3
 800fa02:	4603      	mov	r3, r0
 800fa04:	70fb      	strb	r3, [r7, #3]
 800fa06:	460b      	mov	r3, r1
 800fa08:	70bb      	strb	r3, [r7, #2]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fa0e:	7878      	ldrb	r0, [r7, #1]
 800fa10:	78ba      	ldrb	r2, [r7, #2]
 800fa12:	78f9      	ldrb	r1, [r7, #3]
 800fa14:	8b3b      	ldrh	r3, [r7, #24]
 800fa16:	9302      	str	r3, [sp, #8]
 800fa18:	7d3b      	ldrb	r3, [r7, #20]
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	7c3b      	ldrb	r3, [r7, #16]
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	4603      	mov	r3, r0
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7f2 fd3d 	bl	80024a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fa28:	2300      	movs	r3, #0
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b082      	sub	sp, #8
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800fa3e:	78fb      	ldrb	r3, [r7, #3]
 800fa40:	4619      	mov	r1, r3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7f2 fd5c 	bl	8002500 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f836 	bl	800fad0 <USBH_GetFreePipe>
 800fa64:	4603      	mov	r3, r0
 800fa66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fa68:	89fb      	ldrh	r3, [r7, #14]
 800fa6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d00a      	beq.n	800fa88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800fa72:	78fa      	ldrb	r2, [r7, #3]
 800fa74:	89fb      	ldrh	r3, [r7, #14]
 800fa76:	f003 030f 	and.w	r3, r3, #15
 800fa7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	33e0      	adds	r3, #224	; 0xe0
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	440b      	add	r3, r1
 800fa86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fa88:	89fb      	ldrh	r3, [r7, #14]
 800fa8a:	b2db      	uxtb	r3, r3
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800faa0:	78fb      	ldrb	r3, [r7, #3]
 800faa2:	2b0f      	cmp	r3, #15
 800faa4:	d80d      	bhi.n	800fac2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800faa6:	78fb      	ldrb	r3, [r7, #3]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	33e0      	adds	r3, #224	; 0xe0
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	685a      	ldr	r2, [r3, #4]
 800fab2:	78fb      	ldrb	r3, [r7, #3]
 800fab4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fab8:	6879      	ldr	r1, [r7, #4]
 800faba:	33e0      	adds	r3, #224	; 0xe0
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	440b      	add	r3, r1
 800fac0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fad8:	2300      	movs	r3, #0
 800fada:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800fadc:	2300      	movs	r3, #0
 800fade:	73fb      	strb	r3, [r7, #15]
 800fae0:	e00f      	b.n	800fb02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	33e0      	adds	r3, #224	; 0xe0
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4413      	add	r3, r2
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d102      	bne.n	800fafc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	e007      	b.n	800fb0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
 800fafe:	3301      	adds	r3, #1
 800fb00:	73fb      	strb	r3, [r7, #15]
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
 800fb04:	2b0f      	cmp	r3, #15
 800fb06:	d9ec      	bls.n	800fae2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fb08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <__errno>:
 800fb18:	4b01      	ldr	r3, [pc, #4]	; (800fb20 <__errno+0x8>)
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	20000034 	.word	0x20000034

0800fb24 <__libc_init_array>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4d0d      	ldr	r5, [pc, #52]	; (800fb5c <__libc_init_array+0x38>)
 800fb28:	4c0d      	ldr	r4, [pc, #52]	; (800fb60 <__libc_init_array+0x3c>)
 800fb2a:	1b64      	subs	r4, r4, r5
 800fb2c:	10a4      	asrs	r4, r4, #2
 800fb2e:	2600      	movs	r6, #0
 800fb30:	42a6      	cmp	r6, r4
 800fb32:	d109      	bne.n	800fb48 <__libc_init_array+0x24>
 800fb34:	4d0b      	ldr	r5, [pc, #44]	; (800fb64 <__libc_init_array+0x40>)
 800fb36:	4c0c      	ldr	r4, [pc, #48]	; (800fb68 <__libc_init_array+0x44>)
 800fb38:	f000 f93c 	bl	800fdb4 <_init>
 800fb3c:	1b64      	subs	r4, r4, r5
 800fb3e:	10a4      	asrs	r4, r4, #2
 800fb40:	2600      	movs	r6, #0
 800fb42:	42a6      	cmp	r6, r4
 800fb44:	d105      	bne.n	800fb52 <__libc_init_array+0x2e>
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb4c:	4798      	blx	r3
 800fb4e:	3601      	adds	r6, #1
 800fb50:	e7ee      	b.n	800fb30 <__libc_init_array+0xc>
 800fb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb56:	4798      	blx	r3
 800fb58:	3601      	adds	r6, #1
 800fb5a:	e7f2      	b.n	800fb42 <__libc_init_array+0x1e>
 800fb5c:	0800fe7c 	.word	0x0800fe7c
 800fb60:	0800fe7c 	.word	0x0800fe7c
 800fb64:	0800fe7c 	.word	0x0800fe7c
 800fb68:	0800fe80 	.word	0x0800fe80

0800fb6c <malloc>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <malloc+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f000 b88d 	b.w	800fc90 <_malloc_r>
 800fb76:	bf00      	nop
 800fb78:	20000034 	.word	0x20000034

0800fb7c <free>:
 800fb7c:	4b02      	ldr	r3, [pc, #8]	; (800fb88 <free+0xc>)
 800fb7e:	4601      	mov	r1, r0
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	f000 b819 	b.w	800fbb8 <_free_r>
 800fb86:	bf00      	nop
 800fb88:	20000034 	.word	0x20000034

0800fb8c <memcpy>:
 800fb8c:	440a      	add	r2, r1
 800fb8e:	4291      	cmp	r1, r2
 800fb90:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb94:	d100      	bne.n	800fb98 <memcpy+0xc>
 800fb96:	4770      	bx	lr
 800fb98:	b510      	push	{r4, lr}
 800fb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fba2:	4291      	cmp	r1, r2
 800fba4:	d1f9      	bne.n	800fb9a <memcpy+0xe>
 800fba6:	bd10      	pop	{r4, pc}

0800fba8 <memset>:
 800fba8:	4402      	add	r2, r0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d100      	bne.n	800fbb2 <memset+0xa>
 800fbb0:	4770      	bx	lr
 800fbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbb6:	e7f9      	b.n	800fbac <memset+0x4>

0800fbb8 <_free_r>:
 800fbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbba:	2900      	cmp	r1, #0
 800fbbc:	d044      	beq.n	800fc48 <_free_r+0x90>
 800fbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc2:	9001      	str	r0, [sp, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbca:	bfb8      	it	lt
 800fbcc:	18e4      	addlt	r4, r4, r3
 800fbce:	f000 f8e3 	bl	800fd98 <__malloc_lock>
 800fbd2:	4a1e      	ldr	r2, [pc, #120]	; (800fc4c <_free_r+0x94>)
 800fbd4:	9801      	ldr	r0, [sp, #4]
 800fbd6:	6813      	ldr	r3, [r2, #0]
 800fbd8:	b933      	cbnz	r3, 800fbe8 <_free_r+0x30>
 800fbda:	6063      	str	r3, [r4, #4]
 800fbdc:	6014      	str	r4, [r2, #0]
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe4:	f000 b8de 	b.w	800fda4 <__malloc_unlock>
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	d908      	bls.n	800fbfe <_free_r+0x46>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf01      	itttt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	1949      	addeq	r1, r1, r5
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	e7ed      	b.n	800fbda <_free_r+0x22>
 800fbfe:	461a      	mov	r2, r3
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b10b      	cbz	r3, 800fc08 <_free_r+0x50>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d9fa      	bls.n	800fbfe <_free_r+0x46>
 800fc08:	6811      	ldr	r1, [r2, #0]
 800fc0a:	1855      	adds	r5, r2, r1
 800fc0c:	42a5      	cmp	r5, r4
 800fc0e:	d10b      	bne.n	800fc28 <_free_r+0x70>
 800fc10:	6824      	ldr	r4, [r4, #0]
 800fc12:	4421      	add	r1, r4
 800fc14:	1854      	adds	r4, r2, r1
 800fc16:	42a3      	cmp	r3, r4
 800fc18:	6011      	str	r1, [r2, #0]
 800fc1a:	d1e0      	bne.n	800fbde <_free_r+0x26>
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	6053      	str	r3, [r2, #4]
 800fc22:	4421      	add	r1, r4
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	e7da      	b.n	800fbde <_free_r+0x26>
 800fc28:	d902      	bls.n	800fc30 <_free_r+0x78>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e7d6      	b.n	800fbde <_free_r+0x26>
 800fc30:	6825      	ldr	r5, [r4, #0]
 800fc32:	1961      	adds	r1, r4, r5
 800fc34:	428b      	cmp	r3, r1
 800fc36:	bf04      	itt	eq
 800fc38:	6819      	ldreq	r1, [r3, #0]
 800fc3a:	685b      	ldreq	r3, [r3, #4]
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	bf04      	itt	eq
 800fc40:	1949      	addeq	r1, r1, r5
 800fc42:	6021      	streq	r1, [r4, #0]
 800fc44:	6054      	str	r4, [r2, #4]
 800fc46:	e7ca      	b.n	800fbde <_free_r+0x26>
 800fc48:	b003      	add	sp, #12
 800fc4a:	bd30      	pop	{r4, r5, pc}
 800fc4c:	20008fd0 	.word	0x20008fd0

0800fc50 <sbrk_aligned>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	4e0e      	ldr	r6, [pc, #56]	; (800fc8c <sbrk_aligned+0x3c>)
 800fc54:	460c      	mov	r4, r1
 800fc56:	6831      	ldr	r1, [r6, #0]
 800fc58:	4605      	mov	r5, r0
 800fc5a:	b911      	cbnz	r1, 800fc62 <sbrk_aligned+0x12>
 800fc5c:	f000 f88c 	bl	800fd78 <_sbrk_r>
 800fc60:	6030      	str	r0, [r6, #0]
 800fc62:	4621      	mov	r1, r4
 800fc64:	4628      	mov	r0, r5
 800fc66:	f000 f887 	bl	800fd78 <_sbrk_r>
 800fc6a:	1c43      	adds	r3, r0, #1
 800fc6c:	d00a      	beq.n	800fc84 <sbrk_aligned+0x34>
 800fc6e:	1cc4      	adds	r4, r0, #3
 800fc70:	f024 0403 	bic.w	r4, r4, #3
 800fc74:	42a0      	cmp	r0, r4
 800fc76:	d007      	beq.n	800fc88 <sbrk_aligned+0x38>
 800fc78:	1a21      	subs	r1, r4, r0
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f000 f87c 	bl	800fd78 <_sbrk_r>
 800fc80:	3001      	adds	r0, #1
 800fc82:	d101      	bne.n	800fc88 <sbrk_aligned+0x38>
 800fc84:	f04f 34ff 	mov.w	r4, #4294967295
 800fc88:	4620      	mov	r0, r4
 800fc8a:	bd70      	pop	{r4, r5, r6, pc}
 800fc8c:	20008fd4 	.word	0x20008fd4

0800fc90 <_malloc_r>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	1ccd      	adds	r5, r1, #3
 800fc96:	f025 0503 	bic.w	r5, r5, #3
 800fc9a:	3508      	adds	r5, #8
 800fc9c:	2d0c      	cmp	r5, #12
 800fc9e:	bf38      	it	cc
 800fca0:	250c      	movcc	r5, #12
 800fca2:	2d00      	cmp	r5, #0
 800fca4:	4607      	mov	r7, r0
 800fca6:	db01      	blt.n	800fcac <_malloc_r+0x1c>
 800fca8:	42a9      	cmp	r1, r5
 800fcaa:	d905      	bls.n	800fcb8 <_malloc_r+0x28>
 800fcac:	230c      	movs	r3, #12
 800fcae:	603b      	str	r3, [r7, #0]
 800fcb0:	2600      	movs	r6, #0
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	4e2e      	ldr	r6, [pc, #184]	; (800fd74 <_malloc_r+0xe4>)
 800fcba:	f000 f86d 	bl	800fd98 <__malloc_lock>
 800fcbe:	6833      	ldr	r3, [r6, #0]
 800fcc0:	461c      	mov	r4, r3
 800fcc2:	bb34      	cbnz	r4, 800fd12 <_malloc_r+0x82>
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f7ff ffc2 	bl	800fc50 <sbrk_aligned>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	4604      	mov	r4, r0
 800fcd0:	d14d      	bne.n	800fd6e <_malloc_r+0xde>
 800fcd2:	6834      	ldr	r4, [r6, #0]
 800fcd4:	4626      	mov	r6, r4
 800fcd6:	2e00      	cmp	r6, #0
 800fcd8:	d140      	bne.n	800fd5c <_malloc_r+0xcc>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4638      	mov	r0, r7
 800fce0:	eb04 0803 	add.w	r8, r4, r3
 800fce4:	f000 f848 	bl	800fd78 <_sbrk_r>
 800fce8:	4580      	cmp	r8, r0
 800fcea:	d13a      	bne.n	800fd62 <_malloc_r+0xd2>
 800fcec:	6821      	ldr	r1, [r4, #0]
 800fcee:	3503      	adds	r5, #3
 800fcf0:	1a6d      	subs	r5, r5, r1
 800fcf2:	f025 0503 	bic.w	r5, r5, #3
 800fcf6:	3508      	adds	r5, #8
 800fcf8:	2d0c      	cmp	r5, #12
 800fcfa:	bf38      	it	cc
 800fcfc:	250c      	movcc	r5, #12
 800fcfe:	4629      	mov	r1, r5
 800fd00:	4638      	mov	r0, r7
 800fd02:	f7ff ffa5 	bl	800fc50 <sbrk_aligned>
 800fd06:	3001      	adds	r0, #1
 800fd08:	d02b      	beq.n	800fd62 <_malloc_r+0xd2>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	442b      	add	r3, r5
 800fd0e:	6023      	str	r3, [r4, #0]
 800fd10:	e00e      	b.n	800fd30 <_malloc_r+0xa0>
 800fd12:	6822      	ldr	r2, [r4, #0]
 800fd14:	1b52      	subs	r2, r2, r5
 800fd16:	d41e      	bmi.n	800fd56 <_malloc_r+0xc6>
 800fd18:	2a0b      	cmp	r2, #11
 800fd1a:	d916      	bls.n	800fd4a <_malloc_r+0xba>
 800fd1c:	1961      	adds	r1, r4, r5
 800fd1e:	42a3      	cmp	r3, r4
 800fd20:	6025      	str	r5, [r4, #0]
 800fd22:	bf18      	it	ne
 800fd24:	6059      	strne	r1, [r3, #4]
 800fd26:	6863      	ldr	r3, [r4, #4]
 800fd28:	bf08      	it	eq
 800fd2a:	6031      	streq	r1, [r6, #0]
 800fd2c:	5162      	str	r2, [r4, r5]
 800fd2e:	604b      	str	r3, [r1, #4]
 800fd30:	4638      	mov	r0, r7
 800fd32:	f104 060b 	add.w	r6, r4, #11
 800fd36:	f000 f835 	bl	800fda4 <__malloc_unlock>
 800fd3a:	f026 0607 	bic.w	r6, r6, #7
 800fd3e:	1d23      	adds	r3, r4, #4
 800fd40:	1af2      	subs	r2, r6, r3
 800fd42:	d0b6      	beq.n	800fcb2 <_malloc_r+0x22>
 800fd44:	1b9b      	subs	r3, r3, r6
 800fd46:	50a3      	str	r3, [r4, r2]
 800fd48:	e7b3      	b.n	800fcb2 <_malloc_r+0x22>
 800fd4a:	6862      	ldr	r2, [r4, #4]
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	bf0c      	ite	eq
 800fd50:	6032      	streq	r2, [r6, #0]
 800fd52:	605a      	strne	r2, [r3, #4]
 800fd54:	e7ec      	b.n	800fd30 <_malloc_r+0xa0>
 800fd56:	4623      	mov	r3, r4
 800fd58:	6864      	ldr	r4, [r4, #4]
 800fd5a:	e7b2      	b.n	800fcc2 <_malloc_r+0x32>
 800fd5c:	4634      	mov	r4, r6
 800fd5e:	6876      	ldr	r6, [r6, #4]
 800fd60:	e7b9      	b.n	800fcd6 <_malloc_r+0x46>
 800fd62:	230c      	movs	r3, #12
 800fd64:	603b      	str	r3, [r7, #0]
 800fd66:	4638      	mov	r0, r7
 800fd68:	f000 f81c 	bl	800fda4 <__malloc_unlock>
 800fd6c:	e7a1      	b.n	800fcb2 <_malloc_r+0x22>
 800fd6e:	6025      	str	r5, [r4, #0]
 800fd70:	e7de      	b.n	800fd30 <_malloc_r+0xa0>
 800fd72:	bf00      	nop
 800fd74:	20008fd0 	.word	0x20008fd0

0800fd78 <_sbrk_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_sbrk_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f1 fdc2 	bl	800190c <_sbrk>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_sbrk_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_sbrk_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20008fd8 	.word	0x20008fd8

0800fd98 <__malloc_lock>:
 800fd98:	4801      	ldr	r0, [pc, #4]	; (800fda0 <__malloc_lock+0x8>)
 800fd9a:	f000 b809 	b.w	800fdb0 <__retarget_lock_acquire_recursive>
 800fd9e:	bf00      	nop
 800fda0:	20008fdc 	.word	0x20008fdc

0800fda4 <__malloc_unlock>:
 800fda4:	4801      	ldr	r0, [pc, #4]	; (800fdac <__malloc_unlock+0x8>)
 800fda6:	f000 b804 	b.w	800fdb2 <__retarget_lock_release_recursive>
 800fdaa:	bf00      	nop
 800fdac:	20008fdc 	.word	0x20008fdc

0800fdb0 <__retarget_lock_acquire_recursive>:
 800fdb0:	4770      	bx	lr

0800fdb2 <__retarget_lock_release_recursive>:
 800fdb2:	4770      	bx	lr

0800fdb4 <_init>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	bf00      	nop
 800fdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdba:	bc08      	pop	{r3}
 800fdbc:	469e      	mov	lr, r3
 800fdbe:	4770      	bx	lr

0800fdc0 <_fini>:
 800fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc2:	bf00      	nop
 800fdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdc6:	bc08      	pop	{r3}
 800fdc8:	469e      	mov	lr, r3
 800fdca:	4770      	bx	lr
