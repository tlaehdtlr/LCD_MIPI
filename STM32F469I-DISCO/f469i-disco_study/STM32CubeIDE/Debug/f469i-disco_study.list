
f469i-disco_study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a08  08011dac  08011dac  00021dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147b4  080147b4  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  080147b4  080147b4  000247b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147bc  080147bc  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147bc  080147bc  000247bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147c0  080147c0  000247c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080147c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300b4  2**0
                  CONTENTS
 10 .bss          000091d0  200000b4  200000b4  000300b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009284  20009284  000300b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f120  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009269  00000000  00000000  0006f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003008  00000000  00000000  00078470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c00  00000000  00000000  0007b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000394e3  00000000  00000000  0007e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043cf4  00000000  00000000  000b755b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012400b  00000000  00000000  000fb24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021f25a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c850  00000000  00000000  0021f2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011d94 	.word	0x08011d94

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	08011d94 	.word	0x08011d94

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_CRC_Init+0x20>)
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <MX_CRC_Init+0x24>)
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_CRC_Init+0x20>)
 8000510:	f003 fc26 	bl	8003d60 <HAL_CRC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800051a:	f000 fe97 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000d0 	.word	0x200000d0
 8000528:	40023000 	.word	0x40023000

0800052c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <HAL_CRC_MspInit+0x3c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10d      	bne.n	800055a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023000 	.word	0x40023000
 800056c:	40023800 	.word	0x40023800

08000570 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <MX_DMA2D_Init+0x60>)
 8000578:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a6:	f003 fe47 	bl	8004238 <HAL_DMA2D_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005b0:	f000 fe4c 	bl	800124c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005b4:	2101      	movs	r1, #1
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005b8:	f004 f8ac 	bl	8004714 <HAL_DMA2D_ConfigLayer>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005c2:	f000 fe43 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000d8 	.word	0x200000d8
 80005d0:	4002b000 	.word	0x4002b000

080005d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_DMA2D_MspInit+0x48>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d115      	bne.n	8000612 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2105      	movs	r1, #5
 8000606:	205a      	movs	r0, #90	; 0x5a
 8000608:	f003 fb72 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800060c:	205a      	movs	r0, #90	; 0x5a
 800060e:	f003 fb8b 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	4002b000 	.word	0x4002b000
 8000620:	40023800 	.word	0x40023800

08000624 <HAL_DSI_MspInit>:
  /* USER CODE END DSIHOST_Init 2 */

}

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <HAL_DSI_MspInit+0x94>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d133      	bne.n	80006ae <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_DSI_MspInit+0x98>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <HAL_DSI_MspInit+0x98>)
 8000650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000654:	6453      	str	r3, [r2, #68]	; 0x44
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_DSI_MspInit+0x98>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_DSI_MspInit+0x98>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <HAL_DSI_MspInit+0x98>)
 800066c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_DSI_MspInit+0x98>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800068e:	230d      	movs	r3, #13
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <HAL_DSI_MspInit+0x9c>)
 800069a:	f004 ff91 	bl	80055c0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2105      	movs	r1, #5
 80006a2:	205c      	movs	r0, #92	; 0x5c
 80006a4:	f003 fb24 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80006a8:	205c      	movs	r0, #92	; 0x5c
 80006aa:	f003 fb3d 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40016c00 	.word	0x40016c00
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40022400 	.word	0x40022400

080006c4 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <HAL_DSI_MspDeInit+0x34>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10c      	bne.n	80006f0 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_DSI_MspDeInit+0x38>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_DSI_MspDeInit+0x38>)
 80006dc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSI_TE_GPIO_Port, DSI_TE_Pin);
 80006e2:	2104      	movs	r1, #4
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <HAL_DSI_MspDeInit+0x3c>)
 80006e6:	f005 f917 	bl	8005918 <HAL_GPIO_DeInit>

    /* DSI interrupt Deinit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 80006ea:	205c      	movs	r0, #92	; 0x5c
 80006ec:	f003 fb2a 	bl	8003d44 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40016c00 	.word	0x40016c00
 80006fc:	40023800 	.word	0x40023800
 8000700:	40022400 	.word	0x40022400

08000704 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_FMC_Init+0x98>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <MX_FMC_Init+0x9c>)
 8000720:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_FMC_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_FMC_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_FMC_Init+0x98>)
 8000730:	2204      	movs	r2, #4
 8000732:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_FMC_Init+0x98>)
 8000736:	2220      	movs	r2, #32
 8000738:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_FMC_Init+0x98>)
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_FMC_Init+0x98>)
 8000742:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000746:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_FMC_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_FMC_Init+0x98>)
 8000750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000754:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_FMC_Init+0x98>)
 8000758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_FMC_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000770:	2307      	movs	r3, #7
 8000772:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000774:	2303      	movs	r3, #3
 8000776:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_FMC_Init+0x98>)
 8000786:	f009 fe06 	bl	800a396 <HAL_SDRAM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000790:	f000 fd5c 	bl	800124c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000134 	.word	0x20000134
 80007a0:	a0000140 	.word	0xa0000140

080007a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80007b8:	4b44      	ldr	r3, [pc, #272]	; (80008cc <HAL_FMC_MspInit+0x128>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f040 8081 	bne.w	80008c4 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <HAL_FMC_MspInit+0x128>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <HAL_FMC_MspInit+0x12c>)
 80007ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d0:	4a3f      	ldr	r2, [pc, #252]	; (80008d0 <HAL_FMC_MspInit+0x12c>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6393      	str	r3, [r2, #56]	; 0x38
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <HAL_FMC_MspInit+0x12c>)
 80007da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80007e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007e8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4835      	ldr	r0, [pc, #212]	; (80008d4 <HAL_FMC_MspInit+0x130>)
 8000800:	f004 fede 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8000804:	f248 1333 	movw	r3, #33075	; 0x8133
 8000808:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000816:	230c      	movs	r3, #12
 8000818:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	482e      	ldr	r0, [pc, #184]	; (80008d8 <HAL_FMC_MspInit+0x134>)
 8000820:	f004 fece 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8000824:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000828:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000836:	230c      	movs	r3, #12
 8000838:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4827      	ldr	r0, [pc, #156]	; (80008dc <HAL_FMC_MspInit+0x138>)
 8000840:	f004 febe 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000844:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000848:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000856:	230c      	movs	r3, #12
 8000858:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4820      	ldr	r0, [pc, #128]	; (80008e0 <HAL_FMC_MspInit+0x13c>)
 8000860:	f004 feae 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000864:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000868:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4819      	ldr	r0, [pc, #100]	; (80008e4 <HAL_FMC_MspInit+0x140>)
 8000880:	f004 fe9e 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000884:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000888:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000896:	230c      	movs	r3, #12
 8000898:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <HAL_FMC_MspInit+0x144>)
 80008a0:	f004 fe8e 	bl	80055c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b4:	230c      	movs	r3, #12
 80008b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_FMC_MspInit+0x148>)
 80008be:	f004 fe7f 	bl	80055c0 <HAL_GPIO_Init>
 80008c2:	e000      	b.n	80008c6 <HAL_FMC_MspInit+0x122>
    return;
 80008c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000168 	.word	0x20000168
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40021800 	.word	0x40021800
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	40022000 	.word	0x40022000
 80008e4:	40021400 	.word	0x40021400
 80008e8:	40021c00 	.word	0x40021c00
 80008ec:	40020800 	.word	0x40020800

080008f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008f8:	f7ff ff54 	bl	80007a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <vApplicationGetIdleTaskMemory+0x2c>)
 8000948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <vApplicationGetIdleTaskMemory+0x30>)
 800094e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000170 	.word	0x20000170
 8000968:	200001c8 	.word	0x200001c8

0800096c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_FREERTOS_Init+0x30>)
 8000974:	1d3c      	adds	r4, r7, #4
 8000976:	461d      	mov	r5, r3
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f00c fbd7 	bl	800d13c <osThreadCreate>
 800098e:	4603      	mov	r3, r0
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <MX_FREERTOS_Init+0x34>)
 8000992:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bdb0      	pop	{r4, r5, r7, pc}
 800099c:	08011db8 	.word	0x08011db8
 80009a0:	2000016c 	.word	0x2000016c

080009a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009ac:	f001 fb26 	bl	8001ffc <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2110      	movs	r1, #16
 80009b4:	4829      	ldr	r0, [pc, #164]	; (8000a5c <StartDefaultTask+0xb8>)
 80009b6:	f005 f8d3 	bl	8005b60 <HAL_GPIO_WritePin>

  uint8_t  lcd_status = LCD_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]

  lcd_status = BSP_LCD_Init(); 
 80009be:	f002 f882 	bl	8002ac6 <BSP_LCD_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
  if (lcd_status)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <StartDefaultTask+0x32>
  {
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2108      	movs	r1, #8
 80009d0:	4823      	ldr	r0, [pc, #140]	; (8000a60 <StartDefaultTask+0xbc>)
 80009d2:	f005 f8c5 	bl	8005b60 <HAL_GPIO_WritePin>
  }
  BSP_LCD_SelectLayer(0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f002 fa76 	bl	8002ec8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80009dc:	f002 fc8c 	bl	80032f8 <BSP_LCD_DisplayOn>


  BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);   
 80009e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 fa0f 	bl	8002e08 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f002 fa6c 	bl	8002ec8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f002 fada 	bl	8002fac <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80009f8:	481a      	ldr	r0, [pc, #104]	; (8000a64 <StartDefaultTask+0xc0>)
 80009fa:	f002 fa8d 	bl	8002f18 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80009fe:	4819      	ldr	r0, [pc, #100]	; (8000a64 <StartDefaultTask+0xc0>)
 8000a00:	f002 fa72 	bl	8002ee8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, 800, 112);  
 8000a04:	2370      	movs	r3, #112	; 0x70
 8000a06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f002 fc19 	bl	8003244 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a12:	f04f 30ff 	mov.w	r0, #4294967295
 8000a16:	f002 fa67 	bl	8002ee8 <BSP_LCD_SetTextColor>

  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"          LCD_DSI_VideoMode_SingleBuffer");
 8000a1a:	4913      	ldr	r1, [pc, #76]	; (8000a68 <StartDefaultTask+0xc4>)
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f002 fbf9 	bl	8003214 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetFont(&Font16);
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <StartDefaultTask+0xc8>)
 8000a24:	f002 fa92 	bl	8002f4c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"This example shows how to display images on LCD DSI using same buffer");
 8000a28:	4911      	ldr	r1, [pc, #68]	; (8000a70 <StartDefaultTask+0xcc>)
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f002 fbf2 	bl	8003214 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"for display and for draw     ");   
 8000a30:	4910      	ldr	r1, [pc, #64]	; (8000a74 <StartDefaultTask+0xd0>)
 8000a32:	2005      	movs	r0, #5
 8000a34:	f002 fbee 	bl	8003214 <BSP_LCD_DisplayStringAtLine>



  HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <StartDefaultTask+0xb8>)
 8000a3e:	f005 f88f 	bl	8005b60 <HAL_GPIO_WritePin>
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <StartDefaultTask+0xd4>)
 8000a46:	f005 f8a4 	bl	8005b92 <HAL_GPIO_TogglePin>
    BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"          Sim Donksik");
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <StartDefaultTask+0xd8>)
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f002 fbe1 	bl	8003214 <BSP_LCD_DisplayStringAtLine>
    osDelay(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a56:	f00c fbbd 	bl	800d1d4 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a5a:	e7f2      	b.n	8000a42 <StartDefaultTask+0x9e>
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40022800 	.word	0x40022800
 8000a64:	ff0000ff 	.word	0xff0000ff
 8000a68:	08011dd4 	.word	0x08011dd4
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	08011e00 	.word	0x08011e00
 8000a74:	08011e48 	.word	0x08011e48
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	08011e68 	.word	0x08011e68

08000a80 <MX_GPIO_Init>:
/** Configure pins
     PB3   ------> I2S3_CK
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	; 0x40
 8000a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9a:	4bae      	ldr	r3, [pc, #696]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4aad      	ldr	r2, [pc, #692]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4bab      	ldr	r3, [pc, #684]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	4ba7      	ldr	r3, [pc, #668]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4aa6      	ldr	r2, [pc, #664]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4ba4      	ldr	r3, [pc, #656]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
 8000ad2:	4ba0      	ldr	r3, [pc, #640]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a9f      	ldr	r2, [pc, #636]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b9d      	ldr	r3, [pc, #628]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	4b99      	ldr	r3, [pc, #612]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a98      	ldr	r2, [pc, #608]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b96      	ldr	r3, [pc, #600]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	4b92      	ldr	r3, [pc, #584]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a91      	ldr	r2, [pc, #580]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b8f      	ldr	r3, [pc, #572]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4b8b      	ldr	r3, [pc, #556]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a8a      	ldr	r2, [pc, #552]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b88      	ldr	r3, [pc, #544]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b84      	ldr	r3, [pc, #528]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a83      	ldr	r2, [pc, #524]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b81      	ldr	r3, [pc, #516]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a7c      	ldr	r2, [pc, #496]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a75      	ldr	r2, [pc, #468]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b73      	ldr	r3, [pc, #460]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a6e      	ldr	r2, [pc, #440]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b68      	ldr	r3, [pc, #416]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a67      	ldr	r2, [pc, #412]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210c      	movs	r1, #12
 8000bce:	4862      	ldr	r0, [pc, #392]	; (8000d58 <MX_GPIO_Init+0x2d8>)
 8000bd0:	f004 ffc6 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2130      	movs	r1, #48	; 0x30
 8000bd8:	4860      	ldr	r0, [pc, #384]	; (8000d5c <MX_GPIO_Init+0x2dc>)
 8000bda:	f004 ffc1 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	485f      	ldr	r0, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x2e0>)
 8000be4:	f004 ffbc 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	485d      	ldr	r0, [pc, #372]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000bee:	f004 ffb7 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	485c      	ldr	r0, [pc, #368]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f004 ffb2 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	485a      	ldr	r0, [pc, #360]	; (8000d6c <MX_GPIO_Init+0x2ec>)
 8000c02:	f004 ffad 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4859      	ldr	r0, [pc, #356]	; (8000d70 <MX_GPIO_Init+0x2f0>)
 8000c0c:	f004 ffa8 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000c10:	230c      	movs	r3, #12
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	484c      	ldr	r0, [pc, #304]	; (8000d58 <MX_GPIO_Init+0x2d8>)
 8000c28:	f004 fcca 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4848      	ldr	r0, [pc, #288]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000c48:	f004 fcba 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4841      	ldr	r0, [pc, #260]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000c62:	f004 fcad 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000c66:	2330      	movs	r3, #48	; 0x30
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c6a:	2311      	movs	r3, #17
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4837      	ldr	r0, [pc, #220]	; (8000d5c <MX_GPIO_Init+0x2dc>)
 8000c7e:	f004 fc9f 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c86:	2311      	movs	r3, #17
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4831      	ldr	r0, [pc, #196]	; (8000d60 <MX_GPIO_Init+0x2e0>)
 8000c9a:	f004 fc91 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca2:	2311      	movs	r3, #17
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482b      	ldr	r0, [pc, #172]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000cb6:	f004 fc83 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4825      	ldr	r0, [pc, #148]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000cd2:	f004 fc75 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481a      	ldr	r0, [pc, #104]	; (8000d5c <MX_GPIO_Init+0x2dc>)
 8000cf4:	f004 fc64 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4816      	ldr	r0, [pc, #88]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000d0c:	f004 fc58 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d10:	2320      	movs	r3, #32
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <MX_GPIO_Init+0x2f4>)
 8000d26:	f004 fc4b 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <MX_GPIO_Init+0x2ec>)
 8000d42:	f004 fc3d 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d46:	2308      	movs	r3, #8
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e012      	b.n	8000d78 <MX_GPIO_Init+0x2f8>
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	40022800 	.word	0x40022800
 8000d64:	40021800 	.word	0x40021800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40021c00 	.word	0x40021c00
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40022400 	.word	0x40022400
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_GPIO_Init+0x314>)
 8000d86:	f004 fc1b 	bl	80055c0 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3740      	adds	r7, #64	; 0x40
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000

08000d98 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <MX_I2C1_Init+0x54>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x58>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dd6:	f006 fb01 	bl	80073dc <HAL_I2C_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de0:	f000 fa34 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200003c8 	.word	0x200003c8
 8000dec:	40005400 	.word	0x40005400
 8000df0:	000186a0 	.word	0x000186a0

08000df4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <MX_I2C2_Init+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_I2C2_Init+0x58>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_I2C2_Init+0x50>)
 8000e32:	f006 fad3 	bl	80073dc <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 fa06 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000041c 	.word	0x2000041c
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	000186a0 	.word	0x000186a0

08000e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <HAL_I2C_MspInit+0xe8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12d      	bne.n	8000ece <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4825      	ldr	r0, [pc, #148]	; (8000f40 <HAL_I2C_MspInit+0xf0>)
 8000eac:	f004 fb88 	bl	80055c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ecc:	e030      	b.n	8000f30 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_I2C_MspInit+0xf4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d12b      	bne.n	8000f30 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000ef4:	2330      	movs	r3, #48	; 0x30
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f04:	2304      	movs	r3, #4
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480e      	ldr	r0, [pc, #56]	; (8000f48 <HAL_I2C_MspInit+0xf8>)
 8000f10:	f004 fb56 	bl	80055c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_I2C_MspInit+0xec>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	; 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40005800 	.word	0x40005800
 8000f48:	40021c00 	.word	0x40021c00

08000f4c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2234      	movs	r2, #52	; 0x34
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f010 fe15 	bl	8011b88 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f60:	4a38      	ldr	r2, [pc, #224]	; (8001044 <MX_LTDC_Init+0xf8>)
 8000f62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f96:	22c9      	movs	r2, #201	; 0xc9
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000f9c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000fa4:	22ca      	movs	r2, #202	; 0xca
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000faa:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fc8:	481d      	ldr	r0, [pc, #116]	; (8001040 <MX_LTDC_Init+0xf4>)
 8000fca:	f006 fb4b 	bl	8007664 <HAL_LTDC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 f93a 	bl	800124c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000fdc:	23c8      	movs	r3, #200	; 0xc8
 8000fde:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fe4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ff6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ffa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001000:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8001006:	23c8      	movs	r3, #200	; 0xc8
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800100a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_LTDC_Init+0xf4>)
 800102a:	f006 fcad 	bl	8007988 <HAL_LTDC_ConfigLayer>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001034:	f000 f90a 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3738      	adds	r7, #56	; 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000470 	.word	0x20000470
 8001044:	40016800 	.word	0x40016800

08001048 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_LTDC_MspInit+0x48>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_LTDC_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_LTDC_MspInit+0x4c>)
 8001064:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_LTDC_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2058      	movs	r0, #88	; 0x58
 800107c:	f002 fe38 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001080:	2058      	movs	r0, #88	; 0x58
 8001082:	f002 fe51 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40016800 	.word	0x40016800
 8001094:	40023800 	.word	0x40023800

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109c:	f002 fce6 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f824 	bl	80010ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010a4:	f000 f894 	bl	80011d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fcea 	bl	8000a80 <MX_GPIO_Init>
  MX_CRC_Init();
 80010ac:	f7ff fa2a 	bl	8000504 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010b0:	f7ff fa5e 	bl	8000570 <MX_DMA2D_Init>
  // MX_DSIHOST_DSI_Init();
  MX_FMC_Init();
 80010b4:	f7ff fb26 	bl	8000704 <MX_FMC_Init>
  MX_I2C1_Init();
 80010b8:	f7ff fe6e 	bl	8000d98 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010bc:	f7ff fe9a 	bl	8000df4 <MX_I2C2_Init>
  MX_LTDC_Init();
 80010c0:	f7ff ff44 	bl	8000f4c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80010c4:	f000 f8c8 	bl	8001258 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80010c8:	f000 f96c 	bl	80013a4 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 80010cc:	f000 fa28 	bl	8001520 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80010d0:	f000 fbd4 	bl	800187c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80010d4:	f000 fc44 	bl	8001960 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80010d8:	f000 fc6c 	bl	80019b4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80010dc:	f000 fd14 	bl	8001b08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010e0:	f7ff fc44 	bl	800096c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010e4:	f00c f807 	bl	800d0f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <main+0x50>
	...

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2234      	movs	r2, #52	; 0x34
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f010 fd44 	bl	8011b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <SystemClock_Config+0xdc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <SystemClock_Config+0xdc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <SystemClock_Config+0xdc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemClock_Config+0xe0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <SystemClock_Config+0xe0>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <SystemClock_Config+0xe0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001160:	23b4      	movs	r3, #180	; 0xb4
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001168:	2306      	movs	r3, #6
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800116c:	2306      	movs	r3, #6
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4618      	mov	r0, r3
 8001176:	f007 fbcf 	bl	8008918 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001180:	f000 f864 	bl	800124c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001184:	f006 fe26 	bl	8007dd4 <HAL_PWREx_EnableOverDrive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800118e:	f000 f85d 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2105      	movs	r1, #5
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 ff21 	bl	8007ff8 <HAL_RCC_ClockConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011bc:	f000 f846 	bl	800124c <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	223c      	movs	r2, #60	; 0x3c
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f010 fcd3 	bl	8011b88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80011e2:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80011e8:	2390      	movs	r3, #144	; 0x90
 80011ea:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80011f4:	2306      	movs	r3, #6
 80011f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4618      	mov	r0, r3
 8001210:	f007 f944 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800121a:	f000 f817 	bl	800124c <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123a:	f002 fc39 	bl	8003ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001000 	.word	0x40001000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_QUADSPI_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001264:	2201      	movs	r2, #1
 8001266:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 800126a:	2201      	movs	r2, #1
 800126c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001270:	2210      	movs	r2, #16
 8001272:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001276:	2218      	movs	r2, #24
 8001278:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 800127c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001280:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_QUADSPI_Init+0x50>)
 8001296:	f006 fded 	bl	8007e74 <HAL_QSPI_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f7ff ffd4 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000518 	.word	0x20000518
 80012ac:	a0001000 	.word	0xa0001000

080012b0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_QSPI_MspInit+0xe4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d15b      	bne.n	800138a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6393      	str	r3, [r2, #56]	; 0x38
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a28      	ldr	r2, [pc, #160]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_QSPI_MspInit+0xe8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001326:	2340      	movs	r3, #64	; 0x40
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001336:	230a      	movs	r3, #10
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <HAL_QSPI_MspInit+0xec>)
 8001342:	f004 f93d 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001346:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001358:	2309      	movs	r3, #9
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <HAL_QSPI_MspInit+0xf0>)
 8001364:	f004 f92c 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001368:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800137a:	230a      	movs	r3, #10
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <HAL_QSPI_MspInit+0xf0>)
 8001386:	f004 f91b 	bl	80055c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	a0001000 	.word	0xa0001000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40021400 	.word	0x40021400

080013a4 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <MX_SAI1_Init+0xb4>)
 80013ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <MX_SAI1_Init+0xb8>)
 80013ee:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_SAI1_Init+0xb0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SAI1_Init+0xb0>)
 800140a:	2208      	movs	r2, #8
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001410:	2201      	movs	r2, #1
 8001412:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001416:	2200      	movs	r2, #0
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SAI1_Init+0xb0>)
 800141c:	2200      	movs	r2, #0
 800141e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SAI1_Init+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001434:	2201      	movs	r2, #1
 8001436:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SAI1_Init+0xb0>)
 800143a:	2200      	movs	r2, #0
 800143c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SAI1_Init+0xb0>)
 8001440:	f007 fcee 	bl	8008e20 <HAL_SAI_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800144a:	f7ff feff 	bl	800124c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000564 	.word	0x20000564
 8001458:	40015804 	.word	0x40015804
 800145c:	0002ee00 	.word	0x0002ee00

08001460 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <HAL_SAI_MspInit+0xa8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d146      	bne.n	8001500 <HAL_SAI_MspInit+0xa0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_SAI_MspInit+0xac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10d      	bne.n	8001496 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_SAI_MspInit+0xb0>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_SAI_MspInit+0xb0>)
 8001484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_SAI_MspInit+0xb0>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_SAI_MspInit+0xac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <HAL_SAI_MspInit+0xac>)
 800149e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80014a0:	2330      	movs	r3, #48	; 0x30
 80014a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014b0:	2306      	movs	r3, #6
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <HAL_SAI_MspInit+0xb4>)
 80014bc:	f004 f880 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014d0:	2306      	movs	r3, #6
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <HAL_SAI_MspInit+0xb8>)
 80014dc:	f004 f870 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014f0:	2306      	movs	r3, #6
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <HAL_SAI_MspInit+0xbc>)
 80014fc:	f004 f860 	bl	80055c0 <HAL_GPIO_Init>

    }
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40015804 	.word	0x40015804
 800150c:	200005ec 	.word	0x200005ec
 8001510:	40023800 	.word	0x40023800
 8001514:	40021000 	.word	0x40021000
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40021800 	.word	0x40021800

08001520 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <MX_SDIO_SD_Init+0x3c>)
 8001528:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <MX_SDIO_SD_Init+0x38>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	200005f0 	.word	0x200005f0
 800155c:	40012c00 	.word	0x40012c00

08001560 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_SD_MspInit+0xc0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d14a      	bne.n	8001618 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_SD_MspInit+0xc4>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_SD_MspInit+0xc4>)
 800158c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_SD_MspInit+0xc4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_SD_MspInit+0xc4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80015d6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015da:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015e8:	230c      	movs	r3, #12
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_SD_MspInit+0xc8>)
 80015f4:	f003 ffe4 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80015f8:	2304      	movs	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001608:	230c      	movs	r3, #12
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <HAL_SD_MspInit+0xcc>)
 8001614:	f003 ffd4 	bl	80055c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40012c00 	.word	0x40012c00
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x54>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_MspInit+0x54>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x54>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_MspInit+0x54>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_MspInit+0x54>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_MspInit+0x54>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	210f      	movs	r1, #15
 8001672:	f06f 0001 	mvn.w	r0, #1
 8001676:	f002 fb3b 	bl	8003cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_InitTick+0xe4>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_InitTick+0xe4>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_InitTick+0xe4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b4:	f107 0210 	add.w	r2, r7, #16
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 feba 	bl	8008438 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ce:	f006 fe8b 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 80016d2:	6378      	str	r0, [r7, #52]	; 0x34
 80016d4:	e004      	b.n	80016e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016d6:	f006 fe87 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_InitTick+0xe8>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	3b01      	subs	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_InitTick+0xec>)
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <HAL_InitTick+0xf0>)
 80016f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_InitTick+0xec>)
 80016f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_InitTick+0xec>)
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_InitTick+0xec>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_InitTick+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_InitTick+0xec>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001714:	4817      	ldr	r0, [pc, #92]	; (8001774 <HAL_InitTick+0xec>)
 8001716:	f008 fecf 	bl	800a4b8 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11b      	bne.n	8001760 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001728:	4812      	ldr	r0, [pc, #72]	; (8001774 <HAL_InitTick+0xec>)
 800172a:	f008 ff15 	bl	800a558 <HAL_TIM_Base_Start_IT>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800173c:	2036      	movs	r0, #54	; 0x36
 800173e:	f002 faf3 	bl	8003d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d808      	bhi.n	800175a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2036      	movs	r0, #54	; 0x36
 800174e:	f002 facf 	bl	8003cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_InitTick+0xf4>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e002      	b.n	8001760 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001760:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001764:	4618      	mov	r0, r3
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	431bde83 	.word	0x431bde83
 8001774:	20000674 	.word	0x20000674
 8001778:	40001000 	.word	0x40001000
 800177c:	20000024 	.word	0x20000024

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM6_DAC_IRQHandler+0x10>)
 80017b2:	f008 ff41 	bl	800a638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000674 	.word	0x20000674

080017c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OTG_FS_IRQHandler+0x10>)
 80017c6:	f004 fc69 	bl	800609c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000b84 	.word	0x20000b84

080017d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <LTDC_IRQHandler+0x10>)
 80017da:	f006 f813 	bl	8007804 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000470 	.word	0x20000470

080017e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA2D_IRQHandler+0x10>)
 80017ee:	f002 fe80 	bl	80044f2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000d8 	.word	0x200000d8

080017fc <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DSI_IRQHandler+0x10>)
 8001802:	f003 fa8d 	bl	8004d20 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000118 	.word	0x20000118

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f010 f95a 	bl	8011af8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20050000 	.word	0x20050000
 8001870:	00000400 	.word	0x00000400
 8001874:	200006bc 	.word	0x200006bc
 8001878:	20009288 	.word	0x20009288

0800187c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_TIM1_Init+0x98>)
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <MX_TIM1_Init+0x9c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_TIM1_Init+0x98>)
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_TIM1_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_TIM1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_TIM1_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c4:	4813      	ldr	r0, [pc, #76]	; (8001914 <MX_TIM1_Init+0x98>)
 80018c6:	f008 fdf7 	bl	800a4b8 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018d0:	f7ff fcbc 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_TIM1_Init+0x98>)
 80018e2:	f008 ffb1 	bl	800a848 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018ec:	f7ff fcae 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_TIM1_Init+0x98>)
 80018fe:	f009 f9cd 	bl	800ac9c <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001908:	f7ff fca0 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200006c0 	.word	0x200006c0
 8001918:	40010000 	.word	0x40010000

0800191c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10d      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40023800 	.word	0x40023800

08001960 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_USART3_UART_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_USART3_UART_Init+0x4c>)
 8001998:	f009 fa10 	bl	800adbc <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019a2:	f7ff fc53 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000708 	.word	0x20000708
 80019b0:	40004800 	.word	0x40004800

080019b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <MX_USART6_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ec:	f009 f9e6 	bl	800adbc <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f7ff fc29 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000074c 	.word	0x2000074c
 8001a04:	40011400 	.word	0x40011400

08001a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d12d      	bne.n	8001a86 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a74:	2307      	movs	r3, #7
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481f      	ldr	r0, [pc, #124]	; (8001afc <HAL_UART_MspInit+0xf4>)
 8001a80:	f003 fd9e 	bl	80055c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a84:	e031      	b.n	8001aea <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <HAL_UART_MspInit+0xf8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d12c      	bne.n	8001aea <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a9a:	f043 0320 	orr.w	r3, r3, #32
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001ac8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ada:	2308      	movs	r3, #8
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <HAL_UART_MspInit+0xfc>)
 8001ae6:	f003 fd6b 	bl	80055c0 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40004800 	.word	0x40004800
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40021800 	.word	0x40021800

08001b08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <MX_FATFS_Init+0x18>)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_FATFS_Init+0x1c>)
 8001b10:	f00b fab8 	bl	800d084 <FATFS_LinkDriver>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <MX_FATFS_Init+0x20>)
 8001b1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000794 	.word	0x20000794
 8001b24:	08011ed4 	.word	0x08011ed4
 8001b28:	20000790 	.word	0x20000790

08001b2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001b36:	f000 f87b 	bl	8001c30 <BSP_SD_IsDetected>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d001      	beq.n	8001b44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e012      	b.n	8001b6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <BSP_SD_Init+0x48>)
 8001b46:	f007 fb93 	bl	8009270 <HAL_SD_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <BSP_SD_Init+0x48>)
 8001b5a:	f007 ffd5 	bl	8009b08 <HAL_SD_ConfigWideBusOperation>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200005f0 	.word	0x200005f0

08001b78 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8001b90:	f007 fc1e 	bl	80093d0 <HAL_SD_ReadBlocks_DMA>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200005f0 	.word	0x200005f0

08001bac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <BSP_SD_WriteBlocks_DMA+0x30>)
 8001bc4:	f007 fce4 	bl	8009590 <HAL_SD_WriteBlocks_DMA>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200005f0 	.word	0x200005f0

08001be0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <BSP_SD_GetCardState+0x1c>)
 8001be6:	f008 f829 	bl	8009c3c <HAL_SD_GetCardState>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200005f0 	.word	0x200005f0

08001c00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4803      	ldr	r0, [pc, #12]	; (8001c18 <BSP_SD_GetCardInfo+0x18>)
 8001c0c:	f007 ff50 	bl	8009ab0 <HAL_SD_GetCardInfo>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200005f0 	.word	0x200005f0

08001c1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8001c24:	f000 f9b2 	bl	8001f8c <BSP_SD_ReadCpltCallback>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001c36:	2301      	movs	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8001c3a:	f000 f80b 	bl	8001c54 <BSP_PlatformIsDetected>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	b2db      	uxtb	r3, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001c5e:	2104      	movs	r1, #4
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <BSP_PlatformIsDetected+0x28>)
 8001c62:	f003 ff65 	bl	8005b30 <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8001c70:	79fb      	ldrb	r3, [r7, #7]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021800 	.word	0x40021800

08001c80 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8001c88:	f00b fa48 	bl	800d11c <osKernelSysTick>
 8001c8c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8001c8e:	e006      	b.n	8001c9e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001c90:	f7ff ffa6 	bl	8001be0 <BSP_SD_GetCardState>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e009      	b.n	8001cb2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8001c9e:	f00b fa3d 	bl	800d11c <osKernelSysTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d8f0      	bhi.n	8001c90 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <SD_CheckStatus+0x38>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001ccc:	f7ff ff88 	bl	8001be0 <BSP_SD_GetCardState>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <SD_CheckStatus+0x38>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SD_CheckStatus+0x38>)
 8001ce4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001ce6:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <SD_CheckStatus+0x38>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <SD_initialize+0x8c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8001d08:	f00b f9fc 	bl	800d104 <osKernelRunning>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d030      	beq.n	8001d74 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001d12:	f7ff ff0b 	bl	8001b2c <BSP_SD_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffcc 	bl	8001cbc <SD_CheckStatus>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <SD_initialize+0x8c>)
 8001d2a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <SD_initialize+0x8c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d01e      	beq.n	8001d74 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <SD_initialize+0x90>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10e      	bne.n	8001d5c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <SD_initialize+0x94>)
 8001d40:	f107 0408 	add.w	r4, r7, #8
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00b fa53 	bl	800d1fc <osMessageCreate>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <SD_initialize+0x90>)
 8001d5a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <SD_initialize+0x90>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <SD_initialize+0x8c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SD_initialize+0x8c>)
 8001d72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <SD_initialize+0x8c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000798 	.word	0x20000798
 8001d8c:	08011e80 	.word	0x08011e80

08001d90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff8d 	bl	8001cbc <SD_CheckStatus>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001dc2:	f247 5030 	movw	r0, #30000	; 0x7530
 8001dc6:	f7ff ff5b 	bl	8001c80 <SD_CheckStatusWithTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da02      	bge.n	8001dd6 <SD_read+0x2a>
  {
    return res;
 8001dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd4:	e032      	b.n	8001e3c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f7ff fecc 	bl	8001b78 <BSP_SD_ReadBlocks_DMA>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8001de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d124      	bne.n	8001e38 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <SD_read+0x98>)
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	f247 5230 	movw	r2, #30000	; 0x7530
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00b fa66 	bl	800d2cc <osMessageGet>

    if (event.status == osEventMessage)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d118      	bne.n	8001e38 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d115      	bne.n	8001e38 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8001e0c:	f00b f986 	bl	800d11c <osKernelSysTick>
 8001e10:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8001e12:	e008      	b.n	8001e26 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001e14:	f7ff fee4 	bl	8001be0 <BSP_SD_GetCardState>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <SD_read+0x7a>
              {
                res = RES_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8001e24:	e008      	b.n	8001e38 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8001e26:	f00b f979 	bl	800d11c <osKernelSysTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f247 522f 	movw	r2, #29999	; 0x752f
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d9ed      	bls.n	8001e14 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8001e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000798 	.word	0x20000798

08001e48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001e5e:	f247 5030 	movw	r0, #30000	; 0x7530
 8001e62:	f7ff ff0d 	bl	8001c80 <SD_CheckStatusWithTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da02      	bge.n	8001e72 <SD_write+0x2a>
  {
    return res;
 8001e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e70:	e02e      	b.n	8001ed0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	f7ff fe98 	bl	8001bac <BSP_SD_WriteBlocks_DMA>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d124      	bne.n	8001ecc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <SD_write+0x90>)
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00b fa1c 	bl	800d2cc <osMessageGet>

    if (event.status == osEventMessage)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d118      	bne.n	8001ecc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d115      	bne.n	8001ecc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8001ea0:	f00b f93c 	bl	800d11c <osKernelSysTick>
 8001ea4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8001ea6:	e008      	b.n	8001eba <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001ea8:	f7ff fe9a 	bl	8001be0 <BSP_SD_GetCardState>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <SD_write+0x72>
          {
            res = RES_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001eb8:	e008      	b.n	8001ecc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8001eba:	f00b f92f 	bl	800d11c <osKernelSysTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d9ed      	bls.n	8001ea8 <SD_write+0x60>
    }

  }
#endif

  return res;
 8001ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000798 	.word	0x20000798

08001edc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	603a      	str	r2, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <SD_ioctl+0xac>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SD_ioctl+0x28>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e03c      	b.n	8001f7e <SD_ioctl+0xa2>

  switch (cmd)
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d834      	bhi.n	8001f74 <SD_ioctl+0x98>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <SD_ioctl+0x34>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f29 	.word	0x08001f29
 8001f18:	08001f41 	.word	0x08001f41
 8001f1c:	08001f5b 	.word	0x08001f5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f26:	e028      	b.n	8001f7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe67 	bl	8001c00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f3e:	e01c      	b.n	8001f7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe5b 	bl	8001c00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f58:	e00f      	b.n	8001f7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fe4e 	bl	8001c00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	0a5a      	lsrs	r2, r3, #9
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f72:	e002      	b.n	8001f7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001f74:	2304      	movs	r3, #4
 8001f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <BSP_SD_ReadCpltCallback+0x18>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f00b f957 	bl	800d24c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000798 	.word	0x20000798

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd2:	f001 fd39 	bl	8003a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f00f fd95 	bl	8011b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff f85d 	bl	8001098 <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001fec:	080147c4 	.word	0x080147c4
  ldr r2, =_sbss
 8001ff0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001ff4:	20009284 	.word	0x20009284

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8002000:	2201      	movs	r2, #1
 8002002:	490e      	ldr	r1, [pc, #56]	; (800203c <MX_USB_HOST_Init+0x40>)
 8002004:	480e      	ldr	r0, [pc, #56]	; (8002040 <MX_USB_HOST_Init+0x44>)
 8002006:	f00d fef3 	bl	800fdf0 <USBH_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8002010:	f7ff f91c 	bl	800124c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8002014:	490b      	ldr	r1, [pc, #44]	; (8002044 <MX_USB_HOST_Init+0x48>)
 8002016:	480a      	ldr	r0, [pc, #40]	; (8002040 <MX_USB_HOST_Init+0x44>)
 8002018:	f00d ffa0 	bl	800ff5c <USBH_RegisterClass>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8002022:	f7ff f913 	bl	800124c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_USB_HOST_Init+0x44>)
 8002028:	f00e f824 	bl	8010074 <USBH_Start>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8002032:	f7ff f90b 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	08002049 	.word	0x08002049
 8002040:	2000079c 	.word	0x2000079c
 8002044:	20000030 	.word	0x20000030

08002048 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	3b01      	subs	r3, #1
 8002058:	2b04      	cmp	r3, #4
 800205a:	d819      	bhi.n	8002090 <USBH_UserProcess+0x48>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <USBH_UserProcess+0x1c>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002091 	.word	0x08002091
 8002068:	08002081 	.word	0x08002081
 800206c:	08002091 	.word	0x08002091
 8002070:	08002089 	.word	0x08002089
 8002074:	08002079 	.word	0x08002079
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <USBH_UserProcess+0x58>)
 800207a:	2203      	movs	r2, #3
 800207c:	701a      	strb	r2, [r3, #0]
  break;
 800207e:	e008      	b.n	8002092 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <USBH_UserProcess+0x58>)
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
  break;
 8002086:	e004      	b.n	8002092 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <USBH_UserProcess+0x58>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
  break;
 800208e:	e000      	b.n	8002092 <USBH_UserProcess+0x4a>

  default:
  break;
 8002090:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000b80 	.word	0x20000b80

080020a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d147      	bne.n	8002156 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a24      	ldr	r2, [pc, #144]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80020e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020f4:	230a      	movs	r3, #10
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <HAL_HCD_MspInit+0xc0>)
 8002100:	f003 fa5e 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8002104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4812      	ldr	r0, [pc, #72]	; (8002164 <HAL_HCD_MspInit+0xc0>)
 800211a:	f003 fa51 	bl	80055c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 8002120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6353      	str	r3, [r2, #52]	; 0x34
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_HCD_MspInit+0xbc>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2105      	movs	r1, #5
 800214a:	2043      	movs	r0, #67	; 0x43
 800214c:	f001 fdd0 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002150:	2043      	movs	r0, #67	; 0x43
 8002152:	f001 fde9 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002176:	4618      	mov	r0, r3
 8002178:	f00e fc33 	bl	80109e2 <USBH_LL_IncTimer>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002192:	4618      	mov	r0, r3
 8002194:	f00e fc77 	bl	8010a86 <USBH_LL_Connect>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00e fc8c 	bl	8010acc <USBH_LL_Disconnect>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
 80021c8:	4613      	mov	r3, r2
 80021ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00e fcc1 	bl	8010b5a <USBH_LL_NotifyURBChange>
#endif
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00e fc21 	bl	8010a36 <USBH_LL_PortEnabled>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800220a:	4618      	mov	r0, r3
 800220c:	f00e fc2d 	bl	8010a6a <USBH_LL_PortDisabled>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8002226:	2b01      	cmp	r3, #1
 8002228:	d12a      	bne.n	8002280 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <USBH_LL_Init+0x74>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	; (800228c <USBH_LL_Init+0x74>)
 8002236:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <USBH_LL_Init+0x74>)
 800223c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002240:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <USBH_LL_Init+0x74>)
 8002244:	2208      	movs	r2, #8
 8002246:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <USBH_LL_Init+0x74>)
 800224a:	2201      	movs	r2, #1
 800224c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <USBH_LL_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <USBH_LL_Init+0x74>)
 8002256:	2202      	movs	r2, #2
 8002258:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <USBH_LL_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <USBH_LL_Init+0x74>)
 8002262:	f003 fcb0 	bl	8005bc6 <HAL_HCD_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800226c:	f7fe ffee 	bl	800124c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8002270:	4806      	ldr	r0, [pc, #24]	; (800228c <USBH_LL_Init+0x74>)
 8002272:	f004 f894 	bl	800639e <HAL_HCD_GetCurrentFrame>
 8002276:	4603      	mov	r3, r0
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f00e fba2 	bl	80109c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000b84 	.word	0x20000b84

08002290 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 f803 	bl	80062b2 <HAL_HCD_Start>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f95c 	bl	8002570 <USBH_Get_USB_Status>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 f80b 	bl	80062f8 <HAL_HCD_Stop>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f941 	bl	8002570 <USBH_Get_USB_Status>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f853 	bl	80063ba <HAL_HCD_GetCurrentSpeed>
 8002314:	4603      	mov	r3, r0
 8002316:	2b02      	cmp	r3, #2
 8002318:	d00c      	beq.n	8002334 <USBH_LL_GetSpeed+0x38>
 800231a:	2b02      	cmp	r3, #2
 800231c:	d80d      	bhi.n	800233a <USBH_LL_GetSpeed+0x3e>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <USBH_LL_GetSpeed+0x2c>
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <USBH_LL_GetSpeed+0x32>
 8002326:	e008      	b.n	800233a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
    break;
 800232c:	e008      	b.n	8002340 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
    break;
 8002332:	e005      	b.n	8002340 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8002334:	2302      	movs	r3, #2
 8002336:	73fb      	strb	r3, [r7, #15]
    break;
 8002338:	e002      	b.n	8002340 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
    break;
 800233e:	bf00      	nop
  }
  return  speed;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002360:	4618      	mov	r0, r3
 8002362:	f003 ffe6 	bl	8006332 <HAL_HCD_ResetPort>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8ff 	bl	8002570 <USBH_Get_USB_Status>
 8002372:	4603      	mov	r3, r0
 8002374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002376:	7bbb      	ldrb	r3, [r7, #14]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f003 ffed 	bl	8006376 <HAL_HCD_HC_GetXferCount>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80023a6:	b590      	push	{r4, r7, lr}
 80023a8:	b089      	sub	sp, #36	; 0x24
 80023aa:	af04      	add	r7, sp, #16
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	4608      	mov	r0, r1
 80023b0:	4611      	mov	r1, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70bb      	strb	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80023ce:	787c      	ldrb	r4, [r7, #1]
 80023d0:	78ba      	ldrb	r2, [r7, #2]
 80023d2:	78f9      	ldrb	r1, [r7, #3]
 80023d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4623      	mov	r3, r4
 80023e6:	f003 fc50 	bl	8005c8a <HAL_HCD_HC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f8bd 	bl	8002570 <USBH_Get_USB_Status>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fcc0 	bl	8005da8 <HAL_HCD_HC_Halt>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f89e 	bl	8002570 <USBH_Get_USB_Status>
 8002434:	4603      	mov	r3, r0
 8002436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002438:	7bbb      	ldrb	r3, [r7, #14]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8002442:	b590      	push	{r4, r7, lr}
 8002444:	b089      	sub	sp, #36	; 0x24
 8002446:	af04      	add	r7, sp, #16
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	4608      	mov	r0, r1
 800244c:	4611      	mov	r1, r2
 800244e:	461a      	mov	r2, r3
 8002450:	4603      	mov	r3, r0
 8002452:	70fb      	strb	r3, [r7, #3]
 8002454:	460b      	mov	r3, r1
 8002456:	70bb      	strb	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800246a:	787c      	ldrb	r4, [r7, #1]
 800246c:	78ba      	ldrb	r2, [r7, #2]
 800246e:	78f9      	ldrb	r1, [r7, #3]
 8002470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4623      	mov	r3, r4
 8002486:	f003 fcb3 	bl	8005df0 <HAL_HCD_HC_SubmitRequest>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f86d 	bl	8002570 <USBH_Get_USB_Status>
 8002496:	4603      	mov	r3, r0
 8002498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800249a:	7bbb      	ldrb	r3, [r7, #14]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}

080024a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 ff47 	bl	800634e <HAL_HCD_HC_GetURBState>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d103      	bne.n	80024e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f870 	bl	80025c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80024e8:	20c8      	movs	r0, #200	; 0xc8
 80024ea:	f001 fb01 	bl	8003af0 <HAL_Delay>
  return USBH_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
 8002504:	4613      	mov	r3, r2
 8002506:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800250e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	333b      	adds	r3, #59	; 0x3b
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3354      	adds	r3, #84	; 0x54
 8002532:	78ba      	ldrb	r2, [r7, #2]
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e008      	b.n	800254a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3355      	adds	r3, #85	; 0x55
 8002546:	78ba      	ldrb	r2, [r7, #2]
 8002548:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f001 fac5 	bl	8003af0 <HAL_Delay>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d817      	bhi.n	80025b4 <USBH_Get_USB_Status+0x44>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <USBH_Get_USB_Status+0x1c>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025a3 	.word	0x080025a3
 8002594:	080025a9 	.word	0x080025a9
 8002598:	080025af 	.word	0x080025af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
    break;
 80025a0:	e00b      	b.n	80025ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80025a2:	2302      	movs	r3, #2
 80025a4:	73fb      	strb	r3, [r7, #15]
    break;
 80025a6:	e008      	b.n	80025ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
    break;
 80025ac:	e005      	b.n	80025ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80025ae:	2302      	movs	r3, #2
 80025b0:	73fb      	strb	r3, [r7, #15]
    break;
 80025b2:	e002      	b.n	80025ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80025b4:	2302      	movs	r3, #2
 80025b6:	73fb      	strb	r3, [r7, #15]
    break;
 80025b8:	bf00      	nop
  }
  return usb_status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e001      	b.n	80025e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	461a      	mov	r2, r3
 80025ea:	2104      	movs	r1, #4
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <MX_DriverVbusFS+0x34>)
 80025ee:	f003 fab7 	bl	8005b60 <HAL_GPIO_WritePin>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020400 	.word	0x40020400

08002600 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800260a:	49c1      	ldr	r1, [pc, #772]	; (8002910 <OTM8009A_Init+0x310>)
 800260c:	2000      	movs	r0, #0
 800260e:	f000 fe87 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002612:	49c0      	ldr	r1, [pc, #768]	; (8002914 <OTM8009A_Init+0x314>)
 8002614:	2003      	movs	r0, #3
 8002616:	f000 fe83 	bl	8003320 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800261a:	49bf      	ldr	r1, [pc, #764]	; (8002918 <OTM8009A_Init+0x318>)
 800261c:	2000      	movs	r0, #0
 800261e:	f000 fe7f 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002622:	49be      	ldr	r1, [pc, #760]	; (800291c <OTM8009A_Init+0x31c>)
 8002624:	2002      	movs	r0, #2
 8002626:	f000 fe7b 	bl	8003320 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800262a:	49bb      	ldr	r1, [pc, #748]	; (8002918 <OTM8009A_Init+0x318>)
 800262c:	2000      	movs	r0, #0
 800262e:	f000 fe77 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002632:	49bb      	ldr	r1, [pc, #748]	; (8002920 <OTM8009A_Init+0x320>)
 8002634:	2000      	movs	r0, #0
 8002636:	f000 fe73 	bl	8003320 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f000 fa38 	bl	8002ab0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002640:	49b8      	ldr	r1, [pc, #736]	; (8002924 <OTM8009A_Init+0x324>)
 8002642:	2000      	movs	r0, #0
 8002644:	f000 fe6c 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002648:	49b7      	ldr	r1, [pc, #732]	; (8002928 <OTM8009A_Init+0x328>)
 800264a:	2000      	movs	r0, #0
 800264c:	f000 fe68 	bl	8003320 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002650:	200a      	movs	r0, #10
 8002652:	f000 fa2d 	bl	8002ab0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002656:	49b5      	ldr	r1, [pc, #724]	; (800292c <OTM8009A_Init+0x32c>)
 8002658:	2000      	movs	r0, #0
 800265a:	f000 fe61 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800265e:	49b4      	ldr	r1, [pc, #720]	; (8002930 <OTM8009A_Init+0x330>)
 8002660:	2000      	movs	r0, #0
 8002662:	f000 fe5d 	bl	8003320 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002666:	49b3      	ldr	r1, [pc, #716]	; (8002934 <OTM8009A_Init+0x334>)
 8002668:	2000      	movs	r0, #0
 800266a:	f000 fe59 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800266e:	49b2      	ldr	r1, [pc, #712]	; (8002938 <OTM8009A_Init+0x338>)
 8002670:	2000      	movs	r0, #0
 8002672:	f000 fe55 	bl	8003320 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002676:	49b1      	ldr	r1, [pc, #708]	; (800293c <OTM8009A_Init+0x33c>)
 8002678:	2000      	movs	r0, #0
 800267a:	f000 fe51 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800267e:	49b0      	ldr	r1, [pc, #704]	; (8002940 <OTM8009A_Init+0x340>)
 8002680:	2000      	movs	r0, #0
 8002682:	f000 fe4d 	bl	8003320 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002686:	49a2      	ldr	r1, [pc, #648]	; (8002910 <OTM8009A_Init+0x310>)
 8002688:	2000      	movs	r0, #0
 800268a:	f000 fe49 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800268e:	49ad      	ldr	r1, [pc, #692]	; (8002944 <OTM8009A_Init+0x344>)
 8002690:	2000      	movs	r0, #0
 8002692:	f000 fe45 	bl	8003320 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002696:	49ac      	ldr	r1, [pc, #688]	; (8002948 <OTM8009A_Init+0x348>)
 8002698:	2000      	movs	r0, #0
 800269a:	f000 fe41 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800269e:	49ab      	ldr	r1, [pc, #684]	; (800294c <OTM8009A_Init+0x34c>)
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 fe3d 	bl	8003320 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80026a6:	49aa      	ldr	r1, [pc, #680]	; (8002950 <OTM8009A_Init+0x350>)
 80026a8:	2000      	movs	r0, #0
 80026aa:	f000 fe39 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80026ae:	49a9      	ldr	r1, [pc, #676]	; (8002954 <OTM8009A_Init+0x354>)
 80026b0:	2000      	movs	r0, #0
 80026b2:	f000 fe35 	bl	8003320 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80026b6:	49a8      	ldr	r1, [pc, #672]	; (8002958 <OTM8009A_Init+0x358>)
 80026b8:	2000      	movs	r0, #0
 80026ba:	f000 fe31 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80026be:	49a7      	ldr	r1, [pc, #668]	; (800295c <OTM8009A_Init+0x35c>)
 80026c0:	2000      	movs	r0, #0
 80026c2:	f000 fe2d 	bl	8003320 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80026c6:	49a6      	ldr	r1, [pc, #664]	; (8002960 <OTM8009A_Init+0x360>)
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 fe29 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80026ce:	499a      	ldr	r1, [pc, #616]	; (8002938 <OTM8009A_Init+0x338>)
 80026d0:	2000      	movs	r0, #0
 80026d2:	f000 fe25 	bl	8003320 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80026d6:	498e      	ldr	r1, [pc, #568]	; (8002910 <OTM8009A_Init+0x310>)
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 fe21 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80026de:	49a1      	ldr	r1, [pc, #644]	; (8002964 <OTM8009A_Init+0x364>)
 80026e0:	2002      	movs	r0, #2
 80026e2:	f000 fe1d 	bl	8003320 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80026e6:	49a0      	ldr	r1, [pc, #640]	; (8002968 <OTM8009A_Init+0x368>)
 80026e8:	2000      	movs	r0, #0
 80026ea:	f000 fe19 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80026ee:	499f      	ldr	r1, [pc, #636]	; (800296c <OTM8009A_Init+0x36c>)
 80026f0:	2000      	movs	r0, #0
 80026f2:	f000 fe15 	bl	8003320 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80026f6:	499e      	ldr	r1, [pc, #632]	; (8002970 <OTM8009A_Init+0x370>)
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 fe11 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80026fe:	499d      	ldr	r1, [pc, #628]	; (8002974 <OTM8009A_Init+0x374>)
 8002700:	2000      	movs	r0, #0
 8002702:	f000 fe0d 	bl	8003320 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002706:	499c      	ldr	r1, [pc, #624]	; (8002978 <OTM8009A_Init+0x378>)
 8002708:	2000      	movs	r0, #0
 800270a:	f000 fe09 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800270e:	499b      	ldr	r1, [pc, #620]	; (800297c <OTM8009A_Init+0x37c>)
 8002710:	2000      	movs	r0, #0
 8002712:	f000 fe05 	bl	8003320 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002716:	498c      	ldr	r1, [pc, #560]	; (8002948 <OTM8009A_Init+0x348>)
 8002718:	2000      	movs	r0, #0
 800271a:	f000 fe01 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800271e:	4998      	ldr	r1, [pc, #608]	; (8002980 <OTM8009A_Init+0x380>)
 8002720:	2000      	movs	r0, #0
 8002722:	f000 fdfd 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002726:	498a      	ldr	r1, [pc, #552]	; (8002950 <OTM8009A_Init+0x350>)
 8002728:	2000      	movs	r0, #0
 800272a:	f000 fdf9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800272e:	4995      	ldr	r1, [pc, #596]	; (8002984 <OTM8009A_Init+0x384>)
 8002730:	2000      	movs	r0, #0
 8002732:	f000 fdf5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002736:	4994      	ldr	r1, [pc, #592]	; (8002988 <OTM8009A_Init+0x388>)
 8002738:	2000      	movs	r0, #0
 800273a:	f000 fdf1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800273e:	4993      	ldr	r1, [pc, #588]	; (800298c <OTM8009A_Init+0x38c>)
 8002740:	2002      	movs	r0, #2
 8002742:	f000 fded 	bl	8003320 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002746:	4974      	ldr	r1, [pc, #464]	; (8002918 <OTM8009A_Init+0x318>)
 8002748:	2000      	movs	r0, #0
 800274a:	f000 fde9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800274e:	4990      	ldr	r1, [pc, #576]	; (8002990 <OTM8009A_Init+0x390>)
 8002750:	2006      	movs	r0, #6
 8002752:	f000 fde5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002756:	498f      	ldr	r1, [pc, #572]	; (8002994 <OTM8009A_Init+0x394>)
 8002758:	2000      	movs	r0, #0
 800275a:	f000 fde1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800275e:	498e      	ldr	r1, [pc, #568]	; (8002998 <OTM8009A_Init+0x398>)
 8002760:	200e      	movs	r0, #14
 8002762:	f000 fddd 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002766:	498d      	ldr	r1, [pc, #564]	; (800299c <OTM8009A_Init+0x39c>)
 8002768:	2000      	movs	r0, #0
 800276a:	f000 fdd9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800276e:	498c      	ldr	r1, [pc, #560]	; (80029a0 <OTM8009A_Init+0x3a0>)
 8002770:	200e      	movs	r0, #14
 8002772:	f000 fdd5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002776:	498b      	ldr	r1, [pc, #556]	; (80029a4 <OTM8009A_Init+0x3a4>)
 8002778:	2000      	movs	r0, #0
 800277a:	f000 fdd1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800277e:	498a      	ldr	r1, [pc, #552]	; (80029a8 <OTM8009A_Init+0x3a8>)
 8002780:	200a      	movs	r0, #10
 8002782:	f000 fdcd 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002786:	4989      	ldr	r1, [pc, #548]	; (80029ac <OTM8009A_Init+0x3ac>)
 8002788:	2000      	movs	r0, #0
 800278a:	f000 fdc9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800278e:	4988      	ldr	r1, [pc, #544]	; (80029b0 <OTM8009A_Init+0x3b0>)
 8002790:	2000      	movs	r0, #0
 8002792:	f000 fdc5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002796:	4960      	ldr	r1, [pc, #384]	; (8002918 <OTM8009A_Init+0x318>)
 8002798:	2000      	movs	r0, #0
 800279a:	f000 fdc1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800279e:	4985      	ldr	r1, [pc, #532]	; (80029b4 <OTM8009A_Init+0x3b4>)
 80027a0:	200a      	movs	r0, #10
 80027a2:	f000 fdbd 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80027a6:	4984      	ldr	r1, [pc, #528]	; (80029b8 <OTM8009A_Init+0x3b8>)
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 fdb9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80027ae:	4983      	ldr	r1, [pc, #524]	; (80029bc <OTM8009A_Init+0x3bc>)
 80027b0:	200f      	movs	r0, #15
 80027b2:	f000 fdb5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80027b6:	4977      	ldr	r1, [pc, #476]	; (8002994 <OTM8009A_Init+0x394>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f000 fdb1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80027be:	4980      	ldr	r1, [pc, #512]	; (80029c0 <OTM8009A_Init+0x3c0>)
 80027c0:	200f      	movs	r0, #15
 80027c2:	f000 fdad 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80027c6:	4975      	ldr	r1, [pc, #468]	; (800299c <OTM8009A_Init+0x39c>)
 80027c8:	2000      	movs	r0, #0
 80027ca:	f000 fda9 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80027ce:	497d      	ldr	r1, [pc, #500]	; (80029c4 <OTM8009A_Init+0x3c4>)
 80027d0:	200a      	movs	r0, #10
 80027d2:	f000 fda5 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80027d6:	4973      	ldr	r1, [pc, #460]	; (80029a4 <OTM8009A_Init+0x3a4>)
 80027d8:	2000      	movs	r0, #0
 80027da:	f000 fda1 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80027de:	497a      	ldr	r1, [pc, #488]	; (80029c8 <OTM8009A_Init+0x3c8>)
 80027e0:	200f      	movs	r0, #15
 80027e2:	f000 fd9d 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80027e6:	4971      	ldr	r1, [pc, #452]	; (80029ac <OTM8009A_Init+0x3ac>)
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 fd99 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80027ee:	4977      	ldr	r1, [pc, #476]	; (80029cc <OTM8009A_Init+0x3cc>)
 80027f0:	200f      	movs	r0, #15
 80027f2:	f000 fd95 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80027f6:	4976      	ldr	r1, [pc, #472]	; (80029d0 <OTM8009A_Init+0x3d0>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f000 fd91 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80027fe:	4975      	ldr	r1, [pc, #468]	; (80029d4 <OTM8009A_Init+0x3d4>)
 8002800:	200a      	movs	r0, #10
 8002802:	f000 fd8d 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002806:	4974      	ldr	r1, [pc, #464]	; (80029d8 <OTM8009A_Init+0x3d8>)
 8002808:	2000      	movs	r0, #0
 800280a:	f000 fd89 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800280e:	4973      	ldr	r1, [pc, #460]	; (80029dc <OTM8009A_Init+0x3dc>)
 8002810:	200a      	movs	r0, #10
 8002812:	f000 fd85 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002816:	4940      	ldr	r1, [pc, #256]	; (8002918 <OTM8009A_Init+0x318>)
 8002818:	2000      	movs	r0, #0
 800281a:	f000 fd81 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800281e:	4970      	ldr	r1, [pc, #448]	; (80029e0 <OTM8009A_Init+0x3e0>)
 8002820:	200a      	movs	r0, #10
 8002822:	f000 fd7d 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002826:	4964      	ldr	r1, [pc, #400]	; (80029b8 <OTM8009A_Init+0x3b8>)
 8002828:	2000      	movs	r0, #0
 800282a:	f000 fd79 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800282e:	496d      	ldr	r1, [pc, #436]	; (80029e4 <OTM8009A_Init+0x3e4>)
 8002830:	200f      	movs	r0, #15
 8002832:	f000 fd75 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002836:	4957      	ldr	r1, [pc, #348]	; (8002994 <OTM8009A_Init+0x394>)
 8002838:	2000      	movs	r0, #0
 800283a:	f000 fd71 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800283e:	496a      	ldr	r1, [pc, #424]	; (80029e8 <OTM8009A_Init+0x3e8>)
 8002840:	200f      	movs	r0, #15
 8002842:	f000 fd6d 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002846:	4955      	ldr	r1, [pc, #340]	; (800299c <OTM8009A_Init+0x39c>)
 8002848:	2000      	movs	r0, #0
 800284a:	f000 fd69 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <OTM8009A_Init+0x3ec>)
 8002850:	200a      	movs	r0, #10
 8002852:	f000 fd65 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002856:	4953      	ldr	r1, [pc, #332]	; (80029a4 <OTM8009A_Init+0x3a4>)
 8002858:	2000      	movs	r0, #0
 800285a:	f000 fd61 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800285e:	4964      	ldr	r1, [pc, #400]	; (80029f0 <OTM8009A_Init+0x3f0>)
 8002860:	200f      	movs	r0, #15
 8002862:	f000 fd5d 	bl	8003320 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002866:	4951      	ldr	r1, [pc, #324]	; (80029ac <OTM8009A_Init+0x3ac>)
 8002868:	2000      	movs	r0, #0
 800286a:	f000 fd59 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800286e:	4961      	ldr	r1, [pc, #388]	; (80029f4 <OTM8009A_Init+0x3f4>)
 8002870:	200f      	movs	r0, #15
 8002872:	f000 fd55 	bl	8003320 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <OTM8009A_Init+0x348>)
 8002878:	2000      	movs	r0, #0
 800287a:	f000 fd51 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800287e:	495e      	ldr	r1, [pc, #376]	; (80029f8 <OTM8009A_Init+0x3f8>)
 8002880:	2000      	movs	r0, #0
 8002882:	f000 fd4d 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002886:	495d      	ldr	r1, [pc, #372]	; (80029fc <OTM8009A_Init+0x3fc>)
 8002888:	2000      	movs	r0, #0
 800288a:	f000 fd49 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800288e:	495c      	ldr	r1, [pc, #368]	; (8002a00 <OTM8009A_Init+0x400>)
 8002890:	2000      	movs	r0, #0
 8002892:	f000 fd45 	bl	8003320 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002896:	495b      	ldr	r1, [pc, #364]	; (8002a04 <OTM8009A_Init+0x404>)
 8002898:	2000      	movs	r0, #0
 800289a:	f000 fd41 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800289e:	495a      	ldr	r1, [pc, #360]	; (8002a08 <OTM8009A_Init+0x408>)
 80028a0:	2000      	movs	r0, #0
 80028a2:	f000 fd3d 	bl	8003320 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028a6:	491a      	ldr	r1, [pc, #104]	; (8002910 <OTM8009A_Init+0x310>)
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 fd39 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80028ae:	4957      	ldr	r1, [pc, #348]	; (8002a0c <OTM8009A_Init+0x40c>)
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 fd35 	bl	8003320 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028b6:	4916      	ldr	r1, [pc, #88]	; (8002910 <OTM8009A_Init+0x310>)
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 fd31 	bl	8003320 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028be:	4914      	ldr	r1, [pc, #80]	; (8002910 <OTM8009A_Init+0x310>)
 80028c0:	2000      	movs	r0, #0
 80028c2:	f000 fd2d 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80028c6:	4952      	ldr	r1, [pc, #328]	; (8002a10 <OTM8009A_Init+0x410>)
 80028c8:	2010      	movs	r0, #16
 80028ca:	f000 fd29 	bl	8003320 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028ce:	4910      	ldr	r1, [pc, #64]	; (8002910 <OTM8009A_Init+0x310>)
 80028d0:	2000      	movs	r0, #0
 80028d2:	f000 fd25 	bl	8003320 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80028d6:	494f      	ldr	r1, [pc, #316]	; (8002a14 <OTM8009A_Init+0x414>)
 80028d8:	2010      	movs	r0, #16
 80028da:	f000 fd21 	bl	8003320 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80028de:	494e      	ldr	r1, [pc, #312]	; (8002a18 <OTM8009A_Init+0x418>)
 80028e0:	2000      	movs	r0, #0
 80028e2:	f000 fd1d 	bl	8003320 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f000 f8e2 	bl	8002ab0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <OTM8009A_Init+0x304>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 8095 	bne.w	8002a24 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80028fa:	4948      	ldr	r1, [pc, #288]	; (8002a1c <OTM8009A_Init+0x41c>)
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 fd0f 	bl	8003320 <DSI_IO_WriteCmd>
    break;
 8002902:	e090      	b.n	8002a26 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002904:	4946      	ldr	r1, [pc, #280]	; (8002a20 <OTM8009A_Init+0x420>)
 8002906:	2000      	movs	r0, #0
 8002908:	f000 fd0a 	bl	8003320 <DSI_IO_WriteCmd>
    break;
 800290c:	e08b      	b.n	8002a26 <OTM8009A_Init+0x426>
 800290e:	bf00      	nop
 8002910:	080146c8 	.word	0x080146c8
 8002914:	08014580 	.word	0x08014580
 8002918:	080146cc 	.word	0x080146cc
 800291c:	08014584 	.word	0x08014584
 8002920:	080146d0 	.word	0x080146d0
 8002924:	080146d4 	.word	0x080146d4
 8002928:	080146d8 	.word	0x080146d8
 800292c:	080146dc 	.word	0x080146dc
 8002930:	080146e0 	.word	0x080146e0
 8002934:	080146e4 	.word	0x080146e4
 8002938:	080146e8 	.word	0x080146e8
 800293c:	080146ec 	.word	0x080146ec
 8002940:	080146f0 	.word	0x080146f0
 8002944:	080146f4 	.word	0x080146f4
 8002948:	080146f8 	.word	0x080146f8
 800294c:	080146fc 	.word	0x080146fc
 8002950:	08014700 	.word	0x08014700
 8002954:	08014704 	.word	0x08014704
 8002958:	08014708 	.word	0x08014708
 800295c:	0801470c 	.word	0x0801470c
 8002960:	08014710 	.word	0x08014710
 8002964:	080145b0 	.word	0x080145b0
 8002968:	08014714 	.word	0x08014714
 800296c:	08014718 	.word	0x08014718
 8002970:	0801471c 	.word	0x0801471c
 8002974:	08014720 	.word	0x08014720
 8002978:	08014724 	.word	0x08014724
 800297c:	08014728 	.word	0x08014728
 8002980:	0801472c 	.word	0x0801472c
 8002984:	08014730 	.word	0x08014730
 8002988:	08014734 	.word	0x08014734
 800298c:	080145b4 	.word	0x080145b4
 8002990:	080145b8 	.word	0x080145b8
 8002994:	08014738 	.word	0x08014738
 8002998:	080145c0 	.word	0x080145c0
 800299c:	0801473c 	.word	0x0801473c
 80029a0:	080145d0 	.word	0x080145d0
 80029a4:	08014740 	.word	0x08014740
 80029a8:	080145e0 	.word	0x080145e0
 80029ac:	08014744 	.word	0x08014744
 80029b0:	0801477c 	.word	0x0801477c
 80029b4:	080145ec 	.word	0x080145ec
 80029b8:	08014748 	.word	0x08014748
 80029bc:	080145f8 	.word	0x080145f8
 80029c0:	08014608 	.word	0x08014608
 80029c4:	08014618 	.word	0x08014618
 80029c8:	08014624 	.word	0x08014624
 80029cc:	08014634 	.word	0x08014634
 80029d0:	0801474c 	.word	0x0801474c
 80029d4:	08014644 	.word	0x08014644
 80029d8:	08014750 	.word	0x08014750
 80029dc:	08014650 	.word	0x08014650
 80029e0:	0801465c 	.word	0x0801465c
 80029e4:	08014668 	.word	0x08014668
 80029e8:	08014678 	.word	0x08014678
 80029ec:	08014688 	.word	0x08014688
 80029f0:	08014694 	.word	0x08014694
 80029f4:	080146a4 	.word	0x080146a4
 80029f8:	08014780 	.word	0x08014780
 80029fc:	08014784 	.word	0x08014784
 8002a00:	08014788 	.word	0x08014788
 8002a04:	0801478c 	.word	0x0801478c
 8002a08:	08014790 	.word	0x08014790
 8002a0c:	080146b4 	.word	0x080146b4
 8002a10:	08014588 	.word	0x08014588
 8002a14:	0801459c 	.word	0x0801459c
 8002a18:	08014754 	.word	0x08014754
 8002a1c:	08014758 	.word	0x08014758
 8002a20:	0801475c 	.word	0x0801475c
  default :
    break;
 8002a24:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10b      	bne.n	8002a44 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <OTM8009A_Init+0x488>)
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 fc76 	bl	8003320 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002a34:	4915      	ldr	r1, [pc, #84]	; (8002a8c <OTM8009A_Init+0x48c>)
 8002a36:	2004      	movs	r0, #4
 8002a38:	f000 fc72 	bl	8003320 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002a3c:	4914      	ldr	r1, [pc, #80]	; (8002a90 <OTM8009A_Init+0x490>)
 8002a3e:	2004      	movs	r0, #4
 8002a40:	f000 fc6e 	bl	8003320 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002a44:	4913      	ldr	r1, [pc, #76]	; (8002a94 <OTM8009A_Init+0x494>)
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 fc6a 	bl	8003320 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002a4c:	4912      	ldr	r1, [pc, #72]	; (8002a98 <OTM8009A_Init+0x498>)
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f000 fc66 	bl	8003320 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002a54:	4911      	ldr	r1, [pc, #68]	; (8002a9c <OTM8009A_Init+0x49c>)
 8002a56:	2000      	movs	r0, #0
 8002a58:	f000 fc62 	bl	8003320 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002a5c:	4910      	ldr	r1, [pc, #64]	; (8002aa0 <OTM8009A_Init+0x4a0>)
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f000 fc5e 	bl	8003320 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002a64:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <OTM8009A_Init+0x4a4>)
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 fc5a 	bl	8003320 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <OTM8009A_Init+0x4a8>)
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f000 fc56 	bl	8003320 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002a74:	490d      	ldr	r1, [pc, #52]	; (8002aac <OTM8009A_Init+0x4ac>)
 8002a76:	2000      	movs	r0, #0
 8002a78:	f000 fc52 	bl	8003320 <DSI_IO_WriteCmd>

  return 0;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	08014760 	.word	0x08014760
 8002a8c:	080146b8 	.word	0x080146b8
 8002a90:	080146c0 	.word	0x080146c0
 8002a94:	08014764 	.word	0x08014764
 8002a98:	08014768 	.word	0x08014768
 8002a9c:	0801476c 	.word	0x0801476c
 8002aa0:	08014770 	.word	0x08014770
 8002aa4:	08014774 	.word	0x08014774
 8002aa8:	080146c8 	.word	0x080146c8
 8002aac:	08014778 	.word	0x08014778

08002ab0 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 f819 	bl	8003af0 <HAL_Delay>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002aca:	2001      	movs	r0, #1
 8002acc:	f000 f804 	bl	8002ad8 <BSP_LCD_InitEx>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b096      	sub	sp, #88	; 0x58
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8002ae2:	f646 3325 	movw	r3, #27429	; 0x6b25
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8002aec:	f000 f93e 	bl	8002d6c <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8002af0:	f000 fc40 	bl	8003374 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8002af4:	4b93      	ldr	r3, [pc, #588]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002af6:	4a94      	ldr	r2, [pc, #592]	; (8002d48 <BSP_LCD_InitEx+0x270>)
 8002af8:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8002afa:	4892      	ldr	r0, [pc, #584]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002afc:	f002 f89c 	bl	8004c38 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8002b00:	237d      	movs	r3, #125	; 0x7d
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8002b04:	2302      	movs	r3, #2
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8002b0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b10:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002b12:	4b8c      	ldr	r3, [pc, #560]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	4a8b      	ldr	r2, [pc, #556]	; (8002d4c <BSP_LCD_InitEx+0x274>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0a9b      	lsrs	r3, r3, #10
 8002b24:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002b26:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4885      	ldr	r0, [pc, #532]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002b30:	f001 ff66 	bl	8004a00 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002b3a:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002b3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b40:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8002b42:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <BSP_LCD_InitEx+0x27c>)
 8002b44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8002b4c:	4b80      	ldr	r3, [pc, #512]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002b4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002b52:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8002b54:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <BSP_LCD_InitEx+0x27c>)
 8002b56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b5a:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8002b5c:	4b7c      	ldr	r3, [pc, #496]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <BSP_LCD_InitEx+0x27c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
  VFP  = NT35510_480X800_VFP;
  HSA  = NT35510_480X800_HSYNC;
  HBP  = NT35510_480X800_HBP;
  HFP  = NT35510_480X800_HFP;
#else
  VSA  = OTM8009A_480X800_VSYNC;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8002b70:	2310      	movs	r3, #16
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 8002b74:	2302      	movs	r3, #2
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 8002b78:	2322      	movs	r3, #34	; 0x22
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8002b7c:	2322      	movs	r3, #34	; 0x22
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
#endif /* USE_STM32469I_DISCO_REVC */
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002b80:	4b75      	ldr	r3, [pc, #468]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8002b86:	4b74      	ldr	r3, [pc, #464]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002b88:	2205      	movs	r2, #5
 8002b8a:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002b8c:	4b72      	ldr	r3, [pc, #456]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002b92:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002ba6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002baa:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002bac:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8002bb2:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb6:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bbc:	fb03 f202 	mul.w	r2, r3, r2
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4a64      	ldr	r2, [pc, #400]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bc8:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bce:	fb03 f202 	mul.w	r2, r3, r2
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a5f      	ldr	r2, [pc, #380]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bda:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8002bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	441a      	add	r2, r3
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	441a      	add	r2, r3
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	4413      	add	r3, r2
 8002bea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bec:	fb03 f202 	mul.w	r2, r3, r2
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfe:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8002c00:	4a55      	ldr	r2, [pc, #340]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8002c06:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8002c26:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8002c36:	4b48      	ldr	r3, [pc, #288]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3c:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002c3e:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c54:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8002c56:	4940      	ldr	r1, [pc, #256]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002c58:	483a      	ldr	r0, [pc, #232]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002c5a:	f002 f948 	bl	8004eee <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8002c5e:	2323      	movs	r3, #35	; 0x23
 8002c60:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8002c62:	2323      	movs	r3, #35	; 0x23
 8002c64:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 8002c66:	2323      	movs	r3, #35	; 0x23
 8002c68:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8002c6a:	2323      	movs	r3, #35	; 0x23
 8002c6c:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 8002c72:	230a      	movs	r3, #10
 8002c74:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4831      	ldr	r0, [pc, #196]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002c7e:	f002 fb3e 	bl	80052fe <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	3b01      	subs	r3, #1
 8002c86:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002c88:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8002c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b01      	subs	r3, #1
 8002c92:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002c94:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	441a      	add	r2, r3
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002ca6:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002ca8:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	441a      	add	r2, r3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	441a      	add	r2, r3
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <BSP_LCD_InitEx+0x278>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002cc4:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <BSP_LCD_InitEx+0x27c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002ccc:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <BSP_LCD_InitEx+0x288>)
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <BSP_LCD_InitEx+0x288>)
 8002cd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002cda:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <BSP_LCD_InitEx+0x288>)
 8002cde:	2207      	movs	r2, #7
 8002ce0:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <BSP_LCD_InitEx+0x288>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002ce8:	481d      	ldr	r0, [pc, #116]	; (8002d60 <BSP_LCD_InitEx+0x288>)
 8002cea:	f005 fbd7 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <BSP_LCD_InitEx+0x28c>)
 8002d10:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8002d12:	4911      	ldr	r1, [pc, #68]	; (8002d58 <BSP_LCD_InitEx+0x280>)
 8002d14:	4811      	ldr	r0, [pc, #68]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002d16:	f005 f80c 	bl	8007d32 <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 8002d1a:	4810      	ldr	r0, [pc, #64]	; (8002d5c <BSP_LCD_InitEx+0x284>)
 8002d1c:	f004 fca2 	bl	8007664 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 8002d20:	4808      	ldr	r0, [pc, #32]	; (8002d44 <BSP_LCD_InitEx+0x26c>)
 8002d22:	f002 fb56 	bl	80053d2 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d26:	f000 fcab 	bl	8003680 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d2a:	480f      	ldr	r0, [pc, #60]	; (8002d68 <BSP_LCD_InitEx+0x290>)
 8002d2c:	f000 f90e 	bl	8002f4c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	4619      	mov	r1, r3
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff fc63 	bl	8002600 <OTM8009A_Init>
/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32469I_DISCO_REVC */

  return LCD_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3758      	adds	r7, #88	; 0x58
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000fdc 	.word	0x20000fdc
 8002d48:	40016c00 	.word	0x40016c00
 8002d4c:	43215e57 	.word	0x43215e57
 8002d50:	20000014 	.word	0x20000014
 8002d54:	20000018 	.word	0x20000018
 8002d58:	20000e88 	.word	0x20000e88
 8002d5c:	20000f34 	.word	0x20000f34
 8002d60:	20001014 	.word	0x20001014
 8002d64:	40016800 	.word	0x40016800
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <BSP_LCD_Reset+0x64>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <BSP_LCD_Reset+0x64>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <BSP_LCD_Reset+0x64>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8002d92:	2311      	movs	r3, #17
 8002d94:	60bb      	str	r3, [r7, #8]
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <BSP_LCD_Reset+0x68>)
 8002da4:	f002 fc0c 	bl	80055c0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <BSP_LCD_Reset+0x68>)
 8002dae:	f002 fed7 	bl	8005b60 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002db2:	2014      	movs	r0, #20
 8002db4:	f000 fe9c 	bl	8003af0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <BSP_LCD_Reset+0x68>)
 8002dbe:	f002 fecf 	bl	8005b60 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 8002dc2:	2014      	movs	r0, #20
 8002dc4:	f000 fe94 	bl	8003af0 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40021c00 	.word	0x40021c00

08002dd8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <BSP_LCD_GetXSize+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000014 	.word	0x20000014

08002df0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <BSP_LCD_GetYSize+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000018 	.word	0x20000018

08002e08 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e18:	f7ff ffde 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e24:	f7ff ffe4 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e54:	2307      	movs	r3, #7
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002e58:	f7ff ffbe 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002e60:	f7ff ffc6 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e64:	4603      	mov	r3, r0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4812      	ldr	r0, [pc, #72]	; (8002ebc <BSP_LCD_LayerDefaultInit+0xb4>)
 8002e72:	f004 fd89 	bl	8007988 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	4911      	ldr	r1, [pc, #68]	; (8002ec0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3304      	adds	r3, #4
 8002e86:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3740      	adds	r7, #64	; 0x40
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000f34 	.word	0x20000f34
 8002ec0:	20000ffc 	.word	0x20000ffc
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <BSP_LCD_SelectLayer+0x1c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000ff8 	.word	0x20000ff8

08002ee8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <BSP_LCD_SetTextColor+0x28>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <BSP_LCD_SetTextColor+0x2c>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000ff8 	.word	0x20000ff8
 8002f14:	20000ffc 	.word	0x20000ffc

08002f18 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <BSP_LCD_SetBackColor+0x2c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4908      	ldr	r1, [pc, #32]	; (8002f48 <BSP_LCD_SetBackColor+0x30>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3304      	adds	r3, #4
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000ff8 	.word	0x20000ff8
 8002f48:	20000ffc 	.word	0x20000ffc

08002f4c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <BSP_LCD_SetFont+0x2c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4908      	ldr	r1, [pc, #32]	; (8002f7c <BSP_LCD_SetFont+0x30>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3308      	adds	r3, #8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000ff8 	.word	0x20000ff8
 8002f7c:	20000ffc 	.word	0x20000ffc

08002f80 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <BSP_LCD_GetFont+0x24>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <BSP_LCD_GetFont+0x28>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3308      	adds	r3, #8
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000ff8 	.word	0x20000ff8
 8002fa8:	20000ffc 	.word	0x20000ffc

08002fac <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <BSP_LCD_Clear+0x48>)
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <BSP_LCD_Clear+0x48>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <BSP_LCD_Clear+0x4c>)
 8002fbe:	2134      	movs	r1, #52	; 0x34
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	335c      	adds	r3, #92	; 0x5c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461e      	mov	r6, r3
 8002fcc:	f7ff ff04 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	f7ff ff0d 	bl	8002df0 <BSP_LCD_GetYSize>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	462a      	mov	r2, r5
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f000 fb12 	bl	8003610 <LL_FillBuffer>
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff4:	20000ff8 	.word	0x20000ff8
 8002ff8:	20000f34 	.word	0x20000f34

08002ffc <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
 8003006:	460b      	mov	r3, r1
 8003008:	80bb      	strh	r3, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <BSP_LCD_DisplayChar+0x80>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <BSP_LCD_DisplayChar+0x84>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3308      	adds	r3, #8
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <BSP_LCD_DisplayChar+0x80>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4c14      	ldr	r4, [pc, #80]	; (8003080 <BSP_LCD_DisplayChar+0x84>)
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4423      	add	r3, r4
 800303a:	3308      	adds	r3, #8
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003040:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003044:	4b0d      	ldr	r3, [pc, #52]	; (800307c <BSP_LCD_DisplayChar+0x80>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <BSP_LCD_DisplayChar+0x84>)
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4423      	add	r3, r4
 8003054:	3308      	adds	r3, #8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	889b      	ldrh	r3, [r3, #4]
 800305a:	3307      	adds	r3, #7
 800305c:	2b00      	cmp	r3, #0
 800305e:	da00      	bge.n	8003062 <BSP_LCD_DisplayChar+0x66>
 8003060:	3307      	adds	r3, #7
 8003062:	10db      	asrs	r3, r3, #3
 8003064:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003068:	18ca      	adds	r2, r1, r3
 800306a:	88b9      	ldrh	r1, [r7, #4]
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa16 	bl	80034a0 <DrawChar>
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	20000ff8 	.word	0x20000ff8
 8003080:	20000ffc 	.word	0x20000ffc

08003084 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60ba      	str	r2, [r7, #8]
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	81fb      	strh	r3, [r7, #14]
 8003092:	460b      	mov	r3, r1
 8003094:	81bb      	strh	r3, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800309a:	2301      	movs	r3, #1
 800309c:	83fb      	strh	r3, [r7, #30]
 800309e:	2300      	movs	r3, #0
 80030a0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80030ae:	e002      	b.n	80030b6 <BSP_LCD_DisplayStringAt+0x32>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	617a      	str	r2, [r7, #20]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f6      	bne.n	80030b0 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80030c2:	f7ff fe89 	bl	8002dd8 <BSP_LCD_GetXSize>
 80030c6:	4601      	mov	r1, r0
 80030c8:	4b50      	ldr	r3, [pc, #320]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4850      	ldr	r0, [pc, #320]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	3308      	adds	r3, #8
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	889b      	ldrh	r3, [r3, #4]
 80030de:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d01c      	beq.n	8003124 <BSP_LCD_DisplayStringAt+0xa0>
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	dc33      	bgt.n	8003156 <BSP_LCD_DisplayStringAt+0xd2>
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d002      	beq.n	80030f8 <BSP_LCD_DisplayStringAt+0x74>
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d019      	beq.n	800312a <BSP_LCD_DisplayStringAt+0xa6>
 80030f6:	e02e      	b.n	8003156 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad1      	subs	r1, r2, r3
 80030fe:	4b43      	ldr	r3, [pc, #268]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4843      	ldr	r0, [pc, #268]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	3308      	adds	r3, #8
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	889b      	ldrh	r3, [r3, #4]
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	89fb      	ldrh	r3, [r7, #14]
 800311e:	4413      	add	r3, r2
 8003120:	83fb      	strh	r3, [r7, #30]
      break;
 8003122:	e01b      	b.n	800315c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	83fb      	strh	r3, [r7, #30]
      break;
 8003128:	e018      	b.n	800315c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b299      	uxth	r1, r3
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4836      	ldr	r0, [pc, #216]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4403      	add	r3, r0
 8003142:	3308      	adds	r3, #8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	889b      	ldrh	r3, [r3, #4]
 8003148:	fb11 f303 	smulbb	r3, r1, r3
 800314c:	b29a      	uxth	r2, r3
 800314e:	89fb      	ldrh	r3, [r7, #14]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	83fb      	strh	r3, [r7, #30]
      break;
 8003154:	e002      	b.n	800315c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	83fb      	strh	r3, [r7, #30]
      break;
 800315a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800315c:	8bfb      	ldrh	r3, [r7, #30]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <BSP_LCD_DisplayStringAt+0xe6>
 8003162:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da1d      	bge.n	80031a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800316e:	e01a      	b.n	80031a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	89b9      	ldrh	r1, [r7, #12]
 8003176:	8bfb      	ldrh	r3, [r7, #30]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff3f 	bl	8002ffc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4923      	ldr	r1, [pc, #140]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3308      	adds	r3, #8
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	889a      	ldrh	r2, [r3, #4]
 8003194:	8bfb      	ldrh	r3, [r7, #30]
 8003196:	4413      	add	r3, r2
 8003198:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
    i++;
 80031a0:	8bbb      	ldrh	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2dc      	uxtb	r4, r3
 80031b4:	f7ff fe10 	bl	8002dd8 <BSP_LCD_GetXSize>
 80031b8:	8bb9      	ldrh	r1, [r7, #28]
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4d14      	ldr	r5, [pc, #80]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	442b      	add	r3, r5
 80031ca:	3308      	adds	r3, #8
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	889b      	ldrh	r3, [r3, #4]
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ac3      	subs	r3, r0, r3
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <BSP_LCD_DisplayStringAt+0x188>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	480c      	ldr	r0, [pc, #48]	; (8003210 <BSP_LCD_DisplayStringAt+0x18c>)
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	3308      	adds	r3, #8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	889b      	ldrh	r3, [r3, #4]
 80031ee:	4299      	cmp	r1, r3
 80031f0:	bf2c      	ite	cs
 80031f2:	2301      	movcs	r3, #1
 80031f4:	2300      	movcc	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	4023      	ands	r3, r4
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1b7      	bne.n	8003170 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	bf00      	nop
 800320c:	20000ff8 	.word	0x20000ff8
 8003210:	20000ffc 	.word	0x20000ffc

08003214 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003220:	f7ff feae 	bl	8002f80 <BSP_LCD_GetFont>
 8003224:	4603      	mov	r3, r0
 8003226:	88db      	ldrh	r3, [r3, #6]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	fb12 f303 	smulbb	r3, r2, r3
 800322e:	b299      	uxth	r1, r3
 8003230:	2303      	movs	r3, #3
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff ff25 	bl	8003084 <BSP_LCD_DisplayStringAt>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af02      	add	r7, sp, #8
 800324c:	4604      	mov	r4, r0
 800324e:	4608      	mov	r0, r1
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4623      	mov	r3, r4
 8003256:	80fb      	strh	r3, [r7, #6]
 8003258:	4603      	mov	r3, r0
 800325a:	80bb      	strh	r3, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <BSP_LCD_FillRect+0xa8>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4920      	ldr	r1, [pc, #128]	; (80032f0 <BSP_LCD_FillRect+0xac>)
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe34 	bl	8002ee8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <BSP_LCD_FillRect+0xa8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <BSP_LCD_FillRect+0xb0>)
 8003286:	2134      	movs	r1, #52	; 0x34
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	335c      	adds	r3, #92	; 0x5c
 8003290:	681c      	ldr	r4, [r3, #0]
 8003292:	f7ff fda1 	bl	8002dd8 <BSP_LCD_GetXSize>
 8003296:	4602      	mov	r2, r0
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	fb03 f202 	mul.w	r2, r3, r2
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4423      	add	r3, r4
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <BSP_LCD_FillRect+0xa8>)
 80032aa:	681c      	ldr	r4, [r3, #0]
 80032ac:	68fd      	ldr	r5, [r7, #12]
 80032ae:	887e      	ldrh	r6, [r7, #2]
 80032b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80032b4:	f7ff fd90 	bl	8002dd8 <BSP_LCD_GetXSize>
 80032b8:	4602      	mov	r2, r0
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	1ad1      	subs	r1, r2, r3
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <BSP_LCD_FillRect+0xa8>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	480b      	ldr	r0, [pc, #44]	; (80032f0 <BSP_LCD_FillRect+0xac>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	9100      	str	r1, [sp, #0]
 80032d4:	4643      	mov	r3, r8
 80032d6:	4632      	mov	r2, r6
 80032d8:	4629      	mov	r1, r5
 80032da:	4620      	mov	r0, r4
 80032dc:	f000 f998 	bl	8003610 <LL_FillBuffer>
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ea:	bf00      	nop
 80032ec:	20000ff8 	.word	0x20000ff8
 80032f0:	20000ffc 	.word	0x20000ffc
 80032f4:	20000f34 	.word	0x20000f34

080032f8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af02      	add	r7, sp, #8
  /* Send Display on DCS command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <BSP_LCD_DisplayOn+0x20>)
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2329      	movs	r3, #41	; 0x29
 8003308:	2215      	movs	r2, #21
 800330a:	4804      	ldr	r0, [pc, #16]	; (800331c <BSP_LCD_DisplayOn+0x24>)
 800330c:	f002 f89d 	bl	800544a <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
  
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000e88 	.word	0x20000e88
 800331c:	20000fdc 	.word	0x20000fdc

08003320 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d80d      	bhi.n	800334c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	2215      	movs	r2, #21
 8003342:	2100      	movs	r1, #0
 8003344:	480a      	ldr	r0, [pc, #40]	; (8003370 <DSI_IO_WriteCmd+0x50>)
 8003346:	f002 f880 	bl	800544a <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 800334a:	e00d      	b.n	8003368 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	9200      	str	r2, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2239      	movs	r2, #57	; 0x39
 8003360:	2100      	movs	r1, #0
 8003362:	4803      	ldr	r0, [pc, #12]	; (8003370 <DSI_IO_WriteCmd+0x50>)
 8003364:	f002 f893 	bl	800548e <HAL_DSI_LongWrite>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000fdc 	.word	0x20000fdc

08003374 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b34      	ldr	r3, [pc, #208]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a33      	ldr	r2, [pc, #204]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 800339c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80033a2:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ac:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b27      	ldr	r3, [pc, #156]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d4:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033e0:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a19      	ldr	r2, [pc, #100]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003404:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003408:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <BSP_LCD_MspInit+0xdc>)
 8003410:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003414:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2103      	movs	r1, #3
 800341a:	2058      	movs	r0, #88	; 0x58
 800341c:	f000 fc68 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003420:	2058      	movs	r0, #88	; 0x58
 8003422:	f000 fc81 	bl	8003d28 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2103      	movs	r1, #3
 800342a:	205a      	movs	r0, #90	; 0x5a
 800342c:	f000 fc60 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003430:	205a      	movs	r0, #90	; 0x5a
 8003432:	f000 fc79 	bl	8003d28 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2103      	movs	r1, #3
 800343a:	205c      	movs	r0, #92	; 0x5c
 800343c:	f000 fc58 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003440:	205c      	movs	r0, #92	; 0x5c
 8003442:	f000 fc71 	bl	8003d28 <HAL_NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	603a      	str	r2, [r7, #0]
 800345e:	80fb      	strh	r3, [r7, #6]
 8003460:	460b      	mov	r3, r1
 8003462:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <BSP_LCD_DrawPixel+0x44>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0c      	ldr	r2, [pc, #48]	; (800349c <BSP_LCD_DrawPixel+0x48>)
 800346a:	2134      	movs	r1, #52	; 0x34
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	335c      	adds	r3, #92	; 0x5c
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	88bd      	ldrh	r5, [r7, #4]
 8003478:	f7ff fcae 	bl	8002dd8 <BSP_LCD_GetXSize>
 800347c:	4603      	mov	r3, r0
 800347e:	fb03 f205 	mul.w	r2, r3, r5
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4423      	add	r3, r4
 800348a:	461a      	mov	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bdb0      	pop	{r4, r5, r7, pc}
 8003498:	20000ff8 	.word	0x20000ff8
 800349c:	20000f34 	.word	0x20000f34

080034a0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	603a      	str	r2, [r7, #0]
 80034aa:	80fb      	strh	r3, [r7, #6]
 80034ac:	460b      	mov	r3, r1
 80034ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <DrawChar+0x168>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4953      	ldr	r1, [pc, #332]	; (800360c <DrawChar+0x16c>)
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3308      	adds	r3, #8
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	88db      	ldrh	r3, [r3, #6]
 80034ce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034d0:	4b4d      	ldr	r3, [pc, #308]	; (8003608 <DrawChar+0x168>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	494d      	ldr	r1, [pc, #308]	; (800360c <DrawChar+0x16c>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3308      	adds	r3, #8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	889b      	ldrh	r3, [r3, #4]
 80034e6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80034e8:	8a3b      	ldrh	r3, [r7, #16]
 80034ea:	3307      	adds	r3, #7
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <DrawChar+0x52>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	8a3b      	ldrh	r3, [r7, #16]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e076      	b.n	80035f6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003508:	8a3b      	ldrh	r3, [r7, #16]
 800350a:	3307      	adds	r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	da00      	bge.n	8003512 <DrawChar+0x72>
 8003510:	3307      	adds	r3, #7
 8003512:	10db      	asrs	r3, r3, #3
 8003514:	461a      	mov	r2, r3
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	4413      	add	r3, r2
 8003520:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003522:	8a3b      	ldrh	r3, [r7, #16]
 8003524:	3307      	adds	r3, #7
 8003526:	2b00      	cmp	r3, #0
 8003528:	da00      	bge.n	800352c <DrawChar+0x8c>
 800352a:	3307      	adds	r3, #7
 800352c:	10db      	asrs	r3, r3, #3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d002      	beq.n	8003538 <DrawChar+0x98>
 8003532:	2b02      	cmp	r3, #2
 8003534:	d004      	beq.n	8003540 <DrawChar+0xa0>
 8003536:	e00c      	b.n	8003552 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
      break;
 800353e:	e016      	b.n	800356e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	3201      	adds	r2, #1
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
      break;
 8003550:	e00d      	b.n	800356e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	041a      	lsls	r2, r3, #16
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	3301      	adds	r3, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	3202      	adds	r2, #2
 8003566:	7812      	ldrb	r2, [r2, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
      break;
 800356c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e036      	b.n	80035e2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8003574:	8a3a      	ldrh	r2, [r7, #16]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad2      	subs	r2, r2, r3
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	4413      	add	r3, r2
 800357e:	3b01      	subs	r3, #1
 8003580:	2201      	movs	r2, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	461a      	mov	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	b29a      	uxth	r2, r3
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4413      	add	r3, r2
 8003598:	b298      	uxth	r0, r3
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <DrawChar+0x168>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	491b      	ldr	r1, [pc, #108]	; (800360c <DrawChar+0x16c>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7ff ff50 	bl	8003454 <BSP_LCD_DrawPixel>
 80035b4:	e012      	b.n	80035dc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4413      	add	r3, r2
 80035be:	b298      	uxth	r0, r3
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <DrawChar+0x168>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4911      	ldr	r1, [pc, #68]	; (800360c <DrawChar+0x16c>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3304      	adds	r3, #4
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	88bb      	ldrh	r3, [r7, #4]
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7ff ff3c 	bl	8003454 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	3301      	adds	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	8a3b      	ldrh	r3, [r7, #16]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3c4      	bcc.n	8003574 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80035ea:	88bb      	ldrh	r3, [r7, #4]
 80035ec:	3301      	adds	r3, #1
 80035ee:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d384      	bcc.n	8003508 <DrawChar+0x68>
  }
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000ff8 	.word	0x20000ff8
 800360c:	20000ffc 	.word	0x20000ffc

08003610 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <LL_FillBuffer+0x68>)
 8003620:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003624:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <LL_FillBuffer+0x68>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <LL_FillBuffer+0x68>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <LL_FillBuffer+0x68>)
 8003634:	4a11      	ldr	r2, [pc, #68]	; (800367c <LL_FillBuffer+0x6c>)
 8003636:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8003638:	480f      	ldr	r0, [pc, #60]	; (8003678 <LL_FillBuffer+0x68>)
 800363a:	f000 fdfd 	bl	8004238 <HAL_DMA2D_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d115      	bne.n	8003670 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	480c      	ldr	r0, [pc, #48]	; (8003678 <LL_FillBuffer+0x68>)
 8003648:	f001 f864 	bl	8004714 <HAL_DMA2D_ConfigLayer>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69f9      	ldr	r1, [r7, #28]
 800365c:	4806      	ldr	r0, [pc, #24]	; (8003678 <LL_FillBuffer+0x68>)
 800365e:	f000 fe34 	bl	80042ca <HAL_DMA2D_Start>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8003668:	210a      	movs	r1, #10
 800366a:	4803      	ldr	r0, [pc, #12]	; (8003678 <LL_FillBuffer+0x68>)
 800366c:	f000 fe58 	bl	8004320 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000ef4 	.word	0x20000ef4
 800367c:	4002b000 	.word	0x4002b000

08003680 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <BSP_SDRAM_Init+0xac>)
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <BSP_SDRAM_Init+0xb0>)
 8003688:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 8003692:	2207      	movs	r2, #7
 8003694:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 8003698:	2204      	movs	r2, #4
 800369a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 800369e:	2207      	movs	r2, #7
 80036a0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 80036a4:	2202      	movs	r2, #2
 80036a6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 80036aa:	2202      	movs	r2, #2
 80036ac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 80036b0:	2202      	movs	r2, #2
 80036b2:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036c2:	2204      	movs	r2, #4
 80036c4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036c8:	2220      	movs	r2, #32
 80036ca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80036d2:	4b16      	ldr	r3, [pc, #88]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036d4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80036d8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80036e8:	4b10      	ldr	r3, [pc, #64]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80036f0:	4b0e      	ldr	r3, [pc, #56]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80036f6:	2100      	movs	r1, #0
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <BSP_SDRAM_Init+0xac>)
 80036fa:	f000 f87f 	bl	80037fc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80036fe:	490d      	ldr	r1, [pc, #52]	; (8003734 <BSP_SDRAM_Init+0xb4>)
 8003700:	480a      	ldr	r0, [pc, #40]	; (800372c <BSP_SDRAM_Init+0xac>)
 8003702:	f006 fe48 	bl	800a396 <HAL_SDRAM_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <BSP_SDRAM_Init+0xb8>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e002      	b.n	800371a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <BSP_SDRAM_Init+0xb8>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800371a:	f240 5069 	movw	r0, #1385	; 0x569
 800371e:	f000 f80d 	bl	800373c <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <BSP_SDRAM_Init+0xb8>)
 8003724:	781b      	ldrb	r3, [r3, #0]
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20001050 	.word	0x20001050
 8003730:	a0000140 	.word	0xa0000140
 8003734:	20001084 	.word	0x20001084
 8003738:	2000001c 	.word	0x2000001c

0800373c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003750:	2210      	movs	r2, #16
 8003752:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003756:	2201      	movs	r2, #1
 8003758:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003764:	4923      	ldr	r1, [pc, #140]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003766:	4824      	ldr	r0, [pc, #144]	; (80037f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003768:	f006 fe49 	bl	800a3fe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800376c:	2001      	movs	r0, #1
 800376e:	f000 f9bf 	bl	8003af0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003774:	2202      	movs	r2, #2
 8003776:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377a:	2210      	movs	r2, #16
 800377c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003780:	2201      	movs	r2, #1
 8003782:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	2200      	movs	r2, #0
 8003788:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800378a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378e:	4919      	ldr	r1, [pc, #100]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003790:	4819      	ldr	r0, [pc, #100]	; (80037f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003792:	f006 fe34 	bl	800a3fe <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003798:	2203      	movs	r2, #3
 800379a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800379e:	2210      	movs	r2, #16
 80037a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a4:	2208      	movs	r2, #8
 80037a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b2:	4910      	ldr	r1, [pc, #64]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b4:	4810      	ldr	r0, [pc, #64]	; (80037f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037b6:	f006 fe22 	bl	800a3fe <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80037ba:	f44f 730c 	mov.w	r3, #560	; 0x230
 80037be:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c2:	2204      	movs	r2, #4
 80037c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c8:	2210      	movs	r2, #16
 80037ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037dc:	4905      	ldr	r1, [pc, #20]	; (80037f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037de:	4806      	ldr	r0, [pc, #24]	; (80037f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037e0:	f006 fe0d 	bl	800a3fe <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4804      	ldr	r0, [pc, #16]	; (80037f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037e8:	f006 fe3e 	bl	800a468 <HAL_SDRAM_ProgramRefreshRate>
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200010a0 	.word	0x200010a0
 80037f8:	20001050 	.word	0x20001050

080037fc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b090      	sub	sp, #64	; 0x40
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8104 	beq.w	8003a16 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	4b83      	ldr	r3, [pc, #524]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	4a82      	ldr	r2, [pc, #520]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6393      	str	r3, [r2, #56]	; 0x38
 800381e:	4b80      	ldr	r3, [pc, #512]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a7b      	ldr	r2, [pc, #492]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b79      	ldr	r3, [pc, #484]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a74      	ldr	r2, [pc, #464]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	4b6e      	ldr	r3, [pc, #440]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003888:	f043 0310 	orr.w	r3, r3, #16
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <BSP_SDRAM_MspInit+0x224>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800390e:	2301      	movs	r3, #1
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003912:	2302      	movs	r3, #2
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003916:	230c      	movs	r3, #12
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800391a:	2301      	movs	r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800391e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003922:	4619      	mov	r1, r3
 8003924:	483f      	ldr	r0, [pc, #252]	; (8003a24 <BSP_SDRAM_MspInit+0x228>)
 8003926:	f001 fe4b 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800392a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003934:	4619      	mov	r1, r3
 8003936:	483c      	ldr	r0, [pc, #240]	; (8003a28 <BSP_SDRAM_MspInit+0x22c>)
 8003938:	f001 fe42 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800393c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	4619      	mov	r1, r3
 8003948:	4838      	ldr	r0, [pc, #224]	; (8003a2c <BSP_SDRAM_MspInit+0x230>)
 800394a:	f001 fe39 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800394e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003958:	4619      	mov	r1, r3
 800395a:	4835      	ldr	r0, [pc, #212]	; (8003a30 <BSP_SDRAM_MspInit+0x234>)
 800395c:	f001 fe30 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003960:	f248 1333 	movw	r3, #33075	; 0x8133
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396a:	4619      	mov	r1, r3
 800396c:	4831      	ldr	r0, [pc, #196]	; (8003a34 <BSP_SDRAM_MspInit+0x238>)
 800396e:	f001 fe27 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8003972:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397c:	4619      	mov	r1, r3
 800397e:	482e      	ldr	r0, [pc, #184]	; (8003a38 <BSP_SDRAM_MspInit+0x23c>)
 8003980:	f001 fe1e 	bl	80055c0 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003984:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800398a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800398e:	4619      	mov	r1, r3
 8003990:	482a      	ldr	r0, [pc, #168]	; (8003a3c <BSP_SDRAM_MspInit+0x240>)
 8003992:	f001 fe15 	bl	80055c0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a8:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b0:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039b8:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039c0:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 80039c2:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ce:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039d8:	2203      	movs	r2, #3
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039de:	2200      	movs	r2, #0
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <BSP_SDRAM_MspInit+0x248>)
 80039ec:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80039fa:	4811      	ldr	r0, [pc, #68]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 80039fc:	f000 fa7a 	bl	8003ef4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8003a00:	480f      	ldr	r0, [pc, #60]	; (8003a40 <BSP_SDRAM_MspInit+0x244>)
 8003a02:	f000 f9c9 	bl	8003d98 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2105      	movs	r1, #5
 8003a0a:	2038      	movs	r0, #56	; 0x38
 8003a0c:	f000 f970 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a10:	2038      	movs	r0, #56	; 0x38
 8003a12:	f000 f989 	bl	8003d28 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003a16:	bf00      	nop
 8003a18:	3740      	adds	r7, #64	; 0x40
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020800 	.word	0x40020800
 8003a28:	40020c00 	.word	0x40020c00
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40021400 	.word	0x40021400
 8003a34:	40021800 	.word	0x40021800
 8003a38:	40021c00 	.word	0x40021c00
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	200010b0 	.word	0x200010b0
 8003a44:	40026410 	.word	0x40026410

08003a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <SystemInit+0x20>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <SystemInit+0x20>)
 8003a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_Init+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_Init+0x40>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_Init+0x40>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_Init+0x40>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f920 	bl	8003cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7fd fdf4 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7fd fdc6 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00

08003ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_IncTick+0x20>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_IncTick+0x24>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_IncTick+0x24>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000028 	.word	0x20000028
 8003ad4:	20001110 	.word	0x20001110

08003ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return uwTick;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_GetTick+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20001110 	.word	0x20001110

08003af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff ffee 	bl	8003ad8 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d005      	beq.n	8003b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <HAL_Delay+0x44>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b16:	bf00      	nop
 8003b18:	f7ff ffde 	bl	8003ad8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d8f7      	bhi.n	8003b18 <HAL_Delay+0x28>
  {
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000028 	.word	0x20000028

08003b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	60d3      	str	r3, [r2, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <__NVIC_GetPriorityGrouping+0x18>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0307 	and.w	r3, r3, #7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0b      	blt.n	8003bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <__NVIC_EnableIRQ+0x38>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db12      	blt.n	8003c10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	490a      	ldr	r1, [pc, #40]	; (8003c1c <__NVIC_DisableIRQ+0x44>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	3320      	adds	r3, #32
 8003c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c04:	f3bf 8f4f 	dsb	sy
}
 8003c08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c0a:	f3bf 8f6f 	isb	sy
}
 8003c0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db0a      	blt.n	8003c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	490c      	ldr	r1, [pc, #48]	; (8003c6c <__NVIC_SetPriority+0x4c>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	440b      	add	r3, r1
 8003c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c48:	e00a      	b.n	8003c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <__NVIC_SetPriority+0x50>)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3b04      	subs	r3, #4
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	761a      	strb	r2, [r3, #24]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	bf28      	it	cs
 8003c92:	2304      	movcs	r3, #4
 8003c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d902      	bls.n	8003ca4 <NVIC_EncodePriority+0x30>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3b03      	subs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <NVIC_EncodePriority+0x32>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	4313      	orrs	r3, r2
         );
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff28 	bl	8003b38 <__NVIC_SetPriorityGrouping>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d02:	f7ff ff3d 	bl	8003b80 <__NVIC_GetPriorityGrouping>
 8003d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f7ff ffb1 	bl	8003c74 <NVIC_EncodePriority>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff80 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d20:	bf00      	nop
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff30 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff40 	bl	8003bd8 <__NVIC_DisableIRQ>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00e      	b.n	8003d90 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc fbd2 	bl	800052c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff fe98 	bl	8003ad8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e099      	b.n	8003ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd4:	e00f      	b.n	8003df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd6:	f7ff fe7f 	bl	8003ad8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d908      	bls.n	8003df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e078      	b.n	8003ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e8      	bne.n	8003dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_DMA_Init+0x158>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d107      	bne.n	8003e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d117      	bne.n	8003eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f94f 	bl	8004140 <DMA_CheckFifoParam>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e016      	b.n	8003ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f906 	bl	80040d4 <DMA_CalcBaseAndBitshift>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	223f      	movs	r2, #63	; 0x3f
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	f010803f 	.word	0xf010803f

08003ef4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e050      	b.n	8003fa8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d101      	bne.n	8003f16 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
 8003f14:	e048      	b.n	8003fa8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8bc 	bl	80040d4 <DMA_CalcBaseAndBitshift>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	223f      	movs	r2, #63	; 0x3f
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_DMA_Start_IT+0x26>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e040      	b.n	8004058 <HAL_DMA_Start_IT+0xa8>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12f      	bne.n	800404a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f83a 	bl	8004078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	223f      	movs	r2, #63	; 0x3f
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0216 	orr.w	r2, r2, #22
 800401e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0208 	orr.w	r2, r2, #8
 8004036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e005      	b.n	8004056 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d108      	bne.n	80040b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040b6:	e007      	b.n	80040c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	3b10      	subs	r3, #16
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <DMA_CalcBaseAndBitshift+0x64>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ee:	4a13      	ldr	r2, [pc, #76]	; (800413c <DMA_CalcBaseAndBitshift+0x68>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d909      	bls.n	8004116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	659a      	str	r2, [r3, #88]	; 0x58
 8004114:	e007      	b.n	8004126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	aaaaaaab 	.word	0xaaaaaaab
 800413c:	080147ac 	.word	0x080147ac

08004140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11f      	bne.n	800419a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d856      	bhi.n	800420e <DMA_CheckFifoParam+0xce>
 8004160:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <DMA_CheckFifoParam+0x28>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	08004179 	.word	0x08004179
 800416c:	0800418b 	.word	0x0800418b
 8004170:	08004179 	.word	0x08004179
 8004174:	0800420f 	.word	0x0800420f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d046      	beq.n	8004212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004188:	e043      	b.n	8004212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004192:	d140      	bne.n	8004216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e03d      	b.n	8004216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d121      	bne.n	80041e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d837      	bhi.n	800421a <DMA_CheckFifoParam+0xda>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <DMA_CheckFifoParam+0x70>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041c7 	.word	0x080041c7
 80041b8:	080041c1 	.word	0x080041c1
 80041bc:	080041d9 	.word	0x080041d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e030      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d025      	beq.n	800421e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d6:	e022      	b.n	800421e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e0:	d11f      	bne.n	8004222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041e6:	e01c      	b.n	8004222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d903      	bls.n	80041f6 <DMA_CheckFifoParam+0xb6>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d003      	beq.n	80041fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041f4:	e018      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      break;
 80041fa:	e015      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      break;
 800420c:	e00b      	b.n	8004226 <DMA_CheckFifoParam+0xe6>
      break;
 800420e:	bf00      	nop
 8004210:	e00a      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;
 8004212:	bf00      	nop
 8004214:	e008      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;
 8004216:	bf00      	nop
 8004218:	e006      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;   
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
    }
  } 
  
  return status; 
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e03b      	b.n	80042c2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc f9b8 	bl	80005d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	f023 0107 	bic.w	r1, r3, #7
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68d1      	ldr	r1, [r2, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_DMA2D_Start+0x1c>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e018      	b.n	8004318 <HAL_DMA2D_Start+0x4e>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fa99 	bl	8004838 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d056      	beq.n	80043ea <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800433c:	f7ff fbcc 	bl	8003ad8 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004342:	e04b      	b.n	80043dc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004352:	2b00      	cmp	r3, #0
 8004354:	d023      	beq.n	800439e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	f043 0202 	orr.w	r2, r3, #2
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2221      	movs	r2, #33	; 0x21
 8004388:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0a5      	b.n	80044ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7ff fb97 	bl	8003ad8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <HAL_DMA2D_PollForTransfer+0x9c>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2203      	movs	r2, #3
 80043cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e086      	b.n	80044ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ac      	beq.n	8004344 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d061      	beq.n	80044d0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800440c:	f7ff fb64 	bl	8003ad8 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004412:	e056      	b.n	80044c2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2229      	movs	r2, #41	; 0x29
 800446e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2204      	movs	r2, #4
 8004474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d01a      	beq.n	80044c2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7ff fb24 	bl	8003ad8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <HAL_DMA2D_PollForTransfer+0x182>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2203      	movs	r2, #3
 80044b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e013      	b.n	80044ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0a1      	beq.n	8004414 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2212      	movs	r2, #18
 80044d6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d026      	beq.n	8004562 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d021      	beq.n	8004562 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2201      	movs	r2, #1
 8004540:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d026      	beq.n	80045ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d021      	beq.n	80045ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004584:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2220      	movs	r2, #32
 800458c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	f043 0202 	orr.w	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d026      	beq.n	8004612 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d021      	beq.n	8004612 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2208      	movs	r2, #8
 80045e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	f043 0204 	orr.w	r2, r3, #4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2204      	movs	r2, #4
 80045f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004634:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f853 	bl	80046ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d024      	beq.n	8004698 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01f      	beq.n	8004698 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2202      	movs	r2, #2
 800466e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01f      	beq.n	80046e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2210      	movs	r2, #16
 80046c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f80e 	bl	80046fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_DMA2D_ConfigLayer+0x20>
 8004730:	2302      	movs	r3, #2
 8004732:	e079      	b.n	8004828 <HAL_DMA2D_ConfigLayer+0x114>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	3318      	adds	r3, #24
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800475e:	4b35      	ldr	r3, [pc, #212]	; (8004834 <HAL_DMA2D_ConfigLayer+0x120>)
 8004760:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b0a      	cmp	r3, #10
 8004768:	d003      	beq.n	8004772 <HAL_DMA2D_ConfigLayer+0x5e>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b09      	cmp	r3, #9
 8004770:	d107      	bne.n	8004782 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e005      	b.n	800478e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d120      	bne.n	80047d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	ea02 0103 	and.w	r1, r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b0a      	cmp	r3, #10
 80047bc:	d003      	beq.n	80047c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	d127      	bne.n	8004816 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
 80047d4:	e01f      	b.n	8004816 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	ea02 0103 	and.w	r1, r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b0a      	cmp	r3, #10
 80047fe:	d003      	beq.n	8004808 <HAL_DMA2D_ConfigLayer+0xf4>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b09      	cmp	r3, #9
 8004806:	d106      	bne.n	8004816 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004814:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	ff03000f 	.word	0xff03000f

08004838 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004838:	b480      	push	{r7}
 800483a:	b08b      	sub	sp, #44	; 0x2c
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	041a      	lsls	r2, r3, #16
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004870:	d174      	bne.n	800495c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004878:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004880:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004888:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	431a      	orrs	r2, r3
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e053      	b.n	8004952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d106      	bne.n	80048c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
 80048be:	e048      	b.n	8004952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d111      	bne.n	80048ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	0cdb      	lsrs	r3, r3, #19
 80048cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	0a9b      	lsrs	r3, r3, #10
 80048d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	08db      	lsrs	r3, r3, #3
 80048d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	02db      	lsls	r3, r3, #11
 80048e2:	4313      	orrs	r3, r2
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	e032      	b.n	8004952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d117      	bne.n	8004924 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	0fdb      	lsrs	r3, r3, #31
 80048f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	0cdb      	lsrs	r3, r3, #19
 80048fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	431a      	orrs	r2, r3
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	03db      	lsls	r3, r3, #15
 800491a:	4313      	orrs	r3, r2
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	e016      	b.n	8004952 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	0f1b      	lsrs	r3, r3, #28
 8004928:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	0d1b      	lsrs	r3, r3, #20
 800492e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	0b1b      	lsrs	r3, r3, #12
 8004934:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	011a      	lsls	r2, r3, #4
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	431a      	orrs	r2, r3
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	031b      	lsls	r3, r3, #12
 800494a:	4313      	orrs	r3, r2
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800495a:	e003      	b.n	8004964 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	60da      	str	r2, [r3, #12]
}
 8004964:	bf00      	nop
 8004966:	372c      	adds	r7, #44	; 0x2c
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	019a      	lsls	r2, r3, #6
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	431a      	orrs	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	431a      	orrs	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b0:	f7ff f892 	bl	8003ad8 <HAL_GetTick>
 80049b4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80049b6:	e009      	b.n	80049cc <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80049b8:	f7ff f88e 	bl	8003ad8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c6:	d901      	bls.n	80049cc <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e015      	b.n	80049f8 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ee      	beq.n	80049b8 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	019a      	lsls	r2, r3, #6
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	ea42 0103 	orr.w	r1, r2, r3
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	041a      	lsls	r2, r3, #16
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e10b      	b.n	8004c2c <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7c5b      	ldrb	r3, [r3, #17]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fb fe00 	bl	8000624 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a3e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a52:	f7ff f841 	bl	8003ad8 <HAL_GetTick>
 8004a56:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004a58:	e009      	b.n	8004a6e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a5a:	f7ff f83d 	bl	8003ad8 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a68:	d901      	bls.n	8004a6e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0de      	b.n	8004c2c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ed      	beq.n	8004a5a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8004a8e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004a92:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004aaa:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004ab2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f7ff f802 	bl	8003af0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aec:	f7fe fff4 	bl	8003ad8 <HAL_GetTick>
 8004af0:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004af2:	e009      	b.n	8004b08 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004af4:	f7fe fff0 	bl	8003ad8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b02:	d901      	bls.n	8004b08 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e091      	b.n	8004c2c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ed      	beq.n	8004af4 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0206 	orr.w	r2, r2, #6
 8004b28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0203 	bic.w	r2, r2, #3
 8004b3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0203 	bic.w	r2, r2, #3
 8004b6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_DSI_Init+0x1b4>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	e000      	b.n	8004bb6 <HAL_DSI_Init+0x1b6>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_DSI_Init+0x234>)
 8004bbc:	fb03 f202 	mul.w	r2, r3, r2
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004bec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	003d0900 	.word	0x003d0900

08004c38 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e066      	b.n	8004d18 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0206 	bic.w	r2, r2, #6
 8004caa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb fce0 	bl	80006c4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00f      	beq.n	8004d58 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8ad 	bl	8004eb2 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00f      	beq.n	8004d88 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f89f 	bl	8004ec6 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 808c 	beq.w	8004eaa <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d9a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4013      	ands	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004db2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f043 0202 	orr.w	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f043 0208 	orr.w	r2, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f818 	bl	8004eda <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7c1b      	ldrb	r3, [r3, #16]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_DSI_ConfigVideoMode+0x16>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e1f6      	b.n	80052f2 <HAL_DSI_ConfigVideoMode+0x404>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0203 	bic.w	r2, r2, #3
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f62:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004f84:	f023 031f 	bic.w	r3, r3, #31
 8004f88:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004faa:	f023 031f 	bic.w	r3, r3, #31
 8004fae:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0203 	bic.w	r2, r2, #3
 8004fd0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68d9      	ldr	r1, [r3, #12]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0207 	bic.w	r2, r2, #7
 8004ff2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6959      	ldr	r1, [r3, #20]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	431a      	orrs	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 020f 	bic.w	r2, r2, #15
 8005020:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6919      	ldr	r1, [r3, #16]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 020e 	bic.w	r2, r2, #14
 8005044:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	005a      	lsls	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d110      	bne.n	800508a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005076:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6919      	ldr	r1, [r3, #16]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005098:	f023 030f 	bic.w	r3, r3, #15
 800509c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80050be:	f023 030f 	bic.w	r3, r3, #15
 80050c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050e8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800517c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005180:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80051c4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d0:	041a      	lsls	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051e8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6999      	ldr	r1, [r3, #24]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7c1b      	ldrb	r3, [r3, #16]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_DSI_ConfigPhyTimer+0x16>
 8005310:	2302      	movs	r3, #2
 8005312:	e058      	b.n	80053c6 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4293      	cmp	r3, r2
 8005324:	bf38      	it	cc
 8005326:	4613      	movcc	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800533a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	041a      	lsls	r2, r3, #16
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005368:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80053a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	021a      	lsls	r2, r3, #8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7c1b      	ldrb	r3, [r3, #16]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_DSI_Start+0x14>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e02b      	b.n	800543e <HAL_DSI_Start+0x6c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	605a      	str	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b088      	sub	sp, #32
 800544e:	af02      	add	r7, sp, #8
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	7c1b      	ldrb	r3, [r3, #16]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_DSI_ShortWrite+0x1a>
 8005460:	2302      	movs	r3, #2
 8005462:	e010      	b.n	8005486 <HAL_DSI_ShortWrite+0x3c>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff fa94 	bl	80049a2 <DSI_ShortWrite>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	741a      	strb	r2, [r3, #16]

  return status;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08c      	sub	sp, #48	; 0x30
 8005492:	af02      	add	r7, sp, #8
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	7c1b      	ldrb	r3, [r3, #16]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_DSI_LongWrite+0x1e>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e084      	b.n	80055b6 <HAL_DSI_LongWrite+0x128>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80054b2:	f7fe fb11 	bl	8003ad8 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80054b8:	e00c      	b.n	80054d4 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80054ba:	f7fe fb0d 	bl	8003ad8 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c8:	d904      	bls.n	80054d4 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e070      	b.n	80055b6 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0eb      	beq.n	80054ba <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	bf28      	it	cs
 80054ec:	2303      	movcs	r3, #3
 80054ee:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]
 80054f4:	e00f      	b.n	8005516 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	4413      	add	r3, r2
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	3301      	adds	r3, #1
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	4313      	orrs	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	3301      	adds	r3, #1
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	6a3a      	ldr	r2, [r7, #32]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3eb      	bcc.n	80054f6 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005536:	e028      	b.n	800558a <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005546:	2300      	movs	r3, #0
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	e00e      	b.n	800556a <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	4313      	orrs	r3, r2
 8005562:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	3301      	adds	r3, #1
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d3ec      	bcc.n	800554c <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1d3      	bne.n	8005538 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005598:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	f7ff f9e1 	bl	8004970 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e177      	b.n	80058cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055dc:	2201      	movs	r2, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	f040 8166 	bne.w	80058c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d005      	beq.n	8005612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	2b02      	cmp	r3, #2
 8005610:	d130      	bne.n	8005674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4013      	ands	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005648:	2201      	movs	r2, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 0201 	and.w	r2, r3, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d017      	beq.n	80056b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	2203      	movs	r2, #3
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d123      	bne.n	8005704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	08da      	lsrs	r2, r3, #3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3208      	adds	r2, #8
 80056c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	220f      	movs	r2, #15
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	08da      	lsrs	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3208      	adds	r2, #8
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2203      	movs	r2, #3
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0203 	and.w	r2, r3, #3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80c0 	beq.w	80058c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	4b66      	ldr	r3, [pc, #408]	; (80058e4 <HAL_GPIO_Init+0x324>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	4a65      	ldr	r2, [pc, #404]	; (80058e4 <HAL_GPIO_Init+0x324>)
 8005750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005754:	6453      	str	r3, [r2, #68]	; 0x44
 8005756:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <HAL_GPIO_Init+0x324>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005762:	4a61      	ldr	r2, [pc, #388]	; (80058e8 <HAL_GPIO_Init+0x328>)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	3302      	adds	r3, #2
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	220f      	movs	r2, #15
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a58      	ldr	r2, [pc, #352]	; (80058ec <HAL_GPIO_Init+0x32c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d037      	beq.n	80057fe <HAL_GPIO_Init+0x23e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a57      	ldr	r2, [pc, #348]	; (80058f0 <HAL_GPIO_Init+0x330>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d031      	beq.n	80057fa <HAL_GPIO_Init+0x23a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_GPIO_Init+0x334>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02b      	beq.n	80057f6 <HAL_GPIO_Init+0x236>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a55      	ldr	r2, [pc, #340]	; (80058f8 <HAL_GPIO_Init+0x338>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d025      	beq.n	80057f2 <HAL_GPIO_Init+0x232>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_GPIO_Init+0x33c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <HAL_GPIO_Init+0x22e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a53      	ldr	r2, [pc, #332]	; (8005900 <HAL_GPIO_Init+0x340>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d019      	beq.n	80057ea <HAL_GPIO_Init+0x22a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a52      	ldr	r2, [pc, #328]	; (8005904 <HAL_GPIO_Init+0x344>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_GPIO_Init+0x226>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a51      	ldr	r2, [pc, #324]	; (8005908 <HAL_GPIO_Init+0x348>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00d      	beq.n	80057e2 <HAL_GPIO_Init+0x222>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a50      	ldr	r2, [pc, #320]	; (800590c <HAL_GPIO_Init+0x34c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <HAL_GPIO_Init+0x21e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4f      	ldr	r2, [pc, #316]	; (8005910 <HAL_GPIO_Init+0x350>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_GPIO_Init+0x21a>
 80057d6:	2309      	movs	r3, #9
 80057d8:	e012      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057da:	230a      	movs	r3, #10
 80057dc:	e010      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057de:	2308      	movs	r3, #8
 80057e0:	e00e      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057e2:	2307      	movs	r3, #7
 80057e4:	e00c      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057e6:	2306      	movs	r3, #6
 80057e8:	e00a      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057ea:	2305      	movs	r3, #5
 80057ec:	e008      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057ee:	2304      	movs	r3, #4
 80057f0:	e006      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057f2:	2303      	movs	r3, #3
 80057f4:	e004      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e002      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_GPIO_Init+0x240>
 80057fe:	2300      	movs	r3, #0
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	f002 0203 	and.w	r2, r2, #3
 8005806:	0092      	lsls	r2, r2, #2
 8005808:	4093      	lsls	r3, r2
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005810:	4935      	ldr	r1, [pc, #212]	; (80058e8 <HAL_GPIO_Init+0x328>)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	3302      	adds	r3, #2
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_GPIO_Init+0x354>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <HAL_GPIO_Init+0x354>)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005848:	4b32      	ldr	r3, [pc, #200]	; (8005914 <HAL_GPIO_Init+0x354>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800586c:	4a29      	ldr	r2, [pc, #164]	; (8005914 <HAL_GPIO_Init+0x354>)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <HAL_GPIO_Init+0x354>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_GPIO_Init+0x354>)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <HAL_GPIO_Init+0x354>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <HAL_GPIO_Init+0x354>)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	f67f ae84 	bls.w	80055dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	3724      	adds	r7, #36	; 0x24
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40013800 	.word	0x40013800
 80058ec:	40020000 	.word	0x40020000
 80058f0:	40020400 	.word	0x40020400
 80058f4:	40020800 	.word	0x40020800
 80058f8:	40020c00 	.word	0x40020c00
 80058fc:	40021000 	.word	0x40021000
 8005900:	40021400 	.word	0x40021400
 8005904:	40021800 	.word	0x40021800
 8005908:	40021c00 	.word	0x40021c00
 800590c:	40022000 	.word	0x40022000
 8005910:	40022400 	.word	0x40022400
 8005914:	40013c00 	.word	0x40013c00

08005918 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e0d9      	b.n	8005ae8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005934:	2201      	movs	r2, #1
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4013      	ands	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	f040 80c9 	bne.w	8005ae2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005950:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_GPIO_DeInit+0x1e8>)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	3302      	adds	r3, #2
 8005958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	220f      	movs	r2, #15
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4013      	ands	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a63      	ldr	r2, [pc, #396]	; (8005b04 <HAL_GPIO_DeInit+0x1ec>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d037      	beq.n	80059ea <HAL_GPIO_DeInit+0xd2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a62      	ldr	r2, [pc, #392]	; (8005b08 <HAL_GPIO_DeInit+0x1f0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_GPIO_DeInit+0xce>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a61      	ldr	r2, [pc, #388]	; (8005b0c <HAL_GPIO_DeInit+0x1f4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02b      	beq.n	80059e2 <HAL_GPIO_DeInit+0xca>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a60      	ldr	r2, [pc, #384]	; (8005b10 <HAL_GPIO_DeInit+0x1f8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d025      	beq.n	80059de <HAL_GPIO_DeInit+0xc6>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a5f      	ldr	r2, [pc, #380]	; (8005b14 <HAL_GPIO_DeInit+0x1fc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01f      	beq.n	80059da <HAL_GPIO_DeInit+0xc2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a5e      	ldr	r2, [pc, #376]	; (8005b18 <HAL_GPIO_DeInit+0x200>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d019      	beq.n	80059d6 <HAL_GPIO_DeInit+0xbe>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a5d      	ldr	r2, [pc, #372]	; (8005b1c <HAL_GPIO_DeInit+0x204>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_GPIO_DeInit+0xba>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a5c      	ldr	r2, [pc, #368]	; (8005b20 <HAL_GPIO_DeInit+0x208>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00d      	beq.n	80059ce <HAL_GPIO_DeInit+0xb6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a5b      	ldr	r2, [pc, #364]	; (8005b24 <HAL_GPIO_DeInit+0x20c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <HAL_GPIO_DeInit+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a5a      	ldr	r2, [pc, #360]	; (8005b28 <HAL_GPIO_DeInit+0x210>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_GPIO_DeInit+0xae>
 80059c2:	2309      	movs	r3, #9
 80059c4:	e012      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059c6:	230a      	movs	r3, #10
 80059c8:	e010      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059ca:	2308      	movs	r3, #8
 80059cc:	e00e      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059ce:	2307      	movs	r3, #7
 80059d0:	e00c      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059d2:	2306      	movs	r3, #6
 80059d4:	e00a      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059d6:	2305      	movs	r3, #5
 80059d8:	e008      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059da:	2304      	movs	r3, #4
 80059dc:	e006      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059de:	2303      	movs	r3, #3
 80059e0:	e004      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e002      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_GPIO_DeInit+0xd4>
 80059ea:	2300      	movs	r3, #0
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	f002 0203 	and.w	r2, r2, #3
 80059f2:	0092      	lsls	r2, r2, #2
 80059f4:	4093      	lsls	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d132      	bne.n	8005a62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80059fc:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	4949      	ldr	r1, [pc, #292]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	4946      	ldr	r1, [pc, #280]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a18:	4b44      	ldr	r3, [pc, #272]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	4942      	ldr	r1, [pc, #264]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a26:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	493f      	ldr	r1, [pc, #252]	; (8005b2c <HAL_GPIO_DeInit+0x214>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	220f      	movs	r2, #15
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_GPIO_DeInit+0x1e8>)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	089b      	lsrs	r3, r3, #2
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	43da      	mvns	r2, r3
 8005a54:	482a      	ldr	r0, [pc, #168]	; (8005b00 <HAL_GPIO_DeInit+0x1e8>)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	089b      	lsrs	r3, r3, #2
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	2103      	movs	r1, #3
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	08da      	lsrs	r2, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3208      	adds	r2, #8
 8005a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	220f      	movs	r2, #15
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	08d2      	lsrs	r2, r2, #3
 8005a98:	4019      	ands	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	2103      	movs	r1, #3
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	2101      	movs	r1, #1
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2103      	movs	r1, #3
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	401a      	ands	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	f67f af22 	bls.w	8005934 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40013800 	.word	0x40013800
 8005b04:	40020000 	.word	0x40020000
 8005b08:	40020400 	.word	0x40020400
 8005b0c:	40020800 	.word	0x40020800
 8005b10:	40020c00 	.word	0x40020c00
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40021400 	.word	0x40021400
 8005b1c:	40021800 	.word	0x40021800
 8005b20:	40021c00 	.word	0x40021c00
 8005b24:	40022000 	.word	0x40022000
 8005b28:	40022400 	.word	0x40022400
 8005b2c:	40013c00 	.word	0x40013c00

08005b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	887b      	ldrh	r3, [r7, #2]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b70:	787b      	ldrb	r3, [r7, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b7c:	e003      	b.n	8005b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ba4:	887a      	ldrh	r2, [r7, #2]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	041a      	lsls	r2, r3, #16
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	43d9      	mvns	r1, r3
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc8:	b08f      	sub	sp, #60	; 0x3c
 8005bca:	af0a      	add	r7, sp, #40	; 0x28
 8005bcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e054      	b.n	8005c82 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc fa56 	bl	80020a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f006 fa80 	bl	800c11c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	687e      	ldr	r6, [r7, #4]
 8005c24:	466d      	mov	r5, sp
 8005c26:	f106 0410 	add.w	r4, r6, #16
 8005c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c3a:	1d33      	adds	r3, r6, #4
 8005c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f006 f9fa 	bl	800c038 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f006 fa77 	bl	800c13e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	687e      	ldr	r6, [r7, #4]
 8005c58:	466d      	mov	r5, sp
 8005c5a:	f106 0410 	add.w	r4, r6, #16
 8005c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c6e:	1d33      	adds	r3, r6, #4
 8005c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c72:	6838      	ldr	r0, [r7, #0]
 8005c74:	f006 fc00 	bl	800c478 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c8a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005c8a:	b590      	push	{r4, r7, lr}
 8005c8c:	b089      	sub	sp, #36	; 0x24
 8005c8e:	af04      	add	r7, sp, #16
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	461a      	mov	r2, r3
 8005c98:	4603      	mov	r3, r0
 8005c9a:	70fb      	strb	r3, [r7, #3]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70bb      	strb	r3, [r7, #2]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_HCD_HC_Init+0x28>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e076      	b.n	8005da0 <HAL_HCD_HC_Init+0x116>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	212c      	movs	r1, #44	; 0x2c
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	333d      	adds	r3, #61	; 0x3d
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3338      	adds	r3, #56	; 0x38
 8005cda:	787a      	ldrb	r2, [r7, #1]
 8005cdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	212c      	movs	r1, #44	; 0x2c
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	3340      	adds	r3, #64	; 0x40
 8005cec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	212c      	movs	r1, #44	; 0x2c
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3339      	adds	r3, #57	; 0x39
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	212c      	movs	r1, #44	; 0x2c
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	333f      	adds	r3, #63	; 0x3f
 8005d10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005d14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	78ba      	ldrb	r2, [r7, #2]
 8005d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d1e:	b2d0      	uxtb	r0, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	212c      	movs	r1, #44	; 0x2c
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	333a      	adds	r3, #58	; 0x3a
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005d30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da09      	bge.n	8005d4c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	333b      	adds	r3, #59	; 0x3b
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e008      	b.n	8005d5e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	333b      	adds	r3, #59	; 0x3b
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	212c      	movs	r1, #44	; 0x2c
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	4413      	add	r3, r2
 8005d6a:	333c      	adds	r3, #60	; 0x3c
 8005d6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005d70:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	787c      	ldrb	r4, [r7, #1]
 8005d78:	78ba      	ldrb	r2, [r7, #2]
 8005d7a:	78f9      	ldrb	r1, [r7, #3]
 8005d7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	f006 fced 	bl	800c76c <USB_HC_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}

08005da8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_HCD_HC_Halt+0x1e>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e00f      	b.n	8005de6 <HAL_HCD_HC_Halt+0x3e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f006 ff3d 	bl	800cc56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	70fb      	strb	r3, [r7, #3]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70bb      	strb	r3, [r7, #2]
 8005e06:	4613      	mov	r3, r2
 8005e08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	212c      	movs	r1, #44	; 0x2c
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	333b      	adds	r3, #59	; 0x3b
 8005e18:	78ba      	ldrb	r2, [r7, #2]
 8005e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	333f      	adds	r3, #63	; 0x3f
 8005e2a:	787a      	ldrb	r2, [r7, #1]
 8005e2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005e2e:	7c3b      	ldrb	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d112      	bne.n	8005e5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	212c      	movs	r1, #44	; 0x2c
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	4413      	add	r3, r2
 8005e40:	3342      	adds	r3, #66	; 0x42
 8005e42:	2203      	movs	r2, #3
 8005e44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	212c      	movs	r1, #44	; 0x2c
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	4413      	add	r3, r2
 8005e52:	333d      	adds	r3, #61	; 0x3d
 8005e54:	7f3a      	ldrb	r2, [r7, #28]
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e008      	b.n	8005e6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	212c      	movs	r1, #44	; 0x2c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	3342      	adds	r3, #66	; 0x42
 8005e68:	2202      	movs	r2, #2
 8005e6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005e6c:	787b      	ldrb	r3, [r7, #1]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	f200 80c6 	bhi.w	8006000 <HAL_HCD_HC_SubmitRequest+0x210>
 8005e74:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005fed 	.word	0x08005fed
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005f6f 	.word	0x08005f6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005e8c:	7c3b      	ldrb	r3, [r7, #16]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	f040 80b8 	bne.w	8006004 <HAL_HCD_HC_SubmitRequest+0x214>
 8005e94:	78bb      	ldrb	r3, [r7, #2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 80b4 	bne.w	8006004 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005e9c:	8b3b      	ldrh	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	212c      	movs	r1, #44	; 0x2c
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	3355      	adds	r3, #85	; 0x55
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	212c      	movs	r1, #44	; 0x2c
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3355      	adds	r3, #85	; 0x55
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	212c      	movs	r1, #44	; 0x2c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3342      	adds	r3, #66	; 0x42
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005eda:	e093      	b.n	8006004 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	212c      	movs	r1, #44	; 0x2c
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3342      	adds	r3, #66	; 0x42
 8005eea:	2202      	movs	r2, #2
 8005eec:	701a      	strb	r2, [r3, #0]
      break;
 8005eee:	e089      	b.n	8006004 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005ef0:	78bb      	ldrb	r3, [r7, #2]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11d      	bne.n	8005f32 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	212c      	movs	r1, #44	; 0x2c
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	3355      	adds	r3, #85	; 0x55
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	212c      	movs	r1, #44	; 0x2c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	3342      	adds	r3, #66	; 0x42
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005f1c:	e073      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	212c      	movs	r1, #44	; 0x2c
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	3342      	adds	r3, #66	; 0x42
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	701a      	strb	r2, [r3, #0]
      break;
 8005f30:	e069      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	212c      	movs	r1, #44	; 0x2c
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3354      	adds	r3, #84	; 0x54
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	212c      	movs	r1, #44	; 0x2c
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	3342      	adds	r3, #66	; 0x42
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
      break;
 8005f58:	e055      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	212c      	movs	r1, #44	; 0x2c
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	3342      	adds	r3, #66	; 0x42
 8005f68:	2202      	movs	r2, #2
 8005f6a:	701a      	strb	r2, [r3, #0]
      break;
 8005f6c:	e04b      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005f6e:	78bb      	ldrb	r3, [r7, #2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11d      	bne.n	8005fb0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	3355      	adds	r3, #85	; 0x55
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3342      	adds	r3, #66	; 0x42
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f9a:	e034      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	212c      	movs	r1, #44	; 0x2c
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3342      	adds	r3, #66	; 0x42
 8005faa:	2202      	movs	r2, #2
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	e02a      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	212c      	movs	r1, #44	; 0x2c
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	3354      	adds	r3, #84	; 0x54
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	212c      	movs	r1, #44	; 0x2c
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	3342      	adds	r3, #66	; 0x42
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
      break;
 8005fd6:	e016      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	212c      	movs	r1, #44	; 0x2c
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3342      	adds	r3, #66	; 0x42
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	701a      	strb	r2, [r3, #0]
      break;
 8005fea:	e00c      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	212c      	movs	r1, #44	; 0x2c
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3342      	adds	r3, #66	; 0x42
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006000:	bf00      	nop
 8006002:	e000      	b.n	8006006 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006004:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	212c      	movs	r1, #44	; 0x2c
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	3344      	adds	r3, #68	; 0x44
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	8b3a      	ldrh	r2, [r7, #24]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	202c      	movs	r0, #44	; 0x2c
 8006020:	fb00 f303 	mul.w	r3, r0, r3
 8006024:	440b      	add	r3, r1
 8006026:	334c      	adds	r3, #76	; 0x4c
 8006028:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	212c      	movs	r1, #44	; 0x2c
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	3360      	adds	r3, #96	; 0x60
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	212c      	movs	r1, #44	; 0x2c
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	3350      	adds	r3, #80	; 0x50
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	212c      	movs	r1, #44	; 0x2c
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	3339      	adds	r3, #57	; 0x39
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	212c      	movs	r1, #44	; 0x2c
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	4413      	add	r3, r2
 800606c:	3361      	adds	r3, #97	; 0x61
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	222c      	movs	r2, #44	; 0x2c
 800607a:	fb02 f303 	mul.w	r3, r2, r3
 800607e:	3338      	adds	r3, #56	; 0x38
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	18d1      	adds	r1, r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	f006 fc90 	bl	800c9b0 <USB_HC_StartXfer>
 8006090:	4603      	mov	r3, r0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop

0800609c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f006 f99d 	bl	800c3f2 <USB_GetMode>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 80f6 	bne.w	80062ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f006 f981 	bl	800c3cc <USB_ReadInterrupts>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80ec 	beq.w	80062aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f006 f978 	bl	800c3cc <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e6:	d104      	bne.n	80060f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80060f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f006 f968 	bl	800c3cc <USB_ReadInterrupts>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006106:	d104      	bne.n	8006112 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006110:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f006 f958 	bl	800c3cc <USB_ReadInterrupts>
 800611c:	4603      	mov	r3, r0
 800611e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006126:	d104      	bne.n	8006132 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006130:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f006 f948 	bl	800c3cc <USB_ReadInterrupts>
 800613c:	4603      	mov	r3, r0
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d103      	bne.n	800614e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f006 f93a 	bl	800c3cc <USB_ReadInterrupts>
 8006158:	4603      	mov	r3, r0
 800615a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800615e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006162:	d11c      	bne.n	800619e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800616c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800617e:	2110      	movs	r1, #16
 8006180:	6938      	ldr	r0, [r7, #16]
 8006182:	f006 f829 	bl	800c1d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006186:	6938      	ldr	r0, [r7, #16]
 8006188:	f006 f85a 	bl	800c240 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f006 fa24 	bl	800c5e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fc f801 	bl	80021a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f006 f912 	bl	800c3cc <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b2:	d102      	bne.n	80061ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 f89e 	bl	80072f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f006 f904 	bl	800c3cc <USB_ReadInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d106      	bne.n	80061dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb ffca 	bl	8002168 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2208      	movs	r2, #8
 80061da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f006 f8f3 	bl	800c3cc <USB_ReadInterrupts>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d101      	bne.n	80061f4 <HAL_HCD_IRQHandler+0x158>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_HCD_IRQHandler+0x15a>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d012      	beq.n	8006220 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0210 	bic.w	r2, r2, #16
 8006208:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 ffa1 	bl	8007152 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0210 	orr.w	r2, r2, #16
 800621e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f006 f8d1 	bl	800c3cc <USB_ReadInterrupts>
 800622a:	4603      	mov	r3, r0
 800622c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006234:	d13a      	bne.n	80062ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f006 fcfa 	bl	800cc34 <USB_HC_ReadInterrupt>
 8006240:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e025      	b.n	8006294 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d018      	beq.n	800628e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006272:	d106      	bne.n	8006282 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8ab 	bl	80063d6 <HCD_HC_IN_IRQHandler>
 8006280:	e005      	b.n	800628e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fbf9 	bl	8006a80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	3301      	adds	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3d4      	bcc.n	8006248 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062a6:	615a      	str	r2, [r3, #20]
 80062a8:	e000      	b.n	80062ac <HAL_HCD_IRQHandler+0x210>
      return;
 80062aa:	bf00      	nop
    }
  }
}
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_HCD_Start+0x16>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e013      	b.n	80062f0 <HAL_HCD_Start+0x3e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	4618      	mov	r0, r3
 80062d8:	f006 f9e6 	bl	800c6a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f005 ff0a 	bl	800c0fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_HCD_Stop+0x16>
 800630a:	2302      	movs	r3, #2
 800630c:	e00d      	b.n	800632a <HAL_HCD_Stop+0x32>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f006 fdd4 	bl	800cec8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f006 f988 	bl	800c654 <USB_ResetPort>
 8006344:	4603      	mov	r3, r0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	212c      	movs	r1, #44	; 0x2c
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	3360      	adds	r3, #96	; 0x60
 8006368:	781b      	ldrb	r3, [r3, #0]
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	3350      	adds	r3, #80	; 0x50
 8006390:	681b      	ldr	r3, [r3, #0]
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f006 f9cc 	bl	800c748 <USB_GetCurrentFrame>
 80063b0:	4603      	mov	r3, r0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f006 f9a7 	bl	800c71a <USB_GetHostSpeed>
 80063cc:	4603      	mov	r3, r0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b04      	cmp	r3, #4
 8006404:	d11a      	bne.n	800643c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	461a      	mov	r2, r3
 8006414:	2304      	movs	r3, #4
 8006416:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	212c      	movs	r1, #44	; 0x2c
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	3361      	adds	r3, #97	; 0x61
 8006426:	2206      	movs	r2, #6
 8006428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f006 fc0e 	bl	800cc56 <USB_HC_Halt>
 800643a:	e0af      	b.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d11b      	bne.n	800648c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	461a      	mov	r2, r3
 8006462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006466:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	3361      	adds	r3, #97	; 0x61
 8006476:	2207      	movs	r2, #7
 8006478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f006 fbe6 	bl	800cc56 <USB_HC_Halt>
 800648a:	e087      	b.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d109      	bne.n	80064b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	461a      	mov	r2, r3
 80064b0:	2320      	movs	r3, #32
 80064b2:	6093      	str	r3, [r2, #8]
 80064b4:	e072      	b.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d11a      	bne.n	8006502 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d8:	461a      	mov	r2, r3
 80064da:	2308      	movs	r3, #8
 80064dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	212c      	movs	r1, #44	; 0x2c
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	3361      	adds	r3, #97	; 0x61
 80064ec:	2205      	movs	r2, #5
 80064ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f006 fbab 	bl	800cc56 <USB_HC_Halt>
 8006500:	e04c      	b.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d11b      	bne.n	8006552 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	461a      	mov	r2, r3
 8006528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800652c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	212c      	movs	r1, #44	; 0x2c
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	3361      	adds	r3, #97	; 0x61
 800653c:	2208      	movs	r2, #8
 800653e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f006 fb83 	bl	800cc56 <USB_HC_Halt>
 8006550:	e024      	b.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4413      	add	r3, r2
 800655a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d119      	bne.n	800659c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	461a      	mov	r2, r3
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	212c      	movs	r1, #44	; 0x2c
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	3361      	adds	r3, #97	; 0x61
 8006588:	2206      	movs	r2, #6
 800658a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f006 fb5d 	bl	800cc56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b2:	d112      	bne.n	80065da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	4611      	mov	r1, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f006 fb49 	bl	800cc56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	461a      	mov	r2, r3
 80065d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80065d8:	e24e      	b.n	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	f040 80df 	bne.w	80067b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d019      	beq.n	800662e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	212c      	movs	r1, #44	; 0x2c
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	3348      	adds	r3, #72	; 0x48
 8006608:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	440b      	add	r3, r1
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	202c      	movs	r0, #44	; 0x2c
 8006624:	fb00 f303 	mul.w	r3, r0, r3
 8006628:	440b      	add	r3, r1
 800662a:	3350      	adds	r3, #80	; 0x50
 800662c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	212c      	movs	r1, #44	; 0x2c
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	4413      	add	r3, r2
 800663a:	3361      	adds	r3, #97	; 0x61
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	212c      	movs	r1, #44	; 0x2c
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	335c      	adds	r3, #92	; 0x5c
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	461a      	mov	r2, r3
 8006660:	2301      	movs	r3, #1
 8006662:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	212c      	movs	r1, #44	; 0x2c
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	333f      	adds	r3, #63	; 0x3f
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	212c      	movs	r1, #44	; 0x2c
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	4413      	add	r3, r2
 8006684:	333f      	adds	r3, #63	; 0x3f
 8006686:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006688:	2b02      	cmp	r3, #2
 800668a:	d111      	bne.n	80066b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f006 fadd 	bl	800cc56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	461a      	mov	r2, r3
 80066aa:	2310      	movs	r3, #16
 80066ac:	6093      	str	r3, [r2, #8]
 80066ae:	e03a      	b.n	8006726 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	212c      	movs	r1, #44	; 0x2c
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	4413      	add	r3, r2
 80066bc:	333f      	adds	r3, #63	; 0x3f
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d009      	beq.n	80066d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	212c      	movs	r1, #44	; 0x2c
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	333f      	adds	r3, #63	; 0x3f
 80066d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d126      	bne.n	8006726 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	212c      	movs	r1, #44	; 0x2c
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	4413      	add	r3, r2
 8006704:	3360      	adds	r3, #96	; 0x60
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	b2d9      	uxtb	r1, r3
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	202c      	movs	r0, #44	; 0x2c
 8006714:	fb00 f303 	mul.w	r3, r0, r3
 8006718:	4413      	add	r3, r2
 800671a:	3360      	adds	r3, #96	; 0x60
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fb fd4b 	bl	80021bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d12b      	bne.n	8006786 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	212c      	movs	r1, #44	; 0x2c
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	4413      	add	r3, r2
 800673a:	3348      	adds	r3, #72	; 0x48
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	202c      	movs	r0, #44	; 0x2c
 8006744:	fb00 f202 	mul.w	r2, r0, r2
 8006748:	440a      	add	r2, r1
 800674a:	3240      	adds	r2, #64	; 0x40
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 818e 	beq.w	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	212c      	movs	r1, #44	; 0x2c
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	3354      	adds	r3, #84	; 0x54
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f083 0301 	eor.w	r3, r3, #1
 8006770:	b2d8      	uxtb	r0, r3
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	212c      	movs	r1, #44	; 0x2c
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	3354      	adds	r3, #84	; 0x54
 8006780:	4602      	mov	r2, r0
 8006782:	701a      	strb	r2, [r3, #0]
}
 8006784:	e178      	b.n	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	212c      	movs	r1, #44	; 0x2c
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	4413      	add	r3, r2
 8006792:	3354      	adds	r3, #84	; 0x54
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f083 0301 	eor.w	r3, r3, #1
 800679a:	b2d8      	uxtb	r0, r3
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	212c      	movs	r1, #44	; 0x2c
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	3354      	adds	r3, #84	; 0x54
 80067aa:	4602      	mov	r2, r0
 80067ac:	701a      	strb	r2, [r3, #0]
}
 80067ae:	e163      	b.n	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	f040 80f6 	bne.w	80069b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3361      	adds	r3, #97	; 0x61
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d109      	bne.n	80067f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	212c      	movs	r1, #44	; 0x2c
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	3360      	adds	r3, #96	; 0x60
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e0c9      	b.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	212c      	movs	r1, #44	; 0x2c
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	3361      	adds	r3, #97	; 0x61
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b05      	cmp	r3, #5
 8006802:	d109      	bne.n	8006818 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	212c      	movs	r1, #44	; 0x2c
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	3360      	adds	r3, #96	; 0x60
 8006812:	2205      	movs	r2, #5
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e0b5      	b.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	212c      	movs	r1, #44	; 0x2c
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	3361      	adds	r3, #97	; 0x61
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b06      	cmp	r3, #6
 800682a:	d009      	beq.n	8006840 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	212c      	movs	r1, #44	; 0x2c
 8006832:	fb01 f303 	mul.w	r3, r1, r3
 8006836:	4413      	add	r3, r2
 8006838:	3361      	adds	r3, #97	; 0x61
 800683a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800683c:	2b08      	cmp	r3, #8
 800683e:	d150      	bne.n	80068e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	212c      	movs	r1, #44	; 0x2c
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	4413      	add	r3, r2
 800684c:	335c      	adds	r3, #92	; 0x5c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	202c      	movs	r0, #44	; 0x2c
 8006858:	fb00 f303 	mul.w	r3, r0, r3
 800685c:	440b      	add	r3, r1
 800685e:	335c      	adds	r3, #92	; 0x5c
 8006860:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	212c      	movs	r1, #44	; 0x2c
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	335c      	adds	r3, #92	; 0x5c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d912      	bls.n	800689c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	212c      	movs	r1, #44	; 0x2c
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	4413      	add	r3, r2
 8006882:	335c      	adds	r3, #92	; 0x5c
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	212c      	movs	r1, #44	; 0x2c
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	3360      	adds	r3, #96	; 0x60
 8006896:	2204      	movs	r2, #4
 8006898:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800689a:	e073      	b.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	212c      	movs	r1, #44	; 0x2c
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	3360      	adds	r3, #96	; 0x60
 80068aa:	2202      	movs	r2, #2
 80068ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80068e0:	e050      	b.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	212c      	movs	r1, #44	; 0x2c
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	3361      	adds	r3, #97	; 0x61
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d122      	bne.n	800693c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	212c      	movs	r1, #44	; 0x2c
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	4413      	add	r3, r2
 8006902:	3360      	adds	r3, #96	; 0x60
 8006904:	2202      	movs	r2, #2
 8006906:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800691e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006926:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006934:	461a      	mov	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e023      	b.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	212c      	movs	r1, #44	; 0x2c
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	4413      	add	r3, r2
 8006948:	3361      	adds	r3, #97	; 0x61
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b07      	cmp	r3, #7
 800694e:	d119      	bne.n	8006984 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	212c      	movs	r1, #44	; 0x2c
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	4413      	add	r3, r2
 800695c:	335c      	adds	r3, #92	; 0x5c
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	202c      	movs	r0, #44	; 0x2c
 8006968:	fb00 f303 	mul.w	r3, r0, r3
 800696c:	440b      	add	r3, r1
 800696e:	335c      	adds	r3, #92	; 0x5c
 8006970:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	212c      	movs	r1, #44	; 0x2c
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	3360      	adds	r3, #96	; 0x60
 8006980:	2204      	movs	r2, #4
 8006982:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	461a      	mov	r2, r3
 8006992:	2302      	movs	r3, #2
 8006994:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	b2d9      	uxtb	r1, r3
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	202c      	movs	r0, #44	; 0x2c
 80069a0:	fb00 f303 	mul.w	r3, r0, r3
 80069a4:	4413      	add	r3, r2
 80069a6:	3360      	adds	r3, #96	; 0x60
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fb fc05 	bl	80021bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80069b2:	e061      	b.n	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d156      	bne.n	8006a78 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	212c      	movs	r1, #44	; 0x2c
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	333f      	adds	r3, #63	; 0x3f
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d111      	bne.n	8006a02 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	212c      	movs	r1, #44	; 0x2c
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	335c      	adds	r3, #92	; 0x5c
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	4611      	mov	r1, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f006 f92b 	bl	800cc56 <USB_HC_Halt>
 8006a00:	e031      	b.n	8006a66 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	212c      	movs	r1, #44	; 0x2c
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	333f      	adds	r3, #63	; 0x3f
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	212c      	movs	r1, #44	; 0x2c
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	333f      	adds	r3, #63	; 0x3f
 8006a24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d11d      	bne.n	8006a66 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	212c      	movs	r1, #44	; 0x2c
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	335c      	adds	r3, #92	; 0x5c
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d110      	bne.n	8006a66 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	212c      	movs	r1, #44	; 0x2c
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	3361      	adds	r3, #97	; 0x61
 8006a52:	2203      	movs	r2, #3
 8006a54:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f006 f8f8 	bl	800cc56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	461a      	mov	r2, r3
 8006a74:	2310      	movs	r3, #16
 8006a76:	6093      	str	r3, [r2, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d11a      	bne.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	461a      	mov	r2, r3
 8006abe:	2304      	movs	r3, #4
 8006ac0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	212c      	movs	r1, #44	; 0x2c
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3361      	adds	r3, #97	; 0x61
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f006 f8b9 	bl	800cc56 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006ae4:	e331      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d12e      	bne.n	8006b5a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	461a      	mov	r2, r3
 8006b0a:	2320      	movs	r3, #32
 8006b0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	212c      	movs	r1, #44	; 0x2c
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	333d      	adds	r3, #61	; 0x3d
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f040 8313 	bne.w	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	212c      	movs	r1, #44	; 0x2c
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	333d      	adds	r3, #61	; 0x3d
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	212c      	movs	r1, #44	; 0x2c
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	3360      	adds	r3, #96	; 0x60
 8006b44:	2202      	movs	r2, #2
 8006b46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f006 f87f 	bl	800cc56 <USB_HC_Halt>
}
 8006b58:	e2f7      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d112      	bne.n	8006b98 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f006 f860 	bl	800cc56 <USB_HC_Halt>
}
 8006b96:	e2d8      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d140      	bne.n	8006c30 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	212c      	movs	r1, #44	; 0x2c
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	4413      	add	r3, r2
 8006bba:	335c      	adds	r3, #92	; 0x5c
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d111      	bne.n	8006bfa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	212c      	movs	r1, #44	; 0x2c
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	333d      	adds	r3, #61	; 0x3d
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	461a      	mov	r2, r3
 8006c08:	2301      	movs	r3, #1
 8006c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	212c      	movs	r1, #44	; 0x2c
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	3361      	adds	r3, #97	; 0x61
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f006 f814 	bl	800cc56 <USB_HC_Halt>
}
 8006c2e:	e28c      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d12c      	bne.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	212c      	movs	r1, #44	; 0x2c
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	4413      	add	r3, r2
 8006c52:	3361      	adds	r3, #97	; 0x61
 8006c54:	2204      	movs	r2, #4
 8006c56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	212c      	movs	r1, #44	; 0x2c
 8006c5e:	fb01 f303 	mul.w	r3, r1, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	333d      	adds	r3, #61	; 0x3d
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	212c      	movs	r1, #44	; 0x2c
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	335c      	adds	r3, #92	; 0x5c
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f005 ffe5 	bl	800cc56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	6093      	str	r3, [r2, #8]
}
 8006c9e:	e254      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d11a      	bne.n	8006cec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	212c      	movs	r1, #44	; 0x2c
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3361      	adds	r3, #97	; 0x61
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f005 ffb6 	bl	800cc56 <USB_HC_Halt>
}
 8006cea:	e22e      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d140      	bne.n	8006d84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	212c      	movs	r1, #44	; 0x2c
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	335c      	adds	r3, #92	; 0x5c
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	212c      	movs	r1, #44	; 0x2c
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	3361      	adds	r3, #97	; 0x61
 8006d22:	2203      	movs	r2, #3
 8006d24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	333d      	adds	r3, #61	; 0x3d
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d112      	bne.n	8006d60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	212c      	movs	r1, #44	; 0x2c
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	333c      	adds	r3, #60	; 0x3c
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	212c      	movs	r1, #44	; 0x2c
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	333d      	adds	r3, #61	; 0x3d
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f005 ff73 	bl	800cc56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	2310      	movs	r3, #16
 8006d80:	6093      	str	r3, [r2, #8]
}
 8006d82:	e1e2      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d164      	bne.n	8006e64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d111      	bne.n	8006dc6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	212c      	movs	r1, #44	; 0x2c
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	3361      	adds	r3, #97	; 0x61
 8006db0:	2206      	movs	r2, #6
 8006db2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f005 ff49 	bl	800cc56 <USB_HC_Halt>
 8006dc4:	e044      	b.n	8006e50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	212c      	movs	r1, #44	; 0x2c
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	335c      	adds	r3, #92	; 0x5c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	202c      	movs	r0, #44	; 0x2c
 8006dde:	fb00 f303 	mul.w	r3, r0, r3
 8006de2:	440b      	add	r3, r1
 8006de4:	335c      	adds	r3, #92	; 0x5c
 8006de6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	212c      	movs	r1, #44	; 0x2c
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	4413      	add	r3, r2
 8006df4:	335c      	adds	r3, #92	; 0x5c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d920      	bls.n	8006e3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	212c      	movs	r1, #44	; 0x2c
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	335c      	adds	r3, #92	; 0x5c
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	212c      	movs	r1, #44	; 0x2c
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	3360      	adds	r3, #96	; 0x60
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	b2d9      	uxtb	r1, r3
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	202c      	movs	r0, #44	; 0x2c
 8006e2a:	fb00 f303 	mul.w	r3, r0, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	3360      	adds	r3, #96	; 0x60
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb f9c0 	bl	80021bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e3c:	e008      	b.n	8006e50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	212c      	movs	r1, #44	; 0x2c
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	3360      	adds	r3, #96	; 0x60
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	6093      	str	r3, [r2, #8]
}
 8006e62:	e172      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7a:	d11b      	bne.n	8006eb4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	212c      	movs	r1, #44	; 0x2c
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	3361      	adds	r3, #97	; 0x61
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f005 fedc 	bl	800cc56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb0:	6093      	str	r3, [r2, #8]
}
 8006eb2:	e14a      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	f040 813f 	bne.w	800714a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	212c      	movs	r1, #44	; 0x2c
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3361      	adds	r3, #97	; 0x61
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d17d      	bne.n	8006fdc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	212c      	movs	r1, #44	; 0x2c
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	3360      	adds	r3, #96	; 0x60
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	212c      	movs	r1, #44	; 0x2c
 8006ef8:	fb01 f303 	mul.w	r3, r1, r3
 8006efc:	4413      	add	r3, r2
 8006efe:	333f      	adds	r3, #63	; 0x3f
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d00a      	beq.n	8006f1c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	212c      	movs	r1, #44	; 0x2c
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	333f      	adds	r3, #63	; 0x3f
 8006f14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	f040 8100 	bne.w	800711c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d113      	bne.n	8006f4c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	212c      	movs	r1, #44	; 0x2c
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	3355      	adds	r3, #85	; 0x55
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f083 0301 	eor.w	r3, r3, #1
 8006f38:	b2d8      	uxtb	r0, r3
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	212c      	movs	r1, #44	; 0x2c
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	3355      	adds	r3, #85	; 0x55
 8006f48:	4602      	mov	r2, r0
 8006f4a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 80e3 	bne.w	800711c <HCD_HC_OUT_IRQHandler+0x69c>
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	212c      	movs	r1, #44	; 0x2c
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	334c      	adds	r3, #76	; 0x4c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80d8 	beq.w	800711c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	212c      	movs	r1, #44	; 0x2c
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	334c      	adds	r3, #76	; 0x4c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	202c      	movs	r0, #44	; 0x2c
 8006f82:	fb00 f202 	mul.w	r2, r0, r2
 8006f86:	440a      	add	r2, r1
 8006f88:	3240      	adds	r2, #64	; 0x40
 8006f8a:	8812      	ldrh	r2, [r2, #0]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	202c      	movs	r0, #44	; 0x2c
 8006f96:	fb00 f202 	mul.w	r2, r0, r2
 8006f9a:	440a      	add	r2, r1
 8006f9c:	3240      	adds	r2, #64	; 0x40
 8006f9e:	8812      	ldrh	r2, [r2, #0]
 8006fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80b5 	beq.w	800711c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	212c      	movs	r1, #44	; 0x2c
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3355      	adds	r3, #85	; 0x55
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f083 0301 	eor.w	r3, r3, #1
 8006fc6:	b2d8      	uxtb	r0, r3
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	212c      	movs	r1, #44	; 0x2c
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3355      	adds	r3, #85	; 0x55
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e09f      	b.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	212c      	movs	r1, #44	; 0x2c
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3361      	adds	r3, #97	; 0x61
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d109      	bne.n	8007004 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	212c      	movs	r1, #44	; 0x2c
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3360      	adds	r3, #96	; 0x60
 8006ffe:	2202      	movs	r2, #2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e08b      	b.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	212c      	movs	r1, #44	; 0x2c
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	3361      	adds	r3, #97	; 0x61
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d109      	bne.n	800702c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	212c      	movs	r1, #44	; 0x2c
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	3360      	adds	r3, #96	; 0x60
 8007026:	2202      	movs	r2, #2
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e077      	b.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	212c      	movs	r1, #44	; 0x2c
 8007032:	fb01 f303 	mul.w	r3, r1, r3
 8007036:	4413      	add	r3, r2
 8007038:	3361      	adds	r3, #97	; 0x61
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b05      	cmp	r3, #5
 800703e:	d109      	bne.n	8007054 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	212c      	movs	r1, #44	; 0x2c
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	4413      	add	r3, r2
 800704c:	3360      	adds	r3, #96	; 0x60
 800704e:	2205      	movs	r2, #5
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e063      	b.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	212c      	movs	r1, #44	; 0x2c
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	3361      	adds	r3, #97	; 0x61
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b06      	cmp	r3, #6
 8007066:	d009      	beq.n	800707c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	212c      	movs	r1, #44	; 0x2c
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	4413      	add	r3, r2
 8007074:	3361      	adds	r3, #97	; 0x61
 8007076:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007078:	2b08      	cmp	r3, #8
 800707a:	d14f      	bne.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	212c      	movs	r1, #44	; 0x2c
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	335c      	adds	r3, #92	; 0x5c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	202c      	movs	r0, #44	; 0x2c
 8007094:	fb00 f303 	mul.w	r3, r0, r3
 8007098:	440b      	add	r3, r1
 800709a:	335c      	adds	r3, #92	; 0x5c
 800709c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	212c      	movs	r1, #44	; 0x2c
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	4413      	add	r3, r2
 80070aa:	335c      	adds	r3, #92	; 0x5c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d912      	bls.n	80070d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	212c      	movs	r1, #44	; 0x2c
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	335c      	adds	r3, #92	; 0x5c
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	212c      	movs	r1, #44	; 0x2c
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3360      	adds	r3, #96	; 0x60
 80070d2:	2204      	movs	r2, #4
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e021      	b.n	800711c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	212c      	movs	r1, #44	; 0x2c
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	4413      	add	r3, r2
 80070e4:	3360      	adds	r3, #96	; 0x60
 80070e6:	2202      	movs	r2, #2
 80070e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007100:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007108:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4413      	add	r3, r2
 8007112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007116:	461a      	mov	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	461a      	mov	r2, r3
 800712a:	2302      	movs	r3, #2
 800712c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	b2d9      	uxtb	r1, r3
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	202c      	movs	r0, #44	; 0x2c
 8007138:	fb00 f303 	mul.w	r3, r0, r3
 800713c:	4413      	add	r3, r2
 800713e:	3360      	adds	r3, #96	; 0x60
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fb f839 	bl	80021bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800714a:	bf00      	nop
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b08a      	sub	sp, #40	; 0x28
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	0c5b      	lsrs	r3, r3, #17
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007186:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d004      	beq.n	8007198 <HCD_RXQLVL_IRQHandler+0x46>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b05      	cmp	r3, #5
 8007192:	f000 80a9 	beq.w	80072e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007196:	e0aa      	b.n	80072ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a6 	beq.w	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	212c      	movs	r1, #44	; 0x2c
 80071a6:	fb01 f303 	mul.w	r3, r1, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	3344      	adds	r3, #68	; 0x44
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 809b 	beq.w	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	212c      	movs	r1, #44	; 0x2c
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	3350      	adds	r3, #80	; 0x50
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	441a      	add	r2, r3
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	202c      	movs	r0, #44	; 0x2c
 80071d0:	fb00 f303 	mul.w	r3, r0, r3
 80071d4:	440b      	add	r3, r1
 80071d6:	334c      	adds	r3, #76	; 0x4c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d87a      	bhi.n	80072d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	212c      	movs	r1, #44	; 0x2c
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
 80071ec:	4413      	add	r3, r2
 80071ee:	3344      	adds	r3, #68	; 0x44
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	b292      	uxth	r2, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	f005 f890 	bl	800c31c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	212c      	movs	r1, #44	; 0x2c
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	4413      	add	r3, r2
 8007208:	3344      	adds	r3, #68	; 0x44
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	441a      	add	r2, r3
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	202c      	movs	r0, #44	; 0x2c
 8007216:	fb00 f303 	mul.w	r3, r0, r3
 800721a:	440b      	add	r3, r1
 800721c:	3344      	adds	r3, #68	; 0x44
 800721e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	212c      	movs	r1, #44	; 0x2c
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	3350      	adds	r3, #80	; 0x50
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	441a      	add	r2, r3
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	202c      	movs	r0, #44	; 0x2c
 800723a:	fb00 f303 	mul.w	r3, r0, r3
 800723e:	440b      	add	r3, r1
 8007240:	3350      	adds	r3, #80	; 0x50
 8007242:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	0cdb      	lsrs	r3, r3, #19
 8007254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007258:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	212c      	movs	r1, #44	; 0x2c
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	3340      	adds	r3, #64	; 0x40
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4293      	cmp	r3, r2
 8007270:	d13c      	bne.n	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d039      	beq.n	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	4413      	add	r3, r2
 8007280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800728e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007296:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	212c      	movs	r1, #44	; 0x2c
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	3354      	adds	r3, #84	; 0x54
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f083 0301 	eor.w	r3, r3, #1
 80072be:	b2d8      	uxtb	r0, r3
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	3354      	adds	r3, #84	; 0x54
 80072ce:	4602      	mov	r2, r0
 80072d0:	701a      	strb	r2, [r3, #0]
      break;
 80072d2:	e00b      	b.n	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	212c      	movs	r1, #44	; 0x2c
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	3360      	adds	r3, #96	; 0x60
 80072e2:	2204      	movs	r2, #4
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e001      	b.n	80072ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80072e8:	bf00      	nop
 80072ea:	e000      	b.n	80072ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80072ec:	bf00      	nop
  }
}
 80072ee:	bf00      	nop
 80072f0:	3728      	adds	r7, #40	; 0x28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007322:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d10b      	bne.n	8007346 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d102      	bne.n	800733e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fa ff23 	bl	8002184 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f043 0302 	orr.w	r3, r3, #2
 8007344:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d132      	bne.n	80073b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f043 0308 	orr.w	r3, r3, #8
 8007356:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b04      	cmp	r3, #4
 8007360:	d126      	bne.n	80073b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d113      	bne.n	8007392 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007374:	d106      	bne.n	8007384 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2102      	movs	r1, #2
 800737c:	4618      	mov	r0, r3
 800737e:	f005 f92f 	bl	800c5e0 <USB_InitFSLSPClkSel>
 8007382:	e011      	b.n	80073a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2101      	movs	r1, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f005 f928 	bl	800c5e0 <USB_InitFSLSPClkSel>
 8007390:	e00a      	b.n	80073a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d106      	bne.n	80073a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80073a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fa ff19 	bl	80021e0 <HAL_HCD_PortEnabled_Callback>
 80073ae:	e002      	b.n	80073b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fa ff23 	bl	80021fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d103      	bne.n	80073c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f043 0320 	orr.w	r3, r3, #32
 80073c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073ce:	461a      	mov	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e12b      	b.n	8007646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7f9 fd24 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2224      	movs	r2, #36	; 0x24
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0201 	bic.w	r2, r2, #1
 800741e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800742e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800743e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007440:	f000 ffd2 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 8007444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4a81      	ldr	r2, [pc, #516]	; (8007650 <HAL_I2C_Init+0x274>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d807      	bhi.n	8007460 <HAL_I2C_Init+0x84>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a80      	ldr	r2, [pc, #512]	; (8007654 <HAL_I2C_Init+0x278>)
 8007454:	4293      	cmp	r3, r2
 8007456:	bf94      	ite	ls
 8007458:	2301      	movls	r3, #1
 800745a:	2300      	movhi	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e006      	b.n	800746e <HAL_I2C_Init+0x92>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a7d      	ldr	r2, [pc, #500]	; (8007658 <HAL_I2C_Init+0x27c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	bf94      	ite	ls
 8007468:	2301      	movls	r3, #1
 800746a:	2300      	movhi	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e0e7      	b.n	8007646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4a78      	ldr	r2, [pc, #480]	; (800765c <HAL_I2C_Init+0x280>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	0c9b      	lsrs	r3, r3, #18
 8007480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4a6a      	ldr	r2, [pc, #424]	; (8007650 <HAL_I2C_Init+0x274>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d802      	bhi.n	80074b0 <HAL_I2C_Init+0xd4>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3301      	adds	r3, #1
 80074ae:	e009      	b.n	80074c4 <HAL_I2C_Init+0xe8>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
 80074ba:	4a69      	ldr	r2, [pc, #420]	; (8007660 <HAL_I2C_Init+0x284>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	099b      	lsrs	r3, r3, #6
 80074c2:	3301      	adds	r3, #1
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	430b      	orrs	r3, r1
 80074ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	495c      	ldr	r1, [pc, #368]	; (8007650 <HAL_I2C_Init+0x274>)
 80074e0:	428b      	cmp	r3, r1
 80074e2:	d819      	bhi.n	8007518 <HAL_I2C_Init+0x13c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	1e59      	subs	r1, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f2:	1c59      	adds	r1, r3, #1
 80074f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074f8:	400b      	ands	r3, r1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_I2C_Init+0x138>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1e59      	subs	r1, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	fbb1 f3f3 	udiv	r3, r1, r3
 800750c:	3301      	adds	r3, #1
 800750e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007512:	e051      	b.n	80075b8 <HAL_I2C_Init+0x1dc>
 8007514:	2304      	movs	r3, #4
 8007516:	e04f      	b.n	80075b8 <HAL_I2C_Init+0x1dc>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d111      	bne.n	8007544 <HAL_I2C_Init+0x168>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1e58      	subs	r0, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6859      	ldr	r1, [r3, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	440b      	add	r3, r1
 800752e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007532:	3301      	adds	r3, #1
 8007534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	e012      	b.n	800756a <HAL_I2C_Init+0x18e>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	1e58      	subs	r0, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	0099      	lsls	r1, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	fbb0 f3f3 	udiv	r3, r0, r3
 800755a:	3301      	adds	r3, #1
 800755c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007560:	2b00      	cmp	r3, #0
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_I2C_Init+0x196>
 800756e:	2301      	movs	r3, #1
 8007570:	e022      	b.n	80075b8 <HAL_I2C_Init+0x1dc>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10e      	bne.n	8007598 <HAL_I2C_Init+0x1bc>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1e58      	subs	r0, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6859      	ldr	r1, [r3, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	440b      	add	r3, r1
 8007588:	fbb0 f3f3 	udiv	r3, r0, r3
 800758c:	3301      	adds	r3, #1
 800758e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	e00f      	b.n	80075b8 <HAL_I2C_Init+0x1dc>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	1e58      	subs	r0, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6859      	ldr	r1, [r3, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	0099      	lsls	r1, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ae:	3301      	adds	r3, #1
 80075b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	6809      	ldr	r1, [r1, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6911      	ldr	r1, [r2, #16]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68d2      	ldr	r2, [r2, #12]
 80075f2:	4311      	orrs	r1, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695a      	ldr	r2, [r3, #20]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	000186a0 	.word	0x000186a0
 8007654:	001e847f 	.word	0x001e847f
 8007658:	003d08ff 	.word	0x003d08ff
 800765c:	431bde83 	.word	0x431bde83
 8007660:	10624dd3 	.word	0x10624dd3

08007664 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0bf      	b.n	80077f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7f9 fcdc 	bl	8001048 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80076a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6999      	ldr	r1, [r3, #24]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6899      	ldr	r1, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b4a      	ldr	r3, [pc, #296]	; (8007800 <HAL_LTDC_Init+0x19c>)
 80076d8:	400b      	ands	r3, r1
 80076da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6899      	ldr	r1, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68d9      	ldr	r1, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b3e      	ldr	r3, [pc, #248]	; (8007800 <HAL_LTDC_Init+0x19c>)
 8007706:	400b      	ands	r3, r1
 8007708:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68d9      	ldr	r1, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6919      	ldr	r1, [r3, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b33      	ldr	r3, [pc, #204]	; (8007800 <HAL_LTDC_Init+0x19c>)
 8007734:	400b      	ands	r3, r1
 8007736:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	041b      	lsls	r3, r3, #16
 800773e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6919      	ldr	r1, [r3, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6959      	ldr	r1, [r3, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b27      	ldr	r3, [pc, #156]	; (8007800 <HAL_LTDC_Init+0x19c>)
 8007762:	400b      	ands	r3, r1
 8007764:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6959      	ldr	r1, [r3, #20]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0206 	orr.w	r2, r2, #6
 80077d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	f000f800 	.word	0xf000f800

08007804 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d023      	beq.n	800786e <HAL_LTDC_IRQHandler+0x6a>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01e      	beq.n	800786e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0204 	bic.w	r2, r2, #4
 800783e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2204      	movs	r2, #4
 8007846:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2204      	movs	r2, #4
 800785c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f86f 	bl	800794c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d023      	beq.n	80078c0 <HAL_LTDC_IRQHandler+0xbc>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01e      	beq.n	80078c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0202 	bic.w	r2, r2, #2
 8007890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2202      	movs	r2, #2
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078a0:	f043 0202 	orr.w	r2, r3, #2
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2204      	movs	r2, #4
 80078ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f846 	bl	800794c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01b      	beq.n	8007902 <HAL_LTDC_IRQHandler+0xfe>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d016      	beq.n	8007902 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2201      	movs	r2, #1
 80078ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f82f 	bl	8007960 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01b      	beq.n	8007944 <HAL_LTDC_IRQHandler+0x140>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d016      	beq.n	8007944 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0208 	bic.w	r2, r2, #8
 8007924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2208      	movs	r2, #8
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f818 	bl	8007974 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007988:	b5b0      	push	{r4, r5, r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_LTDC_ConfigLayer+0x1a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e02c      	b.n	80079fc <HAL_LTDC_ConfigLayer+0x74>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2134      	movs	r1, #52	; 0x34
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	4413      	add	r3, r2
 80079be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4614      	mov	r4, r2
 80079c6:	461d      	mov	r5, r3
 80079c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f811 	bl	8007a04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2201      	movs	r2, #1
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bdb0      	pop	{r4, r5, r7, pc}

08007a04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b089      	sub	sp, #36	; 0x24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a20:	4413      	add	r3, r2
 8007a22:	041b      	lsls	r3, r3, #16
 8007a24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	01db      	lsls	r3, r3, #7
 8007a30:	4413      	add	r3, r2
 8007a32:	3384      	adds	r3, #132	; 0x84
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	01d2      	lsls	r2, r2, #7
 8007a40:	440a      	add	r2, r1
 8007a42:	3284      	adds	r2, #132	; 0x84
 8007a44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007a48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a5a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a5c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	01db      	lsls	r3, r3, #7
 8007a68:	440b      	add	r3, r1
 8007a6a:	3384      	adds	r3, #132	; 0x84
 8007a6c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a82:	4413      	add	r3, r2
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	01db      	lsls	r3, r3, #7
 8007a92:	4413      	add	r3, r2
 8007a94:	3384      	adds	r3, #132	; 0x84
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	01d2      	lsls	r2, r2, #7
 8007aa2:	440a      	add	r2, r1
 8007aa4:	3284      	adds	r2, #132	; 0x84
 8007aa6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007aaa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aba:	4413      	add	r3, r2
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	440b      	add	r3, r1
 8007aca:	3384      	adds	r3, #132	; 0x84
 8007acc:	4619      	mov	r1, r3
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	01db      	lsls	r3, r3, #7
 8007ade:	4413      	add	r3, r2
 8007ae0:	3384      	adds	r3, #132	; 0x84
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	01d2      	lsls	r2, r2, #7
 8007aee:	440a      	add	r2, r1
 8007af0:	3284      	adds	r2, #132	; 0x84
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	01db      	lsls	r3, r3, #7
 8007b02:	4413      	add	r3, r2
 8007b04:	3384      	adds	r3, #132	; 0x84
 8007b06:	461a      	mov	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	061b      	lsls	r3, r3, #24
 8007b28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	01db      	lsls	r3, r3, #7
 8007b34:	4413      	add	r3, r2
 8007b36:	3384      	adds	r3, #132	; 0x84
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	01db      	lsls	r3, r3, #7
 8007b44:	4413      	add	r3, r2
 8007b46:	3384      	adds	r3, #132	; 0x84
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b54:	461a      	mov	r2, r3
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	01db      	lsls	r3, r3, #7
 8007b68:	440b      	add	r3, r1
 8007b6a:	3384      	adds	r3, #132	; 0x84
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	01db      	lsls	r3, r3, #7
 8007b7e:	4413      	add	r3, r2
 8007b80:	3384      	adds	r3, #132	; 0x84
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	01d2      	lsls	r2, r2, #7
 8007b8e:	440a      	add	r2, r1
 8007b90:	3284      	adds	r2, #132	; 0x84
 8007b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	01db      	lsls	r3, r3, #7
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3384      	adds	r3, #132	; 0x84
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	01db      	lsls	r3, r3, #7
 8007bb8:	4413      	add	r3, r2
 8007bba:	3384      	adds	r3, #132	; 0x84
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	01d2      	lsls	r2, r2, #7
 8007bc8:	440a      	add	r2, r1
 8007bca:	3284      	adds	r2, #132	; 0x84
 8007bcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	69da      	ldr	r2, [r3, #28]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	6809      	ldr	r1, [r1, #0]
 8007be2:	4608      	mov	r0, r1
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	01c9      	lsls	r1, r1, #7
 8007be8:	4401      	add	r1, r0
 8007bea:	3184      	adds	r1, #132	; 0x84
 8007bec:	4313      	orrs	r3, r2
 8007bee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	01db      	lsls	r3, r3, #7
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3384      	adds	r3, #132	; 0x84
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	01db      	lsls	r3, r3, #7
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3384      	adds	r3, #132	; 0x84
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	01db      	lsls	r3, r3, #7
 8007c1e:	4413      	add	r3, r2
 8007c20:	3384      	adds	r3, #132	; 0x84
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007c32:	2304      	movs	r3, #4
 8007c34:	61fb      	str	r3, [r7, #28]
 8007c36:	e01b      	b.n	8007c70 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d102      	bne.n	8007c46 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007c40:	2303      	movs	r3, #3
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e014      	b.n	8007c70 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d00b      	beq.n	8007c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d007      	beq.n	8007c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d003      	beq.n	8007c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c62:	2b07      	cmp	r3, #7
 8007c64:	d102      	bne.n	8007c6c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007c66:	2302      	movs	r3, #2
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	e001      	b.n	8007c70 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	01db      	lsls	r3, r3, #7
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3384      	adds	r3, #132	; 0x84
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	4611      	mov	r1, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	01d2      	lsls	r2, r2, #7
 8007c8a:	440a      	add	r2, r1
 8007c8c:	3284      	adds	r2, #132	; 0x84
 8007c8e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007c92:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6859      	ldr	r1, [r3, #4]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	1acb      	subs	r3, r1, r3
 8007caa:	69f9      	ldr	r1, [r7, #28]
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	6809      	ldr	r1, [r1, #0]
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	01c9      	lsls	r1, r1, #7
 8007cbc:	4401      	add	r1, r0
 8007cbe:	3184      	adds	r1, #132	; 0x84
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	01db      	lsls	r3, r3, #7
 8007cce:	4413      	add	r3, r2
 8007cd0:	3384      	adds	r3, #132	; 0x84
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	01d2      	lsls	r2, r2, #7
 8007cde:	440a      	add	r2, r1
 8007ce0:	3284      	adds	r2, #132	; 0x84
 8007ce2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ce6:	f023 0307 	bic.w	r3, r3, #7
 8007cea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	01db      	lsls	r3, r3, #7
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3384      	adds	r3, #132	; 0x84
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	01db      	lsls	r3, r3, #7
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3384      	adds	r3, #132	; 0x84
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	4611      	mov	r1, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	01d2      	lsls	r2, r2, #7
 8007d1c:	440a      	add	r2, r1
 8007d1e:	3284      	adds	r2, #132	; 0x84
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	6013      	str	r3, [r2, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3724      	adds	r7, #36	; 0x24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8007d44:	2200      	movs	r2, #0
 8007d46:	e001      	b.n	8007d4c <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8007d48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8007d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d5c:	e000      	b.n	8007d60 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8007d6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d70:	e000      	b.n	8007d74 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8007d72:	2200      	movs	r2, #0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	4413      	add	r3, r2
 8007d8c:	1e5a      	subs	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007da0:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8007da2:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007db6:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbc:	4413      	add	r3, r2
 8007dbe:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007dde:	2300      	movs	r3, #0
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dec:	6413      	str	r3, [r2, #64]	; 0x40
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_PWREx_EnableOverDrive+0x94>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e00:	f7fb fe6a 	bl	8003ad8 <HAL_GetTick>
 8007e04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e06:	e009      	b.n	8007e1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e08:	f7fb fe66 	bl	8003ad8 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e16:	d901      	bls.n	8007e1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e01f      	b.n	8007e5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e28:	d1ee      	bne.n	8007e08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e30:	f7fb fe52 	bl	8003ad8 <HAL_GetTick>
 8007e34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e36:	e009      	b.n	8007e4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e38:	f7fb fe4e 	bl	8003ad8 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e46:	d901      	bls.n	8007e4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e007      	b.n	8007e5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e58:	d1ee      	bne.n	8007e38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	40023800 	.word	0x40023800
 8007e68:	420e0040 	.word	0x420e0040
 8007e6c:	40007000 	.word	0x40007000
 8007e70:	420e0044 	.word	0x420e0044

08007e74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007e7c:	f7fb fe2c 	bl	8003ad8 <HAL_GetTick>
 8007e80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e069      	b.n	8007f60 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7f9 fa05 	bl	80012b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007ea6:	f241 3188 	movw	r1, #5000	; 0x1388
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f85e 	bl	8007f6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	021a      	lsls	r2, r3, #8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2120      	movs	r1, #32
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f856 	bl	8007f88 <QSPI_WaitFlagStateUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d137      	bne.n	8007f56 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ef0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6852      	ldr	r2, [r2, #4]
 8007ef8:	0611      	lsls	r1, r2, #24
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68d2      	ldr	r2, [r2, #12]
 8007efe:	4311      	orrs	r1, r2
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	69d2      	ldr	r2, [r2, #28]
 8007f04:	4311      	orrs	r1, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6a12      	ldr	r2, [r2, #32]
 8007f0a:	4311      	orrs	r1, r2
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	430b      	orrs	r3, r1
 8007f12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <HAL_QSPI_Init+0xf4>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6912      	ldr	r2, [r2, #16]
 8007f22:	0411      	lsls	r1, r2, #16
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6952      	ldr	r2, [r2, #20]
 8007f28:	4311      	orrs	r1, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6992      	ldr	r2, [r2, #24]
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	ffe0f8fe 	.word	0xffe0f8fe

08007f6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007f98:	e01a      	b.n	8007fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa0:	d016      	beq.n	8007fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa2:	f7fb fd99 	bl	8003ad8 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d302      	bcc.n	8007fb8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e00e      	b.n	8007fee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d1d6      	bne.n	8007f9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0cc      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800800c:	4b68      	ldr	r3, [pc, #416]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d90c      	bls.n	8008034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800801a:	4b65      	ldr	r3, [pc, #404]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008022:	4b63      	ldr	r3, [pc, #396]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e0b8      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d020      	beq.n	8008082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800804c:	4b59      	ldr	r3, [pc, #356]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	4a58      	ldr	r2, [pc, #352]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008064:	4b53      	ldr	r3, [pc, #332]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a52      	ldr	r2, [pc, #328]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800806a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800806e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008070:	4b50      	ldr	r3, [pc, #320]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	494d      	ldr	r1, [pc, #308]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d044      	beq.n	8008118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d107      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008096:	4b47      	ldr	r3, [pc, #284]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d119      	bne.n	80080d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07f      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d003      	beq.n	80080b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d107      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b6:	4b3f      	ldr	r3, [pc, #252]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e06f      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c6:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e067      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080d6:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f023 0203 	bic.w	r2, r3, #3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	4934      	ldr	r1, [pc, #208]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080e8:	f7fb fcf6 	bl	8003ad8 <HAL_GetTick>
 80080ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ee:	e00a      	b.n	8008106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080f0:	f7fb fcf2 	bl	8003ad8 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fe:	4293      	cmp	r3, r2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e04f      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008106:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 020c 	and.w	r2, r3, #12
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	429a      	cmp	r2, r3
 8008116:	d1eb      	bne.n	80080f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 030f 	and.w	r3, r3, #15
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d20c      	bcs.n	8008140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008126:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800812e:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d001      	beq.n	8008140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e032      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d008      	beq.n	800815e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4916      	ldr	r1, [pc, #88]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800815a:	4313      	orrs	r3, r2
 800815c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	490e      	ldr	r1, [pc, #56]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 800817a:	4313      	orrs	r3, r2
 800817c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800817e:	f000 f821 	bl	80081c4 <HAL_RCC_GetSysClockFreq>
 8008182:	4602      	mov	r2, r0
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	490a      	ldr	r1, [pc, #40]	; (80081b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008190:	5ccb      	ldrb	r3, [r1, r3]
 8008192:	fa22 f303 	lsr.w	r3, r2, r3
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <HAL_RCC_ClockConfig+0x1c4>)
 8008198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800819a:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <HAL_RCC_ClockConfig+0x1c8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f9 fa72 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023c00 	.word	0x40023c00
 80081b4:	40023800 	.word	0x40023800
 80081b8:	08014794 	.word	0x08014794
 80081bc:	20000020 	.word	0x20000020
 80081c0:	20000024 	.word	0x20000024

080081c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c8:	b094      	sub	sp, #80	; 0x50
 80081ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	647b      	str	r3, [r7, #68]	; 0x44
 80081d0:	2300      	movs	r3, #0
 80081d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081d4:	2300      	movs	r3, #0
 80081d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081dc:	4b79      	ldr	r3, [pc, #484]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 030c 	and.w	r3, r3, #12
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d00d      	beq.n	8008204 <HAL_RCC_GetSysClockFreq+0x40>
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	f200 80e1 	bhi.w	80083b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <HAL_RCC_GetSysClockFreq+0x34>
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d003      	beq.n	80081fe <HAL_RCC_GetSysClockFreq+0x3a>
 80081f6:	e0db      	b.n	80083b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081f8:	4b73      	ldr	r3, [pc, #460]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80081fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80081fc:	e0db      	b.n	80083b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081fe:	4b73      	ldr	r3, [pc, #460]	; (80083cc <HAL_RCC_GetSysClockFreq+0x208>)
 8008200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008202:	e0d8      	b.n	80083b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008204:	4b6f      	ldr	r3, [pc, #444]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800820c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800820e:	4b6d      	ldr	r3, [pc, #436]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d063      	beq.n	80082e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800821a:	4b6a      	ldr	r3, [pc, #424]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	099b      	lsrs	r3, r3, #6
 8008220:	2200      	movs	r2, #0
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
 8008224:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
 800822e:	2300      	movs	r3, #0
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
 8008232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008236:	4622      	mov	r2, r4
 8008238:	462b      	mov	r3, r5
 800823a:	f04f 0000 	mov.w	r0, #0
 800823e:	f04f 0100 	mov.w	r1, #0
 8008242:	0159      	lsls	r1, r3, #5
 8008244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008248:	0150      	lsls	r0, r2, #5
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4621      	mov	r1, r4
 8008250:	1a51      	subs	r1, r2, r1
 8008252:	6139      	str	r1, [r7, #16]
 8008254:	4629      	mov	r1, r5
 8008256:	eb63 0301 	sbc.w	r3, r3, r1
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008268:	4659      	mov	r1, fp
 800826a:	018b      	lsls	r3, r1, #6
 800826c:	4651      	mov	r1, sl
 800826e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008272:	4651      	mov	r1, sl
 8008274:	018a      	lsls	r2, r1, #6
 8008276:	4651      	mov	r1, sl
 8008278:	ebb2 0801 	subs.w	r8, r2, r1
 800827c:	4659      	mov	r1, fp
 800827e:	eb63 0901 	sbc.w	r9, r3, r1
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800828e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008296:	4690      	mov	r8, r2
 8008298:	4699      	mov	r9, r3
 800829a:	4623      	mov	r3, r4
 800829c:	eb18 0303 	adds.w	r3, r8, r3
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	462b      	mov	r3, r5
 80082a4:	eb49 0303 	adc.w	r3, r9, r3
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80082b6:	4629      	mov	r1, r5
 80082b8:	024b      	lsls	r3, r1, #9
 80082ba:	4621      	mov	r1, r4
 80082bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082c0:	4621      	mov	r1, r4
 80082c2:	024a      	lsls	r2, r1, #9
 80082c4:	4610      	mov	r0, r2
 80082c6:	4619      	mov	r1, r3
 80082c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ca:	2200      	movs	r2, #0
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082d4:	f7f7 ff94 	bl	8000200 <__aeabi_uldivmod>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4613      	mov	r3, r2
 80082de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e0:	e058      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082e2:	4b38      	ldr	r3, [pc, #224]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	2200      	movs	r2, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	4611      	mov	r1, r2
 80082ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082f2:	623b      	str	r3, [r7, #32]
 80082f4:	2300      	movs	r3, #0
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
 80082f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	f04f 0000 	mov.w	r0, #0
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	0159      	lsls	r1, r3, #5
 800830a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800830e:	0150      	lsls	r0, r2, #5
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4641      	mov	r1, r8
 8008316:	ebb2 0a01 	subs.w	sl, r2, r1
 800831a:	4649      	mov	r1, r9
 800831c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800832c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008334:	ebb2 040a 	subs.w	r4, r2, sl
 8008338:	eb63 050b 	sbc.w	r5, r3, fp
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	00eb      	lsls	r3, r5, #3
 8008346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800834a:	00e2      	lsls	r2, r4, #3
 800834c:	4614      	mov	r4, r2
 800834e:	461d      	mov	r5, r3
 8008350:	4643      	mov	r3, r8
 8008352:	18e3      	adds	r3, r4, r3
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	464b      	mov	r3, r9
 8008358:	eb45 0303 	adc.w	r3, r5, r3
 800835c:	607b      	str	r3, [r7, #4]
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	f04f 0300 	mov.w	r3, #0
 8008366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800836a:	4629      	mov	r1, r5
 800836c:	028b      	lsls	r3, r1, #10
 800836e:	4621      	mov	r1, r4
 8008370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008374:	4621      	mov	r1, r4
 8008376:	028a      	lsls	r2, r1, #10
 8008378:	4610      	mov	r0, r2
 800837a:	4619      	mov	r1, r3
 800837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837e:	2200      	movs	r2, #0
 8008380:	61bb      	str	r3, [r7, #24]
 8008382:	61fa      	str	r2, [r7, #28]
 8008384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008388:	f7f7 ff3a 	bl	8000200 <__aeabi_uldivmod>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4613      	mov	r3, r2
 8008392:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	0c1b      	lsrs	r3, r3, #16
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	3301      	adds	r3, #1
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80083a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083ae:	e002      	b.n	80083b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80083b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3750      	adds	r7, #80	; 0x50
 80083bc:	46bd      	mov	sp, r7
 80083be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083c2:	bf00      	nop
 80083c4:	40023800 	.word	0x40023800
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	007a1200 	.word	0x007a1200

080083d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000020 	.word	0x20000020

080083e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083ec:	f7ff fff0 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0a9b      	lsrs	r3, r3, #10
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4903      	ldr	r1, [pc, #12]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fe:	5ccb      	ldrb	r3, [r1, r3]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40023800 	.word	0x40023800
 800840c:	080147a4 	.word	0x080147a4

08008410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008414:	f7ff ffdc 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 8008418:	4602      	mov	r2, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	0b5b      	lsrs	r3, r3, #13
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4903      	ldr	r1, [pc, #12]	; (8008434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008426:	5ccb      	ldrb	r3, [r1, r3]
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40023800 	.word	0x40023800
 8008434:	080147a4 	.word	0x080147a4

08008438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220f      	movs	r2, #15
 8008446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0203 	and.w	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <HAL_RCC_GetClockConfig+0x60>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40023c00 	.word	0x40023c00

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084c4:	4b66      	ldr	r3, [pc, #408]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	4963      	ldr	r1, [pc, #396]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80084e6:	4b5e      	ldr	r3, [pc, #376]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	495a      	ldr	r1, [pc, #360]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800851c:	2b00      	cmp	r3, #0
 800851e:	d075      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008520:	4b50      	ldr	r3, [pc, #320]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008526:	f7fb fad7 	bl	8003ad8 <HAL_GetTick>
 800852a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800852c:	e008      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800852e:	f7fb fad3 	bl	8003ad8 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1dc      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008540:	4b47      	ldr	r3, [pc, #284]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f0      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d009      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	019a      	lsls	r2, r3, #6
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	071b      	lsls	r3, r3, #28
 8008564:	493e      	ldr	r1, [pc, #248]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01f      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008578:	4b39      	ldr	r3, [pc, #228]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800857a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857e:	0f1b      	lsrs	r3, r3, #28
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	019a      	lsls	r2, r3, #6
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	061b      	lsls	r3, r3, #24
 8008592:	431a      	orrs	r2, r3
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	071b      	lsls	r3, r3, #28
 8008598:	4931      	ldr	r1, [pc, #196]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085a0:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a6:	f023 021f 	bic.w	r2, r3, #31
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	492b      	ldr	r1, [pc, #172]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00d      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	019a      	lsls	r2, r3, #6
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	071b      	lsls	r3, r3, #28
 80085d8:	4921      	ldr	r1, [pc, #132]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80085e0:	4b20      	ldr	r3, [pc, #128]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085e6:	f7fb fa77 	bl	8003ad8 <HAL_GetTick>
 80085ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085ec:	e008      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085ee:	f7fb fa73 	bl	8003ad8 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e17c      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008600:	4b17      	ldr	r3, [pc, #92]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0f0      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d112      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10c      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80ce 	beq.w	80087ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863a:	f040 80c8 	bne.w	80087ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008644:	f7fb fa48 	bl	8003ad8 <HAL_GetTick>
 8008648:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800864a:	e00f      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800864c:	f7fb fa44 	bl	8003ad8 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d908      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e14d      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800865e:	bf00      	nop
 8008660:	40023800 	.word	0x40023800
 8008664:	42470068 	.word	0x42470068
 8008668:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800866c:	4ba5      	ldr	r3, [pc, #660]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008678:	d0e8      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d02e      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008686:	4b9f      	ldr	r3, [pc, #636]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	3301      	adds	r3, #1
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008698:	4b9a      	ldr	r3, [pc, #616]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869e:	0f1b      	lsrs	r3, r3, #28
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	019a      	lsls	r2, r3, #6
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	3b01      	subs	r3, #1
 80086b2:	041b      	lsls	r3, r3, #16
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	061b      	lsls	r3, r3, #24
 80086bc:	431a      	orrs	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	071b      	lsls	r3, r3, #28
 80086c2:	4990      	ldr	r1, [pc, #576]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80086ca:	4b8e      	ldr	r3, [pc, #568]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	3b01      	subs	r3, #1
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	4989      	ldr	r1, [pc, #548]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d02c      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80086f0:	4b84      	ldr	r3, [pc, #528]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	3301      	adds	r3, #1
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008702:	4b80      	ldr	r3, [pc, #512]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	0e1b      	lsrs	r3, r3, #24
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	019a      	lsls	r2, r3, #6
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	3b01      	subs	r3, #1
 800871c:	041b      	lsls	r3, r3, #16
 800871e:	431a      	orrs	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	061b      	lsls	r3, r3, #24
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	071b      	lsls	r3, r3, #28
 800872c:	4975      	ldr	r1, [pc, #468]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008734:	4b73      	ldr	r3, [pc, #460]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	4970      	ldr	r1, [pc, #448]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008744:	4313      	orrs	r3, r2
 8008746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d024      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800875a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800875e:	d11f      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008760:	4b68      	ldr	r3, [pc, #416]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008766:	0e1b      	lsrs	r3, r3, #24
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008774:	0f1b      	lsrs	r3, r3, #28
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	019a      	lsls	r2, r3, #6
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	085b      	lsrs	r3, r3, #1
 8008788:	3b01      	subs	r3, #1
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	431a      	orrs	r2, r3
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	061b      	lsls	r3, r3, #24
 8008792:	431a      	orrs	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	071b      	lsls	r3, r3, #28
 8008798:	495a      	ldr	r1, [pc, #360]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80087a0:	4b59      	ldr	r3, [pc, #356]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087a6:	f7fb f997 	bl	8003ad8 <HAL_GetTick>
 80087aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087ac:	e008      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80087ae:	f7fb f993 	bl	8003ad8 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e09c      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087c0:	4b50      	ldr	r3, [pc, #320]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d1ef      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8083 	beq.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80087dc:	2300      	movs	r3, #0
 80087de:	60bb      	str	r3, [r7, #8]
 80087e0:	4b48      	ldr	r3, [pc, #288]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	4a47      	ldr	r2, [pc, #284]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ea:	6413      	str	r3, [r2, #64]	; 0x40
 80087ec:	4b45      	ldr	r3, [pc, #276]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087f8:	4b44      	ldr	r3, [pc, #272]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a43      	ldr	r2, [pc, #268]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80087fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008802:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008804:	f7fb f968 	bl	8003ad8 <HAL_GetTick>
 8008808:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800880a:	e008      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800880c:	f7fb f964 	bl	8003ad8 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e06d      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800881e:	4b3b      	ldr	r3, [pc, #236]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800882a:	4b36      	ldr	r3, [pc, #216]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008832:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02f      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	429a      	cmp	r2, r3
 8008846:	d028      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008848:	4b2e      	ldr	r3, [pc, #184]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008850:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008852:	4b2f      	ldr	r3, [pc, #188]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008858:	4b2d      	ldr	r3, [pc, #180]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800885e:	4a29      	ldr	r2, [pc, #164]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008864:	4b27      	ldr	r3, [pc, #156]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d114      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008870:	f7fb f932 	bl	8003ad8 <HAL_GetTick>
 8008874:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008876:	e00a      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008878:	f7fb f92e 	bl	8003ad8 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	f241 3288 	movw	r2, #5000	; 0x1388
 8008886:	4293      	cmp	r3, r2
 8008888:	d901      	bls.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e035      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800888e:	4b1d      	ldr	r3, [pc, #116]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0ee      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088a6:	d10d      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80088a8:	4b16      	ldr	r3, [pc, #88]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088bc:	4911      	ldr	r1, [pc, #68]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	608b      	str	r3, [r1, #8]
 80088c2:	e005      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80088c4:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4a0e      	ldr	r2, [pc, #56]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80088ce:	6093      	str	r3, [r2, #8]
 80088d0:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088dc:	4909      	ldr	r1, [pc, #36]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80088f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40023800 	.word	0x40023800
 8008908:	42470070 	.word	0x42470070
 800890c:	40007000 	.word	0x40007000
 8008910:	42470e40 	.word	0x42470e40
 8008914:	424711e0 	.word	0x424711e0

08008918 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e273      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d075      	beq.n	8008a22 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008936:	4b88      	ldr	r3, [pc, #544]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 030c 	and.w	r3, r3, #12
 800893e:	2b04      	cmp	r3, #4
 8008940:	d00c      	beq.n	800895c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008942:	4b85      	ldr	r3, [pc, #532]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800894a:	2b08      	cmp	r3, #8
 800894c:	d112      	bne.n	8008974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800894e:	4b82      	ldr	r3, [pc, #520]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895a:	d10b      	bne.n	8008974 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800895c:	4b7e      	ldr	r3, [pc, #504]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05b      	beq.n	8008a20 <HAL_RCC_OscConfig+0x108>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d157      	bne.n	8008a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e24e      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897c:	d106      	bne.n	800898c <HAL_RCC_OscConfig+0x74>
 800897e:	4b76      	ldr	r3, [pc, #472]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a75      	ldr	r2, [pc, #468]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e01d      	b.n	80089c8 <HAL_RCC_OscConfig+0xb0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008994:	d10c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x98>
 8008996:	4b70      	ldr	r3, [pc, #448]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a6f      	ldr	r2, [pc, #444]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 800899c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4b6d      	ldr	r3, [pc, #436]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a6c      	ldr	r2, [pc, #432]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e00b      	b.n	80089c8 <HAL_RCC_OscConfig+0xb0>
 80089b0:	4b69      	ldr	r3, [pc, #420]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a68      	ldr	r2, [pc, #416]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	4b66      	ldr	r3, [pc, #408]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a65      	ldr	r2, [pc, #404]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d013      	beq.n	80089f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d0:	f7fb f882 	bl	8003ad8 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089d8:	f7fb f87e 	bl	8003ad8 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b64      	cmp	r3, #100	; 0x64
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e213      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ea:	4b5b      	ldr	r3, [pc, #364]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f0      	beq.n	80089d8 <HAL_RCC_OscConfig+0xc0>
 80089f6:	e014      	b.n	8008a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fb f86e 	bl	8003ad8 <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a00:	f7fb f86a 	bl	8003ad8 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	; 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e1ff      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a12:	4b51      	ldr	r3, [pc, #324]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0xe8>
 8008a1e:	e000      	b.n	8008a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d063      	beq.n	8008af6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a2e:	4b4a      	ldr	r3, [pc, #296]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a3a:	4b47      	ldr	r3, [pc, #284]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d11c      	bne.n	8008a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a46:	4b44      	ldr	r3, [pc, #272]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d116      	bne.n	8008a80 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a52:	4b41      	ldr	r3, [pc, #260]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <HAL_RCC_OscConfig+0x152>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d001      	beq.n	8008a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e1d3      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a6a:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	4937      	ldr	r1, [pc, #220]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a7e:	e03a      	b.n	8008af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d020      	beq.n	8008aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a88:	4b34      	ldr	r3, [pc, #208]	; (8008b5c <HAL_RCC_OscConfig+0x244>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8e:	f7fb f823 	bl	8003ad8 <HAL_GetTick>
 8008a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a94:	e008      	b.n	8008aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a96:	f7fb f81f 	bl	8003ad8 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e1b4      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa8:	4b2b      	ldr	r3, [pc, #172]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0f0      	beq.n	8008a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab4:	4b28      	ldr	r3, [pc, #160]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	4925      	ldr	r1, [pc, #148]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	600b      	str	r3, [r1, #0]
 8008ac8:	e015      	b.n	8008af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <HAL_RCC_OscConfig+0x244>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fb f802 	bl	8003ad8 <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ad8:	f7fa fffe 	bl	8003ad8 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e193      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aea:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1f0      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d036      	beq.n	8008b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b0a:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <HAL_RCC_OscConfig+0x248>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b10:	f7fa ffe2 	bl	8003ad8 <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b18:	f7fa ffde 	bl	8003ad8 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e173      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCC_OscConfig+0x240>)
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f0      	beq.n	8008b18 <HAL_RCC_OscConfig+0x200>
 8008b36:	e01b      	b.n	8008b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <HAL_RCC_OscConfig+0x248>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3e:	f7fa ffcb 	bl	8003ad8 <HAL_GetTick>
 8008b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b44:	e00e      	b.n	8008b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b46:	f7fa ffc7 	bl	8003ad8 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d907      	bls.n	8008b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e15c      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	42470000 	.word	0x42470000
 8008b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b64:	4b8a      	ldr	r3, [pc, #552]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1ea      	bne.n	8008b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8097 	beq.w	8008cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b82:	4b83      	ldr	r3, [pc, #524]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10f      	bne.n	8008bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	4b7f      	ldr	r3, [pc, #508]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	4a7e      	ldr	r2, [pc, #504]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b9e:	4b7c      	ldr	r3, [pc, #496]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008baa:	2301      	movs	r3, #1
 8008bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bae:	4b79      	ldr	r3, [pc, #484]	; (8008d94 <HAL_RCC_OscConfig+0x47c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d118      	bne.n	8008bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bba:	4b76      	ldr	r3, [pc, #472]	; (8008d94 <HAL_RCC_OscConfig+0x47c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a75      	ldr	r2, [pc, #468]	; (8008d94 <HAL_RCC_OscConfig+0x47c>)
 8008bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bc6:	f7fa ff87 	bl	8003ad8 <HAL_GetTick>
 8008bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bcc:	e008      	b.n	8008be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bce:	f7fa ff83 	bl	8003ad8 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d901      	bls.n	8008be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e118      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be0:	4b6c      	ldr	r3, [pc, #432]	; (8008d94 <HAL_RCC_OscConfig+0x47c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f0      	beq.n	8008bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d106      	bne.n	8008c02 <HAL_RCC_OscConfig+0x2ea>
 8008bf4:	4b66      	ldr	r3, [pc, #408]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	4a65      	ldr	r2, [pc, #404]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008c00:	e01c      	b.n	8008c3c <HAL_RCC_OscConfig+0x324>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d10c      	bne.n	8008c24 <HAL_RCC_OscConfig+0x30c>
 8008c0a:	4b61      	ldr	r3, [pc, #388]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	4a60      	ldr	r2, [pc, #384]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c10:	f043 0304 	orr.w	r3, r3, #4
 8008c14:	6713      	str	r3, [r2, #112]	; 0x70
 8008c16:	4b5e      	ldr	r3, [pc, #376]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1a:	4a5d      	ldr	r2, [pc, #372]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	6713      	str	r3, [r2, #112]	; 0x70
 8008c22:	e00b      	b.n	8008c3c <HAL_RCC_OscConfig+0x324>
 8008c24:	4b5a      	ldr	r3, [pc, #360]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c28:	4a59      	ldr	r2, [pc, #356]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c2a:	f023 0301 	bic.w	r3, r3, #1
 8008c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c30:	4b57      	ldr	r3, [pc, #348]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c34:	4a56      	ldr	r2, [pc, #344]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c36:	f023 0304 	bic.w	r3, r3, #4
 8008c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d015      	beq.n	8008c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c44:	f7fa ff48 	bl	8003ad8 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c4a:	e00a      	b.n	8008c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c4c:	f7fa ff44 	bl	8003ad8 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e0d7      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c62:	4b4b      	ldr	r3, [pc, #300]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0ee      	beq.n	8008c4c <HAL_RCC_OscConfig+0x334>
 8008c6e:	e014      	b.n	8008c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c70:	f7fa ff32 	bl	8003ad8 <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c78:	f7fa ff2e 	bl	8003ad8 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e0c1      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c8e:	4b40      	ldr	r3, [pc, #256]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1ee      	bne.n	8008c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d105      	bne.n	8008cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ca0:	4b3b      	ldr	r3, [pc, #236]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	4a3a      	ldr	r2, [pc, #232]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 80ad 	beq.w	8008e10 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cb6:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 030c 	and.w	r3, r3, #12
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d060      	beq.n	8008d84 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d145      	bne.n	8008d56 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cca:	4b33      	ldr	r3, [pc, #204]	; (8008d98 <HAL_RCC_OscConfig+0x480>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd0:	f7fa ff02 	bl	8003ad8 <HAL_GetTick>
 8008cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cd8:	f7fa fefe 	bl	8003ad8 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e093      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cea:	4b29      	ldr	r3, [pc, #164]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f0      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	69da      	ldr	r2, [r3, #28]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	041b      	lsls	r3, r3, #16
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	061b      	lsls	r3, r3, #24
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	071b      	lsls	r3, r3, #28
 8008d22:	491b      	ldr	r1, [pc, #108]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d28:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <HAL_RCC_OscConfig+0x480>)
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2e:	f7fa fed3 	bl	8003ad8 <HAL_GetTick>
 8008d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d34:	e008      	b.n	8008d48 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d36:	f7fa fecf 	bl	8003ad8 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d901      	bls.n	8008d48 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e064      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0f0      	beq.n	8008d36 <HAL_RCC_OscConfig+0x41e>
 8008d54:	e05c      	b.n	8008e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <HAL_RCC_OscConfig+0x480>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5c:	f7fa febc 	bl	8003ad8 <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d64:	f7fa feb8 	bl	8003ad8 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e04d      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <HAL_RCC_OscConfig+0x478>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f0      	bne.n	8008d64 <HAL_RCC_OscConfig+0x44c>
 8008d82:	e045      	b.n	8008e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d107      	bne.n	8008d9c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e040      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
 8008d90:	40023800 	.word	0x40023800
 8008d94:	40007000 	.word	0x40007000
 8008d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d9c:	4b1f      	ldr	r3, [pc, #124]	; (8008e1c <HAL_RCC_OscConfig+0x504>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d030      	beq.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d129      	bne.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d122      	bne.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008dcc:	4013      	ands	r3, r2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d119      	bne.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	085b      	lsrs	r3, r3, #1
 8008de4:	3b01      	subs	r3, #1
 8008de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d10f      	bne.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d107      	bne.n	8008e0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d001      	beq.n	8008e10 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e000      	b.n	8008e12 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	40023800 	.word	0x40023800

08008e20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e10c      	b.n	800905c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f8 fb02 	bl	8001460 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f903 	bl	8009070 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f938 	bl	80090e0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d030      	beq.n	8008eda <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f957 	bl	800912c <SAI_GetInputClock>
 8008e7e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	025b      	lsls	r3, r3, #9
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a72      	ldr	r2, [pc, #456]	; (8009064 <HAL_SAI_Init+0x244>)
 8008e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea0:	08da      	lsrs	r2, r3, #3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008ea6:	68f9      	ldr	r1, [r7, #12]
 8008ea8:	4b6e      	ldr	r3, [pc, #440]	; (8009064 <HAL_SAI_Init+0x244>)
 8008eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8008eae:	08da      	lsrs	r2, r3, #3
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	1aca      	subs	r2, r1, r3
 8008eba:	2a08      	cmp	r2, #8
 8008ebc:	d904      	bls.n	8008ec8 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d104      	bne.n	8008eda <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	085a      	lsrs	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_SAI_Init+0xca>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d109      	bne.n	8008efe <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_SAI_Init+0xd6>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e001      	b.n	8008efa <HAL_SAI_Init+0xda>
 8008ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	e008      	b.n	8008f10 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d102      	bne.n	8008f0c <HAL_SAI_Init+0xec>
 8008f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0a:	e000      	b.n	8008f0e <HAL_SAI_Init+0xee>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d811      	bhi.n	8008f3c <HAL_SAI_Init+0x11c>
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d20b      	bcs.n	8008f34 <HAL_SAI_Init+0x114>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <HAL_SAI_Init+0x106>
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d003      	beq.n	8008f2c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8008f24:	e00a      	b.n	8008f3c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
    break;
 8008f2a:	e008      	b.n	8008f3e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f30:	613b      	str	r3, [r7, #16]
    break;
 8008f32:	e004      	b.n	8008f3e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f38:	613b      	str	r3, [r7, #16]
    break;
 8008f3a:	e000      	b.n	8008f3e <HAL_SAI_Init+0x11e>
      break;
 8008f3c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4b47      	ldr	r3, [pc, #284]	; (8009068 <HAL_SAI_Init+0x248>)
 8008f4a:	400b      	ands	r3, r1
 8008f4c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8008f76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	051b      	lsls	r3, r3, #20
 8008f8a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008fa2:	f023 030f 	bic.w	r3, r3, #15
 8008fa6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6859      	ldr	r1, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6899      	ldr	r1, [r3, #8]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	4b26      	ldr	r3, [pc, #152]	; (800906c <HAL_SAI_Init+0x24c>)
 8008fd2:	400b      	ands	r3, r1
 8008fd4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6899      	ldr	r1, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fe6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8008fec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8008ff2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008ffc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68d9      	ldr	r1, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009014:	400b      	ands	r3, r1
 8009016:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68d9      	ldr	r1, [r3, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009026:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800902e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009034:	3b01      	subs	r3, #1
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	cccccccd 	.word	0xcccccccd
 8009068:	ff05c010 	.word	0xff05c010
 800906c:	fff88000 	.word	0xfff88000

08009070 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009078:	4b17      	ldr	r3, [pc, #92]	; (80090d8 <SAI_Disable+0x68>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a17      	ldr	r2, [pc, #92]	; (80090dc <SAI_Disable+0x6c>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	0b1b      	lsrs	r3, r3, #12
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800909a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	1e5a      	subs	r2, r3, #1
 80090a0:	60fa      	str	r2, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	72fb      	strb	r3, [r7, #11]
      break;
 80090ba:	e006      	b.n	80090ca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e8      	bne.n	800909c <SAI_Disable+0x2c>

  return status;
 80090ca:	7afb      	ldrb	r3, [r7, #11]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	20000020 	.word	0x20000020
 80090dc:	95cbec1b 	.word	0x95cbec1b

080090e0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d00c      	beq.n	800910a <SAI_BlockSynchroConfig+0x2a>
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d80d      	bhi.n	8009110 <SAI_BlockSynchroConfig+0x30>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <SAI_BlockSynchroConfig+0x1e>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d003      	beq.n	8009104 <SAI_BlockSynchroConfig+0x24>
 80090fc:	e008      	b.n	8009110 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
      break;
 8009102:	e008      	b.n	8009116 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009104:	2310      	movs	r3, #16
 8009106:	60fb      	str	r3, [r7, #12]
      break;
 8009108:	e005      	b.n	8009116 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800910a:	2320      	movs	r3, #32
 800910c:	60fb      	str	r3, [r7, #12]
      break;
 800910e:	e002      	b.n	8009116 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
      break;
 8009114:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8009116:	4a04      	ldr	r2, [pc, #16]	; (8009128 <SAI_BlockSynchroConfig+0x48>)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40015800 	.word	0x40015800

0800912c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a44      	ldr	r2, [pc, #272]	; (8009258 <SAI_GetInputClock+0x12c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10b      	bne.n	8009162 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800914a:	4b44      	ldr	r3, [pc, #272]	; (800925c <SAI_GetInputClock+0x130>)
 800914c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	4940      	ldr	r1, [pc, #256]	; (800925c <SAI_GetInputClock+0x130>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8009160:	e00b      	b.n	800917a <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <SAI_GetInputClock+0x130>)
 8009164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	493a      	ldr	r1, [pc, #232]	; (800925c <SAI_GetInputClock+0x130>)
 8009174:	4313      	orrs	r3, r2
 8009176:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800917a:	4b38      	ldr	r3, [pc, #224]	; (800925c <SAI_GetInputClock+0x130>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d108      	bne.n	8009198 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009186:	4b35      	ldr	r3, [pc, #212]	; (800925c <SAI_GetInputClock+0x130>)
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800918e:	4a34      	ldr	r2, [pc, #208]	; (8009260 <SAI_GetInputClock+0x134>)
 8009190:	fbb2 f3f3 	udiv	r3, r2, r3
 8009194:	613b      	str	r3, [r7, #16]
 8009196:	e007      	b.n	80091a8 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009198:	4b30      	ldr	r3, [pc, #192]	; (800925c <SAI_GetInputClock+0x130>)
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091a0:	4a30      	ldr	r2, [pc, #192]	; (8009264 <SAI_GetInputClock+0x138>)
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d121      	bne.n	80091f4 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80091b0:	4b2a      	ldr	r3, [pc, #168]	; (800925c <SAI_GetInputClock+0x130>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b6:	0e1b      	lsrs	r3, r3, #24
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80091be:	4b27      	ldr	r3, [pc, #156]	; (800925c <SAI_GetInputClock+0x130>)
 80091c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c4:	099b      	lsrs	r3, r3, #6
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	fb03 f202 	mul.w	r2, r3, r2
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80091d8:	4b20      	ldr	r3, [pc, #128]	; (800925c <SAI_GetInputClock+0x130>)
 80091da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091de:	0a1b      	lsrs	r3, r3, #8
 80091e0:	f003 031f 	and.w	r3, r3, #31
 80091e4:	3301      	adds	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	e02a      	b.n	800924a <SAI_GetInputClock+0x11e>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091fc:	d120      	bne.n	8009240 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80091fe:	4b17      	ldr	r3, [pc, #92]	; (800925c <SAI_GetInputClock+0x130>)
 8009200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009204:	0e1b      	lsrs	r3, r3, #24
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800920c:	4b13      	ldr	r3, [pc, #76]	; (800925c <SAI_GetInputClock+0x130>)
 800920e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009212:	099b      	lsrs	r3, r3, #6
 8009214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	fb03 f202 	mul.w	r2, r3, r2
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	fbb2 f3f3 	udiv	r3, r2, r3
 8009224:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009226:	4b0d      	ldr	r3, [pc, #52]	; (800925c <SAI_GetInputClock+0x130>)
 8009228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	fbb2 f3f3 	udiv	r3, r2, r3
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e004      	b.n	800924a <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <SAI_GetInputClock+0x13c>)
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8009246:	4b09      	ldr	r3, [pc, #36]	; (800926c <SAI_GetInputClock+0x140>)
 8009248:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	40015804 	.word	0x40015804
 800925c:	40023800 	.word	0x40023800
 8009260:	00f42400 	.word	0x00f42400
 8009264:	007a1200 	.word	0x007a1200
 8009268:	4247015c 	.word	0x4247015c
 800926c:	00bb8000 	.word	0x00bb8000

08009270 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e022      	b.n	80092c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7f8 f963 	bl	8001560 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2203      	movs	r2, #3
 800929e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f814 	bl	80092d0 <HAL_SD_InitCard>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e00a      	b.n	80092c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b08e      	sub	sp, #56	; 0x38
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80092d8:	2300      	movs	r3, #0
 80092da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80092ec:	2376      	movs	r3, #118	; 0x76
 80092ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681d      	ldr	r5, [r3, #0]
 80092f4:	466c      	mov	r4, sp
 80092f6:	f107 0314 	add.w	r3, r7, #20
 80092fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009308:	4628      	mov	r0, r5
 800930a:	f002 f933 	bl	800b574 <SDIO_Init>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e04f      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009320:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <HAL_SD_InitCard+0xf8>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f002 f95a 	bl	800b5e4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <HAL_SD_InitCard+0xf8>)
 8009332:	2201      	movs	r2, #1
 8009334:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009336:	2002      	movs	r0, #2
 8009338:	f7fa fbda 	bl	8003af0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fe0b 	bl	8009f58 <SD_PowerON>
 8009342:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e02e      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fd2a 	bl	8009dbc <SD_InitCard>
 8009368:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e01b      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009390:	4618      	mov	r0, r3
 8009392:	f002 f9b9 	bl	800b708 <SDMMC_CmdBlockLength>
 8009396:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00f      	beq.n	80093be <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <HAL_SD_InitCard+0xfc>)
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3728      	adds	r7, #40	; 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bdb0      	pop	{r4, r5, r7, pc}
 80093c8:	422580a0 	.word	0x422580a0
 80093cc:	004005ff 	.word	0x004005ff

080093d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08c      	sub	sp, #48	; 0x30
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d107      	bne.n	80093f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0be      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	f040 80b7 	bne.w	8009574 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800940c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	441a      	add	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009416:	429a      	cmp	r2, r3
 8009418:	d907      	bls.n	800942a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e0a5      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2203      	movs	r2, #3
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009448:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	4a4c      	ldr	r2, [pc, #304]	; (8009580 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8009450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	4a4b      	ldr	r2, [pc, #300]	; (8009584 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009458:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2200      	movs	r2, #0
 8009460:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	2200      	movs	r2, #0
 8009468:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3380      	adds	r3, #128	; 0x80
 8009490:	4619      	mov	r1, r3
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	025b      	lsls	r3, r3, #9
 8009498:	089b      	lsrs	r3, r3, #2
 800949a:	f7fa fd89 	bl	8003fb0 <HAL_DMA_Start_IT>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d017      	beq.n	80094d4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80094b2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a33      	ldr	r2, [pc, #204]	; (8009588 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e050      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80094d4:	4b2d      	ldr	r3, [pc, #180]	; (800958c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d002      	beq.n	80094e8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	025b      	lsls	r3, r3, #9
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094e8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	025b      	lsls	r3, r3, #9
 80094f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80094f4:	2390      	movs	r3, #144	; 0x90
 80094f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80094f8:	2302      	movs	r3, #2
 80094fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009500:	2301      	movs	r3, #1
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f107 0210 	add.w	r2, r7, #16
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f002 f8ce 	bl	800b6b0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d90a      	bls.n	8009530 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2282      	movs	r2, #130	; 0x82
 800951e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009526:	4618      	mov	r0, r3
 8009528:	f002 f932 	bl	800b790 <SDMMC_CmdReadMultiBlock>
 800952c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800952e:	e009      	b.n	8009544 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2281      	movs	r2, #129	; 0x81
 8009534:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800953c:	4618      	mov	r0, r3
 800953e:	f002 f905 	bl	800b74c <SDMMC_CmdReadSingleBlock>
 8009542:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d012      	beq.n	8009570 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e002      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	e000      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009574:	2302      	movs	r3, #2
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3730      	adds	r7, #48	; 0x30
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	08009ca7 	.word	0x08009ca7
 8009584:	08009d19 	.word	0x08009d19
 8009588:	004005ff 	.word	0x004005ff
 800958c:	4225858c 	.word	0x4225858c

08009590 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	; 0x30
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0c1      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f040 80ba 	bne.w	800973a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d907      	bls.n	80095ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e0a8      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2203      	movs	r2, #3
 80095ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 021a 	orr.w	r2, r2, #26
 8009608:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960e:	4a4d      	ldr	r2, [pc, #308]	; (8009744 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009616:	4a4c      	ldr	r2, [pc, #304]	; (8009748 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009618:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961e:	2200      	movs	r2, #0
 8009620:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	2b01      	cmp	r3, #1
 8009628:	d002      	beq.n	8009630 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	025b      	lsls	r3, r3, #9
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d90a      	bls.n	800964c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	22a0      	movs	r2, #160	; 0xa0
 800963a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009642:	4618      	mov	r0, r3
 8009644:	f002 f8e8 	bl	800b818 <SDMMC_CmdWriteMultiBlock>
 8009648:	62f8      	str	r0, [r7, #44]	; 0x2c
 800964a:	e009      	b.n	8009660 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2290      	movs	r2, #144	; 0x90
 8009650:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009658:	4618      	mov	r0, r3
 800965a:	f002 f8bb 	bl	800b7d4 <SDMMC_CmdWriteSingleBlock>
 800965e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d012      	beq.n	800968c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a38      	ldr	r2, [pc, #224]	; (800974c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e057      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800968c:	4b30      	ldr	r3, [pc, #192]	; (8009750 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009696:	2240      	movs	r2, #64	; 0x40
 8009698:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3380      	adds	r3, #128	; 0x80
 80096c2:	461a      	mov	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	025b      	lsls	r3, r3, #9
 80096c8:	089b      	lsrs	r3, r3, #2
 80096ca:	f7fa fc71 	bl	8003fb0 <HAL_DMA_Start_IT>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01a      	beq.n	800970a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 021a 	bic.w	r2, r2, #26
 80096e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a18      	ldr	r2, [pc, #96]	; (800974c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e018      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800970a:	f04f 33ff 	mov.w	r3, #4294967295
 800970e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	025b      	lsls	r3, r3, #9
 8009714:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009716:	2390      	movs	r3, #144	; 0x90
 8009718:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800971e:	2300      	movs	r3, #0
 8009720:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009722:	2301      	movs	r3, #1
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f107 0210 	add.w	r2, r7, #16
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f001 ffbd 	bl	800b6b0 <SDIO_ConfigData>

      return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e000      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3730      	adds	r7, #48	; 0x30
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	08009c7d 	.word	0x08009c7d
 8009748:	08009d19 	.word	0x08009d19
 800974c:	004005ff 	.word	0x004005ff
 8009750:	4225858c 	.word	0x4225858c

08009754 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009776:	0f9b      	lsrs	r3, r3, #30
 8009778:	b2da      	uxtb	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009782:	0e9b      	lsrs	r3, r3, #26
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009794:	0e1b      	lsrs	r3, r3, #24
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 0303 	and.w	r3, r3, #3
 800979c:	b2da      	uxtb	r2, r3
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a6:	0c1b      	lsrs	r3, r3, #16
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c8:	0d1b      	lsrs	r3, r3, #20
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e6:	0bdb      	lsrs	r3, r3, #15
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f8:	0b9b      	lsrs	r3, r3, #14
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	b2da      	uxtb	r2, r3
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800980a:	0b5b      	lsrs	r3, r3, #13
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	b2da      	uxtb	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	0b1b      	lsrs	r3, r3, #12
 800981e:	b2db      	uxtb	r3, r3
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	b2da      	uxtb	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2200      	movs	r2, #0
 800982e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009834:	2b00      	cmp	r3, #0
 8009836:	d163      	bne.n	8009900 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800983c:	009a      	lsls	r2, r3, #2
 800983e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009842:	4013      	ands	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009848:	0f92      	lsrs	r2, r2, #30
 800984a:	431a      	orrs	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009854:	0edb      	lsrs	r3, r3, #27
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	b2da      	uxtb	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009866:	0e1b      	lsrs	r3, r3, #24
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	b2da      	uxtb	r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009878:	0d5b      	lsrs	r3, r3, #21
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	b2da      	uxtb	r2, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988a:	0c9b      	lsrs	r3, r3, #18
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989c:	0bdb      	lsrs	r3, r3, #15
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	7e1b      	ldrb	r3, [r3, #24]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	3302      	adds	r3, #2
 80098c0:	2201      	movs	r2, #1
 80098c2:	fa02 f303 	lsl.w	r3, r2, r3
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80098ca:	fb03 f202 	mul.w	r2, r3, r2
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	7a1b      	ldrb	r3, [r3, #8]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	2201      	movs	r2, #1
 80098de:	409a      	lsls	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80098ec:	0a52      	lsrs	r2, r2, #9
 80098ee:	fb03 f202 	mul.w	r2, r3, r2
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098fc:	661a      	str	r2, [r3, #96]	; 0x60
 80098fe:	e031      	b.n	8009964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009904:	2b01      	cmp	r3, #1
 8009906:	d11d      	bne.n	8009944 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800990c:	041b      	lsls	r3, r3, #16
 800990e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009916:	0c1b      	lsrs	r3, r3, #16
 8009918:	431a      	orrs	r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	3301      	adds	r3, #1
 8009924:	029a      	lsls	r2, r3, #10
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009938:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	661a      	str	r2, [r3, #96]	; 0x60
 8009942:	e00f      	b.n	8009964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a58      	ldr	r2, [pc, #352]	; (8009aac <HAL_SD_GetCardCSD+0x344>)
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e09d      	b.n	8009aa0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009968:	0b9b      	lsrs	r3, r3, #14
 800996a:	b2db      	uxtb	r3, r3
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	b2da      	uxtb	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997a:	09db      	lsrs	r3, r3, #7
 800997c:	b2db      	uxtb	r3, r3
 800997e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009982:	b2da      	uxtb	r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999c:	0fdb      	lsrs	r3, r3, #31
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a8:	0f5b      	lsrs	r3, r3, #29
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	f003 0303 	and.w	r3, r3, #3
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	0e9b      	lsrs	r3, r3, #26
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 0307 	and.w	r3, r3, #7
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099cc:	0d9b      	lsrs	r3, r3, #22
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099de:	0d5b      	lsrs	r3, r3, #21
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0e:	0bdb      	lsrs	r3, r3, #15
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a22:	0b9b      	lsrs	r3, r3, #14
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	0b5b      	lsrs	r3, r3, #13
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	0b1b      	lsrs	r3, r3, #12
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5e:	0a9b      	lsrs	r3, r3, #10
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	004005ff 	.word	0x004005ff

08009ab0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b08:	b5b0      	push	{r4, r5, r7, lr}
 8009b0a:	b08e      	sub	sp, #56	; 0x38
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d02e      	beq.n	8009b86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2e:	d106      	bne.n	8009b3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8009b3c:	e029      	b.n	8009b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b44:	d10a      	bne.n	8009b5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fabc 	bl	800a0c4 <SD_WideBus_Enable>
 8009b4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	639a      	str	r2, [r3, #56]	; 0x38
 8009b5a:	e01a      	b.n	8009b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 faf9 	bl	800a15a <SD_WideBus_Disable>
 8009b68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
 8009b76:	e00c      	b.n	8009b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	639a      	str	r2, [r3, #56]	; 0x38
 8009b84:	e005      	b.n	8009b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a26      	ldr	r2, [pc, #152]	; (8009c38 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bb0:	e01f      	b.n	8009bf2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681d      	ldr	r5, [r3, #0]
 8009bd8:	466c      	mov	r4, sp
 8009bda:	f107 0314 	add.w	r3, r7, #20
 8009bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009be6:	f107 0308 	add.w	r3, r7, #8
 8009bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bec:	4628      	mov	r0, r5
 8009bee:	f001 fcc1 	bl	800b574 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 fd84 	bl	800b708 <SDMMC_CmdBlockLength>
 8009c00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bdb0      	pop	{r4, r5, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	004005ff 	.word	0x004005ff

08009c3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa10 	bl	800a074 <SD_SendStatus>
 8009c54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	0a5b      	lsrs	r3, r3, #9
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009c72:	693b      	ldr	r3, [r7, #16]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb8:	2b82      	cmp	r3, #130	; 0x82
 8009cba:	d111      	bne.n	8009ce0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f001 fdcb 	bl	800b85c <SDMMC_CmdStopTransfer>
 8009cc6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d008      	beq.n	8009ce0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f7ff fd3a 	bl	8009754 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0208 	bic.w	r2, r2, #8
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f240 523a 	movw	r2, #1338	; 0x53a
 8009cf8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7f7 ff87 	bl	8001c1c <HAL_SD_RxCpltCallback>
#endif
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fa f99a 	bl	8004060 <HAL_DMA_GetError>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d03e      	beq.n	8009db0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d38:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d40:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d002      	beq.n	8009d4e <SD_DMAError+0x36>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d12d      	bne.n	8009daa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a19      	ldr	r2, [pc, #100]	; (8009db8 <SD_DMAError+0xa0>)
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009d64:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009d72:	6978      	ldr	r0, [r7, #20]
 8009d74:	f7ff ff62 	bl	8009c3c <HAL_SD_GetCardState>
 8009d78:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b06      	cmp	r3, #6
 8009d7e:	d002      	beq.n	8009d86 <SD_DMAError+0x6e>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d10a      	bne.n	8009d9c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fd66 	bl	800b85c <SDMMC_CmdStopTransfer>
 8009d90:	4602      	mov	r2, r0
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d96:	431a      	orrs	r2, r3
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009daa:	6978      	ldr	r0, [r7, #20]
 8009dac:	f7ff fcd2 	bl	8009754 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009db0:	bf00      	nop
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	004005ff 	.word	0x004005ff

08009dbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dbc:	b5b0      	push	{r4, r5, r7, lr}
 8009dbe:	b094      	sub	sp, #80	; 0x50
 8009dc0:	af04      	add	r7, sp, #16
 8009dc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 fc17 	bl	800b600 <SDIO_GetPowerState>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ddc:	e0b8      	b.n	8009f50 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d02f      	beq.n	8009e46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fe40 	bl	800ba70 <SDMMC_CmdSendCID>
 8009df0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <SD_InitCard+0x40>
    {
      return errorstate;
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	e0a9      	b.n	8009f50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 fc41 	bl	800b68a <SDIO_GetResponse>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2104      	movs	r1, #4
 8009e14:	4618      	mov	r0, r3
 8009e16:	f001 fc38 	bl	800b68a <SDIO_GetResponse>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2108      	movs	r1, #8
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 fc2f 	bl	800b68a <SDIO_GetResponse>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	210c      	movs	r1, #12
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fc26 	bl	800b68a <SDIO_GetResponse>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d00d      	beq.n	8009e6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f107 020e 	add.w	r2, r7, #14
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fe46 	bl	800baea <SDMMC_CmdSetRelAdd>
 8009e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <SD_InitCard+0xae>
    {
      return errorstate;
 8009e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e68:	e072      	b.n	8009f50 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d036      	beq.n	8009ee0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e72:	89fb      	ldrh	r3, [r7, #14]
 8009e74:	461a      	mov	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e82:	041b      	lsls	r3, r3, #16
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f001 fe10 	bl	800baac <SDMMC_CmdSendCSD>
 8009e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e96:	e05b      	b.n	8009f50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fbf3 	bl	800b68a <SDIO_GetResponse>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2104      	movs	r1, #4
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fbea 	bl	800b68a <SDIO_GetResponse>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2108      	movs	r1, #8
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fbe1 	bl	800b68a <SDIO_GetResponse>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	210c      	movs	r1, #12
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fbd8 	bl	800b68a <SDIO_GetResponse>
 8009eda:	4602      	mov	r2, r0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fbcf 	bl	800b68a <SDIO_GetResponse>
 8009eec:	4603      	mov	r3, r0
 8009eee:	0d1a      	lsrs	r2, r3, #20
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ef4:	f107 0310 	add.w	r3, r7, #16
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fc34 	bl	8009768 <HAL_SD_GetCardCSD>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f0a:	e021      	b.n	8009f50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6819      	ldr	r1, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f14:	041b      	lsls	r3, r3, #16
 8009f16:	2200      	movs	r2, #0
 8009f18:	461c      	mov	r4, r3
 8009f1a:	4615      	mov	r5, r2
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	462b      	mov	r3, r5
 8009f20:	4608      	mov	r0, r1
 8009f22:	f001 fcbd 	bl	800b8a0 <SDMMC_CmdSelDesel>
 8009f26:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <SD_InitCard+0x176>
  {
    return errorstate;
 8009f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f30:	e00e      	b.n	8009f50 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681d      	ldr	r5, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	466c      	mov	r4, sp
 8009f3a:	f103 0210 	add.w	r2, r3, #16
 8009f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f44:	3304      	adds	r3, #4
 8009f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f001 fb13 	bl	800b574 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3740      	adds	r7, #64	; 0x40
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bdb0      	pop	{r4, r5, r7, pc}

08009f58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fcb8 	bl	800b8e6 <SDMMC_CmdGoIdleState>
 8009f76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	e072      	b.n	800a068 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 fccb 	bl	800b922 <SDMMC_CmdOperCond>
 8009f8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00d      	beq.n	8009fb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fca1 	bl	800b8e6 <SDMMC_CmdGoIdleState>
 8009fa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d004      	beq.n	8009fb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	e05b      	b.n	800a068 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d137      	bne.n	800a02e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fccb 	bl	800b960 <SDMMC_CmdAppCommand>
 8009fca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d02d      	beq.n	800a02e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fd6:	e047      	b.n	800a068 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fcbe 	bl	800b960 <SDMMC_CmdAppCommand>
 8009fe4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <SD_PowerON+0x98>
    {
      return errorstate;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	e03b      	b.n	800a068 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	491e      	ldr	r1, [pc, #120]	; (800a070 <SD_PowerON+0x118>)
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fcd4 	bl	800b9a4 <SDMMC_CmdAppOperCommand>
 8009ffc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a008:	e02e      	b.n	800a068 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fb3a 	bl	800b68a <SDIO_GetResponse>
 800a016:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	0fdb      	lsrs	r3, r3, #31
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <SD_PowerON+0xcc>
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <SD_PowerON+0xce>
 800a024:	2300      	movs	r3, #0
 800a026:	613b      	str	r3, [r7, #16]

    count++;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a034:	4293      	cmp	r3, r2
 800a036:	d802      	bhi.n	800a03e <SD_PowerON+0xe6>
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0cc      	beq.n	8009fd8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a044:	4293      	cmp	r3, r2
 800a046:	d902      	bls.n	800a04e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a04c:	e00c      	b.n	800a068 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	645a      	str	r2, [r3, #68]	; 0x44
 800a05e:	e002      	b.n	800a066 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	c1100000 	.word	0xc1100000

0800a074 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a088:	e018      	b.n	800a0bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f001 fd48 	bl	800bb2c <SDMMC_CmdSendStatus>
 800a09c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	e009      	b.n	800a0bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f001 faeb 	bl	800b68a <SDIO_GetResponse>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fad5 	bl	800b68a <SDIO_GetResponse>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0ea:	d102      	bne.n	800a0f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f0:	e02f      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0f2:	f107 030c 	add.w	r3, r7, #12
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f879 	bl	800a1f0 <SD_FindSCR>
 800a0fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	e023      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01c      	beq.n	800a14e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f001 fc1d 	bl	800b960 <SDMMC_CmdAppCommand>
 800a126:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	e00f      	b.n	800a152 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2102      	movs	r1, #2
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fc56 	bl	800b9ea <SDMMC_CmdBusWidth>
 800a13e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	e003      	b.n	800a152 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e001      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a14e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	2300      	movs	r3, #0
 800a168:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fa8a 	bl	800b68a <SDIO_GetResponse>
 800a176:	4603      	mov	r3, r0
 800a178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a180:	d102      	bne.n	800a188 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a186:	e02f      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a188:	f107 030c 	add.w	r3, r7, #12
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f82e 	bl	800a1f0 <SD_FindSCR>
 800a194:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	e023      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01c      	beq.n	800a1e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f001 fbd2 	bl	800b960 <SDMMC_CmdAppCommand>
 800a1bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	e00f      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 fc0b 	bl	800b9ea <SDMMC_CmdBusWidth>
 800a1d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	e003      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e001      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b08f      	sub	sp, #60	; 0x3c
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1fa:	f7f9 fc6d 	bl	8003ad8 <HAL_GetTick>
 800a1fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2108      	movs	r1, #8
 800a216:	4618      	mov	r0, r3
 800a218:	f001 fa76 	bl	800b708 <SDMMC_CmdBlockLength>
 800a21c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	e0b2      	b.n	800a38e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	4619      	mov	r1, r3
 800a234:	4610      	mov	r0, r2
 800a236:	f001 fb93 	bl	800b960 <SDMMC_CmdAppCommand>
 800a23a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	e0a3      	b.n	800a38e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295
 800a24a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a24c:	2308      	movs	r3, #8
 800a24e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a250:	2330      	movs	r3, #48	; 0x30
 800a252:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a254:	2302      	movs	r3, #2
 800a256:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a258:	2300      	movs	r3, #0
 800a25a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f107 0210 	add.w	r2, r7, #16
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fa20 	bl	800b6b0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f001 fbda 	bl	800ba2e <SDMMC_CmdSendSCR>
 800a27a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d02a      	beq.n	800a2d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	e083      	b.n	800a38e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00f      	beq.n	800a2b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6819      	ldr	r1, [r3, #0]
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	f107 0208 	add.w	r2, r7, #8
 800a2a0:	18d4      	adds	r4, r2, r3
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	f001 f991 	bl	800b5ca <SDIO_ReadFIFO>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	6023      	str	r3, [r4, #0]
      index++;
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b2:	e006      	b.n	800a2c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d012      	beq.n	800a2e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a2c2:	f7f9 fc09 	bl	8003ad8 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d102      	bne.n	800a2d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2d6:	e05a      	b.n	800a38e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2de:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0cf      	beq.n	800a286 <SD_FindSCR+0x96>
 800a2e6:	e000      	b.n	800a2ea <SD_FindSCR+0xfa>
      break;
 800a2e8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f0:	f003 0308 	and.w	r3, r3, #8
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a300:	2308      	movs	r3, #8
 800a302:	e044      	b.n	800a38e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	f003 0302 	and.w	r3, r3, #2
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2202      	movs	r2, #2
 800a318:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a31a:	2302      	movs	r3, #2
 800a31c:	e037      	b.n	800a38e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2220      	movs	r2, #32
 800a332:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a334:	2320      	movs	r3, #32
 800a336:	e02a      	b.n	800a38e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a340:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	061a      	lsls	r2, r3, #24
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a34e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a358:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	0e1b      	lsrs	r3, r3, #24
 800a35e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	601a      	str	r2, [r3, #0]
    scr++;
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	3304      	adds	r3, #4
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	061a      	lsls	r2, r3, #24
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a376:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a380:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	0e1b      	lsrs	r3, r3, #24
 800a386:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	373c      	adds	r7, #60	; 0x3c
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}

0800a396 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e025      	b.n	800a3f6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7f6 fa96 	bl	80008f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f000 ffb2 	bl	800b340 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	f001 f807 	bl	800b3fa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a410:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d101      	bne.n	800a41c <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
 800a41a:	e021      	b.n	800a460 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d002      	beq.n	800a428 <HAL_SDRAM_SendCommand+0x2a>
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	2b05      	cmp	r3, #5
 800a426:	d118      	bne.n	800a45a <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f847 	bl	800b4cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d104      	bne.n	800a450 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2205      	movs	r2, #5
 800a44a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a44e:	e006      	b.n	800a45e <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a458:	e001      	b.n	800a45e <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d101      	bne.n	800a482 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a47e:	2302      	movs	r3, #2
 800a480:	e016      	b.n	800a4b0 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d10f      	bne.n	800a4ae <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 f852 	bl	800b546 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e000      	b.n	800a4b0 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e041      	b.n	800a54e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f7 fa1c 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	f000 fa96 	bl	800aa28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d001      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e04e      	b.n	800a60e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0201 	orr.w	r2, r2, #1
 800a586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a23      	ldr	r2, [pc, #140]	; (800a61c <HAL_TIM_Base_Start_IT+0xc4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d022      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59a:	d01d      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <HAL_TIM_Base_Start_IT+0xc8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d018      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a1e      	ldr	r2, [pc, #120]	; (800a624 <HAL_TIM_Base_Start_IT+0xcc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d013      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1c      	ldr	r2, [pc, #112]	; (800a628 <HAL_TIM_Base_Start_IT+0xd0>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00e      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <HAL_TIM_Base_Start_IT+0xd4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a19      	ldr	r2, [pc, #100]	; (800a630 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d004      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x80>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a18      	ldr	r2, [pc, #96]	; (800a634 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d111      	bne.n	800a5fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b06      	cmp	r3, #6
 800a5e8:	d010      	beq.n	800a60c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fa:	e007      	b.n	800a60c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	40010000 	.word	0x40010000
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40000c00 	.word	0x40000c00
 800a62c:	40010400 	.word	0x40010400
 800a630:	40014000 	.word	0x40014000
 800a634:	40001800 	.word	0x40001800

0800a638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d122      	bne.n	800a694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d11b      	bne.n	800a694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0202 	mvn.w	r2, #2
 800a664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f9b5 	bl	800a9ea <HAL_TIM_IC_CaptureCallback>
 800a680:	e005      	b.n	800a68e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f9a7 	bl	800a9d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f9b8 	bl	800a9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0304 	and.w	r3, r3, #4
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0204 	mvn.w	r2, #4
 800a6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f98b 	bl	800a9ea <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f97d 	bl	800a9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f98e 	bl	800a9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b08      	cmp	r3, #8
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0208 	mvn.w	r2, #8
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2204      	movs	r2, #4
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f961 	bl	800a9ea <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f953 	bl	800a9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f964 	bl	800a9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0310 	and.w	r3, r3, #16
 800a746:	2b10      	cmp	r3, #16
 800a748:	d122      	bne.n	800a790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b10      	cmp	r3, #16
 800a756:	d11b      	bne.n	800a790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0210 	mvn.w	r2, #16
 800a760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2208      	movs	r2, #8
 800a766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f937 	bl	800a9ea <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f929 	bl	800a9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f93a 	bl	800a9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10e      	bne.n	800a7bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0201 	mvn.w	r2, #1
 800a7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7f6 fd36 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b80      	cmp	r3, #128	; 0x80
 800a7c8:	d10e      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d4:	2b80      	cmp	r3, #128	; 0x80
 800a7d6:	d107      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fae0 	bl	800ada8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d10e      	bne.n	800a814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d107      	bne.n	800a814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a80c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8ff 	bl	800aa12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0320 	and.w	r3, r3, #32
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d10e      	bne.n	800a840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d107      	bne.n	800a840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0220 	mvn.w	r2, #32
 800a838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 faaa 	bl	800ad94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <HAL_TIM_ConfigClockSource+0x1c>
 800a860:	2302      	movs	r3, #2
 800a862:	e0b4      	b.n	800a9ce <HAL_TIM_ConfigClockSource+0x186>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a88a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a89c:	d03e      	beq.n	800a91c <HAL_TIM_ConfigClockSource+0xd4>
 800a89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a2:	f200 8087 	bhi.w	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8aa:	f000 8086 	beq.w	800a9ba <HAL_TIM_ConfigClockSource+0x172>
 800a8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b2:	d87f      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b4:	2b70      	cmp	r3, #112	; 0x70
 800a8b6:	d01a      	beq.n	800a8ee <HAL_TIM_ConfigClockSource+0xa6>
 800a8b8:	2b70      	cmp	r3, #112	; 0x70
 800a8ba:	d87b      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8bc:	2b60      	cmp	r3, #96	; 0x60
 800a8be:	d050      	beq.n	800a962 <HAL_TIM_ConfigClockSource+0x11a>
 800a8c0:	2b60      	cmp	r3, #96	; 0x60
 800a8c2:	d877      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c4:	2b50      	cmp	r3, #80	; 0x50
 800a8c6:	d03c      	beq.n	800a942 <HAL_TIM_ConfigClockSource+0xfa>
 800a8c8:	2b50      	cmp	r3, #80	; 0x50
 800a8ca:	d873      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8cc:	2b40      	cmp	r3, #64	; 0x40
 800a8ce:	d058      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x13a>
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	d86f      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d4:	2b30      	cmp	r3, #48	; 0x30
 800a8d6:	d064      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8d8:	2b30      	cmp	r3, #48	; 0x30
 800a8da:	d86b      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d060      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	d867      	bhi.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d05c      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8e8:	2b10      	cmp	r3, #16
 800a8ea:	d05a      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8ec:	e062      	b.n	800a9b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	6899      	ldr	r1, [r3, #8]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f000 f9ad 	bl	800ac5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	609a      	str	r2, [r3, #8]
      break;
 800a91a:	e04f      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6899      	ldr	r1, [r3, #8]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f000 f996 	bl	800ac5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a93e:	609a      	str	r2, [r3, #8]
      break;
 800a940:	e03c      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	6859      	ldr	r1, [r3, #4]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	461a      	mov	r2, r3
 800a950:	f000 f90a 	bl	800ab68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2150      	movs	r1, #80	; 0x50
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f963 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a960:	e02c      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6859      	ldr	r1, [r3, #4]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	461a      	mov	r2, r3
 800a970:	f000 f929 	bl	800abc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2160      	movs	r1, #96	; 0x60
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 f953 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a980:	e01c      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6859      	ldr	r1, [r3, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	461a      	mov	r2, r3
 800a990:	f000 f8ea 	bl	800ab68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2140      	movs	r1, #64	; 0x40
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f943 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a9a0:	e00c      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f000 f93a 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a9b2:	e003      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b8:	e000      	b.n	800a9bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
	...

0800aa28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a40      	ldr	r2, [pc, #256]	; (800ab3c <TIM_Base_SetConfig+0x114>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d013      	beq.n	800aa68 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa46:	d00f      	beq.n	800aa68 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a3d      	ldr	r2, [pc, #244]	; (800ab40 <TIM_Base_SetConfig+0x118>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00b      	beq.n	800aa68 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a3c      	ldr	r2, [pc, #240]	; (800ab44 <TIM_Base_SetConfig+0x11c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d007      	beq.n	800aa68 <TIM_Base_SetConfig+0x40>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a3b      	ldr	r2, [pc, #236]	; (800ab48 <TIM_Base_SetConfig+0x120>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d003      	beq.n	800aa68 <TIM_Base_SetConfig+0x40>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a3a      	ldr	r2, [pc, #232]	; (800ab4c <TIM_Base_SetConfig+0x124>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d108      	bne.n	800aa7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a2f      	ldr	r2, [pc, #188]	; (800ab3c <TIM_Base_SetConfig+0x114>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d02b      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa88:	d027      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a2c      	ldr	r2, [pc, #176]	; (800ab40 <TIM_Base_SetConfig+0x118>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d023      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a2b      	ldr	r2, [pc, #172]	; (800ab44 <TIM_Base_SetConfig+0x11c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d01f      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <TIM_Base_SetConfig+0x120>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d01b      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a29      	ldr	r2, [pc, #164]	; (800ab4c <TIM_Base_SetConfig+0x124>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d017      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a28      	ldr	r2, [pc, #160]	; (800ab50 <TIM_Base_SetConfig+0x128>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d013      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a27      	ldr	r2, [pc, #156]	; (800ab54 <TIM_Base_SetConfig+0x12c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00f      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <TIM_Base_SetConfig+0x130>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00b      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a25      	ldr	r2, [pc, #148]	; (800ab5c <TIM_Base_SetConfig+0x134>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d007      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a24      	ldr	r2, [pc, #144]	; (800ab60 <TIM_Base_SetConfig+0x138>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d003      	beq.n	800aada <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a23      	ldr	r2, [pc, #140]	; (800ab64 <TIM_Base_SetConfig+0x13c>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d108      	bne.n	800aaec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <TIM_Base_SetConfig+0x114>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d003      	beq.n	800ab20 <TIM_Base_SetConfig+0xf8>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <TIM_Base_SetConfig+0x124>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d103      	bne.n	800ab28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	615a      	str	r2, [r3, #20]
}
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	40010000 	.word	0x40010000
 800ab40:	40000400 	.word	0x40000400
 800ab44:	40000800 	.word	0x40000800
 800ab48:	40000c00 	.word	0x40000c00
 800ab4c:	40010400 	.word	0x40010400
 800ab50:	40014000 	.word	0x40014000
 800ab54:	40014400 	.word	0x40014400
 800ab58:	40014800 	.word	0x40014800
 800ab5c:	40001800 	.word	0x40001800
 800ab60:	40001c00 	.word	0x40001c00
 800ab64:	40002000 	.word	0x40002000

0800ab68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0201 	bic.w	r2, r3, #1
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f023 030a 	bic.w	r3, r3, #10
 800aba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f023 0210 	bic.w	r2, r3, #16
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	031b      	lsls	r3, r3, #12
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	621a      	str	r2, [r3, #32]
}
 800ac1a:	bf00      	nop
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	f043 0307 	orr.w	r3, r3, #7
 800ac48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	609a      	str	r2, [r3, #8]
}
 800ac50:	bf00      	nop
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	021a      	lsls	r2, r3, #8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e05a      	b.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2202      	movs	r2, #2
 800acc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a21      	ldr	r2, [pc, #132]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d022      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad00:	d01d      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1d      	ldr	r2, [pc, #116]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d018      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a1b      	ldr	r2, [pc, #108]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a1a      	ldr	r2, [pc, #104]	; (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00e      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a17      	ldr	r2, [pc, #92]	; (800ad8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d004      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d10c      	bne.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40010000 	.word	0x40010000
 800ad7c:	40000400 	.word	0x40000400
 800ad80:	40000800 	.word	0x40000800
 800ad84:	40000c00 	.word	0x40000c00
 800ad88:	40010400 	.word	0x40010400
 800ad8c:	40014000 	.word	0x40014000
 800ad90:	40001800 	.word	0x40001800

0800ad94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e03f      	b.n	800ae4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7f6 fe10 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2224      	movs	r2, #36	; 0x24
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f829 	bl	800ae58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	691a      	ldr	r2, [r3, #16]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695a      	ldr	r2, [r3, #20]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae5c:	b0c0      	sub	sp, #256	; 0x100
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae74:	68d9      	ldr	r1, [r3, #12]
 800ae76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	ea40 0301 	orr.w	r3, r0, r1
 800ae80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	431a      	orrs	r2, r3
 800ae98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aeb0:	f021 010c 	bic.w	r1, r1, #12
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aebe:	430b      	orrs	r3, r1
 800aec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed2:	6999      	ldr	r1, [r3, #24]
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	ea40 0301 	orr.w	r3, r0, r1
 800aede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b8f      	ldr	r3, [pc, #572]	; (800b124 <UART_SetConfig+0x2cc>)
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d005      	beq.n	800aef8 <UART_SetConfig+0xa0>
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b8d      	ldr	r3, [pc, #564]	; (800b128 <UART_SetConfig+0x2d0>)
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d104      	bne.n	800af02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aef8:	f7fd fa8a 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800aefc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af00:	e003      	b.n	800af0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af02:	f7fd fa71 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800af06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af14:	f040 810c 	bne.w	800b130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	1891      	adds	r1, r2, r2
 800af30:	65b9      	str	r1, [r7, #88]	; 0x58
 800af32:	415b      	adcs	r3, r3
 800af34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af3a:	4621      	mov	r1, r4
 800af3c:	eb12 0801 	adds.w	r8, r2, r1
 800af40:	4629      	mov	r1, r5
 800af42:	eb43 0901 	adc.w	r9, r3, r1
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af5a:	4690      	mov	r8, r2
 800af5c:	4699      	mov	r9, r3
 800af5e:	4623      	mov	r3, r4
 800af60:	eb18 0303 	adds.w	r3, r8, r3
 800af64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af68:	462b      	mov	r3, r5
 800af6a:	eb49 0303 	adc.w	r3, r9, r3
 800af6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af86:	460b      	mov	r3, r1
 800af88:	18db      	adds	r3, r3, r3
 800af8a:	653b      	str	r3, [r7, #80]	; 0x50
 800af8c:	4613      	mov	r3, r2
 800af8e:	eb42 0303 	adc.w	r3, r2, r3
 800af92:	657b      	str	r3, [r7, #84]	; 0x54
 800af94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af9c:	f7f5 f930 	bl	8000200 <__aeabi_uldivmod>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4b61      	ldr	r3, [pc, #388]	; (800b12c <UART_SetConfig+0x2d4>)
 800afa6:	fba3 2302 	umull	r2, r3, r3, r2
 800afaa:	095b      	lsrs	r3, r3, #5
 800afac:	011c      	lsls	r4, r3, #4
 800afae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800afbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	1891      	adds	r1, r2, r2
 800afc6:	64b9      	str	r1, [r7, #72]	; 0x48
 800afc8:	415b      	adcs	r3, r3
 800afca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afd0:	4641      	mov	r1, r8
 800afd2:	eb12 0a01 	adds.w	sl, r2, r1
 800afd6:	4649      	mov	r1, r9
 800afd8:	eb43 0b01 	adc.w	fp, r3, r1
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aff0:	4692      	mov	sl, r2
 800aff2:	469b      	mov	fp, r3
 800aff4:	4643      	mov	r3, r8
 800aff6:	eb1a 0303 	adds.w	r3, sl, r3
 800affa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800affe:	464b      	mov	r3, r9
 800b000:	eb4b 0303 	adc.w	r3, fp, r3
 800b004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b01c:	460b      	mov	r3, r1
 800b01e:	18db      	adds	r3, r3, r3
 800b020:	643b      	str	r3, [r7, #64]	; 0x40
 800b022:	4613      	mov	r3, r2
 800b024:	eb42 0303 	adc.w	r3, r2, r3
 800b028:	647b      	str	r3, [r7, #68]	; 0x44
 800b02a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b02e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b032:	f7f5 f8e5 	bl	8000200 <__aeabi_uldivmod>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4611      	mov	r1, r2
 800b03c:	4b3b      	ldr	r3, [pc, #236]	; (800b12c <UART_SetConfig+0x2d4>)
 800b03e:	fba3 2301 	umull	r2, r3, r3, r1
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	2264      	movs	r2, #100	; 0x64
 800b046:	fb02 f303 	mul.w	r3, r2, r3
 800b04a:	1acb      	subs	r3, r1, r3
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b052:	4b36      	ldr	r3, [pc, #216]	; (800b12c <UART_SetConfig+0x2d4>)
 800b054:	fba3 2302 	umull	r2, r3, r3, r2
 800b058:	095b      	lsrs	r3, r3, #5
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b060:	441c      	add	r4, r3
 800b062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b066:	2200      	movs	r2, #0
 800b068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b06c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b074:	4642      	mov	r2, r8
 800b076:	464b      	mov	r3, r9
 800b078:	1891      	adds	r1, r2, r2
 800b07a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b07c:	415b      	adcs	r3, r3
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b084:	4641      	mov	r1, r8
 800b086:	1851      	adds	r1, r2, r1
 800b088:	6339      	str	r1, [r7, #48]	; 0x30
 800b08a:	4649      	mov	r1, r9
 800b08c:	414b      	adcs	r3, r1
 800b08e:	637b      	str	r3, [r7, #52]	; 0x34
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b09c:	4659      	mov	r1, fp
 800b09e:	00cb      	lsls	r3, r1, #3
 800b0a0:	4651      	mov	r1, sl
 800b0a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0a6:	4651      	mov	r1, sl
 800b0a8:	00ca      	lsls	r2, r1, #3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	189b      	adds	r3, r3, r2
 800b0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0b8:	464b      	mov	r3, r9
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	eb42 0303 	adc.w	r3, r2, r3
 800b0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0d8:	460b      	mov	r3, r1
 800b0da:	18db      	adds	r3, r3, r3
 800b0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0de:	4613      	mov	r3, r2
 800b0e0:	eb42 0303 	adc.w	r3, r2, r3
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0ee:	f7f5 f887 	bl	8000200 <__aeabi_uldivmod>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <UART_SetConfig+0x2d4>)
 800b0f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0fc:	095b      	lsrs	r3, r3, #5
 800b0fe:	2164      	movs	r1, #100	; 0x64
 800b100:	fb01 f303 	mul.w	r3, r1, r3
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	3332      	adds	r3, #50	; 0x32
 800b10a:	4a08      	ldr	r2, [pc, #32]	; (800b12c <UART_SetConfig+0x2d4>)
 800b10c:	fba2 2303 	umull	r2, r3, r2, r3
 800b110:	095b      	lsrs	r3, r3, #5
 800b112:	f003 0207 	and.w	r2, r3, #7
 800b116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4422      	add	r2, r4
 800b11e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b120:	e105      	b.n	800b32e <UART_SetConfig+0x4d6>
 800b122:	bf00      	nop
 800b124:	40011000 	.word	0x40011000
 800b128:	40011400 	.word	0x40011400
 800b12c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b134:	2200      	movs	r2, #0
 800b136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b13a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b13e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b142:	4642      	mov	r2, r8
 800b144:	464b      	mov	r3, r9
 800b146:	1891      	adds	r1, r2, r2
 800b148:	6239      	str	r1, [r7, #32]
 800b14a:	415b      	adcs	r3, r3
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
 800b14e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b152:	4641      	mov	r1, r8
 800b154:	1854      	adds	r4, r2, r1
 800b156:	4649      	mov	r1, r9
 800b158:	eb43 0501 	adc.w	r5, r3, r1
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	00eb      	lsls	r3, r5, #3
 800b166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b16a:	00e2      	lsls	r2, r4, #3
 800b16c:	4614      	mov	r4, r2
 800b16e:	461d      	mov	r5, r3
 800b170:	4643      	mov	r3, r8
 800b172:	18e3      	adds	r3, r4, r3
 800b174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b178:	464b      	mov	r3, r9
 800b17a:	eb45 0303 	adc.w	r3, r5, r3
 800b17e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b18e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b19e:	4629      	mov	r1, r5
 800b1a0:	008b      	lsls	r3, r1, #2
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	008a      	lsls	r2, r1, #2
 800b1ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1b0:	f7f5 f826 	bl	8000200 <__aeabi_uldivmod>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4b60      	ldr	r3, [pc, #384]	; (800b33c <UART_SetConfig+0x4e4>)
 800b1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	011c      	lsls	r4, r3, #4
 800b1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	1891      	adds	r1, r2, r2
 800b1da:	61b9      	str	r1, [r7, #24]
 800b1dc:	415b      	adcs	r3, r3
 800b1de:	61fb      	str	r3, [r7, #28]
 800b1e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1e4:	4641      	mov	r1, r8
 800b1e6:	1851      	adds	r1, r2, r1
 800b1e8:	6139      	str	r1, [r7, #16]
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	414b      	adcs	r3, r1
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	00cb      	lsls	r3, r1, #3
 800b200:	4651      	mov	r1, sl
 800b202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b206:	4651      	mov	r1, sl
 800b208:	00ca      	lsls	r2, r1, #3
 800b20a:	4610      	mov	r0, r2
 800b20c:	4619      	mov	r1, r3
 800b20e:	4603      	mov	r3, r0
 800b210:	4642      	mov	r2, r8
 800b212:	189b      	adds	r3, r3, r2
 800b214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b218:	464b      	mov	r3, r9
 800b21a:	460a      	mov	r2, r1
 800b21c:	eb42 0303 	adc.w	r3, r2, r3
 800b220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b22e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b230:	f04f 0200 	mov.w	r2, #0
 800b234:	f04f 0300 	mov.w	r3, #0
 800b238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b23c:	4649      	mov	r1, r9
 800b23e:	008b      	lsls	r3, r1, #2
 800b240:	4641      	mov	r1, r8
 800b242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b246:	4641      	mov	r1, r8
 800b248:	008a      	lsls	r2, r1, #2
 800b24a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b24e:	f7f4 ffd7 	bl	8000200 <__aeabi_uldivmod>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4b39      	ldr	r3, [pc, #228]	; (800b33c <UART_SetConfig+0x4e4>)
 800b258:	fba3 1302 	umull	r1, r3, r3, r2
 800b25c:	095b      	lsrs	r3, r3, #5
 800b25e:	2164      	movs	r1, #100	; 0x64
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	3332      	adds	r3, #50	; 0x32
 800b26a:	4a34      	ldr	r2, [pc, #208]	; (800b33c <UART_SetConfig+0x4e4>)
 800b26c:	fba2 2303 	umull	r2, r3, r2, r3
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b276:	441c      	add	r4, r3
 800b278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b27c:	2200      	movs	r2, #0
 800b27e:	673b      	str	r3, [r7, #112]	; 0x70
 800b280:	677a      	str	r2, [r7, #116]	; 0x74
 800b282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b286:	4642      	mov	r2, r8
 800b288:	464b      	mov	r3, r9
 800b28a:	1891      	adds	r1, r2, r2
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	415b      	adcs	r3, r3
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b296:	4641      	mov	r1, r8
 800b298:	1851      	adds	r1, r2, r1
 800b29a:	6039      	str	r1, [r7, #0]
 800b29c:	4649      	mov	r1, r9
 800b29e:	414b      	adcs	r3, r1
 800b2a0:	607b      	str	r3, [r7, #4]
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	f04f 0300 	mov.w	r3, #0
 800b2aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	00cb      	lsls	r3, r1, #3
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2b8:	4651      	mov	r1, sl
 800b2ba:	00ca      	lsls	r2, r1, #3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	4642      	mov	r2, r8
 800b2c4:	189b      	adds	r3, r3, r2
 800b2c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	460a      	mov	r2, r1
 800b2cc:	eb42 0303 	adc.w	r3, r2, r3
 800b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	663b      	str	r3, [r7, #96]	; 0x60
 800b2dc:	667a      	str	r2, [r7, #100]	; 0x64
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	008b      	lsls	r3, r1, #2
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2f4:	4641      	mov	r1, r8
 800b2f6:	008a      	lsls	r2, r1, #2
 800b2f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2fc:	f7f4 ff80 	bl	8000200 <__aeabi_uldivmod>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <UART_SetConfig+0x4e4>)
 800b306:	fba3 1302 	umull	r1, r3, r3, r2
 800b30a:	095b      	lsrs	r3, r3, #5
 800b30c:	2164      	movs	r1, #100	; 0x64
 800b30e:	fb01 f303 	mul.w	r3, r1, r3
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	3332      	adds	r3, #50	; 0x32
 800b318:	4a08      	ldr	r2, [pc, #32]	; (800b33c <UART_SetConfig+0x4e4>)
 800b31a:	fba2 2303 	umull	r2, r3, r2, r3
 800b31e:	095b      	lsrs	r3, r3, #5
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4422      	add	r2, r4
 800b32c:	609a      	str	r2, [r3, #8]
}
 800b32e:	bf00      	nop
 800b330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b334:	46bd      	mov	sp, r7
 800b336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b33a:	bf00      	nop
 800b33c:	51eb851f 	.word	0x51eb851f

0800b340 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d123      	bne.n	800b39a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b35a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	6851      	ldr	r1, [r2, #4]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	6892      	ldr	r2, [r2, #8]
 800b366:	4311      	orrs	r1, r2
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	68d2      	ldr	r2, [r2, #12]
 800b36c:	4311      	orrs	r1, r2
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	6912      	ldr	r2, [r2, #16]
 800b372:	4311      	orrs	r1, r2
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	6952      	ldr	r2, [r2, #20]
 800b378:	4311      	orrs	r1, r2
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	6992      	ldr	r2, [r2, #24]
 800b37e:	4311      	orrs	r1, r2
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	69d2      	ldr	r2, [r2, #28]
 800b384:	4311      	orrs	r1, r2
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	6a12      	ldr	r2, [r2, #32]
 800b38a:	4311      	orrs	r1, r2
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b390:	430a      	orrs	r2, r1
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e028      	b.n	800b3ec <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	69d9      	ldr	r1, [r3, #28]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	4319      	orrs	r1, r3
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b3c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	6851      	ldr	r1, [r2, #4]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	6892      	ldr	r2, [r2, #8]
 800b3cc:	4311      	orrs	r1, r2
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	68d2      	ldr	r2, [r2, #12]
 800b3d2:	4311      	orrs	r1, r2
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	6912      	ldr	r2, [r2, #16]
 800b3d8:	4311      	orrs	r1, r2
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	6952      	ldr	r2, [r2, #20]
 800b3de:	4311      	orrs	r1, r2
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	6992      	ldr	r2, [r2, #24]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d128      	bne.n	800b45e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	1e59      	subs	r1, r3, #1
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	3b01      	subs	r3, #1
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	4319      	orrs	r1, r3
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	3b01      	subs	r3, #1
 800b42a:	021b      	lsls	r3, r3, #8
 800b42c:	4319      	orrs	r1, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	3b01      	subs	r3, #1
 800b434:	031b      	lsls	r3, r3, #12
 800b436:	4319      	orrs	r1, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	041b      	lsls	r3, r3, #16
 800b440:	4319      	orrs	r1, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	3b01      	subs	r3, #1
 800b448:	051b      	lsls	r3, r3, #20
 800b44a:	4319      	orrs	r1, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	3b01      	subs	r3, #1
 800b452:	061b      	lsls	r3, r3, #24
 800b454:	430b      	orrs	r3, r1
 800b456:	431a      	orrs	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	609a      	str	r2, [r3, #8]
 800b45c:	e02f      	b.n	800b4be <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	68d2      	ldr	r2, [r2, #12]
 800b46e:	3a01      	subs	r2, #1
 800b470:	0311      	lsls	r1, r2, #12
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	6952      	ldr	r2, [r2, #20]
 800b476:	3a01      	subs	r2, #1
 800b478:	0512      	lsls	r2, r2, #20
 800b47a:	430a      	orrs	r2, r1
 800b47c:	431a      	orrs	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	1e59      	subs	r1, r3, #1
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	3b01      	subs	r3, #1
 800b496:	011b      	lsls	r3, r3, #4
 800b498:	4319      	orrs	r1, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	021b      	lsls	r3, r3, #8
 800b4a2:	4319      	orrs	r1, r3
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	041b      	lsls	r3, r3, #16
 800b4ac:	4319      	orrs	r1, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	061b      	lsls	r3, r3, #24
 800b4b6:	430b      	orrs	r3, r1
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	0d9b      	lsrs	r3, r3, #22
 800b4e2:	059b      	lsls	r3, r3, #22
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	6811      	ldr	r1, [r2, #0]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	6852      	ldr	r2, [r2, #4]
 800b4ec:	4311      	orrs	r1, r2
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	6892      	ldr	r2, [r2, #8]
 800b4f2:	3a01      	subs	r2, #1
 800b4f4:	0152      	lsls	r2, r2, #5
 800b4f6:	4311      	orrs	r1, r2
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	68d2      	ldr	r2, [r2, #12]
 800b4fc:	0252      	lsls	r2, r2, #9
 800b4fe:	430a      	orrs	r2, r1
 800b500:	431a      	orrs	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b506:	f7f8 fae7 	bl	8003ad8 <HAL_GetTick>
 800b50a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b50c:	e010      	b.n	800b530 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d00c      	beq.n	800b530 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d007      	beq.n	800b52c <FMC_SDRAM_SendCommand+0x60>
 800b51c:	f7f8 fadc 	bl	8003ad8 <HAL_GetTick>
 800b520:	4602      	mov	r2, r0
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d201      	bcs.n	800b530 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e006      	b.n	800b53e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b20      	cmp	r3, #32
 800b53a:	d0e8      	beq.n	800b50e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b546:	b480      	push	{r7}
 800b548:	b083      	sub	sp, #12
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b558:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	0052      	lsls	r2, r2, #1
 800b560:	431a      	orrs	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b574:	b084      	sub	sp, #16
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	f107 001c 	add.w	r0, r7, #28
 800b582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b58a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b58c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b58e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b592:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b596:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b59a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b59e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b5ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	b004      	add	sp, #16
 800b5c8:	4770      	bx	lr

0800b5ca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2203      	movs	r2, #3
 800b5f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0303 	and.w	r3, r3, #3
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b63a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b640:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b646:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b656:	f023 030f 	bic.w	r3, r3, #15
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	431a      	orrs	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	b2db      	uxtb	r3, r3
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b085      	sub	sp, #20
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3314      	adds	r3, #20
 800b698:	461a      	mov	r2, r3
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
}  
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b6d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b6dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b6e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0

}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b716:	2310      	movs	r3, #16
 800b718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b726:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff ff74 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b734:	f241 3288 	movw	r2, #5000	; 0x1388
 800b738:	2110      	movs	r1, #16
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa18 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b742:	69fb      	ldr	r3, [r7, #28]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b75a:	2311      	movs	r3, #17
 800b75c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b76a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b76c:	f107 0308 	add.w	r3, r7, #8
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff ff52 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b778:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77c:	2111      	movs	r1, #17
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f9f6 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b79e:	2312      	movs	r3, #18
 800b7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7a2:	2340      	movs	r3, #64	; 0x40
 800b7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7b0:	f107 0308 	add.w	r3, r7, #8
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7ff ff30 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c0:	2112      	movs	r1, #18
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9d4 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ca:	69fb      	ldr	r3, [r7, #28]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b7e2:	2318      	movs	r3, #24
 800b7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7e6:	2340      	movs	r3, #64	; 0x40
 800b7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff ff0e 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b800:	f241 3288 	movw	r2, #5000	; 0x1388
 800b804:	2118      	movs	r1, #24
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f9b2 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b80c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b80e:	69fb      	ldr	r3, [r7, #28]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b826:	2319      	movs	r3, #25
 800b828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b836:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff feec 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b844:	f241 3288 	movw	r2, #5000	; 0x1388
 800b848:	2119      	movs	r1, #25
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f990 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b852:	69fb      	ldr	r3, [r7, #28]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b868:	230c      	movs	r3, #12
 800b86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b86c:	2340      	movs	r3, #64	; 0x40
 800b86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b87a:	f107 0308 	add.w	r3, r7, #8
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fecb 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b886:	4a05      	ldr	r2, [pc, #20]	; (800b89c <SDMMC_CmdStopTransfer+0x40>)
 800b888:	210c      	movs	r1, #12
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f970 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	05f5e100 	.word	0x05f5e100

0800b8a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	; 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b8b0:	2307      	movs	r3, #7
 800b8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8c2:	f107 0310 	add.w	r3, r7, #16
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f7ff fea7 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b8ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d2:	2107      	movs	r1, #7
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f94b 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b8da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3728      	adds	r7, #40	; 0x28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b088      	sub	sp, #32
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fe86 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fb65 	bl	800bfe0 <SDMMC_GetCmdError>
 800b916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b918:	69fb      	ldr	r3, [r7, #28]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b088      	sub	sp, #32
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b92a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b930:	2308      	movs	r3, #8
 800b932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b938:	2300      	movs	r3, #0
 800b93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b942:	f107 0308 	add.w	r3, r7, #8
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff fe67 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 faf8 	bl	800bf44 <SDMMC_GetCmdResp7>
 800b954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b956:	69fb      	ldr	r3, [r7, #28]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b96e:	2337      	movs	r3, #55	; 0x37
 800b970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b972:	2340      	movs	r3, #64	; 0x40
 800b974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b97a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b97e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b980:	f107 0308 	add.w	r3, r7, #8
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff fe48 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b990:	2137      	movs	r1, #55	; 0x37
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f8ec 	bl	800bb70 <SDMMC_GetCmdResp1>
 800b998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b99a:	69fb      	ldr	r3, [r7, #28]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b9ba:	2329      	movs	r3, #41	; 0x29
 800b9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9be:	2340      	movs	r3, #64	; 0x40
 800b9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9cc:	f107 0308 	add.w	r3, r7, #8
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff fe22 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f9ff 	bl	800bddc <SDMMC_GetCmdResp3>
 800b9de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3720      	adds	r7, #32
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b088      	sub	sp, #32
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b9f8:	2306      	movs	r3, #6
 800b9fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9fc:	2340      	movs	r3, #64	; 0x40
 800b9fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba00:	2300      	movs	r3, #0
 800ba02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba0a:	f107 0308 	add.w	r3, r7, #8
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff fe03 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ba16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba1a:	2106      	movs	r1, #6
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f8a7 	bl	800bb70 <SDMMC_GetCmdResp1>
 800ba22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba24:	69fb      	ldr	r3, [r7, #28]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3720      	adds	r7, #32
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ba3a:	2333      	movs	r3, #51	; 0x33
 800ba3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba3e:	2340      	movs	r3, #64	; 0x40
 800ba40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba4c:	f107 0308 	add.w	r3, r7, #8
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fde2 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ba58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5c:	2133      	movs	r1, #51	; 0x33
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f886 	bl	800bb70 <SDMMC_GetCmdResp1>
 800ba64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba66:	69fb      	ldr	r3, [r7, #28]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3720      	adds	r7, #32
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ba80:	23c0      	movs	r3, #192	; 0xc0
 800ba82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba8e:	f107 0308 	add.w	r3, r7, #8
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fdc1 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f956 	bl	800bd4c <SDMMC_GetCmdResp2>
 800baa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa2:	69fb      	ldr	r3, [r7, #28]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800baba:	2309      	movs	r3, #9
 800babc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800babe:	23c0      	movs	r3, #192	; 0xc0
 800bac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bacc:	f107 0308 	add.w	r3, r7, #8
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff fda2 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f937 	bl	800bd4c <SDMMC_GetCmdResp2>
 800bade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bae0:	69fb      	ldr	r3, [r7, #28]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b088      	sub	sp, #32
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800baf8:	2303      	movs	r3, #3
 800bafa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bafc:	2340      	movs	r3, #64	; 0x40
 800bafe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb0a:	f107 0308 	add.w	r3, r7, #8
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff fd83 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	2103      	movs	r1, #3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f99c 	bl	800be58 <SDMMC_GetCmdResp6>
 800bb20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb22:	69fb      	ldr	r3, [r7, #28]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bb3a:	230d      	movs	r3, #13
 800bb3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fd62 	bl	800b61c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bb58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb5c:	210d      	movs	r1, #13
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f806 	bl	800bb70 <SDMMC_GetCmdResp1>
 800bb64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bb7e:	4b70      	ldr	r3, [pc, #448]	; (800bd40 <SDMMC_GetCmdResp1+0x1d0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a70      	ldr	r2, [pc, #448]	; (800bd44 <SDMMC_GetCmdResp1+0x1d4>)
 800bb84:	fba2 2303 	umull	r2, r3, r2, r3
 800bb88:	0a5a      	lsrs	r2, r3, #9
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	fb02 f303 	mul.w	r3, r2, r3
 800bb90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	1e5a      	subs	r2, r3, #1
 800bb96:	61fa      	str	r2, [r7, #28]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bba0:	e0c9      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0ef      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x22>
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1ea      	bne.n	800bb92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc0:	f003 0304 	and.w	r3, r3, #4
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2204      	movs	r2, #4
 800bbcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbce:	2304      	movs	r3, #4
 800bbd0:	e0b1      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d004      	beq.n	800bbe8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e0a6      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	22c5      	movs	r2, #197	; 0xc5
 800bbec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff fd3e 	bl	800b670 <SDIO_GetCommandResponse>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d001      	beq.n	800bc02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e099      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bc02:	2100      	movs	r1, #0
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f7ff fd40 	bl	800b68a <SDIO_GetResponse>
 800bc0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	4b4e      	ldr	r3, [pc, #312]	; (800bd48 <SDMMC_GetCmdResp1+0x1d8>)
 800bc10:	4013      	ands	r3, r2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bc16:	2300      	movs	r3, #0
 800bc18:	e08d      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	da02      	bge.n	800bc26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bc20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc24:	e087      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bc30:	2340      	movs	r3, #64	; 0x40
 800bc32:	e080      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bc3e:	2380      	movs	r3, #128	; 0x80
 800bc40:	e079      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bc4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc50:	e071      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc60:	e069      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d002      	beq.n	800bc72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc70:	e061      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc80:	e059      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc90:	e051      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bca0:	e049      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bcac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bcb0:	e041      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bcbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc0:	e039      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bcd0:	e031      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bcdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bce0:	e029      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bcec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcf0:	e021      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bcfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd00:	e019      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd10:	e011      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bd1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd20:	e009      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f003 0308 	and.w	r3, r3, #8
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bd2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bd30:	e001      	b.n	800bd36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3720      	adds	r7, #32
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000020 	.word	0x20000020
 800bd44:	10624dd3 	.word	0x10624dd3
 800bd48:	fdffe008 	.word	0xfdffe008

0800bd4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd54:	4b1f      	ldr	r3, [pc, #124]	; (800bdd4 <SDMMC_GetCmdResp2+0x88>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a1f      	ldr	r2, [pc, #124]	; (800bdd8 <SDMMC_GetCmdResp2+0x8c>)
 800bd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5e:	0a5b      	lsrs	r3, r3, #9
 800bd60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd64:	fb02 f303 	mul.w	r3, r2, r3
 800bd68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	60fa      	str	r2, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd78:	e026      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0ef      	beq.n	800bd6a <SDMMC_GetCmdResp2+0x1e>
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1ea      	bne.n	800bd6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d004      	beq.n	800bdaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2204      	movs	r2, #4
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bda6:	2304      	movs	r3, #4
 800bda8:	e00e      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e003      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	22c5      	movs	r2, #197	; 0xc5
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	20000020 	.word	0x20000020
 800bdd8:	10624dd3 	.word	0x10624dd3

0800bddc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bde4:	4b1a      	ldr	r3, [pc, #104]	; (800be50 <SDMMC_GetCmdResp3+0x74>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <SDMMC_GetCmdResp3+0x78>)
 800bdea:	fba2 2303 	umull	r2, r3, r2, r3
 800bdee:	0a5b      	lsrs	r3, r3, #9
 800bdf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf4:	fb02 f303 	mul.w	r3, r2, r3
 800bdf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	1e5a      	subs	r2, r3, #1
 800bdfe:	60fa      	str	r2, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d102      	bne.n	800be0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be08:	e01b      	b.n	800be42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0ef      	beq.n	800bdfa <SDMMC_GetCmdResp3+0x1e>
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1ea      	bne.n	800bdfa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d004      	beq.n	800be3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2204      	movs	r2, #4
 800be34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be36:	2304      	movs	r3, #4
 800be38:	e003      	b.n	800be42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	22c5      	movs	r2, #197	; 0xc5
 800be3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20000020 	.word	0x20000020
 800be54:	10624dd3 	.word	0x10624dd3

0800be58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	460b      	mov	r3, r1
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be66:	4b35      	ldr	r3, [pc, #212]	; (800bf3c <SDMMC_GetCmdResp6+0xe4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a35      	ldr	r2, [pc, #212]	; (800bf40 <SDMMC_GetCmdResp6+0xe8>)
 800be6c:	fba2 2303 	umull	r2, r3, r2, r3
 800be70:	0a5b      	lsrs	r3, r3, #9
 800be72:	f241 3288 	movw	r2, #5000	; 0x1388
 800be76:	fb02 f303 	mul.w	r3, r2, r3
 800be7a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	1e5a      	subs	r2, r3, #1
 800be80:	61fa      	str	r2, [r7, #28]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d102      	bne.n	800be8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be8a:	e052      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0ef      	beq.n	800be7c <SDMMC_GetCmdResp6+0x24>
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1ea      	bne.n	800be7c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	f003 0304 	and.w	r3, r3, #4
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d004      	beq.n	800bebc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2204      	movs	r2, #4
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beb8:	2304      	movs	r3, #4
 800beba:	e03a      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bece:	2301      	movs	r3, #1
 800bed0:	e02f      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fbcc 	bl	800b670 <SDIO_GetCommandResponse>
 800bed8:	4603      	mov	r3, r0
 800beda:	461a      	mov	r2, r3
 800bedc:	7afb      	ldrb	r3, [r7, #11]
 800bede:	4293      	cmp	r3, r2
 800bee0:	d001      	beq.n	800bee6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e025      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	22c5      	movs	r2, #197	; 0xc5
 800beea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800beec:	2100      	movs	r1, #0
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fbcb 	bl	800b68a <SDIO_GetResponse>
 800bef4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	0c1b      	lsrs	r3, r3, #16
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e011      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf1c:	e009      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf2c:	e001      	b.n	800bf32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000020 	.word	0x20000020
 800bf40:	10624dd3 	.word	0x10624dd3

0800bf44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf4c:	4b22      	ldr	r3, [pc, #136]	; (800bfd8 <SDMMC_GetCmdResp7+0x94>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a22      	ldr	r2, [pc, #136]	; (800bfdc <SDMMC_GetCmdResp7+0x98>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	0a5b      	lsrs	r3, r3, #9
 800bf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	60fa      	str	r2, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d102      	bne.n	800bf72 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf70:	e02c      	b.n	800bfcc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0ef      	beq.n	800bf62 <SDMMC_GetCmdResp7+0x1e>
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1ea      	bne.n	800bf62 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf9e:	2304      	movs	r3, #4
 800bfa0:	e014      	b.n	800bfcc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d004      	beq.n	800bfb8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e009      	b.n	800bfcc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2240      	movs	r2, #64	; 0x40
 800bfc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bfca:	2300      	movs	r3, #0
  
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20000020 	.word	0x20000020
 800bfdc:	10624dd3 	.word	0x10624dd3

0800bfe0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfe8:	4b11      	ldr	r3, [pc, #68]	; (800c030 <SDMMC_GetCmdError+0x50>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a11      	ldr	r2, [pc, #68]	; (800c034 <SDMMC_GetCmdError+0x54>)
 800bfee:	fba2 2303 	umull	r2, r3, r2, r3
 800bff2:	0a5b      	lsrs	r3, r3, #9
 800bff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
 800bffc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	1e5a      	subs	r2, r3, #1
 800c002:	60fa      	str	r2, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c00c:	e009      	b.n	800c022 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0f1      	beq.n	800bffe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	22c5      	movs	r2, #197	; 0xc5
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	20000020 	.word	0x20000020
 800c034:	10624dd3 	.word	0x10624dd3

0800c038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c038:	b084      	sub	sp, #16
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	f107 001c 	add.w	r0, r7, #28
 800c046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d122      	bne.n	800c096 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d105      	bne.n	800c08a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f9c0 	bl	800c410 <USB_CoreReset>
 800c090:	4603      	mov	r3, r0
 800c092:	73fb      	strb	r3, [r7, #15]
 800c094:	e01a      	b.n	800c0cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f9b4 	bl	800c410 <USB_CoreReset>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
 800c0be:	e005      	b.n	800c0cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d10b      	bne.n	800c0ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f043 0206 	orr.w	r2, r3, #6
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f043 0220 	orr.w	r2, r3, #32
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0f6:	b004      	add	sp, #16
 800c0f8:	4770      	bx	lr

0800c0fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	f043 0201 	orr.w	r2, r3, #1
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f023 0201 	bic.w	r2, r3, #1
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	460b      	mov	r3, r1
 800c148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c15a:	78fb      	ldrb	r3, [r7, #3]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d115      	bne.n	800c18c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c16c:	2001      	movs	r0, #1
 800c16e:	f7f7 fcbf 	bl	8003af0 <HAL_Delay>
      ms++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f93a 	bl	800c3f2 <USB_GetMode>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b01      	cmp	r3, #1
 800c182:	d01e      	beq.n	800c1c2 <USB_SetCurrentMode+0x84>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b31      	cmp	r3, #49	; 0x31
 800c188:	d9f0      	bls.n	800c16c <USB_SetCurrentMode+0x2e>
 800c18a:	e01a      	b.n	800c1c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d115      	bne.n	800c1be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c19e:	2001      	movs	r0, #1
 800c1a0:	f7f7 fca6 	bl	8003af0 <HAL_Delay>
      ms++;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f921 	bl	800c3f2 <USB_GetMode>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <USB_SetCurrentMode+0x84>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b31      	cmp	r3, #49	; 0x31
 800c1ba:	d9f0      	bls.n	800c19e <USB_SetCurrentMode+0x60>
 800c1bc:	e001      	b.n	800c1c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e005      	b.n	800c1ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b32      	cmp	r3, #50	; 0x32
 800c1c6:	d101      	bne.n	800c1cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e000      	b.n	800c1ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4a13      	ldr	r2, [pc, #76]	; (800c23c <USB_FlushTxFifo+0x64>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d901      	bls.n	800c1f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e01b      	b.n	800c230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	daf2      	bge.n	800c1e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c200:	2300      	movs	r3, #0
 800c202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	019b      	lsls	r3, r3, #6
 800c208:	f043 0220 	orr.w	r2, r3, #32
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3301      	adds	r3, #1
 800c214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4a08      	ldr	r2, [pc, #32]	; (800c23c <USB_FlushTxFifo+0x64>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d901      	bls.n	800c222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c21e:	2303      	movs	r3, #3
 800c220:	e006      	b.n	800c230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	f003 0320 	and.w	r3, r3, #32
 800c22a:	2b20      	cmp	r3, #32
 800c22c:	d0f0      	beq.n	800c210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	00030d40 	.word	0x00030d40

0800c240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4a11      	ldr	r2, [pc, #68]	; (800c29c <USB_FlushRxFifo+0x5c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d901      	bls.n	800c25e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c25a:	2303      	movs	r3, #3
 800c25c:	e018      	b.n	800c290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	daf2      	bge.n	800c24c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2210      	movs	r2, #16
 800c26e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3301      	adds	r3, #1
 800c274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4a08      	ldr	r2, [pc, #32]	; (800c29c <USB_FlushRxFifo+0x5c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d901      	bls.n	800c282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c27e:	2303      	movs	r3, #3
 800c280:	e006      	b.n	800c290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	f003 0310 	and.w	r3, r3, #16
 800c28a:	2b10      	cmp	r3, #16
 800c28c:	d0f0      	beq.n	800c270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	00030d40 	.word	0x00030d40

0800c2a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b089      	sub	sp, #36	; 0x24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	71fb      	strb	r3, [r7, #7]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c2be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d123      	bne.n	800c30e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c2c6:	88bb      	ldrh	r3, [r7, #4]
 800c2c8:	3303      	adds	r3, #3
 800c2ca:	089b      	lsrs	r3, r3, #2
 800c2cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	e018      	b.n	800c306 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	031a      	lsls	r2, r3, #12
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	3301      	adds	r3, #1
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	69ba      	ldr	r2, [r7, #24]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d3e2      	bcc.n	800c2d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3724      	adds	r7, #36	; 0x24
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b08b      	sub	sp, #44	; 0x2c
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c332:	88fb      	ldrh	r3, [r7, #6]
 800c334:	089b      	lsrs	r3, r3, #2
 800c336:	b29b      	uxth	r3, r3
 800c338:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	f003 0303 	and.w	r3, r3, #3
 800c340:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c342:	2300      	movs	r3, #0
 800c344:	623b      	str	r3, [r7, #32]
 800c346:	e014      	b.n	800c372 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	601a      	str	r2, [r3, #0]
    pDest++;
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	3301      	adds	r3, #1
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35c:	3301      	adds	r3, #1
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	3301      	adds	r3, #1
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	3301      	adds	r3, #1
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	3301      	adds	r3, #1
 800c370:	623b      	str	r3, [r7, #32]
 800c372:	6a3a      	ldr	r2, [r7, #32]
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	429a      	cmp	r2, r3
 800c378:	d3e6      	bcc.n	800c348 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c37a:	8bfb      	ldrh	r3, [r7, #30]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01e      	beq.n	800c3be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38a:	461a      	mov	r2, r3
 800c38c:	f107 0310 	add.w	r3, r7, #16
 800c390:	6812      	ldr	r2, [r2, #0]
 800c392:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	701a      	strb	r2, [r3, #0]
      i++;
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c3b2:	8bfb      	ldrh	r3, [r7, #30]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c3b8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1ea      	bne.n	800c394 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	372c      	adds	r7, #44	; 0x2c
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b083      	sub	sp, #12
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	f003 0301 	and.w	r3, r3, #1
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3301      	adds	r3, #1
 800c420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	4a13      	ldr	r2, [pc, #76]	; (800c474 <USB_CoreReset+0x64>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d901      	bls.n	800c42e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e01b      	b.n	800c466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	daf2      	bge.n	800c41c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f043 0201 	orr.w	r2, r3, #1
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	4a09      	ldr	r2, [pc, #36]	; (800c474 <USB_CoreReset+0x64>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d901      	bls.n	800c458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c454:	2303      	movs	r3, #3
 800c456:	e006      	b.n	800c466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	f003 0301 	and.w	r3, r3, #1
 800c460:	2b01      	cmp	r3, #1
 800c462:	d0f0      	beq.n	800c446 <USB_CoreReset+0x36>

  return HAL_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	00030d40 	.word	0x00030d40

0800c478 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c478:	b084      	sub	sp, #16
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b086      	sub	sp, #24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c498:	461a      	mov	r2, r3
 800c49a:	2300      	movs	r3, #0
 800c49c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d018      	beq.n	800c4e8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d10a      	bne.n	800c4d2 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4ca:	f043 0304 	orr.w	r3, r3, #4
 800c4ce:	6013      	str	r3, [r2, #0]
 800c4d0:	e014      	b.n	800c4fc <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4e0:	f023 0304 	bic.w	r3, r3, #4
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e009      	b.n	800c4fc <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4f6:	f023 0304 	bic.w	r3, r3, #4
 800c4fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c4fc:	2110      	movs	r1, #16
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff fe6a 	bl	800c1d8 <USB_FlushTxFifo>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7ff fe96 	bl	800c240 <USB_FlushRxFifo>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c51e:	2300      	movs	r3, #0
 800c520:	613b      	str	r3, [r7, #16]
 800c522:	e015      	b.n	800c550 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c530:	461a      	mov	r2, r3
 800c532:	f04f 33ff 	mov.w	r3, #4294967295
 800c536:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c544:	461a      	mov	r2, r3
 800c546:	2300      	movs	r3, #0
 800c548:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	3301      	adds	r3, #1
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	429a      	cmp	r2, r3
 800c556:	d3e5      	bcc.n	800c524 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f04f 32ff 	mov.w	r2, #4294967295
 800c564:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c578:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a13      	ldr	r2, [pc, #76]	; (800c5cc <USB_HostInit+0x154>)
 800c57e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a13      	ldr	r2, [pc, #76]	; (800c5d0 <USB_HostInit+0x158>)
 800c584:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c588:	e009      	b.n	800c59e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2280      	movs	r2, #128	; 0x80
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a10      	ldr	r2, [pc, #64]	; (800c5d4 <USB_HostInit+0x15c>)
 800c594:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a0f      	ldr	r2, [pc, #60]	; (800c5d8 <USB_HostInit+0x160>)
 800c59a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	f043 0210 	orr.w	r2, r3, #16
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	699a      	ldr	r2, [r3, #24]
 800c5b4:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <USB_HostInit+0x164>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5c8:	b004      	add	sp, #16
 800c5ca:	4770      	bx	lr
 800c5cc:	01000200 	.word	0x01000200
 800c5d0:	00e00300 	.word	0x00e00300
 800c5d4:	00600080 	.word	0x00600080
 800c5d8:	004000e0 	.word	0x004000e0
 800c5dc:	a3200008 	.word	0xa3200008

0800c5e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5fe:	f023 0303 	bic.w	r3, r3, #3
 800c602:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	f003 0303 	and.w	r3, r3, #3
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c618:	4313      	orrs	r3, r2
 800c61a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d107      	bne.n	800c632 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c628:	461a      	mov	r2, r3
 800c62a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c62e:	6053      	str	r3, [r2, #4]
 800c630:	e009      	b.n	800c646 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c632:	78fb      	ldrb	r3, [r7, #3]
 800c634:	2b02      	cmp	r3, #2
 800c636:	d106      	bne.n	800c646 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c63e:	461a      	mov	r2, r3
 800c640:	f241 7370 	movw	r3, #6000	; 0x1770
 800c644:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c682:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c684:	2064      	movs	r0, #100	; 0x64
 800c686:	f7f7 fa33 	bl	8003af0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c696:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c698:	200a      	movs	r0, #10
 800c69a:	f7f7 fa29 	bl	8003af0 <HAL_Delay>

  return HAL_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c6cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d109      	bne.n	800c6ec <USB_DriveVbus+0x44>
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d106      	bne.n	800c6ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c6e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c6ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6f6:	d109      	bne.n	800c70c <USB_DriveVbus+0x64>
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c70a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b085      	sub	sp, #20
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	0c5b      	lsrs	r3, r3, #17
 800c738:	f003 0303 	and.w	r3, r3, #3
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	b29b      	uxth	r3, r3
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	4608      	mov	r0, r1
 800c776:	4611      	mov	r1, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	4603      	mov	r3, r0
 800c77c:	70fb      	strb	r3, [r7, #3]
 800c77e:	460b      	mov	r3, r1
 800c780:	70bb      	strb	r3, [r7, #2]
 800c782:	4613      	mov	r3, r2
 800c784:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c786:	2300      	movs	r3, #0
 800c788:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c78e:	78fb      	ldrb	r3, [r7, #3]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	4413      	add	r3, r2
 800c796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c79a:	461a      	mov	r2, r3
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c7a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d87e      	bhi.n	800c8a8 <USB_HC_Init+0x13c>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <USB_HC_Init+0x44>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c7c1 	.word	0x0800c7c1
 800c7b4:	0800c86b 	.word	0x0800c86b
 800c7b8:	0800c7c1 	.word	0x0800c7c1
 800c7bc:	0800c82d 	.word	0x0800c82d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	015a      	lsls	r2, r3, #5
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f240 439d 	movw	r3, #1181	; 0x49d
 800c7d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c7d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	da10      	bge.n	800c7fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c7dc:	78fb      	ldrb	r3, [r7, #3]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	78fa      	ldrb	r2, [r7, #3]
 800c7ec:	0151      	lsls	r1, r2, #5
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c7fc:	e057      	b.n	800c8ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c806:	2b00      	cmp	r3, #0
 800c808:	d051      	beq.n	800c8ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	4413      	add	r3, r2
 800c812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	78fa      	ldrb	r2, [r7, #3]
 800c81a:	0151      	lsls	r1, r2, #5
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	440a      	add	r2, r1
 800c820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c824:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c828:	60d3      	str	r3, [r2, #12]
      break;
 800c82a:	e040      	b.n	800c8ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	4413      	add	r3, r2
 800c834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c838:	461a      	mov	r2, r3
 800c83a:	f240 639d 	movw	r3, #1693	; 0x69d
 800c83e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c844:	2b00      	cmp	r3, #0
 800c846:	da34      	bge.n	800c8b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	78fa      	ldrb	r2, [r7, #3]
 800c858:	0151      	lsls	r1, r2, #5
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	440a      	add	r2, r1
 800c85e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c866:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c868:	e023      	b.n	800c8b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c86a:	78fb      	ldrb	r3, [r7, #3]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	4413      	add	r3, r2
 800c872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c876:	461a      	mov	r2, r3
 800c878:	f240 2325 	movw	r3, #549	; 0x225
 800c87c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c87e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c882:	2b00      	cmp	r3, #0
 800c884:	da17      	bge.n	800c8b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c886:	78fb      	ldrb	r3, [r7, #3]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	78fa      	ldrb	r2, [r7, #3]
 800c896:	0151      	lsls	r1, r2, #5
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	440a      	add	r2, r1
 800c89c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c8a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c8a6:	e006      	b.n	800c8b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	77fb      	strb	r3, [r7, #31]
      break;
 800c8ac:	e004      	b.n	800c8b8 <USB_HC_Init+0x14c>
      break;
 800c8ae:	bf00      	nop
 800c8b0:	e002      	b.n	800c8b8 <USB_HC_Init+0x14c>
      break;
 800c8b2:	bf00      	nop
 800c8b4:	e000      	b.n	800c8b8 <USB_HC_Init+0x14c>
      break;
 800c8b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c8b8:	78fb      	ldrb	r3, [r7, #3]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	78fa      	ldrb	r2, [r7, #3]
 800c8c8:	0151      	lsls	r1, r2, #5
 800c8ca:	693a      	ldr	r2, [r7, #16]
 800c8cc:	440a      	add	r2, r1
 800c8ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8d2:	f043 0302 	orr.w	r3, r3, #2
 800c8d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8de:	699a      	ldr	r2, [r3, #24]
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	f003 030f 	and.w	r3, r3, #15
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ec:	6939      	ldr	r1, [r7, #16]
 800c8ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c902:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c906:	2b00      	cmp	r3, #0
 800c908:	da03      	bge.n	800c912 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c90e:	61bb      	str	r3, [r7, #24]
 800c910:	e001      	b.n	800c916 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c912:	2300      	movs	r3, #0
 800c914:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff feff 	bl	800c71a <USB_GetHostSpeed>
 800c91c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c91e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c922:	2b02      	cmp	r3, #2
 800c924:	d106      	bne.n	800c934 <USB_HC_Init+0x1c8>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d003      	beq.n	800c934 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c92c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	e001      	b.n	800c938 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c938:	787b      	ldrb	r3, [r7, #1]
 800c93a:	059b      	lsls	r3, r3, #22
 800c93c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c940:	78bb      	ldrb	r3, [r7, #2]
 800c942:	02db      	lsls	r3, r3, #11
 800c944:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c948:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c94a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c94e:	049b      	lsls	r3, r3, #18
 800c950:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c954:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c956:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c958:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c95c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c962:	78fb      	ldrb	r3, [r7, #3]
 800c964:	0159      	lsls	r1, r3, #5
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	440b      	add	r3, r1
 800c96a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c96e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c974:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c976:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d003      	beq.n	800c986 <USB_HC_Init+0x21a>
 800c97e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c982:	2b01      	cmp	r3, #1
 800c984:	d10f      	bne.n	800c9a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	015a      	lsls	r2, r3, #5
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4413      	add	r3, r2
 800c98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	78fa      	ldrb	r2, [r7, #3]
 800c996:	0151      	lsls	r1, r2, #5
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	440a      	add	r2, r1
 800c99c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c9a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08c      	sub	sp, #48	; 0x30
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	785b      	ldrb	r3, [r3, #1]
 800c9c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d02d      	beq.n	800ca36 <USB_HC_StartXfer+0x86>
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	791b      	ldrb	r3, [r3, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d129      	bne.n	800ca36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d117      	bne.n	800ca18 <USB_HC_StartXfer+0x68>
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	79db      	ldrb	r3, [r3, #7]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <USB_HC_StartXfer+0x48>
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	79db      	ldrb	r3, [r3, #7]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d10f      	bne.n	800ca18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	0151      	lsls	r1, r2, #5
 800ca0a:	6a3a      	ldr	r2, [r7, #32]
 800ca0c:	440a      	add	r2, r1
 800ca0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10b      	bne.n	800ca36 <USB_HC_StartXfer+0x86>
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	795b      	ldrb	r3, [r3, #5]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d107      	bne.n	800ca36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fa0f 	bl	800ce50 <USB_DoPing>
      return HAL_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e0f8      	b.n	800cc28 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d018      	beq.n	800ca70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	8912      	ldrh	r2, [r2, #8]
 800ca46:	4413      	add	r3, r2
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	8912      	ldrh	r2, [r2, #8]
 800ca4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ca54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca56:	8b7b      	ldrh	r3, [r7, #26]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d90b      	bls.n	800ca74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ca5c:	8b7b      	ldrh	r3, [r7, #26]
 800ca5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ca60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	8912      	ldrh	r2, [r2, #8]
 800ca66:	fb03 f202 	mul.w	r2, r3, r2
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	611a      	str	r2, [r3, #16]
 800ca6e:	e001      	b.n	800ca74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ca70:	2301      	movs	r3, #1
 800ca72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	78db      	ldrb	r3, [r3, #3]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d007      	beq.n	800ca8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ca7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	8912      	ldrh	r2, [r2, #8]
 800ca82:	fb03 f202 	mul.w	r2, r3, r2
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	611a      	str	r2, [r3, #16]
 800ca8a:	e003      	b.n	800ca94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	695a      	ldr	r2, [r3, #20]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ca9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca9e:	04d9      	lsls	r1, r3, #19
 800caa0:	4b63      	ldr	r3, [pc, #396]	; (800cc30 <USB_HC_StartXfer+0x280>)
 800caa2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800caa4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	7a9b      	ldrb	r3, [r3, #10]
 800caaa:	075b      	lsls	r3, r3, #29
 800caac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cab0:	69f9      	ldr	r1, [r7, #28]
 800cab2:	0148      	lsls	r0, r1, #5
 800cab4:	6a39      	ldr	r1, [r7, #32]
 800cab6:	4401      	add	r1, r0
 800cab8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cabc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cabe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d009      	beq.n	800cada <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	68d9      	ldr	r1, [r3, #12]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	015a      	lsls	r2, r3, #5
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	4413      	add	r3, r2
 800cad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cad6:	460a      	mov	r2, r1
 800cad8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bf0c      	ite	eq
 800caea:	2301      	moveq	r3, #1
 800caec:	2300      	movne	r3, #0
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	69fa      	ldr	r2, [r7, #28]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	6a3a      	ldr	r2, [r7, #32]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	7e7b      	ldrb	r3, [r7, #25]
 800cb22:	075b      	lsls	r3, r3, #29
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	0148      	lsls	r0, r1, #5
 800cb28:	6a39      	ldr	r1, [r7, #32]
 800cb2a:	4401      	add	r1, r0
 800cb2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cb30:	4313      	orrs	r3, r2
 800cb32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb4a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	78db      	ldrb	r3, [r3, #3]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb5a:	613b      	str	r3, [r7, #16]
 800cb5c:	e003      	b.n	800cb66 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb64:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb6c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	e04e      	b.n	800cc28 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	78db      	ldrb	r3, [r3, #3]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d149      	bne.n	800cc26 <USB_HC_StartXfer+0x276>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d045      	beq.n	800cc26 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	79db      	ldrb	r3, [r3, #7]
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d830      	bhi.n	800cc04 <USB_HC_StartXfer+0x254>
 800cba2:	a201      	add	r2, pc, #4	; (adr r2, 800cba8 <USB_HC_StartXfer+0x1f8>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cbb9 	.word	0x0800cbb9
 800cbac:	0800cbdd 	.word	0x0800cbdd
 800cbb0:	0800cbb9 	.word	0x0800cbb9
 800cbb4:	0800cbdd 	.word	0x0800cbdd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	3303      	adds	r3, #3
 800cbbe:	089b      	lsrs	r3, r3, #2
 800cbc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cbc2:	8afa      	ldrh	r2, [r7, #22]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d91c      	bls.n	800cc08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	f043 0220 	orr.w	r2, r3, #32
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	619a      	str	r2, [r3, #24]
        }
        break;
 800cbda:	e015      	b.n	800cc08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	3303      	adds	r3, #3
 800cbe2:	089b      	lsrs	r3, r3, #2
 800cbe4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cbe6:	8afa      	ldrh	r2, [r7, #22]
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d90a      	bls.n	800cc0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc02:	e003      	b.n	800cc0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800cc04:	bf00      	nop
 800cc06:	e002      	b.n	800cc0e <USB_HC_StartXfer+0x25e>
        break;
 800cc08:	bf00      	nop
 800cc0a:	e000      	b.n	800cc0e <USB_HC_StartXfer+0x25e>
        break;
 800cc0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	68d9      	ldr	r1, [r3, #12]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	785a      	ldrb	r2, [r3, #1]
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	9000      	str	r0, [sp, #0]
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fb3d 	bl	800c2a0 <USB_WritePacket>
  }

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3728      	adds	r7, #40	; 0x28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	1ff80000 	.word	0x1ff80000

0800cc34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	b29b      	uxth	r3, r3
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b089      	sub	sp, #36	; 0x24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	015a      	lsls	r2, r3, #5
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	0c9b      	lsrs	r3, r3, #18
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	015a      	lsls	r2, r3, #5
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	0fdb      	lsrs	r3, r3, #31
 800cc94:	f003 0301 	and.w	r3, r3, #1
 800cc98:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f003 0320 	and.w	r3, r3, #32
 800cca2:	2b20      	cmp	r3, #32
 800cca4:	d104      	bne.n	800ccb0 <USB_HC_Halt+0x5a>
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e0c8      	b.n	800ce42 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <USB_HC_Halt+0x66>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d163      	bne.n	800cd84 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	015a      	lsls	r2, r3, #5
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	69ba      	ldr	r2, [r7, #24]
 800cccc:	0151      	lsls	r1, r2, #5
 800ccce:	69fa      	ldr	r2, [r7, #28]
 800ccd0:	440a      	add	r2, r1
 800ccd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	f003 0320 	and.w	r3, r3, #32
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f040 80ab 	bne.w	800ce40 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d133      	bne.n	800cd5e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	015a      	lsls	r2, r3, #5
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	0151      	lsls	r1, r2, #5
 800cd08:	69fa      	ldr	r2, [r7, #28]
 800cd0a:	440a      	add	r2, r1
 800cd0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	015a      	lsls	r2, r3, #5
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	69ba      	ldr	r2, [r7, #24]
 800cd26:	0151      	lsls	r1, r2, #5
 800cd28:	69fa      	ldr	r2, [r7, #28]
 800cd2a:	440a      	add	r2, r1
 800cd2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd34:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd42:	d81d      	bhi.n	800cd80 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd5a:	d0ec      	beq.n	800cd36 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd5c:	e070      	b.n	800ce40 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	015a      	lsls	r2, r3, #5
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	69ba      	ldr	r2, [r7, #24]
 800cd6e:	0151      	lsls	r1, r2, #5
 800cd70:	69fa      	ldr	r2, [r7, #28]
 800cd72:	440a      	add	r2, r1
 800cd74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd7e:	e05f      	b.n	800ce40 <USB_HC_Halt+0x1ea>
            break;
 800cd80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd82:	e05d      	b.n	800ce40 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	69ba      	ldr	r2, [r7, #24]
 800cd94:	0151      	lsls	r1, r2, #5
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	440a      	add	r2, r1
 800cd9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cda2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d133      	bne.n	800ce1c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	015a      	lsls	r2, r3, #5
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	0151      	lsls	r1, r2, #5
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	440a      	add	r2, r1
 800cdca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	015a      	lsls	r2, r3, #5
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	4413      	add	r3, r2
 800cddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	69ba      	ldr	r2, [r7, #24]
 800cde4:	0151      	lsls	r1, r2, #5
 800cde6:	69fa      	ldr	r2, [r7, #28]
 800cde8:	440a      	add	r2, r1
 800cdea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdf2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce00:	d81d      	bhi.n	800ce3e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	015a      	lsls	r2, r3, #5
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	4413      	add	r3, r2
 800ce0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce18:	d0ec      	beq.n	800cdf4 <USB_HC_Halt+0x19e>
 800ce1a:	e011      	b.n	800ce40 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	69ba      	ldr	r2, [r7, #24]
 800ce2c:	0151      	lsls	r1, r2, #5
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	440a      	add	r2, r1
 800ce32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	e000      	b.n	800ce40 <USB_HC_Halt+0x1ea>
          break;
 800ce3e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3724      	adds	r7, #36	; 0x24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
	...

0800ce50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ce64:	2301      	movs	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	04da      	lsls	r2, r3, #19
 800ce6c:	4b15      	ldr	r3, [pc, #84]	; (800cec4 <USB_DoPing+0x74>)
 800ce6e:	4013      	ands	r3, r2
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	0151      	lsls	r1, r2, #5
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	440a      	add	r2, r1
 800ce78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cea0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceae:	461a      	mov	r2, r3
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	1ff80000 	.word	0x1ff80000

0800cec8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff f91d 	bl	800c11c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cee2:	2110      	movs	r1, #16
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff f977 	bl	800c1d8 <USB_FlushTxFifo>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff f9a3 	bl	800c240 <USB_FlushRxFifo>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cf04:	2300      	movs	r3, #0
 800cf06:	61bb      	str	r3, [r7, #24]
 800cf08:	e01f      	b.n	800cf4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3e:	461a      	mov	r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	3301      	adds	r3, #1
 800cf48:	61bb      	str	r3, [r7, #24]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	2b0f      	cmp	r3, #15
 800cf4e:	d9dc      	bls.n	800cf0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cf50:	2300      	movs	r3, #0
 800cf52:	61bb      	str	r3, [r7, #24]
 800cf54:	e034      	b.n	800cfc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	015a      	lsls	r2, r3, #5
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	015a      	lsls	r2, r3, #5
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	4413      	add	r3, r2
 800cf86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3301      	adds	r3, #1
 800cf94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf9c:	d80c      	bhi.n	800cfb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfb4:	d0ec      	beq.n	800cf90 <USB_StopHost+0xc8>
 800cfb6:	e000      	b.n	800cfba <USB_StopHost+0xf2>
        break;
 800cfb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	61bb      	str	r3, [r7, #24]
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2b0f      	cmp	r3, #15
 800cfc4:	d9c7      	bls.n	800cf56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfcc:	461a      	mov	r2, r3
 800cfce:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff f88c 	bl	800c0fa <USB_EnableGlobalInt>

  return ret;
 800cfe2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cffa:	2301      	movs	r3, #1
 800cffc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d002:	4b1f      	ldr	r3, [pc, #124]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d004:	7a5b      	ldrb	r3, [r3, #9]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d131      	bne.n	800d070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d00c:	4b1c      	ldr	r3, [pc, #112]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d00e:	7a5b      	ldrb	r3, [r3, #9]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	4b1a      	ldr	r3, [pc, #104]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d016:	2100      	movs	r1, #0
 800d018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d01a:	4b19      	ldr	r3, [pc, #100]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d01c:	7a5b      	ldrb	r3, [r3, #9]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	4a17      	ldr	r2, [pc, #92]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d02a:	4b15      	ldr	r3, [pc, #84]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d02c:	7a5b      	ldrb	r3, [r3, #9]
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	461a      	mov	r2, r3
 800d032:	4b13      	ldr	r3, [pc, #76]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d034:	4413      	add	r3, r2
 800d036:	79fa      	ldrb	r2, [r7, #7]
 800d038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d03a:	4b11      	ldr	r3, [pc, #68]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d03c:	7a5b      	ldrb	r3, [r3, #9]
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	b2d1      	uxtb	r1, r2
 800d044:	4a0e      	ldr	r2, [pc, #56]	; (800d080 <FATFS_LinkDriverEx+0x94>)
 800d046:	7251      	strb	r1, [r2, #9]
 800d048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d04a:	7dbb      	ldrb	r3, [r7, #22]
 800d04c:	3330      	adds	r3, #48	; 0x30
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	3301      	adds	r3, #1
 800d058:	223a      	movs	r2, #58	; 0x3a
 800d05a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3302      	adds	r3, #2
 800d060:	222f      	movs	r2, #47	; 0x2f
 800d062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3303      	adds	r3, #3
 800d068:	2200      	movs	r2, #0
 800d06a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d070:	7dfb      	ldrb	r3, [r7, #23]
}
 800d072:	4618      	mov	r0, r3
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20001114 	.word	0x20001114

0800d084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d08e:	2200      	movs	r2, #0
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ffaa 	bl	800cfec <FATFS_LinkDriverEx>
 800d098:	4603      	mov	r3, r0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d0b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0b4:	2b84      	cmp	r3, #132	; 0x84
 800d0b6:	d005      	beq.n	800d0c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d0b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4413      	add	r3, r2
 800d0c0:	3303      	adds	r3, #3
 800d0c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b083      	sub	sp, #12
 800d0d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0d8:	f3ef 8305 	mrs	r3, IPSR
 800d0dc:	607b      	str	r3, [r7, #4]
  return(result);
 800d0de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bf14      	ite	ne
 800d0e4:	2301      	movne	r3, #1
 800d0e6:	2300      	moveq	r3, #0
 800d0e8:	b2db      	uxtb	r3, r3
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d0fa:	f001 fd63 	bl	800ebc4 <vTaskStartScheduler>
  
  return osOK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	bd80      	pop	{r7, pc}

0800d104 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d108:	f002 f9a2 	bl	800f450 <xTaskGetSchedulerState>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <osKernelRunning+0x12>
    return 0;
 800d112:	2300      	movs	r3, #0
 800d114:	e000      	b.n	800d118 <osKernelRunning+0x14>
  else
    return 1;
 800d116:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d118:	4618      	mov	r0, r3
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d120:	f7ff ffd7 	bl	800d0d2 <inHandlerMode>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d12a:	f001 fe65 	bl	800edf8 <xTaskGetTickCountFromISR>
 800d12e:	4603      	mov	r3, r0
 800d130:	e002      	b.n	800d138 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d132:	f001 fe51 	bl	800edd8 <xTaskGetTickCount>
 800d136:	4603      	mov	r3, r0
  }
}
 800d138:	4618      	mov	r0, r3
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13e:	b089      	sub	sp, #36	; 0x24
 800d140:	af04      	add	r7, sp, #16
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d020      	beq.n	800d190 <osThreadCreate+0x54>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d01c      	beq.n	800d190 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685c      	ldr	r4, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681d      	ldr	r5, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	691e      	ldr	r6, [r3, #16]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7ff ff9a 	bl	800d0a2 <makeFreeRtosPriority>
 800d16e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d178:	9202      	str	r2, [sp, #8]
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	9100      	str	r1, [sp, #0]
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	4632      	mov	r2, r6
 800d182:	4629      	mov	r1, r5
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fb4b 	bl	800e820 <xTaskCreateStatic>
 800d18a:	4603      	mov	r3, r0
 800d18c:	60fb      	str	r3, [r7, #12]
 800d18e:	e01c      	b.n	800d1ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685c      	ldr	r4, [r3, #4]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d19c:	b29e      	uxth	r6, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff ff7c 	bl	800d0a2 <makeFreeRtosPriority>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	f107 030c 	add.w	r3, r7, #12
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	9200      	str	r2, [sp, #0]
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f001 fb8d 	bl	800e8da <xTaskCreate>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d001      	beq.n	800d1ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e000      	b.n	800d1cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <osDelay+0x16>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	e000      	b.n	800d1ec <osDelay+0x18>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 fcb5 	bl	800eb5c <vTaskDelay>
  
  return osOK;
 800d1f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af02      	add	r7, sp, #8
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d011      	beq.n	800d232 <osMessageCreate+0x36>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00d      	beq.n	800d232 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6859      	ldr	r1, [r3, #4]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	689a      	ldr	r2, [r3, #8]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	2400      	movs	r4, #0
 800d228:	9400      	str	r4, [sp, #0]
 800d22a:	f000 fe1d 	bl	800de68 <xQueueGenericCreateStatic>
 800d22e:	4603      	mov	r3, r0
 800d230:	e008      	b.n	800d244 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	4619      	mov	r1, r3
 800d23e:	f000 fe8b 	bl	800df58 <xQueueGenericCreate>
 800d242:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd90      	pop	{r4, r7, pc}

0800d24c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d258:	2300      	movs	r3, #0
 800d25a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <osMessagePut+0x1e>
    ticks = 1;
 800d266:	2301      	movs	r3, #1
 800d268:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d26a:	f7ff ff32 	bl	800d0d2 <inHandlerMode>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d018      	beq.n	800d2a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d274:	f107 0210 	add.w	r2, r7, #16
 800d278:	f107 0108 	add.w	r1, r7, #8
 800d27c:	2300      	movs	r3, #0
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 ffc2 	bl	800e208 <xQueueGenericSendFromISR>
 800d284:	4603      	mov	r3, r0
 800d286:	2b01      	cmp	r3, #1
 800d288:	d001      	beq.n	800d28e <osMessagePut+0x42>
      return osErrorOS;
 800d28a:	23ff      	movs	r3, #255	; 0xff
 800d28c:	e018      	b.n	800d2c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d014      	beq.n	800d2be <osMessagePut+0x72>
 800d294:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <osMessagePut+0x7c>)
 800d296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	e00b      	b.n	800d2be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d2a6:	f107 0108 	add.w	r1, r7, #8
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 feac 	bl	800e00c <xQueueGenericSend>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d001      	beq.n	800d2be <osMessagePut+0x72>
      return osErrorOS;
 800d2ba:	23ff      	movs	r3, #255	; 0xff
 800d2bc:	e000      	b.n	800d2c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b08b      	sub	sp, #44	; 0x2c
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d2e6:	2380      	movs	r3, #128	; 0x80
 800d2e8:	617b      	str	r3, [r7, #20]
    return event;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	461c      	mov	r4, r3
 800d2ee:	f107 0314 	add.w	r3, r7, #20
 800d2f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d2fa:	e054      	b.n	800d3a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d103      	bne.n	800d314 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d30c:	f04f 33ff 	mov.w	r3, #4294967295
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
 800d312:	e009      	b.n	800d328 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d006      	beq.n	800d328 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <osMessageGet+0x5c>
      ticks = 1;
 800d324:	2301      	movs	r3, #1
 800d326:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d328:	f7ff fed3 	bl	800d0d2 <inHandlerMode>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01c      	beq.n	800d36c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d332:	f107 0220 	add.w	r2, r7, #32
 800d336:	f107 0314 	add.w	r3, r7, #20
 800d33a:	3304      	adds	r3, #4
 800d33c:	4619      	mov	r1, r3
 800d33e:	68b8      	ldr	r0, [r7, #8]
 800d340:	f001 f8de 	bl	800e500 <xQueueReceiveFromISR>
 800d344:	4603      	mov	r3, r0
 800d346:	2b01      	cmp	r3, #1
 800d348:	d102      	bne.n	800d350 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d34a:	2310      	movs	r3, #16
 800d34c:	617b      	str	r3, [r7, #20]
 800d34e:	e001      	b.n	800d354 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d01d      	beq.n	800d396 <osMessageGet+0xca>
 800d35a:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <osMessageGet+0xe4>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	e014      	b.n	800d396 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d36c:	f107 0314 	add.w	r3, r7, #20
 800d370:	3304      	adds	r3, #4
 800d372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d374:	4619      	mov	r1, r3
 800d376:	68b8      	ldr	r0, [r7, #8]
 800d378:	f000 ffe2 	bl	800e340 <xQueueReceive>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d102      	bne.n	800d388 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d382:	2310      	movs	r3, #16
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e006      	b.n	800d396 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <osMessageGet+0xc6>
 800d38e:	2300      	movs	r3, #0
 800d390:	e000      	b.n	800d394 <osMessageGet+0xc8>
 800d392:	2340      	movs	r3, #64	; 0x40
 800d394:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	461c      	mov	r4, r3
 800d39a:	f107 0314 	add.w	r3, r7, #20
 800d39e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	372c      	adds	r7, #44	; 0x2c
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd90      	pop	{r4, r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08a      	sub	sp, #40	; 0x28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3c0:	f001 fc60 	bl	800ec84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3c4:	4b5d      	ldr	r3, [pc, #372]	; (800d53c <pvPortMalloc+0x188>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3cc:	f000 f924 	bl	800d618 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3d0:	4b5b      	ldr	r3, [pc, #364]	; (800d540 <pvPortMalloc+0x18c>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4013      	ands	r3, r2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f040 8093 	bne.w	800d504 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01d      	beq.n	800d420 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3e4:	2208      	movs	r2, #8
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d014      	beq.n	800d420 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f023 0307 	bic.w	r3, r3, #7
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f003 0307 	and.w	r3, r3, #7
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00a      	beq.n	800d420 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d41c:	bf00      	nop
 800d41e:	e7fe      	b.n	800d41e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d06e      	beq.n	800d504 <pvPortMalloc+0x150>
 800d426:	4b47      	ldr	r3, [pc, #284]	; (800d544 <pvPortMalloc+0x190>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d869      	bhi.n	800d504 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d430:	4b45      	ldr	r3, [pc, #276]	; (800d548 <pvPortMalloc+0x194>)
 800d432:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d434:	4b44      	ldr	r3, [pc, #272]	; (800d548 <pvPortMalloc+0x194>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d43a:	e004      	b.n	800d446 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d903      	bls.n	800d458 <pvPortMalloc+0xa4>
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1f1      	bne.n	800d43c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d458:	4b38      	ldr	r3, [pc, #224]	; (800d53c <pvPortMalloc+0x188>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45e:	429a      	cmp	r2, r3
 800d460:	d050      	beq.n	800d504 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d462:	6a3b      	ldr	r3, [r7, #32]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2208      	movs	r2, #8
 800d468:	4413      	add	r3, r2
 800d46a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	6a3b      	ldr	r3, [r7, #32]
 800d472:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	685a      	ldr	r2, [r3, #4]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	1ad2      	subs	r2, r2, r3
 800d47c:	2308      	movs	r3, #8
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	429a      	cmp	r2, r3
 800d482:	d91f      	bls.n	800d4c4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4413      	add	r3, r2
 800d48a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	f003 0307 	and.w	r3, r3, #7
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00a      	beq.n	800d4ac <pvPortMalloc+0xf8>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	613b      	str	r3, [r7, #16]
}
 800d4a8:	bf00      	nop
 800d4aa:	e7fe      	b.n	800d4aa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	1ad2      	subs	r2, r2, r3
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4be:	69b8      	ldr	r0, [r7, #24]
 800d4c0:	f000 f90c 	bl	800d6dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4c4:	4b1f      	ldr	r3, [pc, #124]	; (800d544 <pvPortMalloc+0x190>)
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	4a1d      	ldr	r2, [pc, #116]	; (800d544 <pvPortMalloc+0x190>)
 800d4d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4d2:	4b1c      	ldr	r3, [pc, #112]	; (800d544 <pvPortMalloc+0x190>)
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <pvPortMalloc+0x198>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d203      	bcs.n	800d4e6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4de:	4b19      	ldr	r3, [pc, #100]	; (800d544 <pvPortMalloc+0x190>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a1a      	ldr	r2, [pc, #104]	; (800d54c <pvPortMalloc+0x198>)
 800d4e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	4b15      	ldr	r3, [pc, #84]	; (800d540 <pvPortMalloc+0x18c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	431a      	orrs	r2, r3
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4fa:	4b15      	ldr	r3, [pc, #84]	; (800d550 <pvPortMalloc+0x19c>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3301      	adds	r3, #1
 800d500:	4a13      	ldr	r2, [pc, #76]	; (800d550 <pvPortMalloc+0x19c>)
 800d502:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d504:	f001 fbcc 	bl	800eca0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d50e:	f7f3 fa0b 	bl	8000928 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	f003 0307 	and.w	r3, r3, #7
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00a      	beq.n	800d532 <pvPortMalloc+0x17e>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	60fb      	str	r3, [r7, #12]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <pvPortMalloc+0x17c>
	return pvReturn;
 800d532:	69fb      	ldr	r3, [r7, #28]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3728      	adds	r7, #40	; 0x28
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20009128 	.word	0x20009128
 800d540:	2000913c 	.word	0x2000913c
 800d544:	2000912c 	.word	0x2000912c
 800d548:	20009120 	.word	0x20009120
 800d54c:	20009130 	.word	0x20009130
 800d550:	20009134 	.word	0x20009134

0800d554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d04d      	beq.n	800d602 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d566:	2308      	movs	r3, #8
 800d568:	425b      	negs	r3, r3
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	4413      	add	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	4b24      	ldr	r3, [pc, #144]	; (800d60c <vPortFree+0xb8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4013      	ands	r3, r2
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10a      	bne.n	800d598 <vPortFree+0x44>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60fb      	str	r3, [r7, #12]
}
 800d594:	bf00      	nop
 800d596:	e7fe      	b.n	800d596 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00a      	beq.n	800d5b6 <vPortFree+0x62>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	60bb      	str	r3, [r7, #8]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	4b14      	ldr	r3, [pc, #80]	; (800d60c <vPortFree+0xb8>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4013      	ands	r3, r2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01e      	beq.n	800d602 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d11a      	bne.n	800d602 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	4b0e      	ldr	r3, [pc, #56]	; (800d60c <vPortFree+0xb8>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	43db      	mvns	r3, r3
 800d5d6:	401a      	ands	r2, r3
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5dc:	f001 fb52 	bl	800ec84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	4b0a      	ldr	r3, [pc, #40]	; (800d610 <vPortFree+0xbc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	4a09      	ldr	r2, [pc, #36]	; (800d610 <vPortFree+0xbc>)
 800d5ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5ee:	6938      	ldr	r0, [r7, #16]
 800d5f0:	f000 f874 	bl	800d6dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5f4:	4b07      	ldr	r3, [pc, #28]	; (800d614 <vPortFree+0xc0>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	4a06      	ldr	r2, [pc, #24]	; (800d614 <vPortFree+0xc0>)
 800d5fc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5fe:	f001 fb4f 	bl	800eca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d602:	bf00      	nop
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	2000913c 	.word	0x2000913c
 800d610:	2000912c 	.word	0x2000912c
 800d614:	20009138 	.word	0x20009138

0800d618 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d622:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d624:	4b27      	ldr	r3, [pc, #156]	; (800d6c4 <prvHeapInit+0xac>)
 800d626:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f003 0307 	and.w	r3, r3, #7
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00c      	beq.n	800d64c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3307      	adds	r3, #7
 800d636:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f023 0307 	bic.w	r3, r3, #7
 800d63e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	4a1f      	ldr	r2, [pc, #124]	; (800d6c4 <prvHeapInit+0xac>)
 800d648:	4413      	add	r3, r2
 800d64a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d650:	4a1d      	ldr	r2, [pc, #116]	; (800d6c8 <prvHeapInit+0xb0>)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d656:	4b1c      	ldr	r3, [pc, #112]	; (800d6c8 <prvHeapInit+0xb0>)
 800d658:	2200      	movs	r2, #0
 800d65a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	4413      	add	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d664:	2208      	movs	r2, #8
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	1a9b      	subs	r3, r3, r2
 800d66a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f023 0307 	bic.w	r3, r3, #7
 800d672:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	4a15      	ldr	r2, [pc, #84]	; (800d6cc <prvHeapInit+0xb4>)
 800d678:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d67a:	4b14      	ldr	r3, [pc, #80]	; (800d6cc <prvHeapInit+0xb4>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2200      	movs	r2, #0
 800d680:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <prvHeapInit+0xb4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2200      	movs	r2, #0
 800d688:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d698:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <prvHeapInit+0xb4>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	4a0a      	ldr	r2, [pc, #40]	; (800d6d0 <prvHeapInit+0xb8>)
 800d6a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	4a09      	ldr	r2, [pc, #36]	; (800d6d4 <prvHeapInit+0xbc>)
 800d6ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <prvHeapInit+0xc0>)
 800d6b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6b6:	601a      	str	r2, [r3, #0]
}
 800d6b8:	bf00      	nop
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	20001120 	.word	0x20001120
 800d6c8:	20009120 	.word	0x20009120
 800d6cc:	20009128 	.word	0x20009128
 800d6d0:	20009130 	.word	0x20009130
 800d6d4:	2000912c 	.word	0x2000912c
 800d6d8:	2000913c 	.word	0x2000913c

0800d6dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6e4:	4b28      	ldr	r3, [pc, #160]	; (800d788 <prvInsertBlockIntoFreeList+0xac>)
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	e002      	b.n	800d6f0 <prvInsertBlockIntoFreeList+0x14>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d8f7      	bhi.n	800d6ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	4413      	add	r3, r2
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d108      	bne.n	800d71e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	685a      	ldr	r2, [r3, #4]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	441a      	add	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	441a      	add	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d118      	bne.n	800d764 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	4b15      	ldr	r3, [pc, #84]	; (800d78c <prvInsertBlockIntoFreeList+0xb0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d00d      	beq.n	800d75a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	441a      	add	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	601a      	str	r2, [r3, #0]
 800d758:	e008      	b.n	800d76c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d75a:	4b0c      	ldr	r3, [pc, #48]	; (800d78c <prvInsertBlockIntoFreeList+0xb0>)
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	e003      	b.n	800d76c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d002      	beq.n	800d77a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d77a:	bf00      	nop
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	20009120 	.word	0x20009120
 800d78c:	20009128 	.word	0x20009128

0800d790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f103 0208 	add.w	r2, r3, #8
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f103 0208 	add.w	r2, r3, #8
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f103 0208 	add.w	r2, r3, #8
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b085      	sub	sp, #20
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	601a      	str	r2, [r3, #0]
}
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d832:	b480      	push	{r7}
 800d834:	b085      	sub	sp, #20
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d848:	d103      	bne.n	800d852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	e00c      	b.n	800d86c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3308      	adds	r3, #8
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	e002      	b.n	800d860 <vListInsert+0x2e>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	60fb      	str	r3, [r7, #12]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68ba      	ldr	r2, [r7, #8]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d2f6      	bcs.n	800d85a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	685a      	ldr	r2, [r3, #4]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	601a      	str	r2, [r3, #0]
}
 800d898:	bf00      	nop
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	6892      	ldr	r2, [r2, #8]
 800d8ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	6852      	ldr	r2, [r2, #4]
 800d8c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d103      	bne.n	800d8d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689a      	ldr	r2, [r3, #8]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	1e5a      	subs	r2, r3, #1
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3b04      	subs	r3, #4
 800d908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3b04      	subs	r3, #4
 800d916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f023 0201 	bic.w	r2, r3, #1
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3b04      	subs	r3, #4
 800d926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d928:	4a0c      	ldr	r2, [pc, #48]	; (800d95c <pxPortInitialiseStack+0x64>)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3b14      	subs	r3, #20
 800d932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3b04      	subs	r3, #4
 800d93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f06f 0202 	mvn.w	r2, #2
 800d946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3b20      	subs	r3, #32
 800d94c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d94e:	68fb      	ldr	r3, [r7, #12]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	0800d961 	.word	0x0800d961

0800d960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d96a:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <prvTaskExitError+0x54>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d972:	d00a      	beq.n	800d98a <prvTaskExitError+0x2a>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	60fb      	str	r3, [r7, #12]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <prvTaskExitError+0x28>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	60bb      	str	r3, [r7, #8]
}
 800d99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d99e:	bf00      	nop
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d0fc      	beq.n	800d9a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	2000002c 	.word	0x2000002c
	...

0800d9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <pxCurrentTCBConst2>)
 800d9c2:	6819      	ldr	r1, [r3, #0]
 800d9c4:	6808      	ldr	r0, [r1, #0]
 800d9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	f380 8809 	msr	PSP, r0
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f04f 0000 	mov.w	r0, #0
 800d9d6:	f380 8811 	msr	BASEPRI, r0
 800d9da:	4770      	bx	lr
 800d9dc:	f3af 8000 	nop.w

0800d9e0 <pxCurrentTCBConst2>:
 800d9e0:	20009148 	.word	0x20009148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop

0800d9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d9e8:	4808      	ldr	r0, [pc, #32]	; (800da0c <prvPortStartFirstTask+0x24>)
 800d9ea:	6800      	ldr	r0, [r0, #0]
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	f380 8808 	msr	MSP, r0
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8814 	msr	CONTROL, r0
 800d9fa:	b662      	cpsie	i
 800d9fc:	b661      	cpsie	f
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	df00      	svc	0
 800da08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da0a:	bf00      	nop
 800da0c:	e000ed08 	.word	0xe000ed08

0800da10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da16:	4b46      	ldr	r3, [pc, #280]	; (800db30 <xPortStartScheduler+0x120>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a46      	ldr	r2, [pc, #280]	; (800db34 <xPortStartScheduler+0x124>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d10a      	bne.n	800da36 <xPortStartScheduler+0x26>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	613b      	str	r3, [r7, #16]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da36:	4b3e      	ldr	r3, [pc, #248]	; (800db30 <xPortStartScheduler+0x120>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a3f      	ldr	r2, [pc, #252]	; (800db38 <xPortStartScheduler+0x128>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d10a      	bne.n	800da56 <xPortStartScheduler+0x46>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	60fb      	str	r3, [r7, #12]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da56:	4b39      	ldr	r3, [pc, #228]	; (800db3c <xPortStartScheduler+0x12c>)
 800da58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	22ff      	movs	r2, #255	; 0xff
 800da66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	4b31      	ldr	r3, [pc, #196]	; (800db40 <xPortStartScheduler+0x130>)
 800da7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da7e:	4b31      	ldr	r3, [pc, #196]	; (800db44 <xPortStartScheduler+0x134>)
 800da80:	2207      	movs	r2, #7
 800da82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da84:	e009      	b.n	800da9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800da86:	4b2f      	ldr	r3, [pc, #188]	; (800db44 <xPortStartScheduler+0x134>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	4a2d      	ldr	r2, [pc, #180]	; (800db44 <xPortStartScheduler+0x134>)
 800da8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	b2db      	uxtb	r3, r3
 800da98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da9a:	78fb      	ldrb	r3, [r7, #3]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daa2:	2b80      	cmp	r3, #128	; 0x80
 800daa4:	d0ef      	beq.n	800da86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800daa6:	4b27      	ldr	r3, [pc, #156]	; (800db44 <xPortStartScheduler+0x134>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1c3 0307 	rsb	r3, r3, #7
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d00a      	beq.n	800dac8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60bb      	str	r3, [r7, #8]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dac8:	4b1e      	ldr	r3, [pc, #120]	; (800db44 <xPortStartScheduler+0x134>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	021b      	lsls	r3, r3, #8
 800dace:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <xPortStartScheduler+0x134>)
 800dad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dad2:	4b1c      	ldr	r3, [pc, #112]	; (800db44 <xPortStartScheduler+0x134>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dada:	4a1a      	ldr	r2, [pc, #104]	; (800db44 <xPortStartScheduler+0x134>)
 800dadc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dae6:	4b18      	ldr	r3, [pc, #96]	; (800db48 <xPortStartScheduler+0x138>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a17      	ldr	r2, [pc, #92]	; (800db48 <xPortStartScheduler+0x138>)
 800daec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800daf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800daf2:	4b15      	ldr	r3, [pc, #84]	; (800db48 <xPortStartScheduler+0x138>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a14      	ldr	r2, [pc, #80]	; (800db48 <xPortStartScheduler+0x138>)
 800daf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dafc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dafe:	f000 f8dd 	bl	800dcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db02:	4b12      	ldr	r3, [pc, #72]	; (800db4c <xPortStartScheduler+0x13c>)
 800db04:	2200      	movs	r2, #0
 800db06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db08:	f000 f8fc 	bl	800dd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db0c:	4b10      	ldr	r3, [pc, #64]	; (800db50 <xPortStartScheduler+0x140>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a0f      	ldr	r2, [pc, #60]	; (800db50 <xPortStartScheduler+0x140>)
 800db12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db18:	f7ff ff66 	bl	800d9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db1c:	f001 fa36 	bl	800ef8c <vTaskSwitchContext>
	prvTaskExitError();
 800db20:	f7ff ff1e 	bl	800d960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	e000ed00 	.word	0xe000ed00
 800db34:	410fc271 	.word	0x410fc271
 800db38:	410fc270 	.word	0x410fc270
 800db3c:	e000e400 	.word	0xe000e400
 800db40:	20009140 	.word	0x20009140
 800db44:	20009144 	.word	0x20009144
 800db48:	e000ed20 	.word	0xe000ed20
 800db4c:	2000002c 	.word	0x2000002c
 800db50:	e000ef34 	.word	0xe000ef34

0800db54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	607b      	str	r3, [r7, #4]
}
 800db6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db6e:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <vPortEnterCritical+0x58>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3301      	adds	r3, #1
 800db74:	4a0d      	ldr	r2, [pc, #52]	; (800dbac <vPortEnterCritical+0x58>)
 800db76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db78:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <vPortEnterCritical+0x58>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10f      	bne.n	800dba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db80:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <vPortEnterCritical+0x5c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <vPortEnterCritical+0x4c>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	603b      	str	r3, [r7, #0]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <vPortEnterCritical+0x4a>
	}
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	2000002c 	.word	0x2000002c
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbba:	4b12      	ldr	r3, [pc, #72]	; (800dc04 <vPortExitCritical+0x50>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <vPortExitCritical+0x24>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	607b      	str	r3, [r7, #4]
}
 800dbd4:	bf00      	nop
 800dbd6:	e7fe      	b.n	800dbd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <vPortExitCritical+0x50>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	4a09      	ldr	r2, [pc, #36]	; (800dc04 <vPortExitCritical+0x50>)
 800dbe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbe2:	4b08      	ldr	r3, [pc, #32]	; (800dc04 <vPortExitCritical+0x50>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d105      	bne.n	800dbf6 <vPortExitCritical+0x42>
 800dbea:	2300      	movs	r3, #0
 800dbec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbf6:	bf00      	nop
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	2000002c 	.word	0x2000002c
	...

0800dc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc10:	f3ef 8009 	mrs	r0, PSP
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <pxCurrentTCBConst>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	f01e 0f10 	tst.w	lr, #16
 800dc20:	bf08      	it	eq
 800dc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2a:	6010      	str	r0, [r2, #0]
 800dc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc34:	f380 8811 	msr	BASEPRI, r0
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f001 f9a4 	bl	800ef8c <vTaskSwitchContext>
 800dc44:	f04f 0000 	mov.w	r0, #0
 800dc48:	f380 8811 	msr	BASEPRI, r0
 800dc4c:	bc09      	pop	{r0, r3}
 800dc4e:	6819      	ldr	r1, [r3, #0]
 800dc50:	6808      	ldr	r0, [r1, #0]
 800dc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc56:	f01e 0f10 	tst.w	lr, #16
 800dc5a:	bf08      	it	eq
 800dc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc60:	f380 8809 	msr	PSP, r0
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w

0800dc70 <pxCurrentTCBConst>:
 800dc70:	20009148 	.word	0x20009148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop

0800dc78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	607b      	str	r3, [r7, #4]
}
 800dc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc92:	f001 f8c3 	bl	800ee1c <xTaskIncrementTick>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <SysTick_Handler+0x40>)
 800dc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	2300      	movs	r3, #0
 800dca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	f383 8811 	msr	BASEPRI, r3
}
 800dcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	e000ed04 	.word	0xe000ed04

0800dcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <vPortSetupTimerInterrupt+0x34>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcc6:	4b0b      	ldr	r3, [pc, #44]	; (800dcf4 <vPortSetupTimerInterrupt+0x38>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dccc:	4b0a      	ldr	r3, [pc, #40]	; (800dcf8 <vPortSetupTimerInterrupt+0x3c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a0a      	ldr	r2, [pc, #40]	; (800dcfc <vPortSetupTimerInterrupt+0x40>)
 800dcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd6:	099b      	lsrs	r3, r3, #6
 800dcd8:	4a09      	ldr	r2, [pc, #36]	; (800dd00 <vPortSetupTimerInterrupt+0x44>)
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcde:	4b04      	ldr	r3, [pc, #16]	; (800dcf0 <vPortSetupTimerInterrupt+0x34>)
 800dce0:	2207      	movs	r2, #7
 800dce2:	601a      	str	r2, [r3, #0]
}
 800dce4:	bf00      	nop
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	e000e010 	.word	0xe000e010
 800dcf4:	e000e018 	.word	0xe000e018
 800dcf8:	20000020 	.word	0x20000020
 800dcfc:	10624dd3 	.word	0x10624dd3
 800dd00:	e000e014 	.word	0xe000e014

0800dd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd14 <vPortEnableVFP+0x10>
 800dd08:	6801      	ldr	r1, [r0, #0]
 800dd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd0e:	6001      	str	r1, [r0, #0]
 800dd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd12:	bf00      	nop
 800dd14:	e000ed88 	.word	0xe000ed88

0800dd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd1e:	f3ef 8305 	mrs	r3, IPSR
 800dd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b0f      	cmp	r3, #15
 800dd28:	d914      	bls.n	800dd54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd2a:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <vPortValidateInterruptPriority+0x70>)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd34:	4b15      	ldr	r3, [pc, #84]	; (800dd8c <vPortValidateInterruptPriority+0x74>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	7afa      	ldrb	r2, [r7, #11]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d20a      	bcs.n	800dd54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	607b      	str	r3, [r7, #4]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd54:	4b0e      	ldr	r3, [pc, #56]	; (800dd90 <vPortValidateInterruptPriority+0x78>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd5c:	4b0d      	ldr	r3, [pc, #52]	; (800dd94 <vPortValidateInterruptPriority+0x7c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d90a      	bls.n	800dd7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	603b      	str	r3, [r7, #0]
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <vPortValidateInterruptPriority+0x60>
	}
 800dd7a:	bf00      	nop
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	e000e3f0 	.word	0xe000e3f0
 800dd8c:	20009140 	.word	0x20009140
 800dd90:	e000ed0c 	.word	0xe000ed0c
 800dd94:	20009144 	.word	0x20009144

0800dd98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	60bb      	str	r3, [r7, #8]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ddc2:	f7ff fec7 	bl	800db54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddce:	68f9      	ldr	r1, [r7, #12]
 800ddd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddd2:	fb01 f303 	mul.w	r3, r1, r3
 800ddd6:	441a      	add	r2, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	68f9      	ldr	r1, [r7, #12]
 800ddf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddf8:	fb01 f303 	mul.w	r3, r1, r3
 800ddfc:	441a      	add	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	22ff      	movs	r2, #255	; 0xff
 800de0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d114      	bne.n	800de42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01a      	beq.n	800de56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	3310      	adds	r3, #16
 800de24:	4618      	mov	r0, r3
 800de26:	f001 f955 	bl	800f0d4 <xTaskRemoveFromEventList>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d012      	beq.n	800de56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de30:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <xQueueGenericReset+0xcc>)
 800de32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de36:	601a      	str	r2, [r3, #0]
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	e009      	b.n	800de56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3310      	adds	r3, #16
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff fca2 	bl	800d790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	3324      	adds	r3, #36	; 0x24
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff fc9d 	bl	800d790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de56:	f7ff fead 	bl	800dbb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de5a:	2301      	movs	r3, #1
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed04 	.word	0xe000ed04

0800de68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08e      	sub	sp, #56	; 0x38
 800de6c:	af02      	add	r7, sp, #8
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10a      	bne.n	800de92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de8e:	bf00      	nop
 800de90:	e7fe      	b.n	800de90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10a      	bne.n	800deae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800deaa:	bf00      	nop
 800deac:	e7fe      	b.n	800deac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <xQueueGenericCreateStatic+0x52>
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <xQueueGenericCreateStatic+0x56>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueGenericCreateStatic+0x58>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	623b      	str	r3, [r7, #32]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <xQueueGenericCreateStatic+0x7e>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <xQueueGenericCreateStatic+0x82>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <xQueueGenericCreateStatic+0x84>
 800deea:	2300      	movs	r3, #0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10a      	bne.n	800df06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	61fb      	str	r3, [r7, #28]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df06:	2348      	movs	r3, #72	; 0x48
 800df08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	2b48      	cmp	r3, #72	; 0x48
 800df0e:	d00a      	beq.n	800df26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	61bb      	str	r3, [r7, #24]
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00d      	beq.n	800df4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	4613      	mov	r3, r2
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f83f 	bl	800dfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df50:	4618      	mov	r0, r3
 800df52:	3730      	adds	r7, #48	; 0x30
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	; 0x28
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10a      	bne.n	800df82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	613b      	str	r3, [r7, #16]
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	3348      	adds	r3, #72	; 0x48
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff fa0f 	bl	800d3b4 <pvPortMalloc>
 800df96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d011      	beq.n	800dfc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	3348      	adds	r3, #72	; 0x48
 800dfa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfb0:	79fa      	ldrb	r2, [r7, #7]
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 f805 	bl	800dfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfc2:	69bb      	ldr	r3, [r7, #24]
	}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3720      	adds	r7, #32
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	e002      	b.n	800dfee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dffa:	2101      	movs	r1, #1
 800dffc:	69b8      	ldr	r0, [r7, #24]
 800dffe:	f7ff fecb 	bl	800dd98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08e      	sub	sp, #56	; 0x38
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e01a:	2300      	movs	r3, #0
 800e01c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10a      	bne.n	800e03e <xQueueGenericSend+0x32>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d103      	bne.n	800e04c <xQueueGenericSend+0x40>
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <xQueueGenericSend+0x44>
 800e04c:	2301      	movs	r3, #1
 800e04e:	e000      	b.n	800e052 <xQueueGenericSend+0x46>
 800e050:	2300      	movs	r3, #0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10a      	bne.n	800e06c <xQueueGenericSend+0x60>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e068:	bf00      	nop
 800e06a:	e7fe      	b.n	800e06a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d103      	bne.n	800e07a <xQueueGenericSend+0x6e>
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e076:	2b01      	cmp	r3, #1
 800e078:	d101      	bne.n	800e07e <xQueueGenericSend+0x72>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <xQueueGenericSend+0x74>
 800e07e:	2300      	movs	r3, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <xQueueGenericSend+0x8e>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	623b      	str	r3, [r7, #32]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e09a:	f001 f9d9 	bl	800f450 <xTaskGetSchedulerState>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <xQueueGenericSend+0x9e>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <xQueueGenericSend+0xa2>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <xQueueGenericSend+0xa4>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <xQueueGenericSend+0xbe>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	61fb      	str	r3, [r7, #28]
}
 800e0c6:	bf00      	nop
 800e0c8:	e7fe      	b.n	800e0c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0ca:	f7ff fd43 	bl	800db54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d302      	bcc.n	800e0e0 <xQueueGenericSend+0xd4>
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d129      	bne.n	800e134 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0e0:	683a      	ldr	r2, [r7, #0]
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0e6:	f000 fa8b 	bl	800e600 <prvCopyDataToQueue>
 800e0ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d010      	beq.n	800e116 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	3324      	adds	r3, #36	; 0x24
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 ffeb 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d013      	beq.n	800e12c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e104:	4b3f      	ldr	r3, [pc, #252]	; (800e204 <xQueueGenericSend+0x1f8>)
 800e106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10a:	601a      	str	r2, [r3, #0]
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	e00a      	b.n	800e12c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d007      	beq.n	800e12c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e11c:	4b39      	ldr	r3, [pc, #228]	; (800e204 <xQueueGenericSend+0x1f8>)
 800e11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e12c:	f7ff fd42 	bl	800dbb4 <vPortExitCritical>
				return pdPASS;
 800e130:	2301      	movs	r3, #1
 800e132:	e063      	b.n	800e1fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d103      	bne.n	800e142 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e13a:	f7ff fd3b 	bl	800dbb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e13e:	2300      	movs	r3, #0
 800e140:	e05c      	b.n	800e1fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e144:	2b00      	cmp	r3, #0
 800e146:	d106      	bne.n	800e156 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e148:	f107 0314 	add.w	r3, r7, #20
 800e14c:	4618      	mov	r0, r3
 800e14e:	f001 f823 	bl	800f198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e152:	2301      	movs	r3, #1
 800e154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e156:	f7ff fd2d 	bl	800dbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e15a:	f000 fd93 	bl	800ec84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e15e:	f7ff fcf9 	bl	800db54 <vPortEnterCritical>
 800e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e168:	b25b      	sxtb	r3, r3
 800e16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16e:	d103      	bne.n	800e178 <xQueueGenericSend+0x16c>
 800e170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e172:	2200      	movs	r2, #0
 800e174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e184:	d103      	bne.n	800e18e <xQueueGenericSend+0x182>
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e18e:	f7ff fd11 	bl	800dbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e192:	1d3a      	adds	r2, r7, #4
 800e194:	f107 0314 	add.w	r3, r7, #20
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f001 f812 	bl	800f1c4 <xTaskCheckForTimeOut>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d124      	bne.n	800e1f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1a8:	f000 fb22 	bl	800e7f0 <prvIsQueueFull>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d018      	beq.n	800e1e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	3310      	adds	r3, #16
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 ff66 	bl	800f08c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1c2:	f000 faad 	bl	800e720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1c6:	f000 fd6b 	bl	800eca0 <xTaskResumeAll>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f47f af7c 	bne.w	800e0ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1d2:	4b0c      	ldr	r3, [pc, #48]	; (800e204 <xQueueGenericSend+0x1f8>)
 800e1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	e772      	b.n	800e0ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e6:	f000 fa9b 	bl	800e720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1ea:	f000 fd59 	bl	800eca0 <xTaskResumeAll>
 800e1ee:	e76c      	b.n	800e0ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1f2:	f000 fa95 	bl	800e720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1f6:	f000 fd53 	bl	800eca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e1fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3738      	adds	r7, #56	; 0x38
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	e000ed04 	.word	0xe000ed04

0800e208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b090      	sub	sp, #64	; 0x40
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10a      	bne.n	800e236 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e232:	bf00      	nop
 800e234:	e7fe      	b.n	800e234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d103      	bne.n	800e244 <xQueueGenericSendFromISR+0x3c>
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <xQueueGenericSendFromISR+0x40>
 800e244:	2301      	movs	r3, #1
 800e246:	e000      	b.n	800e24a <xQueueGenericSendFromISR+0x42>
 800e248:	2300      	movs	r3, #0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10a      	bne.n	800e264 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e260:	bf00      	nop
 800e262:	e7fe      	b.n	800e262 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	2b02      	cmp	r3, #2
 800e268:	d103      	bne.n	800e272 <xQueueGenericSendFromISR+0x6a>
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d101      	bne.n	800e276 <xQueueGenericSendFromISR+0x6e>
 800e272:	2301      	movs	r3, #1
 800e274:	e000      	b.n	800e278 <xQueueGenericSendFromISR+0x70>
 800e276:	2300      	movs	r3, #0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	623b      	str	r3, [r7, #32]
}
 800e28e:	bf00      	nop
 800e290:	e7fe      	b.n	800e290 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e292:	f7ff fd41 	bl	800dd18 <vPortValidateInterruptPriority>
	__asm volatile
 800e296:	f3ef 8211 	mrs	r2, BASEPRI
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	61fa      	str	r2, [r7, #28]
 800e2ac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e2ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d302      	bcc.n	800e2c4 <xQueueGenericSendFromISR+0xbc>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d12f      	bne.n	800e324 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	68b9      	ldr	r1, [r7, #8]
 800e2d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2da:	f000 f991 	bl	800e600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e6:	d112      	bne.n	800e30e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d016      	beq.n	800e31e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	3324      	adds	r3, #36	; 0x24
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 feed 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00e      	beq.n	800e31e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	e007      	b.n	800e31e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e30e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e312:	3301      	adds	r3, #1
 800e314:	b2db      	uxtb	r3, r3
 800e316:	b25a      	sxtb	r2, r3
 800e318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e31e:	2301      	movs	r3, #1
 800e320:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e322:	e001      	b.n	800e328 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e324:	2300      	movs	r3, #0
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f383 8811 	msr	BASEPRI, r3
}
 800e332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e336:	4618      	mov	r0, r3
 800e338:	3740      	adds	r7, #64	; 0x40
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
	...

0800e340 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08c      	sub	sp, #48	; 0x30
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e34c:	2300      	movs	r3, #0
 800e34e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <xQueueReceive+0x30>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	623b      	str	r3, [r7, #32]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d103      	bne.n	800e37e <xQueueReceive+0x3e>
 800e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <xQueueReceive+0x42>
 800e37e:	2301      	movs	r3, #1
 800e380:	e000      	b.n	800e384 <xQueueReceive+0x44>
 800e382:	2300      	movs	r3, #0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <xQueueReceive+0x5e>
	__asm volatile
 800e388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	61fb      	str	r3, [r7, #28]
}
 800e39a:	bf00      	nop
 800e39c:	e7fe      	b.n	800e39c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e39e:	f001 f857 	bl	800f450 <xTaskGetSchedulerState>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <xQueueReceive+0x6e>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d101      	bne.n	800e3b2 <xQueueReceive+0x72>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e000      	b.n	800e3b4 <xQueueReceive+0x74>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <xQueueReceive+0x8e>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	61bb      	str	r3, [r7, #24]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3ce:	f7ff fbc1 	bl	800db54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d01f      	beq.n	800e41e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3de:	68b9      	ldr	r1, [r7, #8]
 800e3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3e2:	f000 f977 	bl	800e6d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	1e5a      	subs	r2, r3, #1
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00f      	beq.n	800e416 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fe6a 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d007      	beq.n	800e416 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e406:	4b3d      	ldr	r3, [pc, #244]	; (800e4fc <xQueueReceive+0x1bc>)
 800e408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e416:	f7ff fbcd 	bl	800dbb4 <vPortExitCritical>
				return pdPASS;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e069      	b.n	800e4f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d103      	bne.n	800e42c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e424:	f7ff fbc6 	bl	800dbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e428:	2300      	movs	r3, #0
 800e42a:	e062      	b.n	800e4f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e432:	f107 0310 	add.w	r3, r7, #16
 800e436:	4618      	mov	r0, r3
 800e438:	f000 feae 	bl	800f198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e43c:	2301      	movs	r3, #1
 800e43e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e440:	f7ff fbb8 	bl	800dbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e444:	f000 fc1e 	bl	800ec84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e448:	f7ff fb84 	bl	800db54 <vPortEnterCritical>
 800e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e452:	b25b      	sxtb	r3, r3
 800e454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e458:	d103      	bne.n	800e462 <xQueueReceive+0x122>
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e468:	b25b      	sxtb	r3, r3
 800e46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e46e:	d103      	bne.n	800e478 <xQueueReceive+0x138>
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e478:	f7ff fb9c 	bl	800dbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e47c:	1d3a      	adds	r2, r7, #4
 800e47e:	f107 0310 	add.w	r3, r7, #16
 800e482:	4611      	mov	r1, r2
 800e484:	4618      	mov	r0, r3
 800e486:	f000 fe9d 	bl	800f1c4 <xTaskCheckForTimeOut>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d123      	bne.n	800e4d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e492:	f000 f997 	bl	800e7c4 <prvIsQueueEmpty>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d017      	beq.n	800e4cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	3324      	adds	r3, #36	; 0x24
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fdf1 	bl	800f08c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ac:	f000 f938 	bl	800e720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4b0:	f000 fbf6 	bl	800eca0 <xTaskResumeAll>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d189      	bne.n	800e3ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e4ba:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <xQueueReceive+0x1bc>)
 800e4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	e780      	b.n	800e3ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ce:	f000 f927 	bl	800e720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4d2:	f000 fbe5 	bl	800eca0 <xTaskResumeAll>
 800e4d6:	e77a      	b.n	800e3ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4da:	f000 f921 	bl	800e720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4de:	f000 fbdf 	bl	800eca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4e4:	f000 f96e 	bl	800e7c4 <prvIsQueueEmpty>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f43f af6f 	beq.w	800e3ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3730      	adds	r7, #48	; 0x30
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	e000ed04 	.word	0xe000ed04

0800e500 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b08e      	sub	sp, #56	; 0x38
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e512:	2b00      	cmp	r3, #0
 800e514:	d10a      	bne.n	800e52c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	623b      	str	r3, [r7, #32]
}
 800e528:	bf00      	nop
 800e52a:	e7fe      	b.n	800e52a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d103      	bne.n	800e53a <xQueueReceiveFromISR+0x3a>
 800e532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <xQueueReceiveFromISR+0x3e>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e000      	b.n	800e540 <xQueueReceiveFromISR+0x40>
 800e53e:	2300      	movs	r3, #0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10a      	bne.n	800e55a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	61fb      	str	r3, [r7, #28]
}
 800e556:	bf00      	nop
 800e558:	e7fe      	b.n	800e558 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e55a:	f7ff fbdd 	bl	800dd18 <vPortValidateInterruptPriority>
	__asm volatile
 800e55e:	f3ef 8211 	mrs	r2, BASEPRI
 800e562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e566:	f383 8811 	msr	BASEPRI, r3
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	61ba      	str	r2, [r7, #24]
 800e574:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e576:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e578:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	2b00      	cmp	r3, #0
 800e584:	d02f      	beq.n	800e5e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e590:	68b9      	ldr	r1, [r7, #8]
 800e592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e594:	f000 f89e 	bl	800e6d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	1e5a      	subs	r2, r3, #1
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e5a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a8:	d112      	bne.n	800e5d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d016      	beq.n	800e5e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	3310      	adds	r3, #16
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 fd8c 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00e      	beq.n	800e5e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	e007      	b.n	800e5e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	b25a      	sxtb	r2, r3
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	637b      	str	r3, [r7, #52]	; 0x34
 800e5e4:	e001      	b.n	800e5ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f383 8811 	msr	BASEPRI, r3
}
 800e5f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3738      	adds	r7, #56	; 0x38
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e60c:	2300      	movs	r3, #0
 800e60e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10d      	bne.n	800e63a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d14d      	bne.n	800e6c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f000 ff2e 	bl	800f48c <xTaskPriorityDisinherit>
 800e630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	609a      	str	r2, [r3, #8]
 800e638:	e043      	b.n	800e6c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d119      	bne.n	800e674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6858      	ldr	r0, [r3, #4]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	461a      	mov	r2, r3
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	f003 fa8e 	bl	8011b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e658:	441a      	add	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	429a      	cmp	r2, r3
 800e668:	d32b      	bcc.n	800e6c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	605a      	str	r2, [r3, #4]
 800e672:	e026      	b.n	800e6c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	68d8      	ldr	r0, [r3, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e67c:	461a      	mov	r2, r3
 800e67e:	68b9      	ldr	r1, [r7, #8]
 800e680:	f003 fa74 	bl	8011b6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	68da      	ldr	r2, [r3, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68c:	425b      	negs	r3, r3
 800e68e:	441a      	add	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d207      	bcs.n	800e6b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	689a      	ldr	r2, [r3, #8]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	441a      	add	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d105      	bne.n	800e6c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e6ca:	697b      	ldr	r3, [r7, #20]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d018      	beq.n	800e718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ee:	441a      	add	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68da      	ldr	r2, [r3, #12]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d303      	bcc.n	800e708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	68d9      	ldr	r1, [r3, #12]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e710:	461a      	mov	r2, r3
 800e712:	6838      	ldr	r0, [r7, #0]
 800e714:	f003 fa2a 	bl	8011b6c <memcpy>
	}
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e728:	f7ff fa14 	bl	800db54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e734:	e011      	b.n	800e75a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d012      	beq.n	800e764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3324      	adds	r3, #36	; 0x24
 800e742:	4618      	mov	r0, r3
 800e744:	f000 fcc6 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e74e:	f000 fd9b 	bl	800f288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	3b01      	subs	r3, #1
 800e756:	b2db      	uxtb	r3, r3
 800e758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dce9      	bgt.n	800e736 <prvUnlockQueue+0x16>
 800e762:	e000      	b.n	800e766 <prvUnlockQueue+0x46>
					break;
 800e764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	22ff      	movs	r2, #255	; 0xff
 800e76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e76e:	f7ff fa21 	bl	800dbb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e772:	f7ff f9ef 	bl	800db54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e77c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e77e:	e011      	b.n	800e7a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d012      	beq.n	800e7ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3310      	adds	r3, #16
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fca1 	bl	800f0d4 <xTaskRemoveFromEventList>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e798:	f000 fd76 	bl	800f288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	dce9      	bgt.n	800e780 <prvUnlockQueue+0x60>
 800e7ac:	e000      	b.n	800e7b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e7ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	22ff      	movs	r2, #255	; 0xff
 800e7b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e7b8:	f7ff f9fc 	bl	800dbb4 <vPortExitCritical>
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7cc:	f7ff f9c2 	bl	800db54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e001      	b.n	800e7e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7e2:	f7ff f9e7 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7f8:	f7ff f9ac 	bl	800db54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e804:	429a      	cmp	r2, r3
 800e806:	d102      	bne.n	800e80e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e808:	2301      	movs	r3, #1
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e001      	b.n	800e812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e812:	f7ff f9cf 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800e816:	68fb      	ldr	r3, [r7, #12]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e820:	b580      	push	{r7, lr}
 800e822:	b08e      	sub	sp, #56	; 0x38
 800e824:	af04      	add	r7, sp, #16
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10a      	bne.n	800e84a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	623b      	str	r3, [r7, #32]
}
 800e846:	bf00      	nop
 800e848:	e7fe      	b.n	800e848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <xTaskCreateStatic+0x46>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	61fb      	str	r3, [r7, #28]
}
 800e862:	bf00      	nop
 800e864:	e7fe      	b.n	800e864 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e866:	2358      	movs	r3, #88	; 0x58
 800e868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	2b58      	cmp	r3, #88	; 0x58
 800e86e:	d00a      	beq.n	800e886 <xTaskCreateStatic+0x66>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	61bb      	str	r3, [r7, #24]
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e886:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d01e      	beq.n	800e8cc <xTaskCreateStatic+0xac>
 800e88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e890:	2b00      	cmp	r3, #0
 800e892:	d01b      	beq.n	800e8cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e89c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	9303      	str	r3, [sp, #12]
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	f107 0314 	add.w	r3, r7, #20
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	68b9      	ldr	r1, [r7, #8]
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f000 f850 	bl	800e964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8c6:	f000 f8df 	bl	800ea88 <prvAddNewTaskToReadyList>
 800e8ca:	e001      	b.n	800e8d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e8d0:	697b      	ldr	r3, [r7, #20]
	}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3728      	adds	r7, #40	; 0x28
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b08c      	sub	sp, #48	; 0x30
 800e8de:	af04      	add	r7, sp, #16
 800e8e0:	60f8      	str	r0, [r7, #12]
 800e8e2:	60b9      	str	r1, [r7, #8]
 800e8e4:	603b      	str	r3, [r7, #0]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fd60 	bl	800d3b4 <pvPortMalloc>
 800e8f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00e      	beq.n	800e91a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8fc:	2058      	movs	r0, #88	; 0x58
 800e8fe:	f7fe fd59 	bl	800d3b4 <pvPortMalloc>
 800e902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	697a      	ldr	r2, [r7, #20]
 800e90e:	631a      	str	r2, [r3, #48]	; 0x30
 800e910:	e005      	b.n	800e91e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e912:	6978      	ldr	r0, [r7, #20]
 800e914:	f7fe fe1e 	bl	800d554 <vPortFree>
 800e918:	e001      	b.n	800e91e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d017      	beq.n	800e954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e92c:	88fa      	ldrh	r2, [r7, #6]
 800e92e:	2300      	movs	r3, #0
 800e930:	9303      	str	r3, [sp, #12]
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	9302      	str	r3, [sp, #8]
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f000 f80e 	bl	800e964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e948:	69f8      	ldr	r0, [r7, #28]
 800e94a:	f000 f89d 	bl	800ea88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e94e:	2301      	movs	r3, #1
 800e950:	61bb      	str	r3, [r7, #24]
 800e952:	e002      	b.n	800e95a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e95a:	69bb      	ldr	r3, [r7, #24]
	}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3720      	adds	r7, #32
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b088      	sub	sp, #32
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	461a      	mov	r2, r3
 800e97c:	21a5      	movs	r1, #165	; 0xa5
 800e97e:	f003 f903 	bl	8011b88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e98c:	3b01      	subs	r3, #1
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	f003 0307 	and.w	r3, r3, #7
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00a      	beq.n	800e9bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	617b      	str	r3, [r7, #20]
}
 800e9b8:	bf00      	nop
 800e9ba:	e7fe      	b.n	800e9ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d01f      	beq.n	800ea02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	61fb      	str	r3, [r7, #28]
 800e9c6:	e012      	b.n	800e9ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	7819      	ldrb	r1, [r3, #0]
 800e9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	3334      	adds	r3, #52	; 0x34
 800e9d8:	460a      	mov	r2, r1
 800e9da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d006      	beq.n	800e9f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	61fb      	str	r3, [r7, #28]
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	2b0f      	cmp	r3, #15
 800e9f2:	d9e9      	bls.n	800e9c8 <prvInitialiseNewTask+0x64>
 800e9f4:	e000      	b.n	800e9f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e9f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ea00:	e003      	b.n	800ea0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	2b06      	cmp	r3, #6
 800ea0e:	d901      	bls.n	800ea14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea10:	2306      	movs	r3, #6
 800ea12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	2200      	movs	r2, #0
 800ea24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fed0 	bl	800d7d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	3318      	adds	r3, #24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe fecb 	bl	800d7d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	f1c3 0207 	rsb	r2, r3, #7
 800ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ea50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea52:	2200      	movs	r2, #0
 800ea54:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	2200      	movs	r2, #0
 800ea5a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	68f9      	ldr	r1, [r7, #12]
 800ea68:	69b8      	ldr	r0, [r7, #24]
 800ea6a:	f7fe ff45 	bl	800d8f8 <pxPortInitialiseStack>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d002      	beq.n	800ea80 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea80:	bf00      	nop
 800ea82:	3720      	adds	r7, #32
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea90:	f7ff f860 	bl	800db54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea94:	4b2a      	ldr	r3, [pc, #168]	; (800eb40 <prvAddNewTaskToReadyList+0xb8>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	4a29      	ldr	r2, [pc, #164]	; (800eb40 <prvAddNewTaskToReadyList+0xb8>)
 800ea9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea9e:	4b29      	ldr	r3, [pc, #164]	; (800eb44 <prvAddNewTaskToReadyList+0xbc>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d109      	bne.n	800eaba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eaa6:	4a27      	ldr	r2, [pc, #156]	; (800eb44 <prvAddNewTaskToReadyList+0xbc>)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eaac:	4b24      	ldr	r3, [pc, #144]	; (800eb40 <prvAddNewTaskToReadyList+0xb8>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d110      	bne.n	800ead6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eab4:	f000 fc0e 	bl	800f2d4 <prvInitialiseTaskLists>
 800eab8:	e00d      	b.n	800ead6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eaba:	4b23      	ldr	r3, [pc, #140]	; (800eb48 <prvAddNewTaskToReadyList+0xc0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d109      	bne.n	800ead6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eac2:	4b20      	ldr	r3, [pc, #128]	; (800eb44 <prvAddNewTaskToReadyList+0xbc>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	429a      	cmp	r2, r3
 800eace:	d802      	bhi.n	800ead6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ead0:	4a1c      	ldr	r2, [pc, #112]	; (800eb44 <prvAddNewTaskToReadyList+0xbc>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ead6:	4b1d      	ldr	r3, [pc, #116]	; (800eb4c <prvAddNewTaskToReadyList+0xc4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	4a1b      	ldr	r2, [pc, #108]	; (800eb4c <prvAddNewTaskToReadyList+0xc4>)
 800eade:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae4:	2201      	movs	r2, #1
 800eae6:	409a      	lsls	r2, r3
 800eae8:	4b19      	ldr	r3, [pc, #100]	; (800eb50 <prvAddNewTaskToReadyList+0xc8>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	4a18      	ldr	r2, [pc, #96]	; (800eb50 <prvAddNewTaskToReadyList+0xc8>)
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4a15      	ldr	r2, [pc, #84]	; (800eb54 <prvAddNewTaskToReadyList+0xcc>)
 800eb00:	441a      	add	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3304      	adds	r3, #4
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7fe fe6e 	bl	800d7ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eb0e:	f7ff f851 	bl	800dbb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eb12:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <prvAddNewTaskToReadyList+0xc0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00e      	beq.n	800eb38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb1a:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <prvAddNewTaskToReadyList+0xbc>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d207      	bcs.n	800eb38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eb28:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <prvAddNewTaskToReadyList+0xd0>)
 800eb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb38:	bf00      	nop
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20009248 	.word	0x20009248
 800eb44:	20009148 	.word	0x20009148
 800eb48:	20009254 	.word	0x20009254
 800eb4c:	20009264 	.word	0x20009264
 800eb50:	20009250 	.word	0x20009250
 800eb54:	2000914c 	.word	0x2000914c
 800eb58:	e000ed04 	.word	0xe000ed04

0800eb5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb64:	2300      	movs	r3, #0
 800eb66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d017      	beq.n	800eb9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb6e:	4b13      	ldr	r3, [pc, #76]	; (800ebbc <vTaskDelay+0x60>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00a      	beq.n	800eb8c <vTaskDelay+0x30>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60bb      	str	r3, [r7, #8]
}
 800eb88:	bf00      	nop
 800eb8a:	e7fe      	b.n	800eb8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb8c:	f000 f87a 	bl	800ec84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb90:	2100      	movs	r1, #0
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fd00 	bl	800f598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb98:	f000 f882 	bl	800eca0 <xTaskResumeAll>
 800eb9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d107      	bne.n	800ebb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eba4:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <vTaskDelay+0x64>)
 800eba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ebb4:	bf00      	nop
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20009270 	.word	0x20009270
 800ebc0:	e000ed04 	.word	0xe000ed04

0800ebc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08a      	sub	sp, #40	; 0x28
 800ebc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ebd2:	463a      	mov	r2, r7
 800ebd4:	1d39      	adds	r1, r7, #4
 800ebd6:	f107 0308 	add.w	r3, r7, #8
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f1 feac 	bl	8000938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ebe0:	6839      	ldr	r1, [r7, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	9202      	str	r2, [sp, #8]
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	2300      	movs	r3, #0
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	460a      	mov	r2, r1
 800ebf2:	491e      	ldr	r1, [pc, #120]	; (800ec6c <vTaskStartScheduler+0xa8>)
 800ebf4:	481e      	ldr	r0, [pc, #120]	; (800ec70 <vTaskStartScheduler+0xac>)
 800ebf6:	f7ff fe13 	bl	800e820 <xTaskCreateStatic>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	4a1d      	ldr	r2, [pc, #116]	; (800ec74 <vTaskStartScheduler+0xb0>)
 800ebfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ec00:	4b1c      	ldr	r3, [pc, #112]	; (800ec74 <vTaskStartScheduler+0xb0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	e001      	b.n	800ec12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d116      	bne.n	800ec46 <vTaskStartScheduler+0x82>
	__asm volatile
 800ec18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	613b      	str	r3, [r7, #16]
}
 800ec2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec2c:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <vTaskStartScheduler+0xb4>)
 800ec2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec34:	4b11      	ldr	r3, [pc, #68]	; (800ec7c <vTaskStartScheduler+0xb8>)
 800ec36:	2201      	movs	r2, #1
 800ec38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec3a:	4b11      	ldr	r3, [pc, #68]	; (800ec80 <vTaskStartScheduler+0xbc>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec40:	f7fe fee6 	bl	800da10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec44:	e00e      	b.n	800ec64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4c:	d10a      	bne.n	800ec64 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	60fb      	str	r3, [r7, #12]
}
 800ec60:	bf00      	nop
 800ec62:	e7fe      	b.n	800ec62 <vTaskStartScheduler+0x9e>
}
 800ec64:	bf00      	nop
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	08011e90 	.word	0x08011e90
 800ec70:	0800f2a1 	.word	0x0800f2a1
 800ec74:	2000926c 	.word	0x2000926c
 800ec78:	20009268 	.word	0x20009268
 800ec7c:	20009254 	.word	0x20009254
 800ec80:	2000924c 	.word	0x2000924c

0800ec84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec88:	4b04      	ldr	r3, [pc, #16]	; (800ec9c <vTaskSuspendAll+0x18>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	4a03      	ldr	r2, [pc, #12]	; (800ec9c <vTaskSuspendAll+0x18>)
 800ec90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20009270 	.word	0x20009270

0800eca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ecae:	4b41      	ldr	r3, [pc, #260]	; (800edb4 <xTaskResumeAll+0x114>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10a      	bne.n	800eccc <xTaskResumeAll+0x2c>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	603b      	str	r3, [r7, #0]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eccc:	f7fe ff42 	bl	800db54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecd0:	4b38      	ldr	r3, [pc, #224]	; (800edb4 <xTaskResumeAll+0x114>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	4a37      	ldr	r2, [pc, #220]	; (800edb4 <xTaskResumeAll+0x114>)
 800ecd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecda:	4b36      	ldr	r3, [pc, #216]	; (800edb4 <xTaskResumeAll+0x114>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d161      	bne.n	800eda6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ece2:	4b35      	ldr	r3, [pc, #212]	; (800edb8 <xTaskResumeAll+0x118>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d05d      	beq.n	800eda6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecea:	e02e      	b.n	800ed4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecec:	4b33      	ldr	r3, [pc, #204]	; (800edbc <xTaskResumeAll+0x11c>)
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3318      	adds	r3, #24
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fe fdd3 	bl	800d8a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe fdce 	bl	800d8a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	409a      	lsls	r2, r3
 800ed10:	4b2b      	ldr	r3, [pc, #172]	; (800edc0 <xTaskResumeAll+0x120>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	4a2a      	ldr	r2, [pc, #168]	; (800edc0 <xTaskResumeAll+0x120>)
 800ed18:	6013      	str	r3, [r2, #0]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed1e:	4613      	mov	r3, r2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4a27      	ldr	r2, [pc, #156]	; (800edc4 <xTaskResumeAll+0x124>)
 800ed28:	441a      	add	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4610      	mov	r0, r2
 800ed32:	f7fe fd5a 	bl	800d7ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <xTaskResumeAll+0x128>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d302      	bcc.n	800ed4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ed44:	4b21      	ldr	r3, [pc, #132]	; (800edcc <xTaskResumeAll+0x12c>)
 800ed46:	2201      	movs	r2, #1
 800ed48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed4a:	4b1c      	ldr	r3, [pc, #112]	; (800edbc <xTaskResumeAll+0x11c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1cc      	bne.n	800ecec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed58:	f000 fb5a 	bl	800f410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed5c:	4b1c      	ldr	r3, [pc, #112]	; (800edd0 <xTaskResumeAll+0x130>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d010      	beq.n	800ed8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed68:	f000 f858 	bl	800ee1c <xTaskIncrementTick>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ed72:	4b16      	ldr	r3, [pc, #88]	; (800edcc <xTaskResumeAll+0x12c>)
 800ed74:	2201      	movs	r2, #1
 800ed76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1f1      	bne.n	800ed68 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ed84:	4b12      	ldr	r3, [pc, #72]	; (800edd0 <xTaskResumeAll+0x130>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed8a:	4b10      	ldr	r3, [pc, #64]	; (800edcc <xTaskResumeAll+0x12c>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d009      	beq.n	800eda6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed92:	2301      	movs	r3, #1
 800ed94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed96:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <xTaskResumeAll+0x134>)
 800ed98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed9c:	601a      	str	r2, [r3, #0]
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eda6:	f7fe ff05 	bl	800dbb4 <vPortExitCritical>

	return xAlreadyYielded;
 800edaa:	68bb      	ldr	r3, [r7, #8]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	20009270 	.word	0x20009270
 800edb8:	20009248 	.word	0x20009248
 800edbc:	20009208 	.word	0x20009208
 800edc0:	20009250 	.word	0x20009250
 800edc4:	2000914c 	.word	0x2000914c
 800edc8:	20009148 	.word	0x20009148
 800edcc:	2000925c 	.word	0x2000925c
 800edd0:	20009258 	.word	0x20009258
 800edd4:	e000ed04 	.word	0xe000ed04

0800edd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edde:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <xTaskGetTickCount+0x1c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ede4:	687b      	ldr	r3, [r7, #4]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	2000924c 	.word	0x2000924c

0800edf8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edfe:	f7fe ff8b 	bl	800dd18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ee02:	2300      	movs	r3, #0
 800ee04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ee06:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <xTaskGetTickCountFromISR+0x20>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee0c:	683b      	ldr	r3, [r7, #0]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	2000924c 	.word	0x2000924c

0800ee1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee22:	2300      	movs	r3, #0
 800ee24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee26:	4b4e      	ldr	r3, [pc, #312]	; (800ef60 <xTaskIncrementTick+0x144>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 808e 	bne.w	800ef4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee30:	4b4c      	ldr	r3, [pc, #304]	; (800ef64 <xTaskIncrementTick+0x148>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee38:	4a4a      	ldr	r2, [pc, #296]	; (800ef64 <xTaskIncrementTick+0x148>)
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d120      	bne.n	800ee86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee44:	4b48      	ldr	r3, [pc, #288]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <xTaskIncrementTick+0x48>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	603b      	str	r3, [r7, #0]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <xTaskIncrementTick+0x46>
 800ee64:	4b40      	ldr	r3, [pc, #256]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	4b40      	ldr	r3, [pc, #256]	; (800ef6c <xTaskIncrementTick+0x150>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a3e      	ldr	r2, [pc, #248]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	4a3e      	ldr	r2, [pc, #248]	; (800ef6c <xTaskIncrementTick+0x150>)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	4b3d      	ldr	r3, [pc, #244]	; (800ef70 <xTaskIncrementTick+0x154>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	4a3c      	ldr	r2, [pc, #240]	; (800ef70 <xTaskIncrementTick+0x154>)
 800ee80:	6013      	str	r3, [r2, #0]
 800ee82:	f000 fac5 	bl	800f410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee86:	4b3b      	ldr	r3, [pc, #236]	; (800ef74 <xTaskIncrementTick+0x158>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d348      	bcc.n	800ef22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee90:	4b35      	ldr	r3, [pc, #212]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d104      	bne.n	800eea4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee9a:	4b36      	ldr	r3, [pc, #216]	; (800ef74 <xTaskIncrementTick+0x158>)
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eea0:	601a      	str	r2, [r3, #0]
					break;
 800eea2:	e03e      	b.n	800ef22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eea4:	4b30      	ldr	r3, [pc, #192]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eeb4:	693a      	ldr	r2, [r7, #16]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d203      	bcs.n	800eec4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eebc:	4a2d      	ldr	r2, [pc, #180]	; (800ef74 <xTaskIncrementTick+0x158>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eec2:	e02e      	b.n	800ef22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fceb 	bl	800d8a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d004      	beq.n	800eee0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	3318      	adds	r3, #24
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe fce2 	bl	800d8a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee4:	2201      	movs	r2, #1
 800eee6:	409a      	lsls	r2, r3
 800eee8:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <xTaskIncrementTick+0x15c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4313      	orrs	r3, r2
 800eeee:	4a22      	ldr	r2, [pc, #136]	; (800ef78 <xTaskIncrementTick+0x15c>)
 800eef0:	6013      	str	r3, [r2, #0]
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef6:	4613      	mov	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4a1f      	ldr	r2, [pc, #124]	; (800ef7c <xTaskIncrementTick+0x160>)
 800ef00:	441a      	add	r2, r3
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	3304      	adds	r3, #4
 800ef06:	4619      	mov	r1, r3
 800ef08:	4610      	mov	r0, r2
 800ef0a:	f7fe fc6e 	bl	800d7ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef12:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <xTaskIncrementTick+0x164>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d3b9      	bcc.n	800ee90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef20:	e7b6      	b.n	800ee90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef22:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <xTaskIncrementTick+0x164>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef28:	4914      	ldr	r1, [pc, #80]	; (800ef7c <xTaskIncrementTick+0x160>)
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4413      	add	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	440b      	add	r3, r1
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d901      	bls.n	800ef3e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ef3e:	4b11      	ldr	r3, [pc, #68]	; (800ef84 <xTaskIncrementTick+0x168>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d007      	beq.n	800ef56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ef46:	2301      	movs	r3, #1
 800ef48:	617b      	str	r3, [r7, #20]
 800ef4a:	e004      	b.n	800ef56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef4c:	4b0e      	ldr	r3, [pc, #56]	; (800ef88 <xTaskIncrementTick+0x16c>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	3301      	adds	r3, #1
 800ef52:	4a0d      	ldr	r2, [pc, #52]	; (800ef88 <xTaskIncrementTick+0x16c>)
 800ef54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef56:	697b      	ldr	r3, [r7, #20]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20009270 	.word	0x20009270
 800ef64:	2000924c 	.word	0x2000924c
 800ef68:	20009200 	.word	0x20009200
 800ef6c:	20009204 	.word	0x20009204
 800ef70:	20009260 	.word	0x20009260
 800ef74:	20009268 	.word	0x20009268
 800ef78:	20009250 	.word	0x20009250
 800ef7c:	2000914c 	.word	0x2000914c
 800ef80:	20009148 	.word	0x20009148
 800ef84:	2000925c 	.word	0x2000925c
 800ef88:	20009258 	.word	0x20009258

0800ef8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b088      	sub	sp, #32
 800ef90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef92:	4b39      	ldr	r3, [pc, #228]	; (800f078 <vTaskSwitchContext+0xec>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef9a:	4b38      	ldr	r3, [pc, #224]	; (800f07c <vTaskSwitchContext+0xf0>)
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800efa0:	e066      	b.n	800f070 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800efa2:	4b36      	ldr	r3, [pc, #216]	; (800f07c <vTaskSwitchContext+0xf0>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800efa8:	4b35      	ldr	r3, [pc, #212]	; (800f080 <vTaskSwitchContext+0xf4>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efae:	61fb      	str	r3, [r7, #28]
 800efb0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800efb4:	61bb      	str	r3, [r7, #24]
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	69ba      	ldr	r2, [r7, #24]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d111      	bne.n	800efe4 <vTaskSwitchContext+0x58>
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	3304      	adds	r3, #4
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	69ba      	ldr	r2, [r7, #24]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d10b      	bne.n	800efe4 <vTaskSwitchContext+0x58>
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	3308      	adds	r3, #8
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d105      	bne.n	800efe4 <vTaskSwitchContext+0x58>
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	330c      	adds	r3, #12
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69ba      	ldr	r2, [r7, #24]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d008      	beq.n	800eff6 <vTaskSwitchContext+0x6a>
 800efe4:	4b26      	ldr	r3, [pc, #152]	; (800f080 <vTaskSwitchContext+0xf4>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	4b25      	ldr	r3, [pc, #148]	; (800f080 <vTaskSwitchContext+0xf4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3334      	adds	r3, #52	; 0x34
 800efee:	4619      	mov	r1, r3
 800eff0:	4610      	mov	r0, r2
 800eff2:	f7f1 fc8e 	bl	8000912 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff6:	4b23      	ldr	r3, [pc, #140]	; (800f084 <vTaskSwitchContext+0xf8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	fab3 f383 	clz	r3, r3
 800f002:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f004:	7afb      	ldrb	r3, [r7, #11]
 800f006:	f1c3 031f 	rsb	r3, r3, #31
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	491e      	ldr	r1, [pc, #120]	; (800f088 <vTaskSwitchContext+0xfc>)
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	4613      	mov	r3, r2
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	4413      	add	r3, r2
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	440b      	add	r3, r1
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10a      	bne.n	800f036 <vTaskSwitchContext+0xaa>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	607b      	str	r3, [r7, #4]
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <vTaskSwitchContext+0xa8>
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	4613      	mov	r3, r2
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4413      	add	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4a11      	ldr	r2, [pc, #68]	; (800f088 <vTaskSwitchContext+0xfc>)
 800f042:	4413      	add	r3, r2
 800f044:	613b      	str	r3, [r7, #16]
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	605a      	str	r2, [r3, #4]
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	685a      	ldr	r2, [r3, #4]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	3308      	adds	r3, #8
 800f058:	429a      	cmp	r2, r3
 800f05a:	d104      	bne.n	800f066 <vTaskSwitchContext+0xda>
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	605a      	str	r2, [r3, #4]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	4a04      	ldr	r2, [pc, #16]	; (800f080 <vTaskSwitchContext+0xf4>)
 800f06e:	6013      	str	r3, [r2, #0]
}
 800f070:	bf00      	nop
 800f072:	3720      	adds	r7, #32
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20009270 	.word	0x20009270
 800f07c:	2000925c 	.word	0x2000925c
 800f080:	20009148 	.word	0x20009148
 800f084:	20009250 	.word	0x20009250
 800f088:	2000914c 	.word	0x2000914c

0800f08c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10a      	bne.n	800f0b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	60fb      	str	r3, [r7, #12]
}
 800f0ae:	bf00      	nop
 800f0b0:	e7fe      	b.n	800f0b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0b2:	4b07      	ldr	r3, [pc, #28]	; (800f0d0 <vTaskPlaceOnEventList+0x44>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3318      	adds	r3, #24
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7fe fbb9 	bl	800d832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	6838      	ldr	r0, [r7, #0]
 800f0c4:	f000 fa68 	bl	800f598 <prvAddCurrentTaskToDelayedList>
}
 800f0c8:	bf00      	nop
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	20009148 	.word	0x20009148

0800f0d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10a      	bne.n	800f100 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	60fb      	str	r3, [r7, #12]
}
 800f0fc:	bf00      	nop
 800f0fe:	e7fe      	b.n	800f0fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	3318      	adds	r3, #24
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe fbcd 	bl	800d8a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f10a:	4b1d      	ldr	r3, [pc, #116]	; (800f180 <xTaskRemoveFromEventList+0xac>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d11c      	bne.n	800f14c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	3304      	adds	r3, #4
 800f116:	4618      	mov	r0, r3
 800f118:	f7fe fbc4 	bl	800d8a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f120:	2201      	movs	r2, #1
 800f122:	409a      	lsls	r2, r3
 800f124:	4b17      	ldr	r3, [pc, #92]	; (800f184 <xTaskRemoveFromEventList+0xb0>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4313      	orrs	r3, r2
 800f12a:	4a16      	ldr	r2, [pc, #88]	; (800f184 <xTaskRemoveFromEventList+0xb0>)
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f132:	4613      	mov	r3, r2
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	4413      	add	r3, r2
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	4a13      	ldr	r2, [pc, #76]	; (800f188 <xTaskRemoveFromEventList+0xb4>)
 800f13c:	441a      	add	r2, r3
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	3304      	adds	r3, #4
 800f142:	4619      	mov	r1, r3
 800f144:	4610      	mov	r0, r2
 800f146:	f7fe fb50 	bl	800d7ea <vListInsertEnd>
 800f14a:	e005      	b.n	800f158 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	3318      	adds	r3, #24
 800f150:	4619      	mov	r1, r3
 800f152:	480e      	ldr	r0, [pc, #56]	; (800f18c <xTaskRemoveFromEventList+0xb8>)
 800f154:	f7fe fb49 	bl	800d7ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15c:	4b0c      	ldr	r3, [pc, #48]	; (800f190 <xTaskRemoveFromEventList+0xbc>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f162:	429a      	cmp	r2, r3
 800f164:	d905      	bls.n	800f172 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f166:	2301      	movs	r3, #1
 800f168:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f16a:	4b0a      	ldr	r3, [pc, #40]	; (800f194 <xTaskRemoveFromEventList+0xc0>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
 800f170:	e001      	b.n	800f176 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f172:	2300      	movs	r3, #0
 800f174:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f176:	697b      	ldr	r3, [r7, #20]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3718      	adds	r7, #24
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	20009270 	.word	0x20009270
 800f184:	20009250 	.word	0x20009250
 800f188:	2000914c 	.word	0x2000914c
 800f18c:	20009208 	.word	0x20009208
 800f190:	20009148 	.word	0x20009148
 800f194:	2000925c 	.word	0x2000925c

0800f198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f1a0:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <vTaskInternalSetTimeOutState+0x24>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f1a8:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <vTaskInternalSetTimeOutState+0x28>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	605a      	str	r2, [r3, #4]
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	20009260 	.word	0x20009260
 800f1c0:	2000924c 	.word	0x2000924c

0800f1c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b088      	sub	sp, #32
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10a      	bne.n	800f1ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	613b      	str	r3, [r7, #16]
}
 800f1e6:	bf00      	nop
 800f1e8:	e7fe      	b.n	800f1e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d10a      	bne.n	800f206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	60fb      	str	r3, [r7, #12]
}
 800f202:	bf00      	nop
 800f204:	e7fe      	b.n	800f204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f206:	f7fe fca5 	bl	800db54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f20a:	4b1d      	ldr	r3, [pc, #116]	; (800f280 <xTaskCheckForTimeOut+0xbc>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	1ad3      	subs	r3, r2, r3
 800f218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f222:	d102      	bne.n	800f22a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f224:	2300      	movs	r3, #0
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	e023      	b.n	800f272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	4b15      	ldr	r3, [pc, #84]	; (800f284 <xTaskCheckForTimeOut+0xc0>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d007      	beq.n	800f246 <xTaskCheckForTimeOut+0x82>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	69ba      	ldr	r2, [r7, #24]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d302      	bcc.n	800f246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f240:	2301      	movs	r3, #1
 800f242:	61fb      	str	r3, [r7, #28]
 800f244:	e015      	b.n	800f272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d20b      	bcs.n	800f268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	1ad2      	subs	r2, r2, r3
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ff9b 	bl	800f198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f262:	2300      	movs	r3, #0
 800f264:	61fb      	str	r3, [r7, #28]
 800f266:	e004      	b.n	800f272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2200      	movs	r2, #0
 800f26c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f26e:	2301      	movs	r3, #1
 800f270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f272:	f7fe fc9f 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800f276:	69fb      	ldr	r3, [r7, #28]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3720      	adds	r7, #32
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	2000924c 	.word	0x2000924c
 800f284:	20009260 	.word	0x20009260

0800f288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f288:	b480      	push	{r7}
 800f28a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <vTaskMissedYield+0x14>)
 800f28e:	2201      	movs	r2, #1
 800f290:	601a      	str	r2, [r3, #0]
}
 800f292:	bf00      	nop
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	2000925c 	.word	0x2000925c

0800f2a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f2a8:	f000 f854 	bl	800f354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f2ac:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <prvIdleTask+0x2c>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d907      	bls.n	800f2c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f2b4:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <prvIdleTask+0x30>)
 800f2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ba:	601a      	str	r2, [r3, #0]
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f2c4:	f7f1 fb1e 	bl	8000904 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f2c8:	e7ee      	b.n	800f2a8 <prvIdleTask+0x8>
 800f2ca:	bf00      	nop
 800f2cc:	2000914c 	.word	0x2000914c
 800f2d0:	e000ed04 	.word	0xe000ed04

0800f2d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2da:	2300      	movs	r3, #0
 800f2dc:	607b      	str	r3, [r7, #4]
 800f2de:	e00c      	b.n	800f2fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4a12      	ldr	r2, [pc, #72]	; (800f334 <prvInitialiseTaskLists+0x60>)
 800f2ec:	4413      	add	r3, r2
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe fa4e 	bl	800d790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	607b      	str	r3, [r7, #4]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b06      	cmp	r3, #6
 800f2fe:	d9ef      	bls.n	800f2e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f300:	480d      	ldr	r0, [pc, #52]	; (800f338 <prvInitialiseTaskLists+0x64>)
 800f302:	f7fe fa45 	bl	800d790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f306:	480d      	ldr	r0, [pc, #52]	; (800f33c <prvInitialiseTaskLists+0x68>)
 800f308:	f7fe fa42 	bl	800d790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f30c:	480c      	ldr	r0, [pc, #48]	; (800f340 <prvInitialiseTaskLists+0x6c>)
 800f30e:	f7fe fa3f 	bl	800d790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f312:	480c      	ldr	r0, [pc, #48]	; (800f344 <prvInitialiseTaskLists+0x70>)
 800f314:	f7fe fa3c 	bl	800d790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f318:	480b      	ldr	r0, [pc, #44]	; (800f348 <prvInitialiseTaskLists+0x74>)
 800f31a:	f7fe fa39 	bl	800d790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f31e:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <prvInitialiseTaskLists+0x78>)
 800f320:	4a05      	ldr	r2, [pc, #20]	; (800f338 <prvInitialiseTaskLists+0x64>)
 800f322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f324:	4b0a      	ldr	r3, [pc, #40]	; (800f350 <prvInitialiseTaskLists+0x7c>)
 800f326:	4a05      	ldr	r2, [pc, #20]	; (800f33c <prvInitialiseTaskLists+0x68>)
 800f328:	601a      	str	r2, [r3, #0]
}
 800f32a:	bf00      	nop
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	2000914c 	.word	0x2000914c
 800f338:	200091d8 	.word	0x200091d8
 800f33c:	200091ec 	.word	0x200091ec
 800f340:	20009208 	.word	0x20009208
 800f344:	2000921c 	.word	0x2000921c
 800f348:	20009234 	.word	0x20009234
 800f34c:	20009200 	.word	0x20009200
 800f350:	20009204 	.word	0x20009204

0800f354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f35a:	e019      	b.n	800f390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f35c:	f7fe fbfa 	bl	800db54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f360:	4b10      	ldr	r3, [pc, #64]	; (800f3a4 <prvCheckTasksWaitingTermination+0x50>)
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe fa99 	bl	800d8a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f372:	4b0d      	ldr	r3, [pc, #52]	; (800f3a8 <prvCheckTasksWaitingTermination+0x54>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3b01      	subs	r3, #1
 800f378:	4a0b      	ldr	r2, [pc, #44]	; (800f3a8 <prvCheckTasksWaitingTermination+0x54>)
 800f37a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f37c:	4b0b      	ldr	r3, [pc, #44]	; (800f3ac <prvCheckTasksWaitingTermination+0x58>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	4a0a      	ldr	r2, [pc, #40]	; (800f3ac <prvCheckTasksWaitingTermination+0x58>)
 800f384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f386:	f7fe fc15 	bl	800dbb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f810 	bl	800f3b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f390:	4b06      	ldr	r3, [pc, #24]	; (800f3ac <prvCheckTasksWaitingTermination+0x58>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1e1      	bne.n	800f35c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	3708      	adds	r7, #8
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000921c 	.word	0x2000921c
 800f3a8:	20009248 	.word	0x20009248
 800f3ac:	20009230 	.word	0x20009230

0800f3b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d108      	bne.n	800f3d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fe f8c4 	bl	800d554 <vPortFree>
				vPortFree( pxTCB );
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7fe f8c1 	bl	800d554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3d2:	e018      	b.n	800f406 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d103      	bne.n	800f3e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fe f8b8 	bl	800d554 <vPortFree>
	}
 800f3e4:	e00f      	b.n	800f406 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d00a      	beq.n	800f406 <prvDeleteTCB+0x56>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	60fb      	str	r3, [r7, #12]
}
 800f402:	bf00      	nop
 800f404:	e7fe      	b.n	800f404 <prvDeleteTCB+0x54>
	}
 800f406:	bf00      	nop
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
	...

0800f410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f416:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <prvResetNextTaskUnblockTime+0x38>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d104      	bne.n	800f42a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f420:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <prvResetNextTaskUnblockTime+0x3c>)
 800f422:	f04f 32ff 	mov.w	r2, #4294967295
 800f426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f428:	e008      	b.n	800f43c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f42a:	4b07      	ldr	r3, [pc, #28]	; (800f448 <prvResetNextTaskUnblockTime+0x38>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	4a04      	ldr	r2, [pc, #16]	; (800f44c <prvResetNextTaskUnblockTime+0x3c>)
 800f43a:	6013      	str	r3, [r2, #0]
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr
 800f448:	20009200 	.word	0x20009200
 800f44c:	20009268 	.word	0x20009268

0800f450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f456:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <xTaskGetSchedulerState+0x34>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d102      	bne.n	800f464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f45e:	2301      	movs	r3, #1
 800f460:	607b      	str	r3, [r7, #4]
 800f462:	e008      	b.n	800f476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f464:	4b08      	ldr	r3, [pc, #32]	; (800f488 <xTaskGetSchedulerState+0x38>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f46c:	2302      	movs	r3, #2
 800f46e:	607b      	str	r3, [r7, #4]
 800f470:	e001      	b.n	800f476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f472:	2300      	movs	r3, #0
 800f474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f476:	687b      	ldr	r3, [r7, #4]
	}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	20009254 	.word	0x20009254
 800f488:	20009270 	.word	0x20009270

0800f48c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f498:	2300      	movs	r3, #0
 800f49a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d06e      	beq.n	800f580 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f4a2:	4b3a      	ldr	r3, [pc, #232]	; (800f58c <xTaskPriorityDisinherit+0x100>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d00a      	beq.n	800f4c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	60fb      	str	r3, [r7, #12]
}
 800f4be:	bf00      	nop
 800f4c0:	e7fe      	b.n	800f4c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10a      	bne.n	800f4e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	60bb      	str	r3, [r7, #8]
}
 800f4dc:	bf00      	nop
 800f4de:	e7fe      	b.n	800f4de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4e4:	1e5a      	subs	r2, r3, #1
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d044      	beq.n	800f580 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d140      	bne.n	800f580 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	3304      	adds	r3, #4
 800f502:	4618      	mov	r0, r3
 800f504:	f7fe f9ce 	bl	800d8a4 <uxListRemove>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d115      	bne.n	800f53a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f512:	491f      	ldr	r1, [pc, #124]	; (800f590 <xTaskPriorityDisinherit+0x104>)
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	440b      	add	r3, r1
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10a      	bne.n	800f53a <xTaskPriorityDisinherit+0xae>
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f528:	2201      	movs	r2, #1
 800f52a:	fa02 f303 	lsl.w	r3, r2, r3
 800f52e:	43da      	mvns	r2, r3
 800f530:	4b18      	ldr	r3, [pc, #96]	; (800f594 <xTaskPriorityDisinherit+0x108>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4013      	ands	r3, r2
 800f536:	4a17      	ldr	r2, [pc, #92]	; (800f594 <xTaskPriorityDisinherit+0x108>)
 800f538:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f546:	f1c3 0207 	rsb	r2, r3, #7
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f552:	2201      	movs	r2, #1
 800f554:	409a      	lsls	r2, r3
 800f556:	4b0f      	ldr	r3, [pc, #60]	; (800f594 <xTaskPriorityDisinherit+0x108>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	4a0d      	ldr	r2, [pc, #52]	; (800f594 <xTaskPriorityDisinherit+0x108>)
 800f55e:	6013      	str	r3, [r2, #0]
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f564:	4613      	mov	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4a08      	ldr	r2, [pc, #32]	; (800f590 <xTaskPriorityDisinherit+0x104>)
 800f56e:	441a      	add	r2, r3
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	3304      	adds	r3, #4
 800f574:	4619      	mov	r1, r3
 800f576:	4610      	mov	r0, r2
 800f578:	f7fe f937 	bl	800d7ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f57c:	2301      	movs	r3, #1
 800f57e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f580:	697b      	ldr	r3, [r7, #20]
	}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20009148 	.word	0x20009148
 800f590:	2000914c 	.word	0x2000914c
 800f594:	20009250 	.word	0x20009250

0800f598 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f5a2:	4b29      	ldr	r3, [pc, #164]	; (800f648 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5a8:	4b28      	ldr	r3, [pc, #160]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3304      	adds	r3, #4
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe f978 	bl	800d8a4 <uxListRemove>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10b      	bne.n	800f5d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f5ba:	4b24      	ldr	r3, [pc, #144]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5c6:	43da      	mvns	r2, r3
 800f5c8:	4b21      	ldr	r3, [pc, #132]	; (800f650 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	4a20      	ldr	r2, [pc, #128]	; (800f650 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f5d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5d8:	d10a      	bne.n	800f5f0 <prvAddCurrentTaskToDelayedList+0x58>
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d007      	beq.n	800f5f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5e0:	4b1a      	ldr	r3, [pc, #104]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	481a      	ldr	r0, [pc, #104]	; (800f654 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f5ea:	f7fe f8fe 	bl	800d7ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f5ee:	e026      	b.n	800f63e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f5f8:	4b14      	ldr	r3, [pc, #80]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	429a      	cmp	r2, r3
 800f606:	d209      	bcs.n	800f61c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f608:	4b13      	ldr	r3, [pc, #76]	; (800f658 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	4b0f      	ldr	r3, [pc, #60]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3304      	adds	r3, #4
 800f612:	4619      	mov	r1, r3
 800f614:	4610      	mov	r0, r2
 800f616:	f7fe f90c 	bl	800d832 <vListInsert>
}
 800f61a:	e010      	b.n	800f63e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f61c:	4b0f      	ldr	r3, [pc, #60]	; (800f65c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	3304      	adds	r3, #4
 800f626:	4619      	mov	r1, r3
 800f628:	4610      	mov	r0, r2
 800f62a:	f7fe f902 	bl	800d832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f62e:	4b0c      	ldr	r3, [pc, #48]	; (800f660 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	429a      	cmp	r2, r3
 800f636:	d202      	bcs.n	800f63e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f638:	4a09      	ldr	r2, [pc, #36]	; (800f660 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	6013      	str	r3, [r2, #0]
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	2000924c 	.word	0x2000924c
 800f64c:	20009148 	.word	0x20009148
 800f650:	20009250 	.word	0x20009250
 800f654:	20009234 	.word	0x20009234
 800f658:	20009204 	.word	0x20009204
 800f65c:	20009200 	.word	0x20009200
 800f660:	20009268 	.word	0x20009268

0800f664 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b089      	sub	sp, #36	; 0x24
 800f668:	af04      	add	r7, sp, #16
 800f66a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f66c:	2301      	movs	r3, #1
 800f66e:	2202      	movs	r2, #2
 800f670:	2102      	movs	r1, #2
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fcb8 	bl	800ffe8 <USBH_FindInterface>
 800f678:	4603      	mov	r3, r0
 800f67a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
 800f67e:	2bff      	cmp	r3, #255	; 0xff
 800f680:	d002      	beq.n	800f688 <USBH_CDC_InterfaceInit+0x24>
 800f682:	7bfb      	ldrb	r3, [r7, #15]
 800f684:	2b01      	cmp	r3, #1
 800f686:	d901      	bls.n	800f68c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f688:	2302      	movs	r3, #2
 800f68a:	e13d      	b.n	800f908 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fc8d 	bl	800ffb0 <USBH_SelectInterface>
 800f696:	4603      	mov	r3, r0
 800f698:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f69a:	7bbb      	ldrb	r3, [r7, #14]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e131      	b.n	800f908 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800f6aa:	2050      	movs	r0, #80	; 0x50
 800f6ac:	f002 fa4e 	bl	8011b4c <malloc>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6ba:	69db      	ldr	r3, [r3, #28]
 800f6bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d101      	bne.n	800f6c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	e11f      	b.n	800f908 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f6c8:	2250      	movs	r2, #80	; 0x50
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	68b8      	ldr	r0, [r7, #8]
 800f6ce:	f002 fa5b 	bl	8011b88 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	211a      	movs	r1, #26
 800f6d8:	fb01 f303 	mul.w	r3, r1, r3
 800f6dc:	4413      	add	r3, r2
 800f6de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	b25b      	sxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	da15      	bge.n	800f716 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	211a      	movs	r1, #26
 800f6f0:	fb01 f303 	mul.w	r3, r1, r3
 800f6f4:	4413      	add	r3, r2
 800f6f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f6fa:	781a      	ldrb	r2, [r3, #0]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	211a      	movs	r1, #26
 800f706:	fb01 f303 	mul.w	r3, r1, r3
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f710:	881a      	ldrh	r2, [r3, #0]
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	785b      	ldrb	r3, [r3, #1]
 800f71a:	4619      	mov	r1, r3
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f002 f988 	bl	8011a32 <USBH_AllocPipe>
 800f722:	4603      	mov	r3, r0
 800f724:	461a      	mov	r2, r3
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	7819      	ldrb	r1, [r3, #0]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	7858      	ldrb	r0, [r3, #1]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	8952      	ldrh	r2, [r2, #10]
 800f742:	9202      	str	r2, [sp, #8]
 800f744:	2203      	movs	r2, #3
 800f746:	9201      	str	r2, [sp, #4]
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	4623      	mov	r3, r4
 800f74c:	4602      	mov	r2, r0
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f002 f940 	bl	80119d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2200      	movs	r2, #0
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f7f2 fecb 	bl	80024f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f762:	2300      	movs	r3, #0
 800f764:	2200      	movs	r2, #0
 800f766:	210a      	movs	r1, #10
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 fc3d 	bl	800ffe8 <USBH_FindInterface>
 800f76e:	4603      	mov	r3, r0
 800f770:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f772:	7bfb      	ldrb	r3, [r7, #15]
 800f774:	2bff      	cmp	r3, #255	; 0xff
 800f776:	d002      	beq.n	800f77e <USBH_CDC_InterfaceInit+0x11a>
 800f778:	7bfb      	ldrb	r3, [r7, #15]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d901      	bls.n	800f782 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f77e:	2302      	movs	r3, #2
 800f780:	e0c2      	b.n	800f908 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f782:	7bfb      	ldrb	r3, [r7, #15]
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	211a      	movs	r1, #26
 800f788:	fb01 f303 	mul.w	r3, r1, r3
 800f78c:	4413      	add	r3, r2
 800f78e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	b25b      	sxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	da16      	bge.n	800f7c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f79a:	7bfb      	ldrb	r3, [r7, #15]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	211a      	movs	r1, #26
 800f7a0:	fb01 f303 	mul.w	r3, r1, r3
 800f7a4:	4413      	add	r3, r2
 800f7a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f7aa:	781a      	ldrb	r2, [r3, #0]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	211a      	movs	r1, #26
 800f7b6:	fb01 f303 	mul.w	r3, r1, r3
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f7c0:	881a      	ldrh	r2, [r3, #0]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	835a      	strh	r2, [r3, #26]
 800f7c6:	e015      	b.n	800f7f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	211a      	movs	r1, #26
 800f7ce:	fb01 f303 	mul.w	r3, r1, r3
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f7de:	7bfb      	ldrb	r3, [r7, #15]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	211a      	movs	r1, #26
 800f7e4:	fb01 f303 	mul.w	r3, r1, r3
 800f7e8:	4413      	add	r3, r2
 800f7ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f7ee:	881a      	ldrh	r2, [r3, #0]
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	211a      	movs	r1, #26
 800f7fa:	fb01 f303 	mul.w	r3, r1, r3
 800f7fe:	4413      	add	r3, r2
 800f800:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	b25b      	sxtb	r3, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	da16      	bge.n	800f83a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	211a      	movs	r1, #26
 800f812:	fb01 f303 	mul.w	r3, r1, r3
 800f816:	4413      	add	r3, r2
 800f818:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f81c:	781a      	ldrb	r2, [r3, #0]
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	211a      	movs	r1, #26
 800f828:	fb01 f303 	mul.w	r3, r1, r3
 800f82c:	4413      	add	r3, r2
 800f82e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f832:	881a      	ldrh	r2, [r3, #0]
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	835a      	strh	r2, [r3, #26]
 800f838:	e015      	b.n	800f866 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	211a      	movs	r1, #26
 800f840:	fb01 f303 	mul.w	r3, r1, r3
 800f844:	4413      	add	r3, r2
 800f846:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f84a:	781a      	ldrb	r2, [r3, #0]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	211a      	movs	r1, #26
 800f856:	fb01 f303 	mul.w	r3, r1, r3
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f860:	881a      	ldrh	r2, [r3, #0]
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	7b9b      	ldrb	r3, [r3, #14]
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f002 f8e0 	bl	8011a32 <USBH_AllocPipe>
 800f872:	4603      	mov	r3, r0
 800f874:	461a      	mov	r2, r3
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	7bdb      	ldrb	r3, [r3, #15]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f002 f8d6 	bl	8011a32 <USBH_AllocPipe>
 800f886:	4603      	mov	r3, r0
 800f888:	461a      	mov	r2, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	7b59      	ldrb	r1, [r3, #13]
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	7b98      	ldrb	r0, [r3, #14]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	8b12      	ldrh	r2, [r2, #24]
 800f8a6:	9202      	str	r2, [sp, #8]
 800f8a8:	2202      	movs	r2, #2
 800f8aa:	9201      	str	r2, [sp, #4]
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	4623      	mov	r3, r4
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f002 f88e 	bl	80119d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	7b19      	ldrb	r1, [r3, #12]
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	7bd8      	ldrb	r0, [r3, #15]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	8b52      	ldrh	r2, [r2, #26]
 800f8d0:	9202      	str	r2, [sp, #8]
 800f8d2:	2202      	movs	r2, #2
 800f8d4:	9201      	str	r2, [sp, #4]
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	4623      	mov	r3, r4
 800f8da:	4602      	mov	r2, r0
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f002 f879 	bl	80119d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	7b5b      	ldrb	r3, [r3, #13]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7f2 fe00 	bl	80024f8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	7b1b      	ldrb	r3, [r3, #12]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7f2 fdf9 	bl	80024f8 <USBH_LL_SetToggle>

  return USBH_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3714      	adds	r7, #20
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd90      	pop	{r4, r7, pc}

0800f910 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f91e:	69db      	ldr	r3, [r3, #28]
 800f920:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00e      	beq.n	800f948 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	4619      	mov	r1, r3
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f002 f86e 	bl	8011a12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f002 f899 	bl	8011a74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	7b1b      	ldrb	r3, [r3, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00e      	beq.n	800f96e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	7b1b      	ldrb	r3, [r3, #12]
 800f954:	4619      	mov	r1, r3
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f002 f85b 	bl	8011a12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	7b1b      	ldrb	r3, [r3, #12]
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f002 f886 	bl	8011a74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	7b5b      	ldrb	r3, [r3, #13]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00e      	beq.n	800f994 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	7b5b      	ldrb	r3, [r3, #13]
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f002 f848 	bl	8011a12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	7b5b      	ldrb	r3, [r3, #13]
 800f986:	4619      	mov	r1, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f002 f873 	bl	8011a74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2200      	movs	r2, #0
 800f992:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f99a:	69db      	ldr	r3, [r3, #28]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00b      	beq.n	800f9b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9a6:	69db      	ldr	r3, [r3, #28]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 f8d7 	bl	8011b5c <free>
    phost->pActiveClass->pData = 0U;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	3340      	adds	r3, #64	; 0x40
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f8b1 	bl	800fb42 <GetLineCoding>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f9e4:	7afb      	ldrb	r3, [r7, #11]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d105      	bne.n	800f9f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9f0:	2102      	movs	r1, #2
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f9f6:	7afb      	ldrb	r3, [r7, #11]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa16:	69db      	ldr	r3, [r3, #28]
 800fa18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fa20:	2b04      	cmp	r3, #4
 800fa22:	d877      	bhi.n	800fb14 <USBH_CDC_Process+0x114>
 800fa24:	a201      	add	r2, pc, #4	; (adr r2, 800fa2c <USBH_CDC_Process+0x2c>)
 800fa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2a:	bf00      	nop
 800fa2c:	0800fa41 	.word	0x0800fa41
 800fa30:	0800fa47 	.word	0x0800fa47
 800fa34:	0800fa77 	.word	0x0800fa77
 800fa38:	0800faeb 	.word	0x0800faeb
 800fa3c:	0800faf9 	.word	0x0800faf9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73fb      	strb	r3, [r7, #15]
      break;
 800fa44:	e06d      	b.n	800fb22 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f897 	bl	800fb80 <SetLineCoding>
 800fa52:	4603      	mov	r3, r0
 800fa54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fa56:	7bbb      	ldrb	r3, [r7, #14]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d104      	bne.n	800fa66 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2202      	movs	r2, #2
 800fa60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fa64:	e058      	b.n	800fb18 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800fa66:	7bbb      	ldrb	r3, [r7, #14]
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d055      	beq.n	800fb18 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2204      	movs	r2, #4
 800fa70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fa74:	e050      	b.n	800fb18 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	3340      	adds	r3, #64	; 0x40
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 f860 	bl	800fb42 <GetLineCoding>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d126      	bne.n	800fada <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa9e:	791b      	ldrb	r3, [r3, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d13b      	bne.n	800fb1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d133      	bne.n	800fb1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fabe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d12b      	bne.n	800fb1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800facc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800face:	429a      	cmp	r2, r3
 800fad0:	d124      	bne.n	800fb1c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f982 	bl	800fddc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fad8:	e020      	b.n	800fb1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d01d      	beq.n	800fb1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2204      	movs	r2, #4
 800fae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fae8:	e018      	b.n	800fb1c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f867 	bl	800fbbe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f8f6 	bl	800fce2 <CDC_ProcessReception>
      break;
 800faf6:	e014      	b.n	800fb22 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800faf8:	2100      	movs	r1, #0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f001 f95b 	bl	8010db6 <USBH_ClrFeature>
 800fb00:	4603      	mov	r3, r0
 800fb02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fb04:	7bbb      	ldrb	r3, [r7, #14]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10a      	bne.n	800fb20 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800fb12:	e005      	b.n	800fb20 <USBH_CDC_Process+0x120>

    default:
      break;
 800fb14:	bf00      	nop
 800fb16:	e004      	b.n	800fb22 <USBH_CDC_Process+0x122>
      break;
 800fb18:	bf00      	nop
 800fb1a:	e002      	b.n	800fb22 <USBH_CDC_Process+0x122>
      break;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <USBH_CDC_Process+0x122>
      break;
 800fb20:	bf00      	nop

  }

  return status;
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b082      	sub	sp, #8
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	22a1      	movs	r2, #161	; 0xa1
 800fb50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2221      	movs	r2, #33	; 0x21
 800fb56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2207      	movs	r2, #7
 800fb68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2207      	movs	r2, #7
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f001 fbed 	bl	8011350 <USBH_CtlReq>
 800fb76:	4603      	mov	r3, r0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2221      	movs	r2, #33	; 0x21
 800fb8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2220      	movs	r2, #32
 800fb94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2207      	movs	r2, #7
 800fba6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2207      	movs	r2, #7
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f001 fbce 	bl	8011350 <USBH_CtlReq>
 800fbb4:	4603      	mov	r3, r0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b086      	sub	sp, #24
 800fbc2:	af02      	add	r7, sp, #8
 800fbc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbcc:	69db      	ldr	r3, [r3, #28]
 800fbce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d002      	beq.n	800fbe4 <CDC_ProcessTransmission+0x26>
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d023      	beq.n	800fc2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800fbe2:	e07a      	b.n	800fcda <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	8b12      	ldrh	r2, [r2, #24]
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d90b      	bls.n	800fc08 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	69d9      	ldr	r1, [r3, #28]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	8b1a      	ldrh	r2, [r3, #24]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	7b5b      	ldrb	r3, [r3, #13]
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	9000      	str	r0, [sp, #0]
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f001 fea4 	bl	801194e <USBH_BulkSendData>
 800fc06:	e00b      	b.n	800fc20 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	7b5b      	ldrb	r3, [r3, #13]
 800fc16:	2001      	movs	r0, #1
 800fc18:	9000      	str	r0, [sp, #0]
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f001 fe97 	bl	801194e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2202      	movs	r2, #2
 800fc24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fc28:	e057      	b.n	800fcda <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	7b5b      	ldrb	r3, [r3, #13]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7f2 fc37 	bl	80024a4 <USBH_LL_GetURBState>
 800fc36:	4603      	mov	r3, r0
 800fc38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fc3a:	7afb      	ldrb	r3, [r7, #11]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d136      	bne.n	800fcae <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	8b12      	ldrh	r2, [r2, #24]
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d90e      	bls.n	800fc6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	8b12      	ldrh	r2, [r2, #24]
 800fc54:	1a9a      	subs	r2, r3, r2
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	69db      	ldr	r3, [r3, #28]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	8b12      	ldrh	r2, [r2, #24]
 800fc62:	441a      	add	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	61da      	str	r2, [r3, #28]
 800fc68:	e002      	b.n	800fc70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d004      	beq.n	800fc82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800fc80:	e006      	b.n	800fc90 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f892 	bl	800fdb4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2204      	movs	r2, #4
 800fc94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fca4:	2200      	movs	r2, #0
 800fca6:	4619      	mov	r1, r3
 800fca8:	f7fd fad0 	bl	800d24c <osMessagePut>
      break;
 800fcac:	e014      	b.n	800fcd8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800fcae:	7afb      	ldrb	r3, [r7, #11]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d111      	bne.n	800fcd8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	f7fd faba 	bl	800d24c <osMessagePut>
      break;
 800fcd8:	bf00      	nop
  }
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b086      	sub	sp, #24
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d002      	beq.n	800fd08 <CDC_ProcessReception+0x26>
 800fd02:	2b04      	cmp	r3, #4
 800fd04:	d00e      	beq.n	800fd24 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800fd06:	e051      	b.n	800fdac <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	6a19      	ldr	r1, [r3, #32]
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	8b5a      	ldrh	r2, [r3, #26]
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	7b1b      	ldrb	r3, [r3, #12]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f001 fe3f 	bl	8011998 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	2204      	movs	r2, #4
 800fd1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fd22:	e043      	b.n	800fdac <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	7b1b      	ldrb	r3, [r3, #12]
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7f2 fbba 	bl	80024a4 <USBH_LL_GetURBState>
 800fd30:	4603      	mov	r3, r0
 800fd32:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fd34:	7cfb      	ldrb	r3, [r7, #19]
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d137      	bne.n	800fdaa <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	7b1b      	ldrb	r3, [r3, #12]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7f2 fb1d 	bl	8002380 <USBH_LL_GetLastXferSize>
 800fd46:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d016      	beq.n	800fd80 <CDC_ProcessReception+0x9e>
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	8b5b      	ldrh	r3, [r3, #26]
 800fd56:	461a      	mov	r2, r3
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d910      	bls.n	800fd80 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	1ad2      	subs	r2, r2, r3
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	6a1a      	ldr	r2, [r3, #32]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	441a      	add	r2, r3
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2203      	movs	r2, #3
 800fd7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800fd7e:	e006      	b.n	800fd8e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f81d 	bl	800fdc8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2204      	movs	r2, #4
 800fd92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fda2:	2200      	movs	r2, #0
 800fda4:	4619      	mov	r1, r3
 800fda6:	f7fd fa51 	bl	800d24c <osMessagePut>
      break;
 800fdaa:	bf00      	nop
  }
}
 800fdac:	bf00      	nop
 800fdae:	3718      	adds	r7, #24
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fde4:	bf00      	nop
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800fdf0:	b5b0      	push	{r4, r5, r7, lr}
 800fdf2:	b090      	sub	sp, #64	; 0x40
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fe04:	2302      	movs	r3, #2
 800fe06:	e04d      	b.n	800fea4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	79fa      	ldrb	r2, [r7, #7]
 800fe0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2200      	movs	r2, #0
 800fe14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 f847 	bl	800feb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800fe54:	4b15      	ldr	r3, [pc, #84]	; (800feac <USBH_Init+0xbc>)
 800fe56:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800fe5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800fe60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe64:	2100      	movs	r1, #0
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fd f9c8 	bl	800d1fc <osMessageCreate>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800fe74:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <USBH_Init+0xc0>)
 800fe76:	f107 0414 	add.w	r4, r7, #20
 800fe7a:	461d      	mov	r5, r3
 800fe7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800fe88:	f107 0314 	add.w	r3, r7, #20
 800fe8c:	68f9      	ldr	r1, [r7, #12]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fd f954 	bl	800d13c <osThreadCreate>
 800fe94:	4602      	mov	r2, r0
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f7f2 f9bb 	bl	8002218 <USBH_LL_Init>

  return USBH_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3740      	adds	r7, #64	; 0x40
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bdb0      	pop	{r4, r5, r7, pc}
 800feac:	08011ea8 	.word	0x08011ea8
 800feb0:	08011eb8 	.word	0x08011eb8

0800feb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800febc:	2300      	movs	r3, #0
 800febe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fec0:	2300      	movs	r3, #0
 800fec2:	60fb      	str	r3, [r7, #12]
 800fec4:	e009      	b.n	800feda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	33e0      	adds	r3, #224	; 0xe0
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4413      	add	r3, r2
 800fed0:	2200      	movs	r2, #0
 800fed2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3301      	adds	r3, #1
 800fed8:	60fb      	str	r3, [r7, #12]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2b0f      	cmp	r3, #15
 800fede:	d9f2      	bls.n	800fec6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fee0:	2300      	movs	r3, #0
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	e009      	b.n	800fefa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4413      	add	r3, r2
 800feec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fef0:	2200      	movs	r2, #0
 800fef2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3301      	adds	r3, #1
 800fef8:	60fb      	str	r3, [r7, #12]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff00:	d3f1      	bcc.n	800fee6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2201      	movs	r2, #1
 800ff12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2240      	movs	r2, #64	; 0x40
 800ff26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ff66:	2300      	movs	r3, #0
 800ff68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d016      	beq.n	800ff9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d10e      	bne.n	800ff98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ff80:	1c59      	adds	r1, r3, #1
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	33de      	adds	r3, #222	; 0xde
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ff92:	2300      	movs	r3, #0
 800ff94:	73fb      	strb	r3, [r7, #15]
 800ff96:	e004      	b.n	800ffa2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ff98:	2302      	movs	r3, #2
 800ff9a:	73fb      	strb	r3, [r7, #15]
 800ff9c:	e001      	b.n	800ffa2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ffa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3714      	adds	r7, #20
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ffc6:	78fa      	ldrb	r2, [r7, #3]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d204      	bcs.n	800ffd6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	78fa      	ldrb	r2, [r7, #3]
 800ffd0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ffd4:	e001      	b.n	800ffda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3714      	adds	r7, #20
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b087      	sub	sp, #28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	4608      	mov	r0, r1
 800fff2:	4611      	mov	r1, r2
 800fff4:	461a      	mov	r2, r3
 800fff6:	4603      	mov	r3, r0
 800fff8:	70fb      	strb	r3, [r7, #3]
 800fffa:	460b      	mov	r3, r1
 800fffc:	70bb      	strb	r3, [r7, #2]
 800fffe:	4613      	mov	r3, r2
 8010000:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010002:	2300      	movs	r3, #0
 8010004:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010010:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010012:	e025      	b.n	8010060 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	221a      	movs	r2, #26
 8010018:	fb02 f303 	mul.w	r3, r2, r3
 801001c:	3308      	adds	r3, #8
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	4413      	add	r3, r2
 8010022:	3302      	adds	r3, #2
 8010024:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	795b      	ldrb	r3, [r3, #5]
 801002a:	78fa      	ldrb	r2, [r7, #3]
 801002c:	429a      	cmp	r2, r3
 801002e:	d002      	beq.n	8010036 <USBH_FindInterface+0x4e>
 8010030:	78fb      	ldrb	r3, [r7, #3]
 8010032:	2bff      	cmp	r3, #255	; 0xff
 8010034:	d111      	bne.n	801005a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801003a:	78ba      	ldrb	r2, [r7, #2]
 801003c:	429a      	cmp	r2, r3
 801003e:	d002      	beq.n	8010046 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010040:	78bb      	ldrb	r3, [r7, #2]
 8010042:	2bff      	cmp	r3, #255	; 0xff
 8010044:	d109      	bne.n	801005a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801004a:	787a      	ldrb	r2, [r7, #1]
 801004c:	429a      	cmp	r2, r3
 801004e:	d002      	beq.n	8010056 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010050:	787b      	ldrb	r3, [r7, #1]
 8010052:	2bff      	cmp	r3, #255	; 0xff
 8010054:	d101      	bne.n	801005a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010056:	7dfb      	ldrb	r3, [r7, #23]
 8010058:	e006      	b.n	8010068 <USBH_FindInterface+0x80>
    }
    if_ix++;
 801005a:	7dfb      	ldrb	r3, [r7, #23]
 801005c:	3301      	adds	r3, #1
 801005e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010060:	7dfb      	ldrb	r3, [r7, #23]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d9d6      	bls.n	8010014 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010066:	23ff      	movs	r3, #255	; 0xff
}
 8010068:	4618      	mov	r0, r3
 801006a:	371c      	adds	r7, #28
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7f2 f907 	bl	8002290 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010082:	2101      	movs	r1, #1
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7f2 fa20 	bl	80024ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 801008a:	2300      	movs	r3, #0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af04      	add	r7, sp, #16
 801009a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801009c:	2302      	movs	r3, #2
 801009e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80100a0:	2300      	movs	r3, #0
 80100a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d102      	bne.n	80100b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2203      	movs	r2, #3
 80100b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	2b0b      	cmp	r3, #11
 80100be:	f200 8247 	bhi.w	8010550 <USBH_Process+0x4bc>
 80100c2:	a201      	add	r2, pc, #4	; (adr r2, 80100c8 <USBH_Process+0x34>)
 80100c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100c8:	080100f9 	.word	0x080100f9
 80100cc:	08010147 	.word	0x08010147
 80100d0:	080101cb 	.word	0x080101cb
 80100d4:	080104cf 	.word	0x080104cf
 80100d8:	08010551 	.word	0x08010551
 80100dc:	0801028b 	.word	0x0801028b
 80100e0:	08010459 	.word	0x08010459
 80100e4:	080102dd 	.word	0x080102dd
 80100e8:	08010319 	.word	0x08010319
 80100ec:	08010353 	.word	0x08010353
 80100f0:	080103b1 	.word	0x080103b1
 80100f4:	080104b7 	.word	0x080104b7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	f000 8227 	beq.w	8010554 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2201      	movs	r2, #1
 801010a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801010c:	20c8      	movs	r0, #200	; 0xc8
 801010e:	f7f2 fa23 	bl	8002558 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7f2 f919 	bl	800234a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801013c:	2200      	movs	r2, #0
 801013e:	4619      	mov	r1, r3
 8010140:	f7fd f884 	bl	800d24c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010144:	e206      	b.n	8010554 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 801014c:	2b01      	cmp	r3, #1
 801014e:	d107      	bne.n	8010160 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2202      	movs	r2, #2
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	e025      	b.n	80101ac <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801016a:	d914      	bls.n	8010196 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8010172:	3301      	adds	r3, #1
 8010174:	b2da      	uxtb	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8010182:	2b03      	cmp	r3, #3
 8010184:	d903      	bls.n	801018e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	220d      	movs	r2, #13
 801018a:	701a      	strb	r2, [r3, #0]
 801018c:	e00e      	b.n	80101ac <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
 8010194:	e00a      	b.n	80101ac <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801019c:	f103 020a 	add.w	r2, r3, #10
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80101a6:	200a      	movs	r0, #10
 80101a8:	f7f2 f9d6 	bl	8002558 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80101c0:	2200      	movs	r2, #0
 80101c2:	4619      	mov	r1, r3
 80101c4:	f7fd f842 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80101c8:	e1cb      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80101da:	2104      	movs	r1, #4
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80101e0:	2064      	movs	r0, #100	; 0x64
 80101e2:	f7f2 f9b9 	bl	8002558 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7f2 f888 	bl	80022fc <USBH_LL_GetSpeed>
 80101ec:	4603      	mov	r3, r0
 80101ee:	461a      	mov	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2205      	movs	r2, #5
 80101fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80101fc:	2100      	movs	r1, #0
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f001 fc17 	bl	8011a32 <USBH_AllocPipe>
 8010204:	4603      	mov	r3, r0
 8010206:	461a      	mov	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801020c:	2180      	movs	r1, #128	; 0x80
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f001 fc0f 	bl	8011a32 <USBH_AllocPipe>
 8010214:	4603      	mov	r3, r0
 8010216:	461a      	mov	r2, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7919      	ldrb	r1, [r3, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010230:	b292      	uxth	r2, r2
 8010232:	9202      	str	r2, [sp, #8]
 8010234:	2200      	movs	r2, #0
 8010236:	9201      	str	r2, [sp, #4]
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	4603      	mov	r3, r0
 801023c:	2280      	movs	r2, #128	; 0x80
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f001 fbc8 	bl	80119d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7959      	ldrb	r1, [r3, #5]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010258:	b292      	uxth	r2, r2
 801025a:	9202      	str	r2, [sp, #8]
 801025c:	2200      	movs	r2, #0
 801025e:	9201      	str	r2, [sp, #4]
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4603      	mov	r3, r0
 8010264:	2200      	movs	r2, #0
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f001 fbb4 	bl	80119d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2201      	movs	r2, #1
 8010270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010280:	2200      	movs	r2, #0
 8010282:	4619      	mov	r1, r3
 8010284:	f7fc ffe2 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010288:	e16b      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f96e 	bl	801056c <USBH_HandleEnum>
 8010290:	4603      	mov	r3, r0
 8010292:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010294:	7bbb      	ldrb	r3, [r7, #14]
 8010296:	b2db      	uxtb	r3, r3
 8010298:	2b00      	cmp	r3, #0
 801029a:	f040 815d 	bne.w	8010558 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d103      	bne.n	80102b8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2208      	movs	r2, #8
 80102b4:	701a      	strb	r2, [r3, #0]
 80102b6:	e002      	b.n	80102be <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2207      	movs	r2, #7
 80102bc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2205      	movs	r2, #5
 80102c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80102d2:	2200      	movs	r2, #0
 80102d4:	4619      	mov	r1, r3
 80102d6:	f7fc ffb9 	bl	800d24c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80102da:	e13d      	b.n	8010558 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 813a 	beq.w	801055c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80102ee:	2101      	movs	r1, #1
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2208      	movs	r2, #8
 80102f8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2205      	movs	r2, #5
 80102fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801030e:	2200      	movs	r2, #0
 8010310:	4619      	mov	r1, r3
 8010312:	f7fc ff9b 	bl	800d24c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8010316:	e121      	b.n	801055c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801031e:	b29b      	uxth	r3, r3
 8010320:	4619      	mov	r1, r3
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fd00 	bl	8010d28 <USBH_SetCfg>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d102      	bne.n	8010334 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2209      	movs	r2, #9
 8010332:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010348:	2200      	movs	r2, #0
 801034a:	4619      	mov	r1, r3
 801034c:	f7fc ff7e 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010350:	e107      	b.n	8010562 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8010358:	f003 0320 	and.w	r3, r3, #32
 801035c:	2b00      	cmp	r3, #0
 801035e:	d015      	beq.n	801038c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8010360:	2101      	movs	r1, #1
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fd03 	bl	8010d6e <USBH_SetFeature>
 8010368:	4603      	mov	r3, r0
 801036a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801036c:	7bbb      	ldrb	r3, [r7, #14]
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d103      	bne.n	801037c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	220a      	movs	r2, #10
 8010378:	701a      	strb	r2, [r3, #0]
 801037a:	e00a      	b.n	8010392 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 801037c:	7bbb      	ldrb	r3, [r7, #14]
 801037e:	b2db      	uxtb	r3, r3
 8010380:	2b03      	cmp	r3, #3
 8010382:	d106      	bne.n	8010392 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	220a      	movs	r2, #10
 8010388:	701a      	strb	r2, [r3, #0]
 801038a:	e002      	b.n	8010392 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	220a      	movs	r2, #10
 8010390:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2201      	movs	r2, #1
 8010396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80103a6:	2200      	movs	r2, #0
 80103a8:	4619      	mov	r1, r3
 80103aa:	f7fc ff4f 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80103ae:	e0d8      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d03f      	beq.n	801043a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80103c2:	2300      	movs	r3, #0
 80103c4:	73fb      	strb	r3, [r7, #15]
 80103c6:	e016      	b.n	80103f6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80103c8:	7bfa      	ldrb	r2, [r7, #15]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	32de      	adds	r2, #222	; 0xde
 80103ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d2:	791a      	ldrb	r2, [r3, #4]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80103da:	429a      	cmp	r2, r3
 80103dc:	d108      	bne.n	80103f0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80103de:	7bfa      	ldrb	r2, [r7, #15]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	32de      	adds	r2, #222	; 0xde
 80103e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80103ee:	e005      	b.n	80103fc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
 80103f2:	3301      	adds	r3, #1
 80103f4:	73fb      	strb	r3, [r7, #15]
 80103f6:	7bfb      	ldrb	r3, [r7, #15]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d0e5      	beq.n	80103c8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010402:	2b00      	cmp	r3, #0
 8010404:	d016      	beq.n	8010434 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	4798      	blx	r3
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d109      	bne.n	801042c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2206      	movs	r2, #6
 801041c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010424:	2103      	movs	r1, #3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	4798      	blx	r3
 801042a:	e006      	b.n	801043a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	220d      	movs	r2, #13
 8010430:	701a      	strb	r2, [r3, #0]
 8010432:	e002      	b.n	801043a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	220d      	movs	r2, #13
 8010438:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2205      	movs	r2, #5
 801043e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801044e:	2200      	movs	r2, #0
 8010450:	4619      	mov	r1, r3
 8010452:	f7fc fefb 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010456:	e084      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801045e:	2b00      	cmp	r3, #0
 8010460:	d017      	beq.n	8010492 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	4798      	blx	r3
 801046e:	4603      	mov	r3, r0
 8010470:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010472:	7bbb      	ldrb	r3, [r7, #14]
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d103      	bne.n	8010482 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	220b      	movs	r2, #11
 801047e:	701a      	strb	r2, [r3, #0]
 8010480:	e00a      	b.n	8010498 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8010482:	7bbb      	ldrb	r3, [r7, #14]
 8010484:	b2db      	uxtb	r3, r3
 8010486:	2b02      	cmp	r3, #2
 8010488:	d106      	bne.n	8010498 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	220d      	movs	r2, #13
 801048e:	701a      	strb	r2, [r3, #0]
 8010490:	e002      	b.n	8010498 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	220d      	movs	r2, #13
 8010496:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2205      	movs	r2, #5
 801049c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80104ac:	2200      	movs	r2, #0
 80104ae:	4619      	mov	r1, r3
 80104b0:	f7fc fecc 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80104b4:	e055      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d04f      	beq.n	8010560 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	4798      	blx	r3
      }
      break;
 80104cc:	e048      	b.n	8010560 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7ff fcec 	bl	800feb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d009      	beq.n	80104fa <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d005      	beq.n	8010510 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801050a:	2105      	movs	r1, #5
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010516:	b2db      	uxtb	r3, r3
 8010518:	2b01      	cmp	r3, #1
 801051a:	d107      	bne.n	801052c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff fda5 	bl	8010074 <USBH_Start>
 801052a:	e002      	b.n	8010532 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7f1 feaf 	bl	8002290 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2201      	movs	r2, #1
 8010536:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010546:	2200      	movs	r2, #0
 8010548:	4619      	mov	r1, r3
 801054a:	f7fc fe7f 	bl	800d24c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801054e:	e008      	b.n	8010562 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8010550:	bf00      	nop
 8010552:	e006      	b.n	8010562 <USBH_Process+0x4ce>
      break;
 8010554:	bf00      	nop
 8010556:	e004      	b.n	8010562 <USBH_Process+0x4ce>
      break;
 8010558:	bf00      	nop
 801055a:	e002      	b.n	8010562 <USBH_Process+0x4ce>
    break;
 801055c:	bf00      	nop
 801055e:	e000      	b.n	8010562 <USBH_Process+0x4ce>
      break;
 8010560:	bf00      	nop
  }
  return USBH_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b088      	sub	sp, #32
 8010570:	af04      	add	r7, sp, #16
 8010572:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010574:	2301      	movs	r3, #1
 8010576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010578:	2301      	movs	r3, #1
 801057a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	785b      	ldrb	r3, [r3, #1]
 8010580:	2b07      	cmp	r3, #7
 8010582:	f200 8208 	bhi.w	8010996 <USBH_HandleEnum+0x42a>
 8010586:	a201      	add	r2, pc, #4	; (adr r2, 801058c <USBH_HandleEnum+0x20>)
 8010588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058c:	080105ad 	.word	0x080105ad
 8010590:	0801066b 	.word	0x0801066b
 8010594:	080106d5 	.word	0x080106d5
 8010598:	08010763 	.word	0x08010763
 801059c:	080107cd 	.word	0x080107cd
 80105a0:	0801083d 	.word	0x0801083d
 80105a4:	080108d9 	.word	0x080108d9
 80105a8:	08010957 	.word	0x08010957
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80105ac:	2108      	movs	r1, #8
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 faea 	bl	8010b88 <USBH_Get_DevDesc>
 80105b4:	4603      	mov	r3, r0
 80105b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80105b8:	7bbb      	ldrb	r3, [r7, #14]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d130      	bne.n	8010620 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	7919      	ldrb	r1, [r3, #4]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80105e2:	b292      	uxth	r2, r2
 80105e4:	9202      	str	r2, [sp, #8]
 80105e6:	2200      	movs	r2, #0
 80105e8:	9201      	str	r2, [sp, #4]
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	4603      	mov	r3, r0
 80105ee:	2280      	movs	r2, #128	; 0x80
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f001 f9ef 	bl	80119d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	7959      	ldrb	r1, [r3, #5]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801060a:	b292      	uxth	r2, r2
 801060c:	9202      	str	r2, [sp, #8]
 801060e:	2200      	movs	r2, #0
 8010610:	9201      	str	r2, [sp, #4]
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	4603      	mov	r3, r0
 8010616:	2200      	movs	r2, #0
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f001 f9db 	bl	80119d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801061e:	e1bc      	b.n	801099a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010620:	7bbb      	ldrb	r3, [r7, #14]
 8010622:	2b03      	cmp	r3, #3
 8010624:	f040 81b9 	bne.w	801099a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801062e:	3301      	adds	r3, #1
 8010630:	b2da      	uxtb	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801063e:	2b03      	cmp	r3, #3
 8010640:	d903      	bls.n	801064a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	220d      	movs	r2, #13
 8010646:	701a      	strb	r2, [r3, #0]
      break;
 8010648:	e1a7      	b.n	801099a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	795b      	ldrb	r3, [r3, #5]
 801064e:	4619      	mov	r1, r3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f001 fa0f 	bl	8011a74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	791b      	ldrb	r3, [r3, #4]
 801065a:	4619      	mov	r1, r3
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f001 fa09 	bl	8011a74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2200      	movs	r2, #0
 8010666:	701a      	strb	r2, [r3, #0]
      break;
 8010668:	e197      	b.n	801099a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801066a:	2112      	movs	r1, #18
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fa8b 	bl	8010b88 <USBH_Get_DevDesc>
 8010672:	4603      	mov	r3, r0
 8010674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010676:	7bbb      	ldrb	r3, [r7, #14]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d103      	bne.n	8010684 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2202      	movs	r2, #2
 8010680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010682:	e18c      	b.n	801099e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010684:	7bbb      	ldrb	r3, [r7, #14]
 8010686:	2b03      	cmp	r3, #3
 8010688:	f040 8189 	bne.w	801099e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010692:	3301      	adds	r3, #1
 8010694:	b2da      	uxtb	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d903      	bls.n	80106ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	220d      	movs	r2, #13
 80106aa:	701a      	strb	r2, [r3, #0]
      break;
 80106ac:	e177      	b.n	801099e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	795b      	ldrb	r3, [r3, #5]
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f001 f9dd 	bl	8011a74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	791b      	ldrb	r3, [r3, #4]
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f001 f9d7 	bl	8011a74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	701a      	strb	r2, [r3, #0]
      break;
 80106d2:	e164      	b.n	801099e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80106d4:	2101      	movs	r1, #1
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 fb02 	bl	8010ce0 <USBH_SetAddress>
 80106dc:	4603      	mov	r3, r0
 80106de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d132      	bne.n	801074c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80106e6:	2002      	movs	r0, #2
 80106e8:	f7f1 ff36 	bl	8002558 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2201      	movs	r2, #1
 80106f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2203      	movs	r2, #3
 80106f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	7919      	ldrb	r1, [r3, #4]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801070e:	b292      	uxth	r2, r2
 8010710:	9202      	str	r2, [sp, #8]
 8010712:	2200      	movs	r2, #0
 8010714:	9201      	str	r2, [sp, #4]
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	4603      	mov	r3, r0
 801071a:	2280      	movs	r2, #128	; 0x80
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f001 f959 	bl	80119d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	7959      	ldrb	r1, [r3, #5]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010736:	b292      	uxth	r2, r2
 8010738:	9202      	str	r2, [sp, #8]
 801073a:	2200      	movs	r2, #0
 801073c:	9201      	str	r2, [sp, #4]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	4603      	mov	r3, r0
 8010742:	2200      	movs	r2, #0
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f001 f945 	bl	80119d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801074a:	e12a      	b.n	80109a2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	2b03      	cmp	r3, #3
 8010750:	f040 8127 	bne.w	80109a2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	220d      	movs	r2, #13
 8010758:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	705a      	strb	r2, [r3, #1]
      break;
 8010760:	e11f      	b.n	80109a2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010762:	2109      	movs	r1, #9
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 fa37 	bl	8010bd8 <USBH_Get_CfgDesc>
 801076a:	4603      	mov	r3, r0
 801076c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801076e:	7bbb      	ldrb	r3, [r7, #14]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d103      	bne.n	801077c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2204      	movs	r2, #4
 8010778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801077a:	e114      	b.n	80109a6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801077c:	7bbb      	ldrb	r3, [r7, #14]
 801077e:	2b03      	cmp	r3, #3
 8010780:	f040 8111 	bne.w	80109a6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801078a:	3301      	adds	r3, #1
 801078c:	b2da      	uxtb	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801079a:	2b03      	cmp	r3, #3
 801079c:	d903      	bls.n	80107a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	220d      	movs	r2, #13
 80107a2:	701a      	strb	r2, [r3, #0]
      break;
 80107a4:	e0ff      	b.n	80109a6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	795b      	ldrb	r3, [r3, #5]
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f001 f961 	bl	8011a74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	791b      	ldrb	r3, [r3, #4]
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f001 f95b 	bl	8011a74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	701a      	strb	r2, [r3, #0]
      break;
 80107ca:	e0ec      	b.n	80109a6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f9ff 	bl	8010bd8 <USBH_Get_CfgDesc>
 80107da:	4603      	mov	r3, r0
 80107dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80107de:	7bbb      	ldrb	r3, [r7, #14]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d103      	bne.n	80107ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2205      	movs	r2, #5
 80107e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80107ea:	e0de      	b.n	80109aa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	f040 80db 	bne.w	80109aa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80107fa:	3301      	adds	r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801080a:	2b03      	cmp	r3, #3
 801080c:	d903      	bls.n	8010816 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	220d      	movs	r2, #13
 8010812:	701a      	strb	r2, [r3, #0]
      break;
 8010814:	e0c9      	b.n	80109aa <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	795b      	ldrb	r3, [r3, #5]
 801081a:	4619      	mov	r1, r3
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f001 f929 	bl	8011a74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	791b      	ldrb	r3, [r3, #4]
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 f923 	bl	8011a74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	701a      	strb	r2, [r3, #0]
      break;
 801083a:	e0b6      	b.n	80109aa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010842:	2b00      	cmp	r3, #0
 8010844:	d036      	beq.n	80108b4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010852:	23ff      	movs	r3, #255	; 0xff
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 f9e3 	bl	8010c20 <USBH_Get_StringDesc>
 801085a:	4603      	mov	r3, r0
 801085c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801085e:	7bbb      	ldrb	r3, [r7, #14]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d111      	bne.n	8010888 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2206      	movs	r2, #6
 8010868:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2205      	movs	r2, #5
 801086e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801087e:	2200      	movs	r2, #0
 8010880:	4619      	mov	r1, r3
 8010882:	f7fc fce3 	bl	800d24c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010886:	e092      	b.n	80109ae <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010888:	7bbb      	ldrb	r3, [r7, #14]
 801088a:	2b03      	cmp	r3, #3
 801088c:	f040 808f 	bne.w	80109ae <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2206      	movs	r2, #6
 8010894:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2205      	movs	r2, #5
 801089a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108aa:	2200      	movs	r2, #0
 80108ac:	4619      	mov	r1, r3
 80108ae:	f7fc fccd 	bl	800d24c <osMessagePut>
      break;
 80108b2:	e07c      	b.n	80109ae <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2206      	movs	r2, #6
 80108b8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2205      	movs	r2, #5
 80108be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108ce:	2200      	movs	r2, #0
 80108d0:	4619      	mov	r1, r3
 80108d2:	f7fc fcbb 	bl	800d24c <osMessagePut>
      break;
 80108d6:	e06a      	b.n	80109ae <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d027      	beq.n	8010932 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80108ee:	23ff      	movs	r3, #255	; 0xff
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 f995 	bl	8010c20 <USBH_Get_StringDesc>
 80108f6:	4603      	mov	r3, r0
 80108f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80108fa:	7bbb      	ldrb	r3, [r7, #14]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d103      	bne.n	8010908 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2207      	movs	r2, #7
 8010904:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010906:	e054      	b.n	80109b2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010908:	7bbb      	ldrb	r3, [r7, #14]
 801090a:	2b03      	cmp	r3, #3
 801090c:	d151      	bne.n	80109b2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2207      	movs	r2, #7
 8010912:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2205      	movs	r2, #5
 8010918:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010928:	2200      	movs	r2, #0
 801092a:	4619      	mov	r1, r3
 801092c:	f7fc fc8e 	bl	800d24c <osMessagePut>
      break;
 8010930:	e03f      	b.n	80109b2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2207      	movs	r2, #7
 8010936:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2205      	movs	r2, #5
 801093c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801094c:	2200      	movs	r2, #0
 801094e:	4619      	mov	r1, r3
 8010950:	f7fc fc7c 	bl	800d24c <osMessagePut>
      break;
 8010954:	e02d      	b.n	80109b2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801095c:	2b00      	cmp	r3, #0
 801095e:	d017      	beq.n	8010990 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801096c:	23ff      	movs	r3, #255	; 0xff
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f956 	bl	8010c20 <USBH_Get_StringDesc>
 8010974:	4603      	mov	r3, r0
 8010976:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010978:	7bbb      	ldrb	r3, [r7, #14]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d102      	bne.n	8010984 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801097e:	2300      	movs	r3, #0
 8010980:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010982:	e018      	b.n	80109b6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010984:	7bbb      	ldrb	r3, [r7, #14]
 8010986:	2b03      	cmp	r3, #3
 8010988:	d115      	bne.n	80109b6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	73fb      	strb	r3, [r7, #15]
      break;
 801098e:	e012      	b.n	80109b6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8010990:	2300      	movs	r3, #0
 8010992:	73fb      	strb	r3, [r7, #15]
      break;
 8010994:	e00f      	b.n	80109b6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8010996:	bf00      	nop
 8010998:	e00e      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 801099a:	bf00      	nop
 801099c:	e00c      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 801099e:	bf00      	nop
 80109a0:	e00a      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109a2:	bf00      	nop
 80109a4:	e008      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109a6:	bf00      	nop
 80109a8:	e006      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109aa:	bf00      	nop
 80109ac:	e004      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109ae:	bf00      	nop
 80109b0:	e002      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109b2:	bf00      	nop
 80109b4:	e000      	b.n	80109b8 <USBH_HandleEnum+0x44c>
      break;
 80109b6:	bf00      	nop
  }
  return Status;
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop

080109c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80109d6:	bf00      	nop
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b082      	sub	sp, #8
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80109f0:	1c5a      	adds	r2, r3, #1
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f000 f804 	bl	8010a06 <USBH_HandleSof>
}
 80109fe:	bf00      	nop
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b082      	sub	sp, #8
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b0b      	cmp	r3, #11
 8010a16:	d10a      	bne.n	8010a2e <USBH_HandleSof+0x28>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d005      	beq.n	8010a2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	4798      	blx	r3
  }
}
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b082      	sub	sp, #8
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	f7fc fbf5 	bl	800d24c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8010a62:	bf00      	nop
}
 8010a64:	3708      	adds	r7, #8
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010a6a:	b480      	push	{r7}
 8010a6c:	b083      	sub	sp, #12
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2200      	movs	r2, #0
 8010a76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8010a7a:	bf00      	nop
}
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2201      	movs	r2, #1
 8010a92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010aba:	2200      	movs	r2, #0
 8010abc:	4619      	mov	r1, r3
 8010abe:	f7fc fbc5 	bl	800d24c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010ac2:	2300      	movs	r3, #0
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7f1 fbea 	bl	80022c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	791b      	ldrb	r3, [r3, #4]
 8010af6:	4619      	mov	r1, r3
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 ffbb 	bl	8011a74 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	795b      	ldrb	r3, [r3, #5]
 8010b02:	4619      	mov	r1, r3
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 ffb5 	bl	8011a74 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4619      	mov	r1, r3
 8010b22:	f7fc fb93 	bl	800d24c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010b26:	2300      	movs	r3, #0
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8010b3e:	f107 030c 	add.w	r3, r7, #12
 8010b42:	f04f 32ff 	mov.w	r2, #4294967295
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fc fbc0 	bl	800d2cc <osMessageGet>
    if (event.status == osEventMessage)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2b10      	cmp	r3, #16
 8010b50:	d1f2      	bne.n	8010b38 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff fa9e 	bl	8010094 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010b58:	e7ee      	b.n	8010b38 <USBH_Process_OS+0x8>

08010b5a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b082      	sub	sp, #8
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2201      	movs	r2, #1
 8010b66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b76:	2200      	movs	r2, #0
 8010b78:	4619      	mov	r1, r3
 8010b7a:	f7fc fb67 	bl	800d24c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b086      	sub	sp, #24
 8010b8c:	af02      	add	r7, sp, #8
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010b9a:	78fb      	ldrb	r3, [r7, #3]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 f864 	bl	8010c76 <USBH_GetDescriptor>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d10a      	bne.n	8010bce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010bc4:	78fa      	ldrb	r2, [r7, #3]
 8010bc6:	b292      	uxth	r2, r2
 8010bc8:	4619      	mov	r1, r3
 8010bca:	f000 f918 	bl	8010dfe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8010bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3710      	adds	r7, #16
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af02      	add	r7, sp, #8
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	460b      	mov	r3, r1
 8010be2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	331c      	adds	r3, #28
 8010be8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010bea:	887b      	ldrh	r3, [r7, #2]
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 f83d 	bl	8010c76 <USBH_GetDescriptor>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d107      	bne.n	8010c16 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010c06:	887b      	ldrh	r3, [r7, #2]
 8010c08:	461a      	mov	r2, r3
 8010c0a:	68b9      	ldr	r1, [r7, #8]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f000 f987 	bl	8010f20 <USBH_ParseCfgDesc>
 8010c12:	4603      	mov	r3, r0
 8010c14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af02      	add	r7, sp, #8
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	607a      	str	r2, [r7, #4]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	72fb      	strb	r3, [r7, #11]
 8010c30:	4613      	mov	r3, r2
 8010c32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8010c34:	7afb      	ldrb	r3, [r7, #11]
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010c3c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010c44:	893b      	ldrh	r3, [r7, #8]
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f000 f812 	bl	8010c76 <USBH_GetDescriptor>
 8010c52:	4603      	mov	r3, r0
 8010c54:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d107      	bne.n	8010c6c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010c62:	893a      	ldrh	r2, [r7, #8]
 8010c64:	6879      	ldr	r1, [r7, #4]
 8010c66:	4618      	mov	r0, r3
 8010c68:	f000 fb24 	bl	80112b4 <USBH_ParseStringDesc>
  }

  return status;
 8010c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b084      	sub	sp, #16
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	60f8      	str	r0, [r7, #12]
 8010c7e:	607b      	str	r3, [r7, #4]
 8010c80:	460b      	mov	r3, r1
 8010c82:	72fb      	strb	r3, [r7, #11]
 8010c84:	4613      	mov	r3, r2
 8010c86:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	789b      	ldrb	r3, [r3, #2]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d11c      	bne.n	8010cca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010c90:	7afb      	ldrb	r3, [r7, #11]
 8010c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2206      	movs	r2, #6
 8010ca0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	893a      	ldrh	r2, [r7, #8]
 8010ca6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010ca8:	893b      	ldrh	r3, [r7, #8]
 8010caa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cb2:	d104      	bne.n	8010cbe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f240 4209 	movw	r2, #1033	; 0x409
 8010cba:	829a      	strh	r2, [r3, #20]
 8010cbc:	e002      	b.n	8010cc4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	8b3a      	ldrh	r2, [r7, #24]
 8010cc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010cca:	8b3b      	ldrh	r3, [r7, #24]
 8010ccc:	461a      	mov	r2, r3
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f000 fb3d 	bl	8011350 <USBH_CtlReq>
 8010cd6:	4603      	mov	r3, r0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	789b      	ldrb	r3, [r3, #2]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d10f      	bne.n	8010d14 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2205      	movs	r2, #5
 8010cfe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010d00:	78fb      	ldrb	r3, [r7, #3]
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010d14:	2200      	movs	r2, #0
 8010d16:	2100      	movs	r1, #0
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fb19 	bl	8011350 <USBH_CtlReq>
 8010d1e:	4603      	mov	r3, r0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	789b      	ldrb	r3, [r3, #2]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d10e      	bne.n	8010d5a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2209      	movs	r2, #9
 8010d46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	887a      	ldrh	r2, [r7, #2]
 8010d4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2200      	movs	r2, #0
 8010d52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 faf6 	bl	8011350 <USBH_CtlReq>
 8010d64:	4603      	mov	r3, r0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b082      	sub	sp, #8
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	460b      	mov	r3, r1
 8010d78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	789b      	ldrb	r3, [r3, #2]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d10f      	bne.n	8010da2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2203      	movs	r2, #3
 8010d8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010d8e:	78fb      	ldrb	r3, [r7, #3]
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010da2:	2200      	movs	r2, #0
 8010da4:	2100      	movs	r1, #0
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 fad2 	bl	8011350 <USBH_CtlReq>
 8010dac:	4603      	mov	r3, r0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b082      	sub	sp, #8
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	789b      	ldrb	r3, [r3, #2]
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d10f      	bne.n	8010dea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2202      	movs	r2, #2
 8010dce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010ddc:	78fb      	ldrb	r3, [r7, #3]
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8010dea:	2200      	movs	r2, #0
 8010dec:	2100      	movs	r1, #0
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 faae 	bl	8011350 <USBH_CtlReq>
 8010df4:	4603      	mov	r3, r0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8010dfe:	b480      	push	{r7}
 8010e00:	b085      	sub	sp, #20
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	60f8      	str	r0, [r7, #12]
 8010e06:	60b9      	str	r1, [r7, #8]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	781a      	ldrb	r2, [r3, #0]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	785a      	ldrb	r2, [r3, #1]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	3302      	adds	r3, #2
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	3303      	adds	r3, #3
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	021b      	lsls	r3, r3, #8
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	4313      	orrs	r3, r2
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	791a      	ldrb	r2, [r3, #4]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	795a      	ldrb	r2, [r3, #5]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	799a      	ldrb	r2, [r3, #6]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	79da      	ldrb	r2, [r3, #7]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	79db      	ldrb	r3, [r3, #7]
 8010e5c:	2b20      	cmp	r3, #32
 8010e5e:	dc11      	bgt.n	8010e84 <USBH_ParseDevDesc+0x86>
 8010e60:	2b08      	cmp	r3, #8
 8010e62:	db16      	blt.n	8010e92 <USBH_ParseDevDesc+0x94>
 8010e64:	3b08      	subs	r3, #8
 8010e66:	2201      	movs	r2, #1
 8010e68:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8010e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	bf14      	ite	ne
 8010e78:	2301      	movne	r3, #1
 8010e7a:	2300      	moveq	r3, #0
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <USBH_ParseDevDesc+0x8a>
 8010e82:	e006      	b.n	8010e92 <USBH_ParseDevDesc+0x94>
 8010e84:	2b40      	cmp	r3, #64	; 0x40
 8010e86:	d104      	bne.n	8010e92 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	79da      	ldrb	r2, [r3, #7]
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	71da      	strb	r2, [r3, #7]
      break;
 8010e90:	e003      	b.n	8010e9a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2240      	movs	r2, #64	; 0x40
 8010e96:	71da      	strb	r2, [r3, #7]
      break;
 8010e98:	bf00      	nop
  }

  if (length > 8U)
 8010e9a:	88fb      	ldrh	r3, [r7, #6]
 8010e9c:	2b08      	cmp	r3, #8
 8010e9e:	d939      	bls.n	8010f14 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	3308      	adds	r3, #8
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	3309      	adds	r3, #9
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	021b      	lsls	r3, r3, #8
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	330a      	adds	r3, #10
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	330b      	adds	r3, #11
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	021b      	lsls	r3, r3, #8
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	4313      	orrs	r3, r2
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	330c      	adds	r3, #12
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	330d      	adds	r3, #13
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	021b      	lsls	r3, r3, #8
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	4313      	orrs	r3, r2
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	7b9a      	ldrb	r2, [r3, #14]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	7bda      	ldrb	r2, [r3, #15]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	7c1a      	ldrb	r2, [r3, #16]
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	7c5a      	ldrb	r2, [r3, #17]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	745a      	strb	r2, [r3, #17]
  }
}
 8010f14:	bf00      	nop
 8010f16:	3714      	adds	r7, #20
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08c      	sub	sp, #48	; 0x30
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010f34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	781a      	ldrb	r2, [r3, #0]
 8010f54:	6a3b      	ldr	r3, [r7, #32]
 8010f56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	785a      	ldrb	r2, [r3, #1]
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	3302      	adds	r3, #2
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	3303      	adds	r3, #3
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	021b      	lsls	r3, r3, #8
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	4313      	orrs	r3, r2
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f7c:	bf28      	it	cs
 8010f7e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	791a      	ldrb	r2, [r3, #4]
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	795a      	ldrb	r2, [r3, #5]
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	799a      	ldrb	r2, [r3, #6]
 8010f9c:	6a3b      	ldr	r3, [r7, #32]
 8010f9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	79da      	ldrb	r2, [r3, #7]
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
 8010fa6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	7a1a      	ldrb	r2, [r3, #8]
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8010fb0:	6a3b      	ldr	r3, [r7, #32]
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b09      	cmp	r3, #9
 8010fb6:	d002      	beq.n	8010fbe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	2209      	movs	r2, #9
 8010fbc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010fbe:	88fb      	ldrh	r3, [r7, #6]
 8010fc0:	2b09      	cmp	r3, #9
 8010fc2:	f240 809d 	bls.w	8011100 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8010fc6:	2309      	movs	r3, #9
 8010fc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010fce:	e081      	b.n	80110d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010fd0:	f107 0316 	add.w	r3, r7, #22
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fd8:	f000 f99f 	bl	801131a <USBH_GetNextDesc>
 8010fdc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe0:	785b      	ldrb	r3, [r3, #1]
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d176      	bne.n	80110d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b09      	cmp	r3, #9
 8010fec:	d002      	beq.n	8010ff4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	2209      	movs	r2, #9
 8010ff2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ff8:	221a      	movs	r2, #26
 8010ffa:	fb02 f303 	mul.w	r3, r2, r3
 8010ffe:	3308      	adds	r3, #8
 8011000:	6a3a      	ldr	r2, [r7, #32]
 8011002:	4413      	add	r3, r2
 8011004:	3302      	adds	r3, #2
 8011006:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801100a:	69f8      	ldr	r0, [r7, #28]
 801100c:	f000 f87e 	bl	801110c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011010:	2300      	movs	r3, #0
 8011012:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011016:	2300      	movs	r3, #0
 8011018:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801101a:	e043      	b.n	80110a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801101c:	f107 0316 	add.w	r3, r7, #22
 8011020:	4619      	mov	r1, r3
 8011022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011024:	f000 f979 	bl	801131a <USBH_GetNextDesc>
 8011028:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102c:	785b      	ldrb	r3, [r3, #1]
 801102e:	2b05      	cmp	r3, #5
 8011030:	d138      	bne.n	80110a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	795b      	ldrb	r3, [r3, #5]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d10f      	bne.n	801105a <USBH_ParseCfgDesc+0x13a>
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	799b      	ldrb	r3, [r3, #6]
 801103e:	2b02      	cmp	r3, #2
 8011040:	d10b      	bne.n	801105a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	79db      	ldrb	r3, [r3, #7]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d10f      	bne.n	801106a <USBH_ParseCfgDesc+0x14a>
 801104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	2b09      	cmp	r3, #9
 8011050:	d00b      	beq.n	801106a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8011052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011054:	2209      	movs	r2, #9
 8011056:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011058:	e007      	b.n	801106a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 801105a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	2b07      	cmp	r3, #7
 8011060:	d004      	beq.n	801106c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011064:	2207      	movs	r2, #7
 8011066:	701a      	strb	r2, [r3, #0]
 8011068:	e000      	b.n	801106c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801106a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801106c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011070:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011074:	3201      	adds	r2, #1
 8011076:	00d2      	lsls	r2, r2, #3
 8011078:	211a      	movs	r1, #26
 801107a:	fb01 f303 	mul.w	r3, r1, r3
 801107e:	4413      	add	r3, r2
 8011080:	3308      	adds	r3, #8
 8011082:	6a3a      	ldr	r2, [r7, #32]
 8011084:	4413      	add	r3, r2
 8011086:	3304      	adds	r3, #4
 8011088:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801108a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801108c:	69b9      	ldr	r1, [r7, #24]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 f86b 	bl	801116a <USBH_ParseEPDesc>
 8011094:	4603      	mov	r3, r0
 8011096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801109a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801109e:	3301      	adds	r3, #1
 80110a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	791b      	ldrb	r3, [r3, #4]
 80110a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d204      	bcs.n	80110ba <USBH_ParseCfgDesc+0x19a>
 80110b0:	6a3b      	ldr	r3, [r7, #32]
 80110b2:	885a      	ldrh	r2, [r3, #2]
 80110b4:	8afb      	ldrh	r3, [r7, #22]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d8b0      	bhi.n	801101c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	791b      	ldrb	r3, [r3, #4]
 80110be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d201      	bcs.n	80110ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80110c6:	2303      	movs	r3, #3
 80110c8:	e01c      	b.n	8011104 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80110ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ce:	3301      	adds	r3, #1
 80110d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80110d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d805      	bhi.n	80110e8 <USBH_ParseCfgDesc+0x1c8>
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	885a      	ldrh	r2, [r3, #2]
 80110e0:	8afb      	ldrh	r3, [r7, #22]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	f63f af74 	bhi.w	8010fd0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80110e8:	6a3b      	ldr	r3, [r7, #32]
 80110ea:	791b      	ldrb	r3, [r3, #4]
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	bf28      	it	cs
 80110f0:	2302      	movcs	r3, #2
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d201      	bcs.n	8011100 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e001      	b.n	8011104 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8011100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011104:	4618      	mov	r0, r3
 8011106:	3730      	adds	r7, #48	; 0x30
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	781a      	ldrb	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	785a      	ldrb	r2, [r3, #1]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	789a      	ldrb	r2, [r3, #2]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	78da      	ldrb	r2, [r3, #3]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	791a      	ldrb	r2, [r3, #4]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	795a      	ldrb	r2, [r3, #5]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	799a      	ldrb	r2, [r3, #6]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	79da      	ldrb	r2, [r3, #7]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	7a1a      	ldrb	r2, [r3, #8]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	721a      	strb	r2, [r3, #8]
}
 801115e:	bf00      	nop
 8011160:	370c      	adds	r7, #12
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr

0801116a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 801116a:	b480      	push	{r7}
 801116c:	b087      	sub	sp, #28
 801116e:	af00      	add	r7, sp, #0
 8011170:	60f8      	str	r0, [r7, #12]
 8011172:	60b9      	str	r1, [r7, #8]
 8011174:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011176:	2300      	movs	r3, #0
 8011178:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	781a      	ldrb	r2, [r3, #0]
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	785a      	ldrb	r2, [r3, #1]
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	789a      	ldrb	r2, [r3, #2]
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	78da      	ldrb	r2, [r3, #3]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	3304      	adds	r3, #4
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3305      	adds	r3, #5
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	021b      	lsls	r3, r3, #8
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	4313      	orrs	r3, r2
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	799a      	ldrb	r2, [r3, #6]
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	889b      	ldrh	r3, [r3, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d102      	bne.n	80111cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80111c6:	2303      	movs	r3, #3
 80111c8:	75fb      	strb	r3, [r7, #23]
 80111ca:	e033      	b.n	8011234 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	889b      	ldrh	r3, [r3, #4]
 80111d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80111d4:	f023 0307 	bic.w	r3, r3, #7
 80111d8:	b29a      	uxth	r2, r3
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	889b      	ldrh	r3, [r3, #4]
 80111e2:	b21a      	sxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	3304      	adds	r3, #4
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	b299      	uxth	r1, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3305      	adds	r3, #5
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	021b      	lsls	r3, r3, #8
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	430b      	orrs	r3, r1
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011200:	2b00      	cmp	r3, #0
 8011202:	d110      	bne.n	8011226 <USBH_ParseEPDesc+0xbc>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3304      	adds	r3, #4
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	b299      	uxth	r1, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3305      	adds	r3, #5
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	b29b      	uxth	r3, r3
 8011214:	021b      	lsls	r3, r3, #8
 8011216:	b29b      	uxth	r3, r3
 8011218:	430b      	orrs	r3, r1
 801121a:	b29b      	uxth	r3, r3
 801121c:	b21b      	sxth	r3, r3
 801121e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011222:	b21b      	sxth	r3, r3
 8011224:	e001      	b.n	801122a <USBH_ParseEPDesc+0xc0>
 8011226:	f44f 7300 	mov.w	r3, #512	; 0x200
 801122a:	4313      	orrs	r3, r2
 801122c:	b21b      	sxth	r3, r3
 801122e:	b29a      	uxth	r2, r3
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801123a:	2b00      	cmp	r3, #0
 801123c:	d116      	bne.n	801126c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	78db      	ldrb	r3, [r3, #3]
 8011242:	f003 0303 	and.w	r3, r3, #3
 8011246:	2b01      	cmp	r3, #1
 8011248:	d005      	beq.n	8011256 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	78db      	ldrb	r3, [r3, #3]
 801124e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011252:	2b03      	cmp	r3, #3
 8011254:	d127      	bne.n	80112a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	799b      	ldrb	r3, [r3, #6]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <USBH_ParseEPDesc+0xfc>
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	799b      	ldrb	r3, [r3, #6]
 8011262:	2b10      	cmp	r3, #16
 8011264:	d91f      	bls.n	80112a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8011266:	2303      	movs	r3, #3
 8011268:	75fb      	strb	r3, [r7, #23]
 801126a:	e01c      	b.n	80112a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	78db      	ldrb	r3, [r3, #3]
 8011270:	f003 0303 	and.w	r3, r3, #3
 8011274:	2b01      	cmp	r3, #1
 8011276:	d10a      	bne.n	801128e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	799b      	ldrb	r3, [r3, #6]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <USBH_ParseEPDesc+0x11e>
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	799b      	ldrb	r3, [r3, #6]
 8011284:	2b10      	cmp	r3, #16
 8011286:	d90e      	bls.n	80112a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8011288:	2303      	movs	r3, #3
 801128a:	75fb      	strb	r3, [r7, #23]
 801128c:	e00b      	b.n	80112a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	78db      	ldrb	r3, [r3, #3]
 8011292:	f003 0303 	and.w	r3, r3, #3
 8011296:	2b03      	cmp	r3, #3
 8011298:	d105      	bne.n	80112a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	799b      	ldrb	r3, [r3, #6]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d101      	bne.n	80112a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80112a2:	2303      	movs	r3, #3
 80112a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80112a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	371c      	adds	r7, #28
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b087      	sub	sp, #28
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	4613      	mov	r3, r2
 80112c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	3301      	adds	r3, #1
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	2b03      	cmp	r3, #3
 80112ca:	d120      	bne.n	801130e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	1e9a      	subs	r2, r3, #2
 80112d2:	88fb      	ldrh	r3, [r7, #6]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bf28      	it	cs
 80112d8:	4613      	movcs	r3, r2
 80112da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	3302      	adds	r3, #2
 80112e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80112e2:	2300      	movs	r3, #0
 80112e4:	82fb      	strh	r3, [r7, #22]
 80112e6:	e00b      	b.n	8011300 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80112e8:	8afb      	ldrh	r3, [r7, #22]
 80112ea:	68fa      	ldr	r2, [r7, #12]
 80112ec:	4413      	add	r3, r2
 80112ee:	781a      	ldrb	r2, [r3, #0]
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	3301      	adds	r3, #1
 80112f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80112fa:	8afb      	ldrh	r3, [r7, #22]
 80112fc:	3302      	adds	r3, #2
 80112fe:	82fb      	strh	r3, [r7, #22]
 8011300:	8afa      	ldrh	r2, [r7, #22]
 8011302:	8abb      	ldrh	r3, [r7, #20]
 8011304:	429a      	cmp	r2, r3
 8011306:	d3ef      	bcc.n	80112e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2200      	movs	r2, #0
 801130c:	701a      	strb	r2, [r3, #0]
  }
}
 801130e:	bf00      	nop
 8011310:	371c      	adds	r7, #28
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 801131a:	b480      	push	{r7}
 801131c:	b085      	sub	sp, #20
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	881a      	ldrh	r2, [r3, #0]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	b29b      	uxth	r3, r3
 801132e:	4413      	add	r3, r2
 8011330:	b29a      	uxth	r2, r3
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	4413      	add	r3, r2
 8011340:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011342:	68fb      	ldr	r3, [r7, #12]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3714      	adds	r7, #20
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	4613      	mov	r3, r2
 801135c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801135e:	2301      	movs	r3, #1
 8011360:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	789b      	ldrb	r3, [r3, #2]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d002      	beq.n	8011370 <USBH_CtlReq+0x20>
 801136a:	2b02      	cmp	r3, #2
 801136c:	d01d      	beq.n	80113aa <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 801136e:	e043      	b.n	80113f8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	88fa      	ldrh	r2, [r7, #6]
 801137a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2201      	movs	r2, #1
 8011380:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2202      	movs	r2, #2
 8011386:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011388:	2301      	movs	r3, #1
 801138a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2203      	movs	r2, #3
 8011390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80113a0:	2200      	movs	r2, #0
 80113a2:	4619      	mov	r1, r3
 80113a4:	f7fb ff52 	bl	800d24c <osMessagePut>
      break;
 80113a8:	e026      	b.n	80113f8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f000 f82a 	bl	8011404 <USBH_HandleControl>
 80113b0:	4603      	mov	r3, r0
 80113b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80113b4:	7dfb      	ldrb	r3, [r7, #23]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d002      	beq.n	80113c0 <USBH_CtlReq+0x70>
 80113ba:	7dfb      	ldrb	r3, [r7, #23]
 80113bc:	2b03      	cmp	r3, #3
 80113be:	d106      	bne.n	80113ce <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2201      	movs	r2, #1
 80113c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2200      	movs	r2, #0
 80113ca:	761a      	strb	r2, [r3, #24]
 80113cc:	e005      	b.n	80113da <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80113ce:	7dfb      	ldrb	r3, [r7, #23]
 80113d0:	2b02      	cmp	r3, #2
 80113d2:	d102      	bne.n	80113da <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2201      	movs	r2, #1
 80113d8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2203      	movs	r2, #3
 80113de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80113ee:	2200      	movs	r2, #0
 80113f0:	4619      	mov	r1, r3
 80113f2:	f7fb ff2b 	bl	800d24c <osMessagePut>
      break;
 80113f6:	bf00      	nop
  }
  return status;
 80113f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3718      	adds	r7, #24
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af02      	add	r7, sp, #8
 801140a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801140c:	2301      	movs	r3, #1
 801140e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011410:	2300      	movs	r3, #0
 8011412:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7e1b      	ldrb	r3, [r3, #24]
 8011418:	3b01      	subs	r3, #1
 801141a:	2b0a      	cmp	r3, #10
 801141c:	f200 8229 	bhi.w	8011872 <USBH_HandleControl+0x46e>
 8011420:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <USBH_HandleControl+0x24>)
 8011422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011426:	bf00      	nop
 8011428:	08011455 	.word	0x08011455
 801142c:	0801146f 	.word	0x0801146f
 8011430:	08011511 	.word	0x08011511
 8011434:	08011537 	.word	0x08011537
 8011438:	080115c3 	.word	0x080115c3
 801143c:	080115ed 	.word	0x080115ed
 8011440:	080116af 	.word	0x080116af
 8011444:	080116d1 	.word	0x080116d1
 8011448:	08011763 	.word	0x08011763
 801144c:	08011789 	.word	0x08011789
 8011450:	0801181b 	.word	0x0801181b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f103 0110 	add.w	r1, r3, #16
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	795b      	ldrb	r3, [r3, #5]
 801145e:	461a      	mov	r2, r3
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 fa17 	bl	8011894 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2202      	movs	r2, #2
 801146a:	761a      	strb	r2, [r3, #24]
      break;
 801146c:	e20c      	b.n	8011888 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	795b      	ldrb	r3, [r3, #5]
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7f1 f815 	bl	80024a4 <USBH_LL_GetURBState>
 801147a:	4603      	mov	r3, r0
 801147c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801147e:	7bbb      	ldrb	r3, [r7, #14]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d12c      	bne.n	80114de <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	7c1b      	ldrb	r3, [r3, #16]
 8011488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801148c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8adb      	ldrh	r3, [r3, #22]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00a      	beq.n	80114ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011496:	7b7b      	ldrb	r3, [r7, #13]
 8011498:	2b80      	cmp	r3, #128	; 0x80
 801149a:	d103      	bne.n	80114a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2203      	movs	r2, #3
 80114a0:	761a      	strb	r2, [r3, #24]
 80114a2:	e00d      	b.n	80114c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2205      	movs	r2, #5
 80114a8:	761a      	strb	r2, [r3, #24]
 80114aa:	e009      	b.n	80114c0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80114ac:	7b7b      	ldrb	r3, [r7, #13]
 80114ae:	2b80      	cmp	r3, #128	; 0x80
 80114b0:	d103      	bne.n	80114ba <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2209      	movs	r2, #9
 80114b6:	761a      	strb	r2, [r3, #24]
 80114b8:	e002      	b.n	80114c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2207      	movs	r2, #7
 80114be:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2203      	movs	r2, #3
 80114c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80114d4:	2200      	movs	r2, #0
 80114d6:	4619      	mov	r1, r3
 80114d8:	f7fb feb8 	bl	800d24c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80114dc:	e1cb      	b.n	8011876 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80114de:	7bbb      	ldrb	r3, [r7, #14]
 80114e0:	2b04      	cmp	r3, #4
 80114e2:	d003      	beq.n	80114ec <USBH_HandleControl+0xe8>
 80114e4:	7bbb      	ldrb	r3, [r7, #14]
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	f040 81c5 	bne.w	8011876 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	220b      	movs	r2, #11
 80114f0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2203      	movs	r2, #3
 80114f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011506:	2200      	movs	r2, #0
 8011508:	4619      	mov	r1, r3
 801150a:	f7fb fe9f 	bl	800d24c <osMessagePut>
      break;
 801150e:	e1b2      	b.n	8011876 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011516:	b29a      	uxth	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6899      	ldr	r1, [r3, #8]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	899a      	ldrh	r2, [r3, #12]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	791b      	ldrb	r3, [r3, #4]
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 f9f2 	bl	8011912 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2204      	movs	r2, #4
 8011532:	761a      	strb	r2, [r3, #24]
      break;
 8011534:	e1a8      	b.n	8011888 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	791b      	ldrb	r3, [r3, #4]
 801153a:	4619      	mov	r1, r3
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7f0 ffb1 	bl	80024a4 <USBH_LL_GetURBState>
 8011542:	4603      	mov	r3, r0
 8011544:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011546:	7bbb      	ldrb	r3, [r7, #14]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d110      	bne.n	801156e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2209      	movs	r2, #9
 8011550:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2203      	movs	r2, #3
 8011556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011566:	2200      	movs	r2, #0
 8011568:	4619      	mov	r1, r3
 801156a:	f7fb fe6f 	bl	800d24c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801156e:	7bbb      	ldrb	r3, [r7, #14]
 8011570:	2b05      	cmp	r3, #5
 8011572:	d110      	bne.n	8011596 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011574:	2303      	movs	r3, #3
 8011576:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2203      	movs	r2, #3
 801157c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801158c:	2200      	movs	r2, #0
 801158e:	4619      	mov	r1, r3
 8011590:	f7fb fe5c 	bl	800d24c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011594:	e171      	b.n	801187a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8011596:	7bbb      	ldrb	r3, [r7, #14]
 8011598:	2b04      	cmp	r3, #4
 801159a:	f040 816e 	bne.w	801187a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	220b      	movs	r2, #11
 80115a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2203      	movs	r2, #3
 80115a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80115b8:	2200      	movs	r2, #0
 80115ba:	4619      	mov	r1, r3
 80115bc:	f7fb fe46 	bl	800d24c <osMessagePut>
      break;
 80115c0:	e15b      	b.n	801187a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6899      	ldr	r1, [r3, #8]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	899a      	ldrh	r2, [r3, #12]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	795b      	ldrb	r3, [r3, #5]
 80115ce:	2001      	movs	r0, #1
 80115d0:	9000      	str	r0, [sp, #0]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 f978 	bl	80118c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80115de:	b29a      	uxth	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2206      	movs	r2, #6
 80115e8:	761a      	strb	r2, [r3, #24]
      break;
 80115ea:	e14d      	b.n	8011888 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	795b      	ldrb	r3, [r3, #5]
 80115f0:	4619      	mov	r1, r3
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f7f0 ff56 	bl	80024a4 <USBH_LL_GetURBState>
 80115f8:	4603      	mov	r3, r0
 80115fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80115fc:	7bbb      	ldrb	r3, [r7, #14]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d111      	bne.n	8011626 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2207      	movs	r2, #7
 8011606:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2203      	movs	r2, #3
 801160c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801161c:	2200      	movs	r2, #0
 801161e:	4619      	mov	r1, r3
 8011620:	f7fb fe14 	bl	800d24c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011624:	e12b      	b.n	801187e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8011626:	7bbb      	ldrb	r3, [r7, #14]
 8011628:	2b05      	cmp	r3, #5
 801162a:	d113      	bne.n	8011654 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	220c      	movs	r2, #12
 8011630:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011632:	2303      	movs	r3, #3
 8011634:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2203      	movs	r2, #3
 801163a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801164a:	2200      	movs	r2, #0
 801164c:	4619      	mov	r1, r3
 801164e:	f7fb fdfd 	bl	800d24c <osMessagePut>
      break;
 8011652:	e114      	b.n	801187e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011654:	7bbb      	ldrb	r3, [r7, #14]
 8011656:	2b02      	cmp	r3, #2
 8011658:	d111      	bne.n	801167e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2205      	movs	r2, #5
 801165e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2203      	movs	r2, #3
 8011664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011674:	2200      	movs	r2, #0
 8011676:	4619      	mov	r1, r3
 8011678:	f7fb fde8 	bl	800d24c <osMessagePut>
      break;
 801167c:	e0ff      	b.n	801187e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801167e:	7bbb      	ldrb	r3, [r7, #14]
 8011680:	2b04      	cmp	r3, #4
 8011682:	f040 80fc 	bne.w	801187e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	220b      	movs	r2, #11
 801168a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801168c:	2302      	movs	r3, #2
 801168e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2203      	movs	r2, #3
 8011694:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80116a4:	2200      	movs	r2, #0
 80116a6:	4619      	mov	r1, r3
 80116a8:	f7fb fdd0 	bl	800d24c <osMessagePut>
      break;
 80116ac:	e0e7      	b.n	801187e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	791b      	ldrb	r3, [r3, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	2100      	movs	r1, #0
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f92b 	bl	8011912 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2208      	movs	r2, #8
 80116cc:	761a      	strb	r2, [r3, #24]

      break;
 80116ce:	e0db      	b.n	8011888 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	791b      	ldrb	r3, [r3, #4]
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7f0 fee4 	bl	80024a4 <USBH_LL_GetURBState>
 80116dc:	4603      	mov	r3, r0
 80116de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80116e0:	7bbb      	ldrb	r3, [r7, #14]
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d113      	bne.n	801170e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	220d      	movs	r2, #13
 80116ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80116ec:	2300      	movs	r3, #0
 80116ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2203      	movs	r2, #3
 80116f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011704:	2200      	movs	r2, #0
 8011706:	4619      	mov	r1, r3
 8011708:	f7fb fda0 	bl	800d24c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801170c:	e0b9      	b.n	8011882 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801170e:	7bbb      	ldrb	r3, [r7, #14]
 8011710:	2b04      	cmp	r3, #4
 8011712:	d111      	bne.n	8011738 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	220b      	movs	r2, #11
 8011718:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2203      	movs	r2, #3
 801171e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801172e:	2200      	movs	r2, #0
 8011730:	4619      	mov	r1, r3
 8011732:	f7fb fd8b 	bl	800d24c <osMessagePut>
      break;
 8011736:	e0a4      	b.n	8011882 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8011738:	7bbb      	ldrb	r3, [r7, #14]
 801173a:	2b05      	cmp	r3, #5
 801173c:	f040 80a1 	bne.w	8011882 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8011740:	2303      	movs	r3, #3
 8011742:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2203      	movs	r2, #3
 8011748:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011758:	2200      	movs	r2, #0
 801175a:	4619      	mov	r1, r3
 801175c:	f7fb fd76 	bl	800d24c <osMessagePut>
      break;
 8011760:	e08f      	b.n	8011882 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	795b      	ldrb	r3, [r3, #5]
 8011766:	2201      	movs	r2, #1
 8011768:	9200      	str	r2, [sp, #0]
 801176a:	2200      	movs	r2, #0
 801176c:	2100      	movs	r1, #0
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f8aa 	bl	80118c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801177a:	b29a      	uxth	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	220a      	movs	r2, #10
 8011784:	761a      	strb	r2, [r3, #24]
      break;
 8011786:	e07f      	b.n	8011888 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	795b      	ldrb	r3, [r3, #5]
 801178c:	4619      	mov	r1, r3
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f7f0 fe88 	bl	80024a4 <USBH_LL_GetURBState>
 8011794:	4603      	mov	r3, r0
 8011796:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011798:	7bbb      	ldrb	r3, [r7, #14]
 801179a:	2b01      	cmp	r3, #1
 801179c:	d113      	bne.n	80117c6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	220d      	movs	r2, #13
 80117a6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2203      	movs	r2, #3
 80117ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80117bc:	2200      	movs	r2, #0
 80117be:	4619      	mov	r1, r3
 80117c0:	f7fb fd44 	bl	800d24c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80117c4:	e05f      	b.n	8011886 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80117c6:	7bbb      	ldrb	r3, [r7, #14]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d111      	bne.n	80117f0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2209      	movs	r2, #9
 80117d0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2203      	movs	r2, #3
 80117d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80117e6:	2200      	movs	r2, #0
 80117e8:	4619      	mov	r1, r3
 80117ea:	f7fb fd2f 	bl	800d24c <osMessagePut>
      break;
 80117ee:	e04a      	b.n	8011886 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80117f0:	7bbb      	ldrb	r3, [r7, #14]
 80117f2:	2b04      	cmp	r3, #4
 80117f4:	d147      	bne.n	8011886 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	220b      	movs	r2, #11
 80117fa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2203      	movs	r2, #3
 8011800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011810:	2200      	movs	r2, #0
 8011812:	4619      	mov	r1, r3
 8011814:	f7fb fd1a 	bl	800d24c <osMessagePut>
      break;
 8011818:	e035      	b.n	8011886 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	7e5b      	ldrb	r3, [r3, #25]
 801181e:	3301      	adds	r3, #1
 8011820:	b2da      	uxtb	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	765a      	strb	r2, [r3, #25]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	7e5b      	ldrb	r3, [r3, #25]
 801182a:	2b02      	cmp	r3, #2
 801182c:	d806      	bhi.n	801183c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2201      	movs	r2, #1
 8011832:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2201      	movs	r2, #1
 8011838:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801183a:	e025      	b.n	8011888 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011842:	2106      	movs	r1, #6
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	795b      	ldrb	r3, [r3, #5]
 8011852:	4619      	mov	r1, r3
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f000 f90d 	bl	8011a74 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	791b      	ldrb	r3, [r3, #4]
 801185e:	4619      	mov	r1, r3
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 f907 	bl	8011a74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801186c:	2302      	movs	r3, #2
 801186e:	73fb      	strb	r3, [r7, #15]
      break;
 8011870:	e00a      	b.n	8011888 <USBH_HandleControl+0x484>

    default:
      break;
 8011872:	bf00      	nop
 8011874:	e008      	b.n	8011888 <USBH_HandleControl+0x484>
      break;
 8011876:	bf00      	nop
 8011878:	e006      	b.n	8011888 <USBH_HandleControl+0x484>
      break;
 801187a:	bf00      	nop
 801187c:	e004      	b.n	8011888 <USBH_HandleControl+0x484>
      break;
 801187e:	bf00      	nop
 8011880:	e002      	b.n	8011888 <USBH_HandleControl+0x484>
      break;
 8011882:	bf00      	nop
 8011884:	e000      	b.n	8011888 <USBH_HandleControl+0x484>
      break;
 8011886:	bf00      	nop
  }

  return status;
 8011888:	7bfb      	ldrb	r3, [r7, #15]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop

08011894 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b088      	sub	sp, #32
 8011898:	af04      	add	r7, sp, #16
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	4613      	mov	r3, r2
 80118a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80118a2:	79f9      	ldrb	r1, [r7, #7]
 80118a4:	2300      	movs	r3, #0
 80118a6:	9303      	str	r3, [sp, #12]
 80118a8:	2308      	movs	r3, #8
 80118aa:	9302      	str	r3, [sp, #8]
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	9301      	str	r3, [sp, #4]
 80118b0:	2300      	movs	r3, #0
 80118b2:	9300      	str	r3, [sp, #0]
 80118b4:	2300      	movs	r3, #0
 80118b6:	2200      	movs	r2, #0
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f7f0 fdc2 	bl	8002442 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b088      	sub	sp, #32
 80118cc:	af04      	add	r7, sp, #16
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	4611      	mov	r1, r2
 80118d4:	461a      	mov	r2, r3
 80118d6:	460b      	mov	r3, r1
 80118d8:	80fb      	strh	r3, [r7, #6]
 80118da:	4613      	mov	r3, r2
 80118dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d001      	beq.n	80118ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80118e8:	2300      	movs	r3, #0
 80118ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80118ec:	7979      	ldrb	r1, [r7, #5]
 80118ee:	7e3b      	ldrb	r3, [r7, #24]
 80118f0:	9303      	str	r3, [sp, #12]
 80118f2:	88fb      	ldrh	r3, [r7, #6]
 80118f4:	9302      	str	r3, [sp, #8]
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	2301      	movs	r3, #1
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	2300      	movs	r3, #0
 8011900:	2200      	movs	r2, #0
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7f0 fd9d 	bl	8002442 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011908:	2300      	movs	r3, #0
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b088      	sub	sp, #32
 8011916:	af04      	add	r7, sp, #16
 8011918:	60f8      	str	r0, [r7, #12]
 801191a:	60b9      	str	r1, [r7, #8]
 801191c:	4611      	mov	r1, r2
 801191e:	461a      	mov	r2, r3
 8011920:	460b      	mov	r3, r1
 8011922:	80fb      	strh	r3, [r7, #6]
 8011924:	4613      	mov	r3, r2
 8011926:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011928:	7979      	ldrb	r1, [r7, #5]
 801192a:	2300      	movs	r3, #0
 801192c:	9303      	str	r3, [sp, #12]
 801192e:	88fb      	ldrh	r3, [r7, #6]
 8011930:	9302      	str	r3, [sp, #8]
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	2301      	movs	r3, #1
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	2300      	movs	r3, #0
 801193c:	2201      	movs	r2, #1
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7f0 fd7f 	bl	8002442 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011944:	2300      	movs	r3, #0

}
 8011946:	4618      	mov	r0, r3
 8011948:	3710      	adds	r7, #16
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801194e:	b580      	push	{r7, lr}
 8011950:	b088      	sub	sp, #32
 8011952:	af04      	add	r7, sp, #16
 8011954:	60f8      	str	r0, [r7, #12]
 8011956:	60b9      	str	r1, [r7, #8]
 8011958:	4611      	mov	r1, r2
 801195a:	461a      	mov	r2, r3
 801195c:	460b      	mov	r3, r1
 801195e:	80fb      	strh	r3, [r7, #6]
 8011960:	4613      	mov	r3, r2
 8011962:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801196a:	2b00      	cmp	r3, #0
 801196c:	d001      	beq.n	8011972 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801196e:	2300      	movs	r3, #0
 8011970:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011972:	7979      	ldrb	r1, [r7, #5]
 8011974:	7e3b      	ldrb	r3, [r7, #24]
 8011976:	9303      	str	r3, [sp, #12]
 8011978:	88fb      	ldrh	r3, [r7, #6]
 801197a:	9302      	str	r3, [sp, #8]
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	9301      	str	r3, [sp, #4]
 8011980:	2301      	movs	r3, #1
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	2302      	movs	r3, #2
 8011986:	2200      	movs	r2, #0
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f7f0 fd5a 	bl	8002442 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3710      	adds	r7, #16
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b088      	sub	sp, #32
 801199c:	af04      	add	r7, sp, #16
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	4611      	mov	r1, r2
 80119a4:	461a      	mov	r2, r3
 80119a6:	460b      	mov	r3, r1
 80119a8:	80fb      	strh	r3, [r7, #6]
 80119aa:	4613      	mov	r3, r2
 80119ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80119ae:	7979      	ldrb	r1, [r7, #5]
 80119b0:	2300      	movs	r3, #0
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	88fb      	ldrh	r3, [r7, #6]
 80119b6:	9302      	str	r3, [sp, #8]
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	2301      	movs	r3, #1
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	2302      	movs	r3, #2
 80119c2:	2201      	movs	r2, #1
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f7f0 fd3c 	bl	8002442 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af04      	add	r7, sp, #16
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	4608      	mov	r0, r1
 80119de:	4611      	mov	r1, r2
 80119e0:	461a      	mov	r2, r3
 80119e2:	4603      	mov	r3, r0
 80119e4:	70fb      	strb	r3, [r7, #3]
 80119e6:	460b      	mov	r3, r1
 80119e8:	70bb      	strb	r3, [r7, #2]
 80119ea:	4613      	mov	r3, r2
 80119ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80119ee:	7878      	ldrb	r0, [r7, #1]
 80119f0:	78ba      	ldrb	r2, [r7, #2]
 80119f2:	78f9      	ldrb	r1, [r7, #3]
 80119f4:	8b3b      	ldrh	r3, [r7, #24]
 80119f6:	9302      	str	r3, [sp, #8]
 80119f8:	7d3b      	ldrb	r3, [r7, #20]
 80119fa:	9301      	str	r3, [sp, #4]
 80119fc:	7c3b      	ldrb	r3, [r7, #16]
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	4603      	mov	r3, r0
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7f0 fccf 	bl	80023a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b082      	sub	sp, #8
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011a1e:	78fb      	ldrb	r3, [r7, #3]
 8011a20:	4619      	mov	r1, r3
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7f0 fcee 	bl	8002404 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b084      	sub	sp, #16
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 f836 	bl	8011ab0 <USBH_GetFreePipe>
 8011a44:	4603      	mov	r3, r0
 8011a46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011a48:	89fb      	ldrh	r3, [r7, #14]
 8011a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d00a      	beq.n	8011a68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011a52:	78fa      	ldrb	r2, [r7, #3]
 8011a54:	89fb      	ldrh	r3, [r7, #14]
 8011a56:	f003 030f 	and.w	r3, r3, #15
 8011a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011a5e:	6879      	ldr	r1, [r7, #4]
 8011a60:	33e0      	adds	r3, #224	; 0xe0
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	440b      	add	r3, r1
 8011a66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011a68:	89fb      	ldrh	r3, [r7, #14]
 8011a6a:	b2db      	uxtb	r3, r3
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011a80:	78fb      	ldrb	r3, [r7, #3]
 8011a82:	2b0f      	cmp	r3, #15
 8011a84:	d80d      	bhi.n	8011aa2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011a86:	78fb      	ldrb	r3, [r7, #3]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	33e0      	adds	r3, #224	; 0xe0
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	4413      	add	r3, r2
 8011a90:	685a      	ldr	r2, [r3, #4]
 8011a92:	78fb      	ldrb	r3, [r7, #3]
 8011a94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011a98:	6879      	ldr	r1, [r7, #4]
 8011a9a:	33e0      	adds	r3, #224	; 0xe0
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	440b      	add	r3, r1
 8011aa0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011aa2:	2300      	movs	r3, #0
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	370c      	adds	r7, #12
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr

08011ab0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8011abc:	2300      	movs	r3, #0
 8011abe:	73fb      	strb	r3, [r7, #15]
 8011ac0:	e00f      	b.n	8011ae2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	33e0      	adds	r3, #224	; 0xe0
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	4413      	add	r3, r2
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d102      	bne.n	8011adc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	e007      	b.n	8011aec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	73fb      	strb	r3, [r7, #15]
 8011ae2:	7bfb      	ldrb	r3, [r7, #15]
 8011ae4:	2b0f      	cmp	r3, #15
 8011ae6:	d9ec      	bls.n	8011ac2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3714      	adds	r7, #20
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr

08011af8 <__errno>:
 8011af8:	4b01      	ldr	r3, [pc, #4]	; (8011b00 <__errno+0x8>)
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	20000050 	.word	0x20000050

08011b04 <__libc_init_array>:
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	4d0d      	ldr	r5, [pc, #52]	; (8011b3c <__libc_init_array+0x38>)
 8011b08:	4c0d      	ldr	r4, [pc, #52]	; (8011b40 <__libc_init_array+0x3c>)
 8011b0a:	1b64      	subs	r4, r4, r5
 8011b0c:	10a4      	asrs	r4, r4, #2
 8011b0e:	2600      	movs	r6, #0
 8011b10:	42a6      	cmp	r6, r4
 8011b12:	d109      	bne.n	8011b28 <__libc_init_array+0x24>
 8011b14:	4d0b      	ldr	r5, [pc, #44]	; (8011b44 <__libc_init_array+0x40>)
 8011b16:	4c0c      	ldr	r4, [pc, #48]	; (8011b48 <__libc_init_array+0x44>)
 8011b18:	f000 f93c 	bl	8011d94 <_init>
 8011b1c:	1b64      	subs	r4, r4, r5
 8011b1e:	10a4      	asrs	r4, r4, #2
 8011b20:	2600      	movs	r6, #0
 8011b22:	42a6      	cmp	r6, r4
 8011b24:	d105      	bne.n	8011b32 <__libc_init_array+0x2e>
 8011b26:	bd70      	pop	{r4, r5, r6, pc}
 8011b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b2c:	4798      	blx	r3
 8011b2e:	3601      	adds	r6, #1
 8011b30:	e7ee      	b.n	8011b10 <__libc_init_array+0xc>
 8011b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b36:	4798      	blx	r3
 8011b38:	3601      	adds	r6, #1
 8011b3a:	e7f2      	b.n	8011b22 <__libc_init_array+0x1e>
 8011b3c:	080147bc 	.word	0x080147bc
 8011b40:	080147bc 	.word	0x080147bc
 8011b44:	080147bc 	.word	0x080147bc
 8011b48:	080147c0 	.word	0x080147c0

08011b4c <malloc>:
 8011b4c:	4b02      	ldr	r3, [pc, #8]	; (8011b58 <malloc+0xc>)
 8011b4e:	4601      	mov	r1, r0
 8011b50:	6818      	ldr	r0, [r3, #0]
 8011b52:	f000 b88d 	b.w	8011c70 <_malloc_r>
 8011b56:	bf00      	nop
 8011b58:	20000050 	.word	0x20000050

08011b5c <free>:
 8011b5c:	4b02      	ldr	r3, [pc, #8]	; (8011b68 <free+0xc>)
 8011b5e:	4601      	mov	r1, r0
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	f000 b819 	b.w	8011b98 <_free_r>
 8011b66:	bf00      	nop
 8011b68:	20000050 	.word	0x20000050

08011b6c <memcpy>:
 8011b6c:	440a      	add	r2, r1
 8011b6e:	4291      	cmp	r1, r2
 8011b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b74:	d100      	bne.n	8011b78 <memcpy+0xc>
 8011b76:	4770      	bx	lr
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b82:	4291      	cmp	r1, r2
 8011b84:	d1f9      	bne.n	8011b7a <memcpy+0xe>
 8011b86:	bd10      	pop	{r4, pc}

08011b88 <memset>:
 8011b88:	4402      	add	r2, r0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d100      	bne.n	8011b92 <memset+0xa>
 8011b90:	4770      	bx	lr
 8011b92:	f803 1b01 	strb.w	r1, [r3], #1
 8011b96:	e7f9      	b.n	8011b8c <memset+0x4>

08011b98 <_free_r>:
 8011b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b9a:	2900      	cmp	r1, #0
 8011b9c:	d044      	beq.n	8011c28 <_free_r+0x90>
 8011b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ba2:	9001      	str	r0, [sp, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8011baa:	bfb8      	it	lt
 8011bac:	18e4      	addlt	r4, r4, r3
 8011bae:	f000 f8e3 	bl	8011d78 <__malloc_lock>
 8011bb2:	4a1e      	ldr	r2, [pc, #120]	; (8011c2c <_free_r+0x94>)
 8011bb4:	9801      	ldr	r0, [sp, #4]
 8011bb6:	6813      	ldr	r3, [r2, #0]
 8011bb8:	b933      	cbnz	r3, 8011bc8 <_free_r+0x30>
 8011bba:	6063      	str	r3, [r4, #4]
 8011bbc:	6014      	str	r4, [r2, #0]
 8011bbe:	b003      	add	sp, #12
 8011bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bc4:	f000 b8de 	b.w	8011d84 <__malloc_unlock>
 8011bc8:	42a3      	cmp	r3, r4
 8011bca:	d908      	bls.n	8011bde <_free_r+0x46>
 8011bcc:	6825      	ldr	r5, [r4, #0]
 8011bce:	1961      	adds	r1, r4, r5
 8011bd0:	428b      	cmp	r3, r1
 8011bd2:	bf01      	itttt	eq
 8011bd4:	6819      	ldreq	r1, [r3, #0]
 8011bd6:	685b      	ldreq	r3, [r3, #4]
 8011bd8:	1949      	addeq	r1, r1, r5
 8011bda:	6021      	streq	r1, [r4, #0]
 8011bdc:	e7ed      	b.n	8011bba <_free_r+0x22>
 8011bde:	461a      	mov	r2, r3
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	b10b      	cbz	r3, 8011be8 <_free_r+0x50>
 8011be4:	42a3      	cmp	r3, r4
 8011be6:	d9fa      	bls.n	8011bde <_free_r+0x46>
 8011be8:	6811      	ldr	r1, [r2, #0]
 8011bea:	1855      	adds	r5, r2, r1
 8011bec:	42a5      	cmp	r5, r4
 8011bee:	d10b      	bne.n	8011c08 <_free_r+0x70>
 8011bf0:	6824      	ldr	r4, [r4, #0]
 8011bf2:	4421      	add	r1, r4
 8011bf4:	1854      	adds	r4, r2, r1
 8011bf6:	42a3      	cmp	r3, r4
 8011bf8:	6011      	str	r1, [r2, #0]
 8011bfa:	d1e0      	bne.n	8011bbe <_free_r+0x26>
 8011bfc:	681c      	ldr	r4, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	6053      	str	r3, [r2, #4]
 8011c02:	4421      	add	r1, r4
 8011c04:	6011      	str	r1, [r2, #0]
 8011c06:	e7da      	b.n	8011bbe <_free_r+0x26>
 8011c08:	d902      	bls.n	8011c10 <_free_r+0x78>
 8011c0a:	230c      	movs	r3, #12
 8011c0c:	6003      	str	r3, [r0, #0]
 8011c0e:	e7d6      	b.n	8011bbe <_free_r+0x26>
 8011c10:	6825      	ldr	r5, [r4, #0]
 8011c12:	1961      	adds	r1, r4, r5
 8011c14:	428b      	cmp	r3, r1
 8011c16:	bf04      	itt	eq
 8011c18:	6819      	ldreq	r1, [r3, #0]
 8011c1a:	685b      	ldreq	r3, [r3, #4]
 8011c1c:	6063      	str	r3, [r4, #4]
 8011c1e:	bf04      	itt	eq
 8011c20:	1949      	addeq	r1, r1, r5
 8011c22:	6021      	streq	r1, [r4, #0]
 8011c24:	6054      	str	r4, [r2, #4]
 8011c26:	e7ca      	b.n	8011bbe <_free_r+0x26>
 8011c28:	b003      	add	sp, #12
 8011c2a:	bd30      	pop	{r4, r5, pc}
 8011c2c:	20009274 	.word	0x20009274

08011c30 <sbrk_aligned>:
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	4e0e      	ldr	r6, [pc, #56]	; (8011c6c <sbrk_aligned+0x3c>)
 8011c34:	460c      	mov	r4, r1
 8011c36:	6831      	ldr	r1, [r6, #0]
 8011c38:	4605      	mov	r5, r0
 8011c3a:	b911      	cbnz	r1, 8011c42 <sbrk_aligned+0x12>
 8011c3c:	f000 f88c 	bl	8011d58 <_sbrk_r>
 8011c40:	6030      	str	r0, [r6, #0]
 8011c42:	4621      	mov	r1, r4
 8011c44:	4628      	mov	r0, r5
 8011c46:	f000 f887 	bl	8011d58 <_sbrk_r>
 8011c4a:	1c43      	adds	r3, r0, #1
 8011c4c:	d00a      	beq.n	8011c64 <sbrk_aligned+0x34>
 8011c4e:	1cc4      	adds	r4, r0, #3
 8011c50:	f024 0403 	bic.w	r4, r4, #3
 8011c54:	42a0      	cmp	r0, r4
 8011c56:	d007      	beq.n	8011c68 <sbrk_aligned+0x38>
 8011c58:	1a21      	subs	r1, r4, r0
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f000 f87c 	bl	8011d58 <_sbrk_r>
 8011c60:	3001      	adds	r0, #1
 8011c62:	d101      	bne.n	8011c68 <sbrk_aligned+0x38>
 8011c64:	f04f 34ff 	mov.w	r4, #4294967295
 8011c68:	4620      	mov	r0, r4
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	20009278 	.word	0x20009278

08011c70 <_malloc_r>:
 8011c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c74:	1ccd      	adds	r5, r1, #3
 8011c76:	f025 0503 	bic.w	r5, r5, #3
 8011c7a:	3508      	adds	r5, #8
 8011c7c:	2d0c      	cmp	r5, #12
 8011c7e:	bf38      	it	cc
 8011c80:	250c      	movcc	r5, #12
 8011c82:	2d00      	cmp	r5, #0
 8011c84:	4607      	mov	r7, r0
 8011c86:	db01      	blt.n	8011c8c <_malloc_r+0x1c>
 8011c88:	42a9      	cmp	r1, r5
 8011c8a:	d905      	bls.n	8011c98 <_malloc_r+0x28>
 8011c8c:	230c      	movs	r3, #12
 8011c8e:	603b      	str	r3, [r7, #0]
 8011c90:	2600      	movs	r6, #0
 8011c92:	4630      	mov	r0, r6
 8011c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c98:	4e2e      	ldr	r6, [pc, #184]	; (8011d54 <_malloc_r+0xe4>)
 8011c9a:	f000 f86d 	bl	8011d78 <__malloc_lock>
 8011c9e:	6833      	ldr	r3, [r6, #0]
 8011ca0:	461c      	mov	r4, r3
 8011ca2:	bb34      	cbnz	r4, 8011cf2 <_malloc_r+0x82>
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4638      	mov	r0, r7
 8011ca8:	f7ff ffc2 	bl	8011c30 <sbrk_aligned>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	4604      	mov	r4, r0
 8011cb0:	d14d      	bne.n	8011d4e <_malloc_r+0xde>
 8011cb2:	6834      	ldr	r4, [r6, #0]
 8011cb4:	4626      	mov	r6, r4
 8011cb6:	2e00      	cmp	r6, #0
 8011cb8:	d140      	bne.n	8011d3c <_malloc_r+0xcc>
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	4631      	mov	r1, r6
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	eb04 0803 	add.w	r8, r4, r3
 8011cc4:	f000 f848 	bl	8011d58 <_sbrk_r>
 8011cc8:	4580      	cmp	r8, r0
 8011cca:	d13a      	bne.n	8011d42 <_malloc_r+0xd2>
 8011ccc:	6821      	ldr	r1, [r4, #0]
 8011cce:	3503      	adds	r5, #3
 8011cd0:	1a6d      	subs	r5, r5, r1
 8011cd2:	f025 0503 	bic.w	r5, r5, #3
 8011cd6:	3508      	adds	r5, #8
 8011cd8:	2d0c      	cmp	r5, #12
 8011cda:	bf38      	it	cc
 8011cdc:	250c      	movcc	r5, #12
 8011cde:	4629      	mov	r1, r5
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	f7ff ffa5 	bl	8011c30 <sbrk_aligned>
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	d02b      	beq.n	8011d42 <_malloc_r+0xd2>
 8011cea:	6823      	ldr	r3, [r4, #0]
 8011cec:	442b      	add	r3, r5
 8011cee:	6023      	str	r3, [r4, #0]
 8011cf0:	e00e      	b.n	8011d10 <_malloc_r+0xa0>
 8011cf2:	6822      	ldr	r2, [r4, #0]
 8011cf4:	1b52      	subs	r2, r2, r5
 8011cf6:	d41e      	bmi.n	8011d36 <_malloc_r+0xc6>
 8011cf8:	2a0b      	cmp	r2, #11
 8011cfa:	d916      	bls.n	8011d2a <_malloc_r+0xba>
 8011cfc:	1961      	adds	r1, r4, r5
 8011cfe:	42a3      	cmp	r3, r4
 8011d00:	6025      	str	r5, [r4, #0]
 8011d02:	bf18      	it	ne
 8011d04:	6059      	strne	r1, [r3, #4]
 8011d06:	6863      	ldr	r3, [r4, #4]
 8011d08:	bf08      	it	eq
 8011d0a:	6031      	streq	r1, [r6, #0]
 8011d0c:	5162      	str	r2, [r4, r5]
 8011d0e:	604b      	str	r3, [r1, #4]
 8011d10:	4638      	mov	r0, r7
 8011d12:	f104 060b 	add.w	r6, r4, #11
 8011d16:	f000 f835 	bl	8011d84 <__malloc_unlock>
 8011d1a:	f026 0607 	bic.w	r6, r6, #7
 8011d1e:	1d23      	adds	r3, r4, #4
 8011d20:	1af2      	subs	r2, r6, r3
 8011d22:	d0b6      	beq.n	8011c92 <_malloc_r+0x22>
 8011d24:	1b9b      	subs	r3, r3, r6
 8011d26:	50a3      	str	r3, [r4, r2]
 8011d28:	e7b3      	b.n	8011c92 <_malloc_r+0x22>
 8011d2a:	6862      	ldr	r2, [r4, #4]
 8011d2c:	42a3      	cmp	r3, r4
 8011d2e:	bf0c      	ite	eq
 8011d30:	6032      	streq	r2, [r6, #0]
 8011d32:	605a      	strne	r2, [r3, #4]
 8011d34:	e7ec      	b.n	8011d10 <_malloc_r+0xa0>
 8011d36:	4623      	mov	r3, r4
 8011d38:	6864      	ldr	r4, [r4, #4]
 8011d3a:	e7b2      	b.n	8011ca2 <_malloc_r+0x32>
 8011d3c:	4634      	mov	r4, r6
 8011d3e:	6876      	ldr	r6, [r6, #4]
 8011d40:	e7b9      	b.n	8011cb6 <_malloc_r+0x46>
 8011d42:	230c      	movs	r3, #12
 8011d44:	603b      	str	r3, [r7, #0]
 8011d46:	4638      	mov	r0, r7
 8011d48:	f000 f81c 	bl	8011d84 <__malloc_unlock>
 8011d4c:	e7a1      	b.n	8011c92 <_malloc_r+0x22>
 8011d4e:	6025      	str	r5, [r4, #0]
 8011d50:	e7de      	b.n	8011d10 <_malloc_r+0xa0>
 8011d52:	bf00      	nop
 8011d54:	20009274 	.word	0x20009274

08011d58 <_sbrk_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d06      	ldr	r5, [pc, #24]	; (8011d74 <_sbrk_r+0x1c>)
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	4604      	mov	r4, r0
 8011d60:	4608      	mov	r0, r1
 8011d62:	602b      	str	r3, [r5, #0]
 8011d64:	f7ef fd54 	bl	8001810 <_sbrk>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_sbrk_r+0x1a>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_sbrk_r+0x1a>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	2000927c 	.word	0x2000927c

08011d78 <__malloc_lock>:
 8011d78:	4801      	ldr	r0, [pc, #4]	; (8011d80 <__malloc_lock+0x8>)
 8011d7a:	f000 b809 	b.w	8011d90 <__retarget_lock_acquire_recursive>
 8011d7e:	bf00      	nop
 8011d80:	20009280 	.word	0x20009280

08011d84 <__malloc_unlock>:
 8011d84:	4801      	ldr	r0, [pc, #4]	; (8011d8c <__malloc_unlock+0x8>)
 8011d86:	f000 b804 	b.w	8011d92 <__retarget_lock_release_recursive>
 8011d8a:	bf00      	nop
 8011d8c:	20009280 	.word	0x20009280

08011d90 <__retarget_lock_acquire_recursive>:
 8011d90:	4770      	bx	lr

08011d92 <__retarget_lock_release_recursive>:
 8011d92:	4770      	bx	lr

08011d94 <_init>:
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	bf00      	nop
 8011d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d9a:	bc08      	pop	{r3}
 8011d9c:	469e      	mov	lr, r3
 8011d9e:	4770      	bx	lr

08011da0 <_fini>:
 8011da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da2:	bf00      	nop
 8011da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011da6:	bc08      	pop	{r3}
 8011da8:	469e      	mov	lr, r3
 8011daa:	4770      	bx	lr
