
TouchGFX_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd24  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800ded8  0800ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df74  0800df74  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800df74  0800df74  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df7c  0800df7c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800df84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000b88  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c1c  20000c1c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030fde  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000714a  00000000  00000000  000510a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025e8  00000000  00000000  000581f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022d0  00000000  00000000  0005a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036239  00000000  00000000  0005caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003771a  00000000  00000000  00092ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117cb7  00000000  00000000  000ca3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e20b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a458  00000000  00000000  001e2104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000094 	.word	0x20000094
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800dec0 	.word	0x0800dec0

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000098 	.word	0x20000098
 80001f0:	0800dec0 	.word	0x0800dec0

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_CRC_Init+0x20>)
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <MX_CRC_Init+0x24>)
 8000500:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_CRC_Init+0x20>)
 8000504:	f002 f9e8 	bl	80028d8 <HAL_CRC_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050e:	f000 fedb 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000b0 	.word	0x200000b0
 800051c:	40023000 	.word	0x40023000

08000520 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <HAL_CRC_MspInit+0x3c>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d10d      	bne.n	800054e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_CRC_MspInit+0x40>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a09      	ldr	r2, [pc, #36]	; (8000560 <HAL_CRC_MspInit+0x40>)
 800053c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <HAL_CRC_MspInit+0x40>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40023000 	.word	0x40023000
 8000560:	40023800 	.word	0x40023800

08000564 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <MX_DMA2D_Init+0x60>)
 800056c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 800059a:	f002 f9b9 	bl	8002910 <HAL_DMA2D_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005a4:	f000 fe90 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a8:	2101      	movs	r1, #1
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_DMA2D_Init+0x5c>)
 80005ac:	f002 fb0a 	bl	8002bc4 <HAL_DMA2D_ConfigLayer>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005b6:	f000 fe87 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	4002b000 	.word	0x4002b000

080005c8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_DMA2D_MspInit+0x48>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d115      	bne.n	8000606 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_DMA2D_MspInit+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_DMA2D_MspInit+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	205a      	movs	r0, #90	; 0x5a
 80005fc:	f002 f942 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000600:	205a      	movs	r0, #90	; 0x5a
 8000602:	f002 f95b 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	4002b000 	.word	0x4002b000
 8000614:	40023800 	.word	0x40023800

08000618 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0aa      	sub	sp, #168	; 0xa8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800062a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800062e:	2224      	movs	r2, #36	; 0x24
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00c fe78 	bl	800d328 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000638:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800064a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00c fe68 	bl	800d328 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	222c      	movs	r2, #44	; 0x2c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00c fe62 	bl	800d328 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000664:	4b6a      	ldr	r3, [pc, #424]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000666:	4a6b      	ldr	r2, [pc, #428]	; (8000814 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000668:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800066a:	4b69      	ldr	r3, [pc, #420]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000670:	4b67      	ldr	r3, [pc, #412]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000672:	2204      	movs	r2, #4
 8000674:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000676:	4b66      	ldr	r3, [pc, #408]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 800067c:	237d      	movs	r3, #125	; 0x7d
 800067e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800068e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000692:	4619      	mov	r1, r3
 8000694:	485e      	ldr	r0, [pc, #376]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000696:	f002 fb27 	bl	8002ce8 <HAL_DSI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80006a0:	f000 fe12 	bl	80012c8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80006da:	4619      	mov	r1, r3
 80006dc:	484c      	ldr	r0, [pc, #304]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 80006de:	f002 ffb3 	bl	8003648 <HAL_DSI_ConfigHostTimeouts>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80006e8:	f000 fdee 	bl	80012c8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80006ec:	231c      	movs	r3, #28
 80006ee:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006f0:	2321      	movs	r3, #33	; 0x21
 80006f2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80006f4:	230f      	movs	r3, #15
 80006f6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80006f8:	2319      	movs	r3, #25
 80006fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 8000700:	230a      	movs	r3, #10
 8000702:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000704:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000708:	4619      	mov	r1, r3
 800070a:	4841      	ldr	r0, [pc, #260]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 800070c:	f002 ff32 	bl	8003574 <HAL_DSI_ConfigPhyTimer>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000716:	f000 fdd7 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800071a:	2104      	movs	r1, #4
 800071c:	483c      	ldr	r0, [pc, #240]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 800071e:	f002 ff01 	bl	8003524 <HAL_DSI_ConfigFlowControl>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000728:	f000 fdce 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800072c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000730:	4837      	ldr	r0, [pc, #220]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000732:	f003 f84f 	bl	80037d4 <HAL_DSI_SetLowPowerRXFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800073c:	f000 fdc4 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4833      	ldr	r0, [pc, #204]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000744:	f002 fbec 	bl	8002f20 <HAL_DSI_ConfigErrorMonitor>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800074e:	f000 fdbb 	bl	80012c8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000788:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800078e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000798:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007a6:	f002 fe5f 	bl	8003468 <HAL_DSI_ConfigCommand>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80007b0:	f000 fd8a 	bl	80012c8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80007b8:	2305      	movs	r3, #5
 80007ba:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80007bc:	23c8      	movs	r3, #200	; 0xc8
 80007be:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80007c0:	2310      	movs	r3, #16
 80007c2:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80007c8:	2304      	movs	r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007e6:	f002 fd67 	bl	80032b8 <HAL_DSI_ConfigAdaptedCommandMode>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80007f0:	f000 fd6a 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007f8:	f002 fd36 	bl	8003268 <HAL_DSI_SetGenericVCID>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000802:	f000 fd61 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	37a8      	adds	r7, #168	; 0xa8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000f8 	.word	0x200000f8
 8000814:	40016c00 	.word	0x40016c00

08000818 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_DSI_MspInit+0x94>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d133      	bne.n	80008a2 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 8000844:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 8000860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_DSI_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000872:	2304      	movs	r3, #4
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000882:	230d      	movs	r3, #13
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_DSI_MspInit+0x9c>)
 800088e:	f002 ffcf 	bl	8003830 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	205c      	movs	r0, #92	; 0x5c
 8000898:	f001 fff4 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800089c:	205c      	movs	r0, #92	; 0x5c
 800089e:	f002 f80d 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40016c00 	.word	0x40016c00
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40022400 	.word	0x40022400

080008b8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_FMC_Init+0x98>)
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <MX_FMC_Init+0x9c>)
 80008d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_FMC_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_FMC_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_FMC_Init+0x98>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_FMC_Init+0x98>)
 80008ea:	2220      	movs	r2, #32
 80008ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_FMC_Init+0x98>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_FMC_Init+0x98>)
 80008f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80008fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_FMC_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_FMC_Init+0x98>)
 8000904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000908:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_FMC_Init+0x98>)
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_FMC_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800091c:	2307      	movs	r3, #7
 800091e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000928:	2303      	movs	r3, #3
 800092a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_FMC_Init+0x98>)
 800093a:	f007 fde6 	bl	800850a <HAL_SDRAM_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000944:	f000 fcc0 	bl	80012c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000114 	.word	0x20000114
 8000954:	a0000140 	.word	0xa0000140

08000958 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800096c:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_FMC_MspInit+0x128>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	f040 8081 	bne.w	8000a78 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <HAL_FMC_MspInit+0x128>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <HAL_FMC_MspInit+0x12c>)
 8000982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000984:	4a3f      	ldr	r2, [pc, #252]	; (8000a84 <HAL_FMC_MspInit+0x12c>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6393      	str	r3, [r2, #56]	; 0x38
 800098c:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <HAL_FMC_MspInit+0x12c>)
 800098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8000998:	f64f 7383 	movw	r3, #65411	; 0xff83
 800099c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <HAL_FMC_MspInit+0x130>)
 80009b4:	f002 ff3c 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80009b8:	f248 1333 	movw	r3, #33075	; 0x8133
 80009bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ca:	230c      	movs	r3, #12
 80009cc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	482e      	ldr	r0, [pc, #184]	; (8000a8c <HAL_FMC_MspInit+0x134>)
 80009d4:	f002 ff2c 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80009d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009dc:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ea:	230c      	movs	r3, #12
 80009ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4827      	ldr	r0, [pc, #156]	; (8000a90 <HAL_FMC_MspInit+0x138>)
 80009f4:	f002 ff1c 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80009f8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80009fc:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <HAL_FMC_MspInit+0x13c>)
 8000a14:	f002 ff0c 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a18:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a1c:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <HAL_FMC_MspInit+0x140>)
 8000a34:	f002 fefc 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000a38:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000a3c:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_FMC_MspInit+0x144>)
 8000a54:	f002 feec 	bl	8003830 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HAL_FMC_MspInit+0x148>)
 8000a72:	f002 fedd 	bl	8003830 <HAL_GPIO_Init>
 8000a76:	e000      	b.n	8000a7a <HAL_FMC_MspInit+0x122>
    return;
 8000a78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000148 	.word	0x20000148
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40022000 	.word	0x40022000
 8000a98:	40021400 	.word	0x40021400
 8000a9c:	40021c00 	.word	0x40021c00
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000aac:	f7ff ff54 	bl	8000958 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <MX_GPIO_Init>:
/** Configure pins
     PB3   ------> I2S3_CK
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	; 0x40
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad2:	4bae      	ldr	r3, [pc, #696]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4aad      	ldr	r2, [pc, #692]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4bab      	ldr	r3, [pc, #684]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	4ba7      	ldr	r3, [pc, #668]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4aa6      	ldr	r2, [pc, #664]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4ba4      	ldr	r3, [pc, #656]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a9f      	ldr	r2, [pc, #636]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b9d      	ldr	r3, [pc, #628]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
 8000b20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	4b99      	ldr	r3, [pc, #612]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a98      	ldr	r2, [pc, #608]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b96      	ldr	r3, [pc, #600]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	4b92      	ldr	r3, [pc, #584]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a91      	ldr	r2, [pc, #580]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b8f      	ldr	r3, [pc, #572]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4b8b      	ldr	r3, [pc, #556]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a8a      	ldr	r2, [pc, #552]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b84      	ldr	r3, [pc, #528]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a83      	ldr	r2, [pc, #524]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b7d      	ldr	r3, [pc, #500]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a7c      	ldr	r2, [pc, #496]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a75      	ldr	r2, [pc, #468]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b73      	ldr	r3, [pc, #460]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b6f      	ldr	r3, [pc, #444]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a6e      	ldr	r2, [pc, #440]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b6c      	ldr	r3, [pc, #432]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b68      	ldr	r3, [pc, #416]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a67      	ldr	r2, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <MX_GPIO_Init+0x2d4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210c      	movs	r1, #12
 8000c06:	4862      	ldr	r0, [pc, #392]	; (8000d90 <MX_GPIO_Init+0x2d8>)
 8000c08:	f002 ffd6 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2130      	movs	r1, #48	; 0x30
 8000c10:	4860      	ldr	r0, [pc, #384]	; (8000d94 <MX_GPIO_Init+0x2dc>)
 8000c12:	f002 ffd1 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2108      	movs	r1, #8
 8000c1a:	485f      	ldr	r0, [pc, #380]	; (8000d98 <MX_GPIO_Init+0x2e0>)
 8000c1c:	f002 ffcc 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	485d      	ldr	r0, [pc, #372]	; (8000d9c <MX_GPIO_Init+0x2e4>)
 8000c26:	f002 ffc7 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	485c      	ldr	r0, [pc, #368]	; (8000da0 <MX_GPIO_Init+0x2e8>)
 8000c30:	f002 ffc2 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	485a      	ldr	r0, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x2ec>)
 8000c3a:	f002 ffbd 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4859      	ldr	r0, [pc, #356]	; (8000da8 <MX_GPIO_Init+0x2f0>)
 8000c44:	f002 ffb8 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	484c      	ldr	r0, [pc, #304]	; (8000d90 <MX_GPIO_Init+0x2d8>)
 8000c60:	f002 fde6 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000c64:	2308      	movs	r3, #8
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c74:	2306      	movs	r3, #6
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4848      	ldr	r0, [pc, #288]	; (8000da0 <MX_GPIO_Init+0x2e8>)
 8000c80:	f002 fdd6 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4841      	ldr	r0, [pc, #260]	; (8000da0 <MX_GPIO_Init+0x2e8>)
 8000c9a:	f002 fdc9 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000c9e:	2330      	movs	r3, #48	; 0x30
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca2:	2311      	movs	r3, #17
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4837      	ldr	r0, [pc, #220]	; (8000d94 <MX_GPIO_Init+0x2dc>)
 8000cb6:	f002 fdbb 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cbe:	2311      	movs	r3, #17
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4831      	ldr	r0, [pc, #196]	; (8000d98 <MX_GPIO_Init+0x2e0>)
 8000cd2:	f002 fdad 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000cd6:	2340      	movs	r3, #64	; 0x40
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cda:	2311      	movs	r3, #17
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	482b      	ldr	r0, [pc, #172]	; (8000d9c <MX_GPIO_Init+0x2e4>)
 8000cee:	f002 fd9f 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <MX_GPIO_Init+0x2e8>)
 8000d0a:	f002 fd91 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_GPIO_Init+0x2dc>)
 8000d2c:	f002 fd80 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <MX_GPIO_Init+0x2e4>)
 8000d44:	f002 fd74 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <MX_GPIO_Init+0x2f4>)
 8000d5e:	f002 fd67 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <MX_GPIO_Init+0x2ec>)
 8000d7a:	f002 fd59 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e012      	b.n	8000db0 <MX_GPIO_Init+0x2f8>
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40022800 	.word	0x40022800
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40021c00 	.word	0x40021c00
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40022400 	.word	0x40022400
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <MX_GPIO_Init+0x314>)
 8000dbe:	f002 fd37 	bl	8003830 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3740      	adds	r7, #64	; 0x40
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dd6:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <MX_I2C1_Init+0x54>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x58>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e0e:	f004 faf7 	bl	8005400 <HAL_I2C_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e18:	f000 fa56 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000014c 	.word	0x2000014c
 8000e24:	40005400 	.word	0x40005400
 8000e28:	000186a0 	.word	0x000186a0

08000e2c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_I2C2_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_I2C2_Init+0x58>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_I2C2_Init+0x50>)
 8000e6a:	f004 fac9 	bl	8005400 <HAL_I2C_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e74:	f000 fa28 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200001a0 	.word	0x200001a0
 8000e80:	40005800 	.word	0x40005800
 8000e84:	000186a0 	.word	0x000186a0

08000e88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <HAL_I2C_MspInit+0xe8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12d      	bne.n	8000f06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a30      	ldr	r2, [pc, #192]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4825      	ldr	r0, [pc, #148]	; (8000f78 <HAL_I2C_MspInit+0xf0>)
 8000ee4:	f002 fca4 	bl	8003830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f04:	e030      	b.n	8000f68 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_I2C_MspInit+0xf4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d12b      	bne.n	8000f68 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000f2c:	2330      	movs	r3, #48	; 0x30
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <HAL_I2C_MspInit+0xf8>)
 8000f48:	f002 fc72 	bl	8003830 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_I2C_MspInit+0xec>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	40021c00 	.word	0x40021c00

08000f84 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2234      	movs	r2, #52	; 0x34
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00c f9c9 	bl	800d328 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <MX_LTDC_Init+0xf8>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fce:	22c9      	movs	r2, #201	; 0xc9
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fd4:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fdc:	22ca      	movs	r2, #202	; 0xca
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fe2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_LTDC_Init+0xf4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001000:	481d      	ldr	r0, [pc, #116]	; (8001078 <MX_LTDC_Init+0xf4>)
 8001002:	f004 fb41 	bl	8005688 <HAL_LTDC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 800100c:	f000 f95c 	bl	80012c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001014:	23c8      	movs	r3, #200	; 0xc8
 8001016:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800101c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001020:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001022:	2302      	movs	r3, #2
 8001024:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001026:	23ff      	movs	r3, #255	; 0xff
 8001028:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800102e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001032:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001038:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 800103e:	23c8      	movs	r3, #200	; 0xc8
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001042:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_LTDC_Init+0xf4>)
 8001062:	f004 fca3 	bl	80059ac <HAL_LTDC_ConfigLayer>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800106c:	f000 f92c 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001f4 	.word	0x200001f4
 800107c:	40016800 	.word	0x40016800

08001080 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_LTDC_MspInit+0x48>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d115      	bne.n	80010be <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_LTDC_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_LTDC_MspInit+0x4c>)
 800109c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_LTDC_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f001 fbe6 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b8:	2058      	movs	r0, #88	; 0x58
 80010ba:	f001 fbff 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40016800 	.word	0x40016800
 80010cc:	40023800 	.word	0x40023800

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f001 fab8 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f834 	bl	8001144 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010dc:	f000 f8a4 	bl	8001228 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f7ff fcea 	bl	8000ab8 <MX_GPIO_Init>
  MX_CRC_Init();
 80010e4:	f7ff fa08 	bl	80004f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010e8:	f7ff fa3c 	bl	8000564 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80010ec:	f7ff fa94 	bl	8000618 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80010f0:	f7ff fbe2 	bl	80008b8 <MX_FMC_Init>
  MX_I2C1_Init();
 80010f4:	f7ff fe6c 	bl	8000dd0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010f8:	f7ff fe98 	bl	8000e2c <MX_I2C2_Init>
  MX_LTDC_Init();
 80010fc:	f7ff ff42 	bl	8000f84 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001100:	f000 f8e8 	bl	80012d4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001104:	f000 f98c 	bl	8001420 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001108:	f000 fa48 	bl	800159c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800110c:	f000 fc74 	bl	80019f8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001110:	f000 fce4 	bl	8001adc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001114:	f000 fd0c 	bl	8001b30 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001118:	f000 fdb4 	bl	8001c84 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800111c:	f000 ff7a 	bl	8002014 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */



  setvbuf(stdout, NULL, _IONBF, 0);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <main+0x6c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6898      	ldr	r0, [r3, #8]
 8001126:	2300      	movs	r3, #0
 8001128:	2202      	movs	r2, #2
 800112a:	2100      	movs	r1, #0
 800112c:	f00c fa6a 	bl	800d604 <setvbuf>

  printf("Hello \r\n");
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <main+0x70>)
 8001132:	f00c fa4f 	bl	800d5d4 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001136:	f000 ff93 	bl	8002060 <MX_USB_HOST_Process>
 800113a:	e7fc      	b.n	8001136 <main+0x66>
 800113c:	20000030 	.word	0x20000030
 8001140:	0800ded8 	.word	0x0800ded8

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2234      	movs	r2, #52	; 0x34
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00c f8e8 	bl	800d328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <SystemClock_Config+0xdc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a2b      	ldr	r2, [pc, #172]	; (8001220 <SystemClock_Config+0xdc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <SystemClock_Config+0xdc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <SystemClock_Config+0xe0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a25      	ldr	r2, [pc, #148]	; (8001224 <SystemClock_Config+0xe0>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <SystemClock_Config+0xe0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011b8:	23b4      	movs	r3, #180	; 0xb4
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80011c0:	2306      	movs	r3, #6
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80011c4:	2306      	movs	r3, #6
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fb65 	bl	800689c <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d8:	f000 f876 	bl	80012c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011dc:	f004 fdbc 	bl	8005d58 <HAL_PWREx_EnableOverDrive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011e6:	f000 f86f 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2105      	movs	r1, #5
 8001208:	4618      	mov	r0, r3
 800120a:	f004 feb7 	bl	8005f7c <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001214:	f000 f858 	bl	80012c8 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3750      	adds	r7, #80	; 0x50
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	223c      	movs	r2, #60	; 0x3c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00c f877 	bl	800d328 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800123a:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800123e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8001240:	2390      	movs	r3, #144	; 0x90
 8001242:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 800124c:	2306      	movs	r3, #6
 800124e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800125a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001260:	2300      	movs	r3, #0
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f8da 	bl	8006420 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001272:	f000 f829 	bl	80012c8 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3740      	adds	r7, #64	; 0x40
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  // HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2201      	movs	r2, #1
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <__io_putchar+0x20>)
 8001290:	f007 fe3d 	bl	8008f0e <HAL_UART_Transmit>
  return ch;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000048c 	.word	0x2000048c

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f001 f9e9 	bl	800268c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001000 	.word	0x40001000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_QUADSPI_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012ec:	2210      	movs	r2, #16
 80012ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012f2:	2218      	movs	r2, #24
 80012f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_QUADSPI_Init+0x50>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_QUADSPI_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_QUADSPI_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_QUADSPI_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_QUADSPI_Init+0x50>)
 8001312:	f004 fd71 	bl	8005df8 <HAL_QSPI_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800131c:	f7ff ffd4 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000029c 	.word	0x2000029c
 8001328:	a0001000 	.word	0xa0001000

0800132c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <HAL_QSPI_MspInit+0xe4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d15b      	bne.n	8001406 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6393      	str	r3, [r2, #56]	; 0x38
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001390:	f043 0320 	orr.w	r3, r3, #32
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_QSPI_MspInit+0xe8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0320 	and.w	r3, r3, #32
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80013a2:	2340      	movs	r3, #64	; 0x40
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80013b2:	230a      	movs	r3, #10
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <HAL_QSPI_MspInit+0xec>)
 80013be:	f002 fa37 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80013c2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80013d4:	2309      	movs	r3, #9
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <HAL_QSPI_MspInit+0xf0>)
 80013e0:	f002 fa26 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80013e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80013f6:	230a      	movs	r3, #10
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <HAL_QSPI_MspInit+0xf0>)
 8001402:	f002 fa15 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	a0001000 	.word	0xa0001000
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400
 800141c:	40021400 	.word	0x40021400

08001420 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <MX_SAI1_Init+0xb4>)
 8001428:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001438:	2240      	movs	r2, #64	; 0x40
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_SAI1_Init+0xb8>)
 800146a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001486:	2208      	movs	r2, #8
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800148c:	2201      	movs	r2, #1
 800148e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001492:	2200      	movs	r2, #0
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SAI1_Init+0xb0>)
 8001498:	2200      	movs	r2, #0
 800149a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SAI1_Init+0xb0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_SAI1_Init+0xb0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SAI1_Init+0xb0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_SAI1_Init+0xb0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SAI1_Init+0xb0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_SAI1_Init+0xb0>)
 80014bc:	f005 fc72 	bl	8006da4 <HAL_SAI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80014c6:	f7ff feff 	bl	80012c8 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002e8 	.word	0x200002e8
 80014d4:	40015804 	.word	0x40015804
 80014d8:	0002ee00 	.word	0x0002ee00

080014dc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_SAI_MspInit+0xa8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d146      	bne.n	800157c <HAL_SAI_MspInit+0xa0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_SAI_MspInit+0xac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10d      	bne.n	8001512 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_SAI_MspInit+0xb0>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <HAL_SAI_MspInit+0xb0>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_SAI_MspInit+0xb0>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_SAI_MspInit+0xac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_SAI_MspInit+0xac>)
 800151a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800151c:	2330      	movs	r3, #48	; 0x30
 800151e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800152c:	2306      	movs	r3, #6
 800152e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <HAL_SAI_MspInit+0xb4>)
 8001538:	f002 f97a 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800154c:	2306      	movs	r3, #6
 800154e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <HAL_SAI_MspInit+0xb8>)
 8001558:	f002 f96a 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800156c:	2306      	movs	r3, #6
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <HAL_SAI_MspInit+0xbc>)
 8001578:	f002 f95a 	bl	8003830 <HAL_GPIO_Init>

    }
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40015804 	.word	0x40015804
 8001588:	20000370 	.word	0x20000370
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021800 	.word	0x40021800

0800159c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <MX_SDIO_SD_Init+0x3c>)
 80015a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20000374 	.word	0x20000374
 80015d8:	40012c00 	.word	0x40012c00

080015dc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_SD_MspInit+0xc0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d14a      	bne.n	8001694 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_SD_MspInit+0xc4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001652:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001656:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001664:	230c      	movs	r3, #12
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <HAL_SD_MspInit+0xc8>)
 8001670:	f002 f8de 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001674:	2304      	movs	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001684:	230c      	movs	r3, #12
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_SD_MspInit+0xcc>)
 8001690:	f002 f8ce 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_MspInit+0x4c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_InitTick+0xe4>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_InitTick+0xe4>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_InitTick+0xe4>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001728:	f107 0210 	add.w	r2, r7, #16
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fe42 	bl	80063bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001742:	f004 fe13 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8001746:	6378      	str	r0, [r7, #52]	; 0x34
 8001748:	e004      	b.n	8001754 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800174a:	f004 fe0f 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 800174e:	4603      	mov	r3, r0
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_InitTick+0xe8>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	3b01      	subs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_InitTick+0xec>)
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <HAL_InitTick+0xf0>)
 8001766:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_InitTick+0xec>)
 800176a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_InitTick+0xec>)
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_InitTick+0xec>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_InitTick+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_InitTick+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001788:	4817      	ldr	r0, [pc, #92]	; (80017e8 <HAL_InitTick+0xec>)
 800178a:	f006 fef2 	bl	8008572 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001798:	2b00      	cmp	r3, #0
 800179a:	d11b      	bne.n	80017d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800179c:	4812      	ldr	r0, [pc, #72]	; (80017e8 <HAL_InitTick+0xec>)
 800179e:	f006 ff37 	bl	8008610 <HAL_TIM_Base_Start_IT>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b0:	2036      	movs	r0, #54	; 0x36
 80017b2:	f001 f883 	bl	80028bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d808      	bhi.n	80017ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2036      	movs	r0, #54	; 0x36
 80017c2:	f001 f85f 	bl	8002884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_InitTick+0xf4>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e002      	b.n	80017d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	200003f8 	.word	0x200003f8
 80017ec:	40001000 	.word	0x40001000
 80017f0:	20000008 	.word	0x20000008

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM6_DAC_IRQHandler+0x10>)
 8001852:	f006 ff4d 	bl	80086f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003f8 	.word	0x200003f8

08001860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <OTG_FS_IRQHandler+0x10>)
 8001866:	f002 fc2b 	bl	80040c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200008f8 	.word	0x200008f8

08001874 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <LTDC_IRQHandler+0x10>)
 800187a:	f003 ffd5 	bl	8005828 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001f4 	.word	0x200001f4

08001888 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA2D_IRQHandler+0x10>)
 800188e:	f001 f888 	bl	80029a2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000b8 	.word	0x200000b8

0800189c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DSI_IRQHandler+0x10>)
 80018a2:	f001 fbfa 	bl	800309a <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200000f8 	.word	0x200000f8

080018b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e00a      	b.n	80018d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c2:	f3af 8000 	nop.w
 80018c6:	4601      	mov	r1, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60ba      	str	r2, [r7, #8]
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf0      	blt.n	80018c2 <_read+0x12>
	}

return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e009      	b.n	8001910 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fcbb 	bl	8001280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf1      	blt.n	80018fc <_write+0x12>
	}
	return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_close>:

int _close(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194a:	605a      	str	r2, [r3, #4]
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_isatty>:

int _isatty(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return 1;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f00b fc7a 	bl	800d2b4 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20050000 	.word	0x20050000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000440 	.word	0x20000440
 80019f4:	20000c20 	.word	0x20000c20

080019f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <MX_TIM1_Init+0x9c>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a42:	f006 fd96 	bl	8008572 <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fc3c 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a5e:	f006 ff4f 	bl	8008900 <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a68:	f7ff fc2e 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a7a:	f007 f96b 	bl	8008d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a84:	f7ff fc20 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000444 	.word	0x20000444
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x40>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_TIM_Base_MspInit+0x40>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_TIM_Base_MspInit+0x40>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40023800 	.word	0x40023800

08001adc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MX_USART3_UART_Init+0x50>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART3_UART_Init+0x4c>)
 8001b14:	f007 f9ae 	bl	8008e74 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f7ff fbd3 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000048c 	.word	0x2000048c
 8001b2c:	40004800 	.word	0x40004800

08001b30 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_USART6_UART_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART6_UART_Init+0x4c>)
 8001b68:	f007 f984 	bl	8008e74 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b72:	f7ff fba9 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200004d0 	.word	0x200004d0
 8001b80:	40011400 	.word	0x40011400

08001b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <HAL_UART_MspInit+0xec>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12d      	bne.n	8001c02 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481f      	ldr	r0, [pc, #124]	; (8001c78 <HAL_UART_MspInit+0xf4>)
 8001bfc:	f001 fe18 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c00:	e031      	b.n	8001c66 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_UART_MspInit+0xf8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d12c      	bne.n	8001c66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c16:	f043 0320 	orr.w	r3, r3, #32
 8001c1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001c44:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c56:	2308      	movs	r3, #8
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <HAL_UART_MspInit+0xfc>)
 8001c62:	f001 fde5 	bl	8003830 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40004800 	.word	0x40004800
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40011400 	.word	0x40011400
 8001c80:	40021800 	.word	0x40021800

08001c84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <MX_FATFS_Init+0x18>)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_FATFS_Init+0x1c>)
 8001c8c:	f009 fb14 	bl	800b2b8 <FATFS_LinkDriver>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <MX_FATFS_Init+0x20>)
 8001c96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000518 	.word	0x20000518
 8001ca0:	0800dee4 	.word	0x0800dee4
 8001ca4:	20000514 	.word	0x20000514

08001ca8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001cb2:	f000 f879 	bl	8001da8 <BSP_SD_IsDetected>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e012      	b.n	8001ce6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <BSP_SD_Init+0x48>)
 8001cc2:	f005 fa97 	bl	80071f4 <HAL_SD_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd4:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <BSP_SD_Init+0x48>)
 8001cd6:	f006 f871 	bl	8007dbc <HAL_SD_ConfigWideBusOperation>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000374 	.word	0x20000374

08001cf4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <BSP_SD_ReadBlocks+0x38>)
 8001d12:	f005 fb1f 	bl	8007354 <HAL_SD_ReadBlocks>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000374 	.word	0x20000374

08001d30 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	4806      	ldr	r0, [pc, #24]	; (8001d68 <BSP_SD_WriteBlocks+0x38>)
 8001d4e:	f005 fcdf 	bl	8007710 <HAL_SD_WriteBlocks>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000374 	.word	0x20000374

08001d6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <BSP_SD_GetCardState+0x1c>)
 8001d72:	f006 f8bd 	bl	8007ef0 <HAL_SD_GetCardState>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000374 	.word	0x20000374

08001d8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <BSP_SD_GetCardInfo+0x18>)
 8001d98:	f005 ffe4 	bl	8007d64 <HAL_SD_GetCardInfo>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000374 	.word	0x20000374

08001da8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001dae:	2301      	movs	r3, #1
 8001db0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8001db2:	f000 f80b 	bl	8001dcc <BSP_PlatformIsDetected>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	b2db      	uxtb	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4806      	ldr	r0, [pc, #24]	; (8001df4 <BSP_PlatformIsDetected+0x28>)
 8001dda:	f001 fed5 	bl	8003b88 <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021800 	.word	0x40021800

08001df8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <SD_CheckStatus+0x38>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001e08:	f7ff ffb0 	bl	8001d6c <BSP_SD_GetCardState>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <SD_CheckStatus+0x38>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SD_CheckStatus+0x38>)
 8001e20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001e22:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <SD_CheckStatus+0x38>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000000 	.word	0x20000000

08001e34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <SD_initialize+0x38>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8001e44:	f7ff ff30 	bl	8001ca8 <BSP_SD_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffd1 	bl	8001df8 <SD_CheckStatus>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SD_initialize+0x38>)
 8001e5c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <SD_initialize+0x38>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000000 	.word	0x20000000

08001e70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffbb 	bl	8001df8 <SD_CheckStatus>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7ff ff23 	bl	8001cf4 <BSP_SD_ReadBlocks>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8001eb4:	bf00      	nop
 8001eb6:	f7ff ff59 	bl	8001d6c <BSP_SD_GetCardState>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1fa      	bne.n	8001eb6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff20 	bl	8001d30 <BSP_SD_WriteBlocks>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ff38 	bl	8001d6c <BSP_SD_GetCardState>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1fa      	bne.n	8001ef8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	603a      	str	r2, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <SD_ioctl+0xac>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SD_ioctl+0x28>
 8001f34:	2303      	movs	r3, #3
 8001f36:	e03c      	b.n	8001fb2 <SD_ioctl+0xa2>

  switch (cmd)
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d834      	bhi.n	8001fa8 <SD_ioctl+0x98>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <SD_ioctl+0x34>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5d 	.word	0x08001f5d
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001f8f 	.word	0x08001f8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f5a:	e028      	b.n	8001fae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff13 	bl	8001d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f72:	e01c      	b.n	8001fae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff07 	bl	8001d8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f8c:	e00f      	b.n	8001fae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fefa 	bl	8001d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	0a5a      	lsrs	r2, r3, #9
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001fa6:	e002      	b.n	8001fae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fdc:	4c0b      	ldr	r4, [pc, #44]	; (800200c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fea:	f000 fb1b 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f00b f967 	bl	800d2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7ff f86d 	bl	80010d0 <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ff8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002004:	0800df84 	.word	0x0800df84
  ldr r2, =_sbss
 8002008:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800200c:	20000c1c 	.word	0x20000c1c

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8002018:	2201      	movs	r2, #1
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <MX_USB_HOST_Init+0x40>)
 800201c:	480e      	ldr	r0, [pc, #56]	; (8002058 <MX_USB_HOST_Init+0x44>)
 800201e:	f009 fcf7 	bl	800ba10 <USBH_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8002028:	f7ff f94e 	bl	80012c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <MX_USB_HOST_Init+0x48>)
 800202e:	480a      	ldr	r0, [pc, #40]	; (8002058 <MX_USB_HOST_Init+0x44>)
 8002030:	f009 fd7c 	bl	800bb2c <USBH_RegisterClass>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800203a:	f7ff f945 	bl	80012c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <MX_USB_HOST_Init+0x44>)
 8002040:	f009 fe00 	bl	800bc44 <USBH_Start>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800204a:	f7ff f93d 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	08002075 	.word	0x08002075
 8002058:	2000051c 	.word	0x2000051c
 800205c:	20000010 	.word	0x20000010

08002060 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <MX_USB_HOST_Process+0x10>)
 8002066:	f009 fdfd 	bl	800bc64 <USBH_Process>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000051c 	.word	0x2000051c

08002074 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	3b01      	subs	r3, #1
 8002084:	2b04      	cmp	r3, #4
 8002086:	d819      	bhi.n	80020bc <USBH_UserProcess+0x48>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <USBH_UserProcess+0x1c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020bd 	.word	0x080020bd
 8002094:	080020ad 	.word	0x080020ad
 8002098:	080020bd 	.word	0x080020bd
 800209c:	080020b5 	.word	0x080020b5
 80020a0:	080020a5 	.word	0x080020a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <USBH_UserProcess+0x58>)
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
  break;
 80020aa:	e008      	b.n	80020be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <USBH_UserProcess+0x58>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
  break;
 80020b2:	e004      	b.n	80020be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <USBH_UserProcess+0x58>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
  break;
 80020ba:	e000      	b.n	80020be <USBH_UserProcess+0x4a>

  default:
  break;
 80020bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200008f4 	.word	0x200008f4

080020d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f0:	d147      	bne.n	8002182 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_HCD_MspInit+0xbc>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a24      	ldr	r2, [pc, #144]	; (800218c <HAL_HCD_MspInit+0xbc>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_HCD_MspInit+0xbc>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800210e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002120:	230a      	movs	r3, #10
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4819      	ldr	r0, [pc, #100]	; (8002190 <HAL_HCD_MspInit+0xc0>)
 800212c:	f001 fb80 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4812      	ldr	r0, [pc, #72]	; (8002190 <HAL_HCD_MspInit+0xc0>)
 8002146:	f001 fb73 	bl	8003830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_HCD_MspInit+0xbc>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_HCD_MspInit+0xbc>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6353      	str	r3, [r2, #52]	; 0x34
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_HCD_MspInit+0xbc>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_HCD_MspInit+0xbc>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_HCD_MspInit+0xbc>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2043      	movs	r0, #67	; 0x43
 8002178:	f000 fb84 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800217c:	2043      	movs	r0, #67	; 0x43
 800217e:	f000 fb9d 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00a f93d 	bl	800c422 <USBH_LL_IncTimer>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a f975 	bl	800c4ae <USBH_LL_Connect>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021da:	4618      	mov	r0, r3
 80021dc:	f00a f97e 	bl	800c4dc <USBH_LL_Disconnect>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
 80021f4:	4613      	mov	r3, r2
 80021f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002212:	4618      	mov	r0, r3
 8002214:	f00a f92f 	bl	800c476 <USBH_LL_PortEnabled>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800222e:	4618      	mov	r0, r3
 8002230:	f00a f92f 	bl	800c492 <USBH_LL_PortDisabled>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800224a:	2b01      	cmp	r3, #1
 800224c:	d12a      	bne.n	80022a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <USBH_LL_Init+0x74>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <USBH_LL_Init+0x74>)
 800225a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <USBH_LL_Init+0x74>)
 8002260:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002264:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <USBH_LL_Init+0x74>)
 8002268:	2208      	movs	r2, #8
 800226a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <USBH_LL_Init+0x74>)
 800226e:	2201      	movs	r2, #1
 8002270:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <USBH_LL_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <USBH_LL_Init+0x74>)
 800227a:	2202      	movs	r2, #2
 800227c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <USBH_LL_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <USBH_LL_Init+0x74>)
 8002286:	f001 fcb0 	bl	8003bea <HAL_HCD_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8002290:	f7ff f81a 	bl	80012c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8002294:	4806      	ldr	r0, [pc, #24]	; (80022b0 <USBH_LL_Init+0x74>)
 8002296:	f002 f894 	bl	80043c2 <HAL_HCD_GetCurrentFrame>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f00a f8b0 	bl	800c404 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200008f8 	.word	0x200008f8

080022b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 f803 	bl	80042d6 <HAL_HCD_Start>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f95c 	bl	8002594 <USBH_Get_USB_Status>
 80022dc:	4603      	mov	r3, r0
 80022de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002300:	4618      	mov	r0, r3
 8002302:	f002 f80b 	bl	800431c <HAL_HCD_Stop>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f941 	bl	8002594 <USBH_Get_USB_Status>
 8002312:	4603      	mov	r3, r0
 8002314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002316:	7bbb      	ldrb	r3, [r7, #14]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002332:	4618      	mov	r0, r3
 8002334:	f002 f853 	bl	80043de <HAL_HCD_GetCurrentSpeed>
 8002338:	4603      	mov	r3, r0
 800233a:	2b02      	cmp	r3, #2
 800233c:	d00c      	beq.n	8002358 <USBH_LL_GetSpeed+0x38>
 800233e:	2b02      	cmp	r3, #2
 8002340:	d80d      	bhi.n	800235e <USBH_LL_GetSpeed+0x3e>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <USBH_LL_GetSpeed+0x2c>
 8002346:	2b01      	cmp	r3, #1
 8002348:	d003      	beq.n	8002352 <USBH_LL_GetSpeed+0x32>
 800234a:	e008      	b.n	800235e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
    break;
 8002350:	e008      	b.n	8002364 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
    break;
 8002356:	e005      	b.n	8002364 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8002358:	2302      	movs	r3, #2
 800235a:	73fb      	strb	r3, [r7, #15]
    break;
 800235c:	e002      	b.n	8002364 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
    break;
 8002362:	bf00      	nop
  }
  return  speed;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002384:	4618      	mov	r0, r3
 8002386:	f001 ffe6 	bl	8004356 <HAL_HCD_ResetPort>
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f8ff 	bl	8002594 <USBH_Get_USB_Status>
 8002396:	4603      	mov	r3, r0
 8002398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800239a:	7bbb      	ldrb	r3, [r7, #14]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 ffed 	bl	800439a <HAL_HCD_HC_GetXferCount>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b089      	sub	sp, #36	; 0x24
 80023ce:	af04      	add	r7, sp, #16
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	70fb      	strb	r3, [r7, #3]
 80023dc:	460b      	mov	r3, r1
 80023de:	70bb      	strb	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80023f2:	787c      	ldrb	r4, [r7, #1]
 80023f4:	78ba      	ldrb	r2, [r7, #2]
 80023f6:	78f9      	ldrb	r1, [r7, #3]
 80023f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4623      	mov	r3, r4
 800240a:	f001 fc50 	bl	8003cae <HAL_HCD_HC_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f8bd 	bl	8002594 <USBH_Get_USB_Status>
 800241a:	4603      	mov	r3, r0
 800241c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800241e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}

08002428 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fcc0 	bl	8003dcc <HAL_HCD_HC_Halt>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f89e 	bl	8002594 <USBH_Get_USB_Status>
 8002458:	4603      	mov	r3, r0
 800245a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800245c:	7bbb      	ldrb	r3, [r7, #14]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8002466:	b590      	push	{r4, r7, lr}
 8002468:	b089      	sub	sp, #36	; 0x24
 800246a:	af04      	add	r7, sp, #16
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	4608      	mov	r0, r1
 8002470:	4611      	mov	r1, r2
 8002472:	461a      	mov	r2, r3
 8002474:	4603      	mov	r3, r0
 8002476:	70fb      	strb	r3, [r7, #3]
 8002478:	460b      	mov	r3, r1
 800247a:	70bb      	strb	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800248e:	787c      	ldrb	r4, [r7, #1]
 8002490:	78ba      	ldrb	r2, [r7, #2]
 8002492:	78f9      	ldrb	r1, [r7, #3]
 8002494:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002498:	9303      	str	r3, [sp, #12]
 800249a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4623      	mov	r3, r4
 80024aa:	f001 fcb3 	bl	8003e14 <HAL_HCD_HC_SubmitRequest>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f86d 	bl	8002594 <USBH_Get_USB_Status>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80024be:	7bbb      	ldrb	r3, [r7, #14]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 ff47 	bl	8004372 <HAL_HCD_HC_GetURBState>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8002500:	2b01      	cmp	r3, #1
 8002502:	d103      	bne.n	800250c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f870 	bl	80025ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800250c:	20c8      	movs	r0, #200	; 0xc8
 800250e:	f000 f8dd 	bl	80026cc <HAL_Delay>
  return USBH_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
 8002528:	4613      	mov	r3, r2
 800252a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002532:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	333b      	adds	r3, #59	; 0x3b
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3354      	adds	r3, #84	; 0x54
 8002556:	78ba      	ldrb	r2, [r7, #2]
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e008      	b.n	800256e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3355      	adds	r3, #85	; 0x55
 800256a:	78ba      	ldrb	r2, [r7, #2]
 800256c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8a1 	bl	80026cc <HAL_Delay>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d817      	bhi.n	80025d8 <USBH_Get_USB_Status+0x44>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <USBH_Get_USB_Status+0x1c>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c7 	.word	0x080025c7
 80025b8:	080025cd 	.word	0x080025cd
 80025bc:	080025d3 	.word	0x080025d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
    break;
 80025c4:	e00b      	b.n	80025de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80025c6:	2302      	movs	r3, #2
 80025c8:	73fb      	strb	r3, [r7, #15]
    break;
 80025ca:	e008      	b.n	80025de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
    break;
 80025d0:	e005      	b.n	80025de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80025d2:	2302      	movs	r3, #2
 80025d4:	73fb      	strb	r3, [r7, #15]
    break;
 80025d6:	e002      	b.n	80025de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80025d8:	2302      	movs	r3, #2
 80025da:	73fb      	strb	r3, [r7, #15]
    break;
 80025dc:	bf00      	nop
  }
  return usb_status;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	461a      	mov	r2, r3
 800260e:	2104      	movs	r1, #4
 8002610:	4803      	ldr	r0, [pc, #12]	; (8002620 <MX_DriverVbusFS+0x34>)
 8002612:	f001 fad1 	bl	8003bb8 <HAL_GPIO_WritePin>
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020400 	.word	0x40020400

08002624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 f8fc 	bl	800286e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	200f      	movs	r0, #15
 8002678:	f7ff f840 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff f816 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	20000bfc 	.word	0x20000bfc

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000bfc 	.word	0x20000bfc

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff ffee 	bl	80026b4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_Delay+0x44>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026f2:	bf00      	nop
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000000c 	.word	0x2000000c

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff4c 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002896:	f7ff ff61 	bl	800275c <__NVIC_GetPriorityGrouping>
 800289a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7ff ffb1 	bl	8002808 <NVIC_EncodePriority>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff80 	bl	80027b4 <__NVIC_SetPriority>
}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff54 	bl	8002778 <__NVIC_EnableIRQ>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	795b      	ldrb	r3, [r3, #5]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fd fe10 	bl	8000520 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03b      	b.n	800299a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fe46 	bl	80005c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	f023 0107 	bic.w	r1, r3, #7
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800297a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68d1      	ldr	r1, [r2, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	430b      	orrs	r3, r1
 8002988:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d026      	beq.n	8002a12 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d021      	beq.n	8002a12 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029dc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d026      	beq.n	8002a6a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d021      	beq.n	8002a6a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a34:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	f043 0202 	orr.w	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d026      	beq.n	8002ac2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d021      	beq.n	8002ac2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2208      	movs	r2, #8
 8002a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f853 	bl	8002b9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01f      	beq.n	8002b48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01f      	beq.n	8002b92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01a      	beq.n	8002b92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2210      	movs	r2, #16
 8002b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f80e 	bl	8002bae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA2D_ConfigLayer+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e079      	b.n	8002cd8 <HAL_DMA2D_ConfigLayer+0x114>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	3318      	adds	r3, #24
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002c10:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b0a      	cmp	r3, #10
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA2D_ConfigLayer+0x5e>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d107      	bne.n	8002c32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e005      	b.n	8002c3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d120      	bne.n	8002c86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	ea02 0103 	and.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b0a      	cmp	r3, #10
 8002c6c:	d003      	beq.n	8002c76 <HAL_DMA2D_ConfigLayer+0xb2>
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d127      	bne.n	8002cc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
 8002c84:	e01f      	b.n	8002cc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	ea02 0103 	and.w	r1, r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b0a      	cmp	r3, #10
 8002cae:	d003      	beq.n	8002cb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d106      	bne.n	8002cc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002cc4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	ff03000f 	.word	0xff03000f

08002ce8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e10b      	b.n	8002f14 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7c5b      	ldrb	r3, [r3, #17]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fd86 	bl	8000818 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002d26:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3a:	f7ff fcbb 	bl	80026b4 <HAL_GetTick>
 8002d3e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d40:	e009      	b.n	8002d56 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d42:	f7ff fcb7 	bl	80026b4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d50:	d901      	bls.n	8002d56 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0de      	b.n	8002f14 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ed      	beq.n	8002d42 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002d76:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002d7a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d92:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002d9a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7ff fc7c 	bl	80026cc <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd4:	f7ff fc6e 	bl	80026b4 <HAL_GetTick>
 8002dd8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fc6a 	bl	80026b4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dea:	d901      	bls.n	8002df0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e091      	b.n	8002f14 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ed      	beq.n	8002ddc <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0206 	orr.w	r2, r2, #6
 8002e10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0203 	bic.w	r2, r2, #3
 8002e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0203 	bic.w	r2, r2, #3
 8002e52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e7a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_DSI_Init+0x1b4>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	e000      	b.n	8002e9e <HAL_DSI_Init+0x1b6>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DSI_Init+0x234>)
 8002ea4:	fb03 f202 	mul.w	r2, r3, r2
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ed4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	003d0900 	.word	0x003d0900

08002f20 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7c1b      	ldrb	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0ab      	b.n	800308e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002f70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002f74:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002f92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0202 	orr.w	r2, r2, #2
 8002fce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 020c 	orr.w	r2, r2, #12
 8002fec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0210 	orr.w	r2, r2, #16
 800300a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003046:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003064:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003082:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8ad 	bl	800322c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00f      	beq.n	8003102 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f89f 	bl	8003240 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 808c 	beq.w	8003224 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003114:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800312c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f043 0202 	orr.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f043 0208 	orr.w	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f818 	bl	8003254 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7c1b      	ldrb	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_DSI_SetGenericVCID+0x16>
 800327a:	2302      	movs	r3, #2
 800327c:	e016      	b.n	80032ac <HAL_DSI_SetGenericVCID+0x44>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0203 	bic.w	r2, r2, #3
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7c1b      	ldrb	r3, [r3, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0c5      	b.n	800345a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0203 	bic.w	r2, r2, #3
 800331a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0207 	bic.w	r2, r2, #7
 800333c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6959      	ldr	r1, [r3, #20]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	431a      	orrs	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020f 	bic.w	r2, r2, #15
 800336a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020e 	bic.w	r2, r2, #14
 800338e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005a      	lsls	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80033dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7c1b      	ldrb	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_DSI_ConfigCommand+0x16>
 800347a:	2302      	movs	r3, #2
 800347c:	e049      	b.n	8003512 <HAL_DSI_ConfigCommand+0xaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_DSI_ConfigCommand+0xb8>)
 8003490:	400b      	ands	r3, r1
 8003492:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80034a2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80034a8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80034ae:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80034b4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80034ba:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80034c0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80034c6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80034cc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80034d2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80034d8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80034de:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0202 	bic.w	r2, r2, #2
 80034f6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	fef080ff 	.word	0xfef080ff

08003524 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7c1b      	ldrb	r3, [r3, #16]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DSI_ConfigFlowControl+0x16>
 8003536:	2302      	movs	r3, #2
 8003538:	e016      	b.n	8003568 <HAL_DSI_ConfigFlowControl+0x44>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 021f 	bic.w	r2, r2, #31
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7c1b      	ldrb	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_DSI_ConfigPhyTimer+0x16>
 8003586:	2302      	movs	r3, #2
 8003588:	e058      	b.n	800363c <HAL_DSI_ConfigPhyTimer+0xc8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4293      	cmp	r3, r2
 800359a:	bf38      	it	cc
 800359c:	4613      	movcc	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80035b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	041a      	lsls	r2, r3, #16
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80035de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003618:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7c1b      	ldrb	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_DSI_ConfigHostTimeouts+0x16>
 800365a:	2302      	movs	r3, #2
 800365c:	e0b4      	b.n	80037c8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003672:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	021a      	lsls	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b292      	uxth	r2, r2
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7c1b      	ldrb	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_DSI_SetLowPowerRXFilter+0x16>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e01b      	b.n	8003822 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003800:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	065a      	lsls	r2, r3, #25
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e177      	b.n	8003b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 8166 	bne.w	8003b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80c0 	beq.w	8003b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_GPIO_Init+0x324>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_GPIO_Init+0x324>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_GPIO_Init+0x324>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a61      	ldr	r2, [pc, #388]	; (8003b58 <HAL_GPIO_Init+0x328>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_GPIO_Init+0x32c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d037      	beq.n	8003a6e <HAL_GPIO_Init+0x23e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_GPIO_Init+0x330>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_GPIO_Init+0x23a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <HAL_GPIO_Init+0x236>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a55      	ldr	r2, [pc, #340]	; (8003b68 <HAL_GPIO_Init+0x338>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d025      	beq.n	8003a62 <HAL_GPIO_Init+0x232>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a54      	ldr	r2, [pc, #336]	; (8003b6c <HAL_GPIO_Init+0x33c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_GPIO_Init+0x22e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a53      	ldr	r2, [pc, #332]	; (8003b70 <HAL_GPIO_Init+0x340>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x22a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_GPIO_Init+0x344>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x226>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a51      	ldr	r2, [pc, #324]	; (8003b78 <HAL_GPIO_Init+0x348>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x222>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <HAL_GPIO_Init+0x34c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x21e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4f      	ldr	r2, [pc, #316]	; (8003b80 <HAL_GPIO_Init+0x350>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x21a>
 8003a46:	2309      	movs	r3, #9
 8003a48:	e012      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	e010      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	e00e      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e00c      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a56:	2306      	movs	r3, #6
 8003a58:	e00a      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	e008      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a62:	2303      	movs	r3, #3
 8003a64:	e004      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_GPIO_Init+0x240>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	f002 0203 	and.w	r2, r2, #3
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	4093      	lsls	r3, r2
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a80:	4935      	ldr	r1, [pc, #212]	; (8003b58 <HAL_GPIO_Init+0x328>)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab2:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae2:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_GPIO_Init+0x354>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	f67f ae84 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3724      	adds	r7, #36	; 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020800 	.word	0x40020800
 8003b68:	40020c00 	.word	0x40020c00
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40021400 	.word	0x40021400
 8003b74:	40021800 	.word	0x40021800
 8003b78:	40021c00 	.word	0x40021c00
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40022400 	.word	0x40022400
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e001      	b.n	8003baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd4:	e003      	b.n	8003bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bec:	b08f      	sub	sp, #60	; 0x3c
 8003bee:	af0a      	add	r7, sp, #40	; 0x28
 8003bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e054      	b.n	8003ca6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fe fa5a 	bl	80020d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f006 fb88 	bl	800a350 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	687e      	ldr	r6, [r7, #4]
 8003c48:	466d      	mov	r5, sp
 8003c4a:	f106 0410 	add.w	r4, r6, #16
 8003c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5e:	1d33      	adds	r3, r6, #4
 8003c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c62:	6838      	ldr	r0, [r7, #0]
 8003c64:	f006 fb02 	bl	800a26c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 fb7f 	bl	800a372 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	687e      	ldr	r6, [r7, #4]
 8003c7c:	466d      	mov	r5, sp
 8003c7e:	f106 0410 	add.w	r4, r6, #16
 8003c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c92:	1d33      	adds	r3, r6, #4
 8003c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	f006 fd08 	bl	800a6ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003cae:	b590      	push	{r4, r7, lr}
 8003cb0:	b089      	sub	sp, #36	; 0x24
 8003cb2:	af04      	add	r7, sp, #16
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	70fb      	strb	r3, [r7, #3]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70bb      	strb	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_HCD_HC_Init+0x28>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e076      	b.n	8003dc4 <HAL_HCD_HC_Init+0x116>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	333d      	adds	r3, #61	; 0x3d
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3338      	adds	r3, #56	; 0x38
 8003cfe:	787a      	ldrb	r2, [r7, #1]
 8003d00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3340      	adds	r3, #64	; 0x40
 8003d10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d12:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3339      	adds	r3, #57	; 0x39
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	333f      	adds	r3, #63	; 0x3f
 8003d34:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	78ba      	ldrb	r2, [r7, #2]
 8003d3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d42:	b2d0      	uxtb	r0, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	333a      	adds	r3, #58	; 0x3a
 8003d50:	4602      	mov	r2, r0
 8003d52:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	da09      	bge.n	8003d70 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	333b      	adds	r3, #59	; 0x3b
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e008      	b.n	8003d82 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	333b      	adds	r3, #59	; 0x3b
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	333c      	adds	r3, #60	; 0x3c
 8003d90:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d94:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	787c      	ldrb	r4, [r7, #1]
 8003d9c:	78ba      	ldrb	r2, [r7, #2]
 8003d9e:	78f9      	ldrb	r1, [r7, #3]
 8003da0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003da2:	9302      	str	r3, [sp, #8]
 8003da4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4623      	mov	r3, r4
 8003db2:	f006 fdf5 	bl	800a9a0 <USB_HC_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_HCD_HC_Halt+0x1e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_HCD_HC_Halt+0x3e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f007 f845 	bl	800ae8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	70fb      	strb	r3, [r7, #3]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70bb      	strb	r3, [r7, #2]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	333b      	adds	r3, #59	; 0x3b
 8003e3c:	78ba      	ldrb	r2, [r7, #2]
 8003e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	333f      	adds	r3, #63	; 0x3f
 8003e4e:	787a      	ldrb	r2, [r7, #1]
 8003e50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003e52:	7c3b      	ldrb	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d112      	bne.n	8003e7e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3342      	adds	r3, #66	; 0x42
 8003e66:	2203      	movs	r2, #3
 8003e68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	333d      	adds	r3, #61	; 0x3d
 8003e78:	7f3a      	ldrb	r2, [r7, #28]
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e008      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3342      	adds	r3, #66	; 0x42
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	f200 80c6 	bhi.w	8004024 <HAL_HCD_HC_SubmitRequest+0x210>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08004011 	.word	0x08004011
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003f93 	.word	0x08003f93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003eb0:	7c3b      	ldrb	r3, [r7, #16]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f040 80b8 	bne.w	8004028 <HAL_HCD_HC_SubmitRequest+0x214>
 8003eb8:	78bb      	ldrb	r3, [r7, #2]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 80b4 	bne.w	8004028 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003ec0:	8b3b      	ldrh	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	212c      	movs	r1, #44	; 0x2c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3355      	adds	r3, #85	; 0x55
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3355      	adds	r3, #85	; 0x55
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3342      	adds	r3, #66	; 0x42
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003efe:	e093      	b.n	8004028 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3342      	adds	r3, #66	; 0x42
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e089      	b.n	8004028 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003f14:	78bb      	ldrb	r3, [r7, #2]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11d      	bne.n	8003f56 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3355      	adds	r3, #85	; 0x55
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3342      	adds	r3, #66	; 0x42
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003f40:	e073      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3342      	adds	r3, #66	; 0x42
 8003f50:	2202      	movs	r2, #2
 8003f52:	701a      	strb	r2, [r3, #0]
      break;
 8003f54:	e069      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	3354      	adds	r3, #84	; 0x54
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3342      	adds	r3, #66	; 0x42
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
      break;
 8003f7c:	e055      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3342      	adds	r3, #66	; 0x42
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
      break;
 8003f90:	e04b      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003f92:	78bb      	ldrb	r3, [r7, #2]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11d      	bne.n	8003fd4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3355      	adds	r3, #85	; 0x55
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3342      	adds	r3, #66	; 0x42
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fbe:	e034      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3342      	adds	r3, #66	; 0x42
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
      break;
 8003fd2:	e02a      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3354      	adds	r3, #84	; 0x54
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3342      	adds	r3, #66	; 0x42
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
      break;
 8003ffa:	e016      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3342      	adds	r3, #66	; 0x42
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
      break;
 800400e:	e00c      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3342      	adds	r3, #66	; 0x42
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
      break;
 8004022:	e002      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004028:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3344      	adds	r3, #68	; 0x44
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	8b3a      	ldrh	r2, [r7, #24]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	202c      	movs	r0, #44	; 0x2c
 8004044:	fb00 f303 	mul.w	r3, r0, r3
 8004048:	440b      	add	r3, r1
 800404a:	334c      	adds	r3, #76	; 0x4c
 800404c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3360      	adds	r3, #96	; 0x60
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3350      	adds	r3, #80	; 0x50
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	3339      	adds	r3, #57	; 0x39
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	3361      	adds	r3, #97	; 0x61
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	222c      	movs	r2, #44	; 0x2c
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	3338      	adds	r3, #56	; 0x38
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	18d1      	adds	r1, r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	f006 fd98 	bl	800abe4 <USB_HC_StartXfer>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop

080040c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f006 faa5 	bl	800a626 <USB_GetMode>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	f040 80f6 	bne.w	80042d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f006 fa89 	bl	800a600 <USB_ReadInterrupts>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80ec 	beq.w	80042ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f006 fa80 	bl	800a600 <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800410a:	d104      	bne.n	8004116 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004114:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f006 fa70 	bl	800a600 <USB_ReadInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412a:	d104      	bne.n	8004136 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f006 fa60 	bl	800a600 <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800414a:	d104      	bne.n	8004156 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f006 fa50 	bl	800a600 <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d103      	bne.n	8004172 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2202      	movs	r2, #2
 8004170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fa42 	bl	800a600 <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004186:	d11c      	bne.n	80041c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004190:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80041a2:	2110      	movs	r1, #16
 80041a4:	6938      	ldr	r0, [r7, #16]
 80041a6:	f006 f931 	bl	800a40c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80041aa:	6938      	ldr	r0, [r7, #16]
 80041ac:	f006 f962 	bl	800a474 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f006 fb2c 	bl	800a814 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fe f805 	bl	80021cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 fa1a 	bl	800a600 <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d6:	d102      	bne.n	80041de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 f89e 	bl	800531a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 fa0c 	bl	800a600 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d106      	bne.n	8004200 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd ffce 	bl	8002194 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f006 f9fb 	bl	800a600 <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d101      	bne.n	8004218 <HAL_HCD_IRQHandler+0x158>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_HCD_IRQHandler+0x15a>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0210 	bic.w	r2, r2, #16
 800422c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ffa1 	bl	8005176 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0210 	orr.w	r2, r2, #16
 8004242:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f006 f9d9 	bl	800a600 <USB_ReadInterrupts>
 800424e:	4603      	mov	r3, r0
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004258:	d13a      	bne.n	80042d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f006 fe02 	bl	800ae68 <USB_HC_ReadInterrupt>
 8004264:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e025      	b.n	80042b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004296:	d106      	bne.n	80042a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8ab 	bl	80043fa <HCD_HC_IN_IRQHandler>
 80042a4:	e005      	b.n	80042b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fbf9 	bl	8004aa4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d3d4      	bcc.n	800426c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ca:	615a      	str	r2, [r3, #20]
 80042cc:	e000      	b.n	80042d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80042ce:	bf00      	nop
    }
  }
}
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_HCD_Start+0x16>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e013      	b.n	8004314 <HAL_HCD_Start+0x3e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f006 faee 	bl	800a8dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f006 f812 	bl	800a32e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_HCD_Stop+0x16>
 800432e:	2302      	movs	r3, #2
 8004330:	e00d      	b.n	800434e <HAL_HCD_Stop+0x32>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f006 fedc 	bl	800b0fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f006 fa90 	bl	800a888 <USB_ResetPort>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	3360      	adds	r3, #96	; 0x60
 800438c:	781b      	ldrb	r3, [r3, #0]
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3350      	adds	r3, #80	; 0x50
 80043b4:	681b      	ldr	r3, [r3, #0]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f006 fad4 	bl	800a97c <USB_GetCurrentFrame>
 80043d4:	4603      	mov	r3, r0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f006 faaf 	bl	800a94e <USB_GetHostSpeed>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d11a      	bne.n	8004460 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	461a      	mov	r2, r3
 8004438:	2304      	movs	r3, #4
 800443a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3361      	adds	r3, #97	; 0x61
 800444a:	2206      	movs	r2, #6
 800444c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f006 fd16 	bl	800ae8a <USB_HC_Halt>
 800445e:	e0af      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d11b      	bne.n	80044b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800448a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3361      	adds	r3, #97	; 0x61
 800449a:	2207      	movs	r2, #7
 800449c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f006 fcee 	bl	800ae8a <USB_HC_Halt>
 80044ae:	e087      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d109      	bne.n	80044da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d2:	461a      	mov	r2, r3
 80044d4:	2320      	movs	r3, #32
 80044d6:	6093      	str	r3, [r2, #8]
 80044d8:	e072      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d11a      	bne.n	8004526 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	461a      	mov	r2, r3
 80044fe:	2308      	movs	r3, #8
 8004500:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3361      	adds	r3, #97	; 0x61
 8004510:	2205      	movs	r2, #5
 8004512:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f006 fcb3 	bl	800ae8a <USB_HC_Halt>
 8004524:	e04c      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d11b      	bne.n	8004576 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	461a      	mov	r2, r3
 800454c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004550:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3361      	adds	r3, #97	; 0x61
 8004560:	2208      	movs	r2, #8
 8004562:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f006 fc8b 	bl	800ae8a <USB_HC_Halt>
 8004574:	e024      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d119      	bne.n	80045c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	461a      	mov	r2, r3
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3361      	adds	r3, #97	; 0x61
 80045ac:	2206      	movs	r2, #6
 80045ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 fc65 	bl	800ae8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d6:	d112      	bne.n	80045fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f006 fc51 	bl	800ae8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80045fc:	e24e      	b.n	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	f040 80df 	bne.w	80047d4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3348      	adds	r3, #72	; 0x48
 800462c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0159      	lsls	r1, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	440b      	add	r3, r1
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	202c      	movs	r0, #44	; 0x2c
 8004648:	fb00 f303 	mul.w	r3, r0, r3
 800464c:	440b      	add	r3, r1
 800464e:	3350      	adds	r3, #80	; 0x50
 8004650:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3361      	adds	r3, #97	; 0x61
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	335c      	adds	r3, #92	; 0x5c
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	461a      	mov	r2, r3
 8004684:	2301      	movs	r3, #1
 8004686:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	333f      	adds	r3, #63	; 0x3f
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	333f      	adds	r3, #63	; 0x3f
 80046aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d111      	bne.n	80046d4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f006 fbe5 	bl	800ae8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	461a      	mov	r2, r3
 80046ce:	2310      	movs	r3, #16
 80046d0:	6093      	str	r3, [r2, #8]
 80046d2:	e03a      	b.n	800474a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	333f      	adds	r3, #63	; 0x3f
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d009      	beq.n	80046fc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	333f      	adds	r3, #63	; 0x3f
 80046f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d126      	bne.n	800474a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	440a      	add	r2, r1
 8004712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800471a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	212c      	movs	r1, #44	; 0x2c
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	4413      	add	r3, r2
 8004728:	3360      	adds	r3, #96	; 0x60
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	b2d9      	uxtb	r1, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	202c      	movs	r0, #44	; 0x2c
 8004738:	fb00 f303 	mul.w	r3, r0, r3
 800473c:	4413      	add	r3, r2
 800473e:	3360      	adds	r3, #96	; 0x60
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fd fd4f 	bl	80021e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12b      	bne.n	80047aa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3348      	adds	r3, #72	; 0x48
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	202c      	movs	r0, #44	; 0x2c
 8004768:	fb00 f202 	mul.w	r2, r0, r2
 800476c:	440a      	add	r2, r1
 800476e:	3240      	adds	r2, #64	; 0x40
 8004770:	8812      	ldrh	r2, [r2, #0]
 8004772:	fbb3 f3f2 	udiv	r3, r3, r2
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 818e 	beq.w	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3354      	adds	r3, #84	; 0x54
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f083 0301 	eor.w	r3, r3, #1
 8004794:	b2d8      	uxtb	r0, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3354      	adds	r3, #84	; 0x54
 80047a4:	4602      	mov	r2, r0
 80047a6:	701a      	strb	r2, [r3, #0]
}
 80047a8:	e178      	b.n	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	3354      	adds	r3, #84	; 0x54
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f083 0301 	eor.w	r3, r3, #1
 80047be:	b2d8      	uxtb	r0, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	3354      	adds	r3, #84	; 0x54
 80047ce:	4602      	mov	r2, r0
 80047d0:	701a      	strb	r2, [r3, #0]
}
 80047d2:	e163      	b.n	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	f040 80f6 	bne.w	80049d8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d109      	bne.n	8004814 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e0c9      	b.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3361      	adds	r3, #97	; 0x61
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d109      	bne.n	800483c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	3360      	adds	r3, #96	; 0x60
 8004836:	2205      	movs	r2, #5
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e0b5      	b.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3361      	adds	r3, #97	; 0x61
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d009      	beq.n	8004864 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	3361      	adds	r3, #97	; 0x61
 800485e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004860:	2b08      	cmp	r3, #8
 8004862:	d150      	bne.n	8004906 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	335c      	adds	r3, #92	; 0x5c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	202c      	movs	r0, #44	; 0x2c
 800487c:	fb00 f303 	mul.w	r3, r0, r3
 8004880:	440b      	add	r3, r1
 8004882:	335c      	adds	r3, #92	; 0x5c
 8004884:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	335c      	adds	r3, #92	; 0x5c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d912      	bls.n	80048c0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	2204      	movs	r2, #4
 80048bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048be:	e073      	b.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3360      	adds	r3, #96	; 0x60
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048e8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	461a      	mov	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004904:	e050      	b.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	212c      	movs	r1, #44	; 0x2c
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	4413      	add	r3, r2
 8004912:	3361      	adds	r3, #97	; 0x61
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d122      	bne.n	8004960 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3360      	adds	r3, #96	; 0x60
 8004928:	2202      	movs	r2, #2
 800492a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004942:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e023      	b.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3361      	adds	r3, #97	; 0x61
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b07      	cmp	r3, #7
 8004972:	d119      	bne.n	80049a8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	335c      	adds	r3, #92	; 0x5c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	202c      	movs	r0, #44	; 0x2c
 800498c:	fb00 f303 	mul.w	r3, r0, r3
 8004990:	440b      	add	r3, r1
 8004992:	335c      	adds	r3, #92	; 0x5c
 8004994:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	3360      	adds	r3, #96	; 0x60
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	2302      	movs	r3, #2
 80049b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	b2d9      	uxtb	r1, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	202c      	movs	r0, #44	; 0x2c
 80049c4:	fb00 f303 	mul.w	r3, r0, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3360      	adds	r3, #96	; 0x60
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fc09 	bl	80021e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049d6:	e061      	b.n	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d156      	bne.n	8004a9c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	333f      	adds	r3, #63	; 0x3f
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d111      	bne.n	8004a26 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	335c      	adds	r3, #92	; 0x5c
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f006 fa33 	bl	800ae8a <USB_HC_Halt>
 8004a24:	e031      	b.n	8004a8a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	333f      	adds	r3, #63	; 0x3f
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	333f      	adds	r3, #63	; 0x3f
 8004a48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d11d      	bne.n	8004a8a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	335c      	adds	r3, #92	; 0x5c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3361      	adds	r3, #97	; 0x61
 8004a76:	2203      	movs	r2, #3
 8004a78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f006 fa00 	bl	800ae8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	461a      	mov	r2, r3
 8004a98:	2310      	movs	r3, #16
 8004a9a:	6093      	str	r3, [r2, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d11a      	bne.n	8004b0a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3361      	adds	r3, #97	; 0x61
 8004af4:	2206      	movs	r2, #6
 8004af6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f006 f9c1 	bl	800ae8a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004b08:	e331      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d12e      	bne.n	8004b7e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2320      	movs	r3, #32
 8004b30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	333d      	adds	r3, #61	; 0x3d
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	f040 8313 	bne.w	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	333d      	adds	r3, #61	; 0x3d
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3360      	adds	r3, #96	; 0x60
 8004b68:	2202      	movs	r2, #2
 8004b6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 f987 	bl	800ae8a <USB_HC_Halt>
}
 8004b7c:	e2f7      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b94:	d112      	bne.n	8004bbc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f006 f968 	bl	800ae8a <USB_HC_Halt>
}
 8004bba:	e2d8      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d140      	bne.n	8004c54 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	212c      	movs	r1, #44	; 0x2c
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	335c      	adds	r3, #92	; 0x5c
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d111      	bne.n	8004c1e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	333d      	adds	r3, #61	; 0x3d
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	212c      	movs	r1, #44	; 0x2c
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3361      	adds	r3, #97	; 0x61
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f006 f91c 	bl	800ae8a <USB_HC_Halt>
}
 8004c52:	e28c      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d12c      	bne.n	8004cc4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3361      	adds	r3, #97	; 0x61
 8004c78:	2204      	movs	r2, #4
 8004c7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	333d      	adds	r3, #61	; 0x3d
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	335c      	adds	r3, #92	; 0x5c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f006 f8ed 	bl	800ae8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	6093      	str	r3, [r2, #8]
}
 8004cc2:	e254      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11a      	bne.n	8004d10 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2308      	movs	r3, #8
 8004cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	212c      	movs	r1, #44	; 0x2c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3361      	adds	r3, #97	; 0x61
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f006 f8be 	bl	800ae8a <USB_HC_Halt>
}
 8004d0e:	e22e      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d140      	bne.n	8004da8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	335c      	adds	r3, #92	; 0x5c
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	212c      	movs	r1, #44	; 0x2c
 8004d3e:	fb01 f303 	mul.w	r3, r1, r3
 8004d42:	4413      	add	r3, r2
 8004d44:	3361      	adds	r3, #97	; 0x61
 8004d46:	2203      	movs	r2, #3
 8004d48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	333d      	adds	r3, #61	; 0x3d
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d112      	bne.n	8004d84 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	333c      	adds	r3, #60	; 0x3c
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	333d      	adds	r3, #61	; 0x3d
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f006 f87b 	bl	800ae8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	2310      	movs	r3, #16
 8004da4:	6093      	str	r3, [r2, #8]
}
 8004da6:	e1e2      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d164      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d111      	bne.n	8004dea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3361      	adds	r3, #97	; 0x61
 8004dd4:	2206      	movs	r2, #6
 8004dd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f006 f851 	bl	800ae8a <USB_HC_Halt>
 8004de8:	e044      	b.n	8004e74 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	212c      	movs	r1, #44	; 0x2c
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	335c      	adds	r3, #92	; 0x5c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	202c      	movs	r0, #44	; 0x2c
 8004e02:	fb00 f303 	mul.w	r3, r0, r3
 8004e06:	440b      	add	r3, r1
 8004e08:	335c      	adds	r3, #92	; 0x5c
 8004e0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	335c      	adds	r3, #92	; 0x5c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d920      	bls.n	8004e62 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	335c      	adds	r3, #92	; 0x5c
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3360      	adds	r3, #96	; 0x60
 8004e40:	2204      	movs	r2, #4
 8004e42:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	b2d9      	uxtb	r1, r3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	202c      	movs	r0, #44	; 0x2c
 8004e4e:	fb00 f303 	mul.w	r3, r0, r3
 8004e52:	4413      	add	r3, r2
 8004e54:	3360      	adds	r3, #96	; 0x60
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd f9c4 	bl	80021e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e60:	e008      	b.n	8004e74 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3360      	adds	r3, #96	; 0x60
 8004e70:	2202      	movs	r2, #2
 8004e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	6093      	str	r3, [r2, #8]
}
 8004e86:	e172      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d11b      	bne.n	8004ed8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3361      	adds	r3, #97	; 0x61
 8004eae:	2208      	movs	r2, #8
 8004eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f005 ffe4 	bl	800ae8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed4:	6093      	str	r3, [r2, #8]
}
 8004ed6:	e14a      	b.n	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	f040 813f 	bne.w	800516e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3361      	adds	r3, #97	; 0x61
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d17d      	bne.n	8005000 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3360      	adds	r3, #96	; 0x60
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	333f      	adds	r3, #63	; 0x3f
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d00a      	beq.n	8004f40 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	212c      	movs	r1, #44	; 0x2c
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	333f      	adds	r3, #63	; 0x3f
 8004f38:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	f040 8100 	bne.w	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d113      	bne.n	8004f70 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	3355      	adds	r3, #85	; 0x55
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f083 0301 	eor.w	r3, r3, #1
 8004f5c:	b2d8      	uxtb	r0, r3
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3355      	adds	r3, #85	; 0x55
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 80e3 	bne.w	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	334c      	adds	r3, #76	; 0x4c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80d8 	beq.w	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	334c      	adds	r3, #76	; 0x4c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	202c      	movs	r0, #44	; 0x2c
 8004fa6:	fb00 f202 	mul.w	r2, r0, r2
 8004faa:	440a      	add	r2, r1
 8004fac:	3240      	adds	r2, #64	; 0x40
 8004fae:	8812      	ldrh	r2, [r2, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	202c      	movs	r0, #44	; 0x2c
 8004fba:	fb00 f202 	mul.w	r2, r0, r2
 8004fbe:	440a      	add	r2, r1
 8004fc0:	3240      	adds	r2, #64	; 0x40
 8004fc2:	8812      	ldrh	r2, [r2, #0]
 8004fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80b5 	beq.w	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3355      	adds	r3, #85	; 0x55
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2d8      	uxtb	r0, r3
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3355      	adds	r3, #85	; 0x55
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e09f      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3361      	adds	r3, #97	; 0x61
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d109      	bne.n	8005028 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3360      	adds	r3, #96	; 0x60
 8005022:	2202      	movs	r2, #2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e08b      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3361      	adds	r3, #97	; 0x61
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b04      	cmp	r3, #4
 800503a:	d109      	bne.n	8005050 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3360      	adds	r3, #96	; 0x60
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e077      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	212c      	movs	r1, #44	; 0x2c
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	4413      	add	r3, r2
 800505c:	3361      	adds	r3, #97	; 0x61
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d109      	bne.n	8005078 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3360      	adds	r3, #96	; 0x60
 8005072:	2205      	movs	r2, #5
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e063      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3361      	adds	r3, #97	; 0x61
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b06      	cmp	r3, #6
 800508a:	d009      	beq.n	80050a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3361      	adds	r3, #97	; 0x61
 800509a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800509c:	2b08      	cmp	r3, #8
 800509e:	d14f      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	335c      	adds	r3, #92	; 0x5c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	202c      	movs	r0, #44	; 0x2c
 80050b8:	fb00 f303 	mul.w	r3, r0, r3
 80050bc:	440b      	add	r3, r1
 80050be:	335c      	adds	r3, #92	; 0x5c
 80050c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	335c      	adds	r3, #92	; 0x5c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d912      	bls.n	80050fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	212c      	movs	r1, #44	; 0x2c
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	212c      	movs	r1, #44	; 0x2c
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3360      	adds	r3, #96	; 0x60
 80050f6:	2204      	movs	r2, #4
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e021      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3360      	adds	r3, #96	; 0x60
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005124:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800512c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513a:	461a      	mov	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	461a      	mov	r2, r3
 800514e:	2302      	movs	r3, #2
 8005150:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	b2d9      	uxtb	r1, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	202c      	movs	r0, #44	; 0x2c
 800515c:	fb00 f303 	mul.w	r3, r0, r3
 8005160:	4413      	add	r3, r2
 8005162:	3360      	adds	r3, #96	; 0x60
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fd f83d 	bl	80021e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800516e:	bf00      	nop
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	0c5b      	lsrs	r3, r3, #17
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d004      	beq.n	80051bc <HCD_RXQLVL_IRQHandler+0x46>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	f000 80a9 	beq.w	800530c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80051ba:	e0aa      	b.n	8005312 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a6 	beq.w	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	3344      	adds	r3, #68	; 0x44
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 809b 	beq.w	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	212c      	movs	r1, #44	; 0x2c
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	3350      	adds	r3, #80	; 0x50
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	441a      	add	r2, r3
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	202c      	movs	r0, #44	; 0x2c
 80051f4:	fb00 f303 	mul.w	r3, r0, r3
 80051f8:	440b      	add	r3, r1
 80051fa:	334c      	adds	r3, #76	; 0x4c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d87a      	bhi.n	80052f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	212c      	movs	r1, #44	; 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3344      	adds	r3, #68	; 0x44
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	b292      	uxth	r2, r2
 800521a:	4619      	mov	r1, r3
 800521c:	f005 f998 	bl	800a550 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3344      	adds	r3, #68	; 0x44
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	441a      	add	r2, r3
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	202c      	movs	r0, #44	; 0x2c
 800523a:	fb00 f303 	mul.w	r3, r0, r3
 800523e:	440b      	add	r3, r1
 8005240:	3344      	adds	r3, #68	; 0x44
 8005242:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	3350      	adds	r3, #80	; 0x50
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	441a      	add	r2, r3
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	202c      	movs	r0, #44	; 0x2c
 800525e:	fb00 f303 	mul.w	r3, r0, r3
 8005262:	440b      	add	r3, r1
 8005264:	3350      	adds	r3, #80	; 0x50
 8005266:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	0cdb      	lsrs	r3, r3, #19
 8005278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800527c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	212c      	movs	r1, #44	; 0x2c
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	3340      	adds	r3, #64	; 0x40
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4293      	cmp	r3, r2
 8005294:	d13c      	bne.n	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d039      	beq.n	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3354      	adds	r3, #84	; 0x54
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b2d8      	uxtb	r0, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3354      	adds	r3, #84	; 0x54
 80052f2:	4602      	mov	r2, r0
 80052f4:	701a      	strb	r2, [r3, #0]
      break;
 80052f6:	e00b      	b.n	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	212c      	movs	r1, #44	; 0x2c
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	3360      	adds	r3, #96	; 0x60
 8005306:	2204      	movs	r2, #4
 8005308:	701a      	strb	r2, [r3, #0]
      break;
 800530a:	e001      	b.n	8005310 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800530c:	bf00      	nop
 800530e:	e000      	b.n	8005312 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005310:	bf00      	nop
  }
}
 8005312:	bf00      	nop
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005346:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d10b      	bne.n	800536a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d102      	bne.n	8005362 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc ff27 	bl	80021b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d132      	bne.n	80053da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f043 0308 	orr.w	r3, r3, #8
 800537a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d126      	bne.n	80053d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d113      	bne.n	80053b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005398:	d106      	bne.n	80053a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f005 fa37 	bl	800a814 <USB_InitFSLSPClkSel>
 80053a6:	e011      	b.n	80053cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2101      	movs	r1, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	f005 fa30 	bl	800a814 <USB_InitFSLSPClkSel>
 80053b4:	e00a      	b.n	80053cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d106      	bne.n	80053cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c4:	461a      	mov	r2, r3
 80053c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80053ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fc ff19 	bl	8002204 <HAL_HCD_PortEnabled_Callback>
 80053d2:	e002      	b.n	80053da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fc ff23 	bl	8002220 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d103      	bne.n	80053ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f043 0320 	orr.w	r3, r3, #32
 80053ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f2:	461a      	mov	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6013      	str	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e12b      	b.n	800566a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fb fd2e 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	; 0x24
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005464:	f000 ff82 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8005468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a81      	ldr	r2, [pc, #516]	; (8005674 <HAL_I2C_Init+0x274>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d807      	bhi.n	8005484 <HAL_I2C_Init+0x84>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a80      	ldr	r2, [pc, #512]	; (8005678 <HAL_I2C_Init+0x278>)
 8005478:	4293      	cmp	r3, r2
 800547a:	bf94      	ite	ls
 800547c:	2301      	movls	r3, #1
 800547e:	2300      	movhi	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e006      	b.n	8005492 <HAL_I2C_Init+0x92>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a7d      	ldr	r2, [pc, #500]	; (800567c <HAL_I2C_Init+0x27c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	bf94      	ite	ls
 800548c:	2301      	movls	r3, #1
 800548e:	2300      	movhi	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0e7      	b.n	800566a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a78      	ldr	r2, [pc, #480]	; (8005680 <HAL_I2C_Init+0x280>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0c9b      	lsrs	r3, r3, #18
 80054a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a6a      	ldr	r2, [pc, #424]	; (8005674 <HAL_I2C_Init+0x274>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d802      	bhi.n	80054d4 <HAL_I2C_Init+0xd4>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	e009      	b.n	80054e8 <HAL_I2C_Init+0xe8>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	4a69      	ldr	r2, [pc, #420]	; (8005684 <HAL_I2C_Init+0x284>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	3301      	adds	r3, #1
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	495c      	ldr	r1, [pc, #368]	; (8005674 <HAL_I2C_Init+0x274>)
 8005504:	428b      	cmp	r3, r1
 8005506:	d819      	bhi.n	800553c <HAL_I2C_Init+0x13c>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1e59      	subs	r1, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fbb1 f3f3 	udiv	r3, r1, r3
 8005516:	1c59      	adds	r1, r3, #1
 8005518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800551c:	400b      	ands	r3, r1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_I2C_Init+0x138>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1e59      	subs	r1, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005530:	3301      	adds	r3, #1
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	e051      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 8005538:	2304      	movs	r3, #4
 800553a:	e04f      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d111      	bne.n	8005568 <HAL_I2C_Init+0x168>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e58      	subs	r0, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e012      	b.n	800558e <HAL_I2C_Init+0x18e>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Init+0x196>
 8005592:	2301      	movs	r3, #1
 8005594:	e022      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10e      	bne.n	80055bc <HAL_I2C_Init+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e58      	subs	r0, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	440b      	add	r3, r1
 80055ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	e00f      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	0099      	lsls	r1, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	6809      	ldr	r1, [r1, #0]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800560a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6911      	ldr	r1, [r2, #16]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	4311      	orrs	r1, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	430b      	orrs	r3, r1
 800561e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	000186a0 	.word	0x000186a0
 8005678:	001e847f 	.word	0x001e847f
 800567c:	003d08ff 	.word	0x003d08ff
 8005680:	431bde83 	.word	0x431bde83
 8005684:	10624dd3 	.word	0x10624dd3

08005688 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0bf      	b.n	800581a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fce6 	bl	8001080 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b4a      	ldr	r3, [pc, #296]	; (8005824 <HAL_LTDC_Init+0x19c>)
 80056fc:	400b      	ands	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68d9      	ldr	r1, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <HAL_LTDC_Init+0x19c>)
 800572a:	400b      	ands	r3, r1
 800572c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68d9      	ldr	r1, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <HAL_LTDC_Init+0x19c>)
 8005758:	400b      	ands	r3, r1
 800575a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6959      	ldr	r1, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b27      	ldr	r3, [pc, #156]	; (8005824 <HAL_LTDC_Init+0x19c>)
 8005786:	400b      	ands	r3, r1
 8005788:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6959      	ldr	r1, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057b8:	041b      	lsls	r3, r3, #16
 80057ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0206 	orr.w	r2, r2, #6
 80057f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	f000f800 	.word	0xf000f800

08005828 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d023      	beq.n	8005892 <HAL_LTDC_IRQHandler+0x6a>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01e      	beq.n	8005892 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0204 	bic.w	r2, r2, #4
 8005862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2204      	movs	r2, #4
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2204      	movs	r2, #4
 8005880:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f86f 	bl	8005970 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d023      	beq.n	80058e4 <HAL_LTDC_IRQHandler+0xbc>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01e      	beq.n	80058e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0202 	bic.w	r2, r2, #2
 80058b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2202      	movs	r2, #2
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058c4:	f043 0202 	orr.w	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2204      	movs	r2, #4
 80058d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f846 	bl	8005970 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01b      	beq.n	8005926 <HAL_LTDC_IRQHandler+0xfe>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d016      	beq.n	8005926 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2201      	movs	r2, #1
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f82f 	bl	8005984 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <HAL_LTDC_IRQHandler+0x140>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0208 	bic.w	r2, r2, #8
 8005948:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2208      	movs	r2, #8
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f818 	bl	8005998 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80059ac:	b5b0      	push	{r4, r5, r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_LTDC_ConfigLayer+0x1a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e02c      	b.n	8005a20 <HAL_LTDC_ConfigLayer+0x74>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2134      	movs	r1, #52	; 0x34
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f811 	bl	8005a28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bdb0      	pop	{r4, r5, r7, pc}

08005a28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a44:	4413      	add	r3, r2
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	01db      	lsls	r3, r3, #7
 8005a54:	4413      	add	r3, r2
 8005a56:	3384      	adds	r3, #132	; 0x84
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	01d2      	lsls	r2, r2, #7
 8005a64:	440a      	add	r2, r1
 8005a66:	3284      	adds	r2, #132	; 0x84
 8005a68:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	01db      	lsls	r3, r3, #7
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3384      	adds	r3, #132	; 0x84
 8005a90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aa6:	4413      	add	r3, r2
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	01db      	lsls	r3, r3, #7
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3384      	adds	r3, #132	; 0x84
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	01d2      	lsls	r2, r2, #7
 8005ac6:	440a      	add	r2, r1
 8005ac8:	3284      	adds	r2, #132	; 0x84
 8005aca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ace:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ade:	4413      	add	r3, r2
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	01db      	lsls	r3, r3, #7
 8005aec:	440b      	add	r3, r1
 8005aee:	3384      	adds	r3, #132	; 0x84
 8005af0:	4619      	mov	r1, r3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	01db      	lsls	r3, r3, #7
 8005b02:	4413      	add	r3, r2
 8005b04:	3384      	adds	r3, #132	; 0x84
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	01d2      	lsls	r2, r2, #7
 8005b12:	440a      	add	r2, r1
 8005b14:	3284      	adds	r2, #132	; 0x84
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	01db      	lsls	r3, r3, #7
 8005b26:	4413      	add	r3, r2
 8005b28:	3384      	adds	r3, #132	; 0x84
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	01db      	lsls	r3, r3, #7
 8005b58:	4413      	add	r3, r2
 8005b5a:	3384      	adds	r3, #132	; 0x84
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	01db      	lsls	r3, r3, #7
 8005b68:	4413      	add	r3, r2
 8005b6a:	3384      	adds	r3, #132	; 0x84
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b78:	461a      	mov	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3384      	adds	r3, #132	; 0x84
 8005b90:	4619      	mov	r1, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3384      	adds	r3, #132	; 0x84
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	4611      	mov	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	01d2      	lsls	r2, r2, #7
 8005bb2:	440a      	add	r2, r1
 8005bb4:	3284      	adds	r2, #132	; 0x84
 8005bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	01db      	lsls	r3, r3, #7
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3384      	adds	r3, #132	; 0x84
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	01db      	lsls	r3, r3, #7
 8005bdc:	4413      	add	r3, r2
 8005bde:	3384      	adds	r3, #132	; 0x84
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	4611      	mov	r1, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	01d2      	lsls	r2, r2, #7
 8005bec:	440a      	add	r2, r1
 8005bee:	3284      	adds	r2, #132	; 0x84
 8005bf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005bf4:	f023 0307 	bic.w	r3, r3, #7
 8005bf8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	6809      	ldr	r1, [r1, #0]
 8005c06:	4608      	mov	r0, r1
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	01c9      	lsls	r1, r1, #7
 8005c0c:	4401      	add	r1, r0
 8005c0e:	3184      	adds	r1, #132	; 0x84
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3384      	adds	r3, #132	; 0x84
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	01db      	lsls	r3, r3, #7
 8005c2e:	4413      	add	r3, r2
 8005c30:	3384      	adds	r3, #132	; 0x84
 8005c32:	461a      	mov	r2, r3
 8005c34:	2300      	movs	r3, #0
 8005c36:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	01db      	lsls	r3, r3, #7
 8005c42:	4413      	add	r3, r2
 8005c44:	3384      	adds	r3, #132	; 0x84
 8005c46:	461a      	mov	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c56:	2304      	movs	r3, #4
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e01b      	b.n	8005c94 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c64:	2303      	movs	r3, #3
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	e014      	b.n	8005c94 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d00b      	beq.n	8005c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d007      	beq.n	8005c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d003      	beq.n	8005c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c86:	2b07      	cmp	r3, #7
 8005c88:	d102      	bne.n	8005c90 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	e001      	b.n	8005c94 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	01db      	lsls	r3, r3, #7
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3384      	adds	r3, #132	; 0x84
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	4611      	mov	r1, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	01d2      	lsls	r2, r2, #7
 8005cae:	440a      	add	r2, r1
 8005cb0:	3284      	adds	r2, #132	; 0x84
 8005cb2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	1acb      	subs	r3, r1, r3
 8005cce:	69f9      	ldr	r1, [r7, #28]
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6809      	ldr	r1, [r1, #0]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	01c9      	lsls	r1, r1, #7
 8005ce0:	4401      	add	r1, r0
 8005ce2:	3184      	adds	r1, #132	; 0x84
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	01db      	lsls	r3, r3, #7
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3384      	adds	r3, #132	; 0x84
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	01d2      	lsls	r2, r2, #7
 8005d02:	440a      	add	r2, r1
 8005d04:	3284      	adds	r2, #132	; 0x84
 8005d06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	01db      	lsls	r3, r3, #7
 8005d30:	4413      	add	r3, r2
 8005d32:	3384      	adds	r3, #132	; 0x84
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	01d2      	lsls	r2, r2, #7
 8005d40:	440a      	add	r2, r1
 8005d42:	3284      	adds	r2, #132	; 0x84
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	6013      	str	r3, [r2, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	2300      	movs	r3, #0
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6413      	str	r3, [r2, #64]	; 0x40
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_PWREx_EnableOverDrive+0x94>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d84:	f7fc fc96 	bl	80026b4 <HAL_GetTick>
 8005d88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d8a:	e009      	b.n	8005da0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d8c:	f7fc fc92 	bl	80026b4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9a:	d901      	bls.n	8005da0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e01f      	b.n	8005de0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005da0:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dac:	d1ee      	bne.n	8005d8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005db4:	f7fc fc7e 	bl	80026b4 <HAL_GetTick>
 8005db8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dba:	e009      	b.n	8005dd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005dbc:	f7fc fc7a 	bl	80026b4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dca:	d901      	bls.n	8005dd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e007      	b.n	8005de0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ddc:	d1ee      	bne.n	8005dbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	420e0040 	.word	0x420e0040
 8005df0:	40007000 	.word	0x40007000
 8005df4:	420e0044 	.word	0x420e0044

08005df8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e00:	f7fc fc58 	bl	80026b4 <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e069      	b.n	8005ee4 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fb fa81 	bl	800132c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005e2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f85e 	bl	8005ef0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	2120      	movs	r1, #32
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f856 	bl	8005f0c <QSPI_WaitFlagStateUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d137      	bne.n	8005eda <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6852      	ldr	r2, [r2, #4]
 8005e7c:	0611      	lsls	r1, r2, #24
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68d2      	ldr	r2, [r2, #12]
 8005e82:	4311      	orrs	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	69d2      	ldr	r2, [r2, #28]
 8005e88:	4311      	orrs	r1, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6a12      	ldr	r2, [r2, #32]
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_QSPI_Init+0xf4>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6912      	ldr	r2, [r2, #16]
 8005ea6:	0411      	lsls	r1, r2, #16
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6952      	ldr	r2, [r2, #20]
 8005eac:	4311      	orrs	r1, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6992      	ldr	r2, [r2, #24]
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	ffe0f8fe 	.word	0xffe0f8fe

08005ef0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f1c:	e01a      	b.n	8005f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d016      	beq.n	8005f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fc fbc5 	bl	80026b4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	f043 0201 	orr.w	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e00e      	b.n	8005f72 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bf14      	ite	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	2300      	moveq	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d1d6      	bne.n	8005f1e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0cc      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f90:	4b68      	ldr	r3, [pc, #416]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d90c      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9e:	4b65      	ldr	r3, [pc, #404]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	4b63      	ldr	r3, [pc, #396]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0b8      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d020      	beq.n	8006006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd0:	4b59      	ldr	r3, [pc, #356]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a58      	ldr	r2, [pc, #352]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a52      	ldr	r2, [pc, #328]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b50      	ldr	r3, [pc, #320]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	494d      	ldr	r1, [pc, #308]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d044      	beq.n	800609c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d003      	beq.n	800603a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006036:	2b03      	cmp	r3, #3
 8006038:	d107      	bne.n	800604a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603a:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e06f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604a:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e067      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800605a:	4b37      	ldr	r3, [pc, #220]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 0203 	bic.w	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4934      	ldr	r1, [pc, #208]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800606c:	f7fc fb22 	bl	80026b4 <HAL_GetTick>
 8006070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	e00a      	b.n	800608a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006074:	f7fc fb1e 	bl	80026b4 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e04f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608a:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 020c 	and.w	r2, r3, #12
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	429a      	cmp	r2, r3
 800609a:	d1eb      	bne.n	8006074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d20c      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b22      	ldr	r3, [pc, #136]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b20      	ldr	r3, [pc, #128]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e032      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d0:	4b19      	ldr	r3, [pc, #100]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4916      	ldr	r1, [pc, #88]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	490e      	ldr	r1, [pc, #56]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006102:	f000 f821 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8006106:	4602      	mov	r2, r0
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	490a      	ldr	r1, [pc, #40]	; (800613c <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	5ccb      	ldrb	r3, [r1, r3]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <HAL_RCC_ClockConfig+0x1c4>)
 800611c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCC_ClockConfig+0x1c8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fb faea 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023c00 	.word	0x40023c00
 8006138:	40023800 	.word	0x40023800
 800613c:	0800def8 	.word	0x0800def8
 8006140:	20000004 	.word	0x20000004
 8006144:	20000008 	.word	0x20000008

08006148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800614c:	b094      	sub	sp, #80	; 0x50
 800614e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	647b      	str	r3, [r7, #68]	; 0x44
 8006154:	2300      	movs	r3, #0
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006158:	2300      	movs	r3, #0
 800615a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006160:	4b79      	ldr	r3, [pc, #484]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 030c 	and.w	r3, r3, #12
 8006168:	2b08      	cmp	r3, #8
 800616a:	d00d      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x40>
 800616c:	2b08      	cmp	r3, #8
 800616e:	f200 80e1 	bhi.w	8006334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x34>
 8006176:	2b04      	cmp	r3, #4
 8006178:	d003      	beq.n	8006182 <HAL_RCC_GetSysClockFreq+0x3a>
 800617a:	e0db      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800617c:	4b73      	ldr	r3, [pc, #460]	; (800634c <HAL_RCC_GetSysClockFreq+0x204>)
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006180:	e0db      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006182:	4b73      	ldr	r3, [pc, #460]	; (8006350 <HAL_RCC_GetSysClockFreq+0x208>)
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006186:	e0d8      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006188:	4b6f      	ldr	r3, [pc, #444]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006192:	4b6d      	ldr	r3, [pc, #436]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d063      	beq.n	8006266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619e:	4b6a      	ldr	r3, [pc, #424]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	2200      	movs	r2, #0
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
 80061b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061ba:	4622      	mov	r2, r4
 80061bc:	462b      	mov	r3, r5
 80061be:	f04f 0000 	mov.w	r0, #0
 80061c2:	f04f 0100 	mov.w	r1, #0
 80061c6:	0159      	lsls	r1, r3, #5
 80061c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061cc:	0150      	lsls	r0, r2, #5
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4621      	mov	r1, r4
 80061d4:	1a51      	subs	r1, r2, r1
 80061d6:	6139      	str	r1, [r7, #16]
 80061d8:	4629      	mov	r1, r5
 80061da:	eb63 0301 	sbc.w	r3, r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	018b      	lsls	r3, r1, #6
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061f6:	4651      	mov	r1, sl
 80061f8:	018a      	lsls	r2, r1, #6
 80061fa:	4651      	mov	r1, sl
 80061fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006200:	4659      	mov	r1, fp
 8006202:	eb63 0901 	sbc.w	r9, r3, r1
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621a:	4690      	mov	r8, r2
 800621c:	4699      	mov	r9, r3
 800621e:	4623      	mov	r3, r4
 8006220:	eb18 0303 	adds.w	r3, r8, r3
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	462b      	mov	r3, r5
 8006228:	eb49 0303 	adc.w	r3, r9, r3
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800623a:	4629      	mov	r1, r5
 800623c:	024b      	lsls	r3, r1, #9
 800623e:	4621      	mov	r1, r4
 8006240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006244:	4621      	mov	r1, r4
 8006246:	024a      	lsls	r2, r1, #9
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	2200      	movs	r2, #0
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006258:	f7f9 ffcc 	bl	80001f4 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4613      	mov	r3, r2
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	e058      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	2200      	movs	r2, #0
 800626e:	4618      	mov	r0, r3
 8006270:	4611      	mov	r1, r2
 8006272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006276:	623b      	str	r3, [r7, #32]
 8006278:	2300      	movs	r3, #0
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
 800627c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	0159      	lsls	r1, r3, #5
 800628e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006292:	0150      	lsls	r0, r2, #5
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4641      	mov	r1, r8
 800629a:	ebb2 0a01 	subs.w	sl, r2, r1
 800629e:	4649      	mov	r1, r9
 80062a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062b8:	ebb2 040a 	subs.w	r4, r2, sl
 80062bc:	eb63 050b 	sbc.w	r5, r3, fp
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	00eb      	lsls	r3, r5, #3
 80062ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ce:	00e2      	lsls	r2, r4, #3
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	18e3      	adds	r3, r4, r3
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	464b      	mov	r3, r9
 80062dc:	eb45 0303 	adc.w	r3, r5, r3
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ee:	4629      	mov	r1, r5
 80062f0:	028b      	lsls	r3, r1, #10
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f8:	4621      	mov	r1, r4
 80062fa:	028a      	lsls	r2, r1, #10
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006302:	2200      	movs	r2, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	61fa      	str	r2, [r7, #28]
 8006308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800630c:	f7f9 ff72 	bl	80001f4 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4613      	mov	r3, r2
 8006316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	3301      	adds	r3, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006332:	e002      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_RCC_GetSysClockFreq+0x204>)
 8006336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800633c:	4618      	mov	r0, r3
 800633e:	3750      	adds	r7, #80	; 0x50
 8006340:	46bd      	mov	sp, r7
 8006342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	00f42400 	.word	0x00f42400
 8006350:	007a1200 	.word	0x007a1200

08006354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <HAL_RCC_GetHCLKFreq+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006370:	f7ff fff0 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4903      	ldr	r1, [pc, #12]	; (8006390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40023800 	.word	0x40023800
 8006390:	0800df08 	.word	0x0800df08

08006394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006398:	f7ff ffdc 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0b5b      	lsrs	r3, r3, #13
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4903      	ldr	r1, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0800df08 	.word	0x0800df08

080063bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	220f      	movs	r2, #15
 80063ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	08db      	lsrs	r3, r3, #3
 80063f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <HAL_RCC_GetClockConfig+0x60>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 020f 	and.w	r2, r3, #15
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800
 800641c:	40023c00 	.word	0x40023c00

08006420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006448:	4b66      	ldr	r3, [pc, #408]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800644a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800644e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	4963      	ldr	r1, [pc, #396]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800646a:	4b5e      	ldr	r3, [pc, #376]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800646c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006470:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	495a      	ldr	r1, [pc, #360]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d075      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064aa:	f7fc f903 	bl	80026b4 <HAL_GetTick>
 80064ae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064b2:	f7fc f8ff 	bl	80026b4 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1dc      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064c4:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1f0      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	019a      	lsls	r2, r3, #6
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	071b      	lsls	r3, r3, #28
 80064e8:	493e      	ldr	r1, [pc, #248]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01f      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006502:	0f1b      	lsrs	r3, r3, #28
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	019a      	lsls	r2, r3, #6
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	431a      	orrs	r2, r3
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	071b      	lsls	r3, r3, #28
 800651c:	4931      	ldr	r1, [pc, #196]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006524:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652a:	f023 021f 	bic.w	r2, r3, #31
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	3b01      	subs	r3, #1
 8006534:	492b      	ldr	r1, [pc, #172]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	019a      	lsls	r2, r3, #6
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	061b      	lsls	r3, r3, #24
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	071b      	lsls	r3, r3, #28
 800655c:	4921      	ldr	r1, [pc, #132]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006564:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800656a:	f7fc f8a3 	bl	80026b4 <HAL_GetTick>
 800656e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006572:	f7fc f89f 	bl	80026b4 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e17c      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006584:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d112      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10c      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80ce 	beq.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80065ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065be:	f040 80c8 	bne.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fc f874 	bl	80026b4 <HAL_GetTick>
 80065cc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ce:	e00f      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065d0:	f7fc f870 	bl	80026b4 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d908      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e14d      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
 80065e8:	42470068 	.word	0x42470068
 80065ec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065f0:	4ba5      	ldr	r3, [pc, #660]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065fc:	d0e8      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d02e      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800660a:	4b9f      	ldr	r3, [pc, #636]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800661c:	4b9a      	ldr	r3, [pc, #616]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	0f1b      	lsrs	r3, r3, #28
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	019a      	lsls	r2, r3, #6
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	3b01      	subs	r3, #1
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	061b      	lsls	r3, r3, #24
 8006640:	431a      	orrs	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	071b      	lsls	r3, r3, #28
 8006646:	4990      	ldr	r1, [pc, #576]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800664e:	4b8e      	ldr	r3, [pc, #568]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006654:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	3b01      	subs	r3, #1
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	4989      	ldr	r1, [pc, #548]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02c      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006674:	4b84      	ldr	r3, [pc, #528]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	3301      	adds	r3, #1
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006686:	4b80      	ldr	r3, [pc, #512]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	019a      	lsls	r2, r3, #6
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	3b01      	subs	r3, #1
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	431a      	orrs	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	061b      	lsls	r3, r3, #24
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	071b      	lsls	r3, r3, #28
 80066b0:	4975      	ldr	r1, [pc, #468]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066b8:	4b73      	ldr	r3, [pc, #460]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	4970      	ldr	r1, [pc, #448]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d024      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80066de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e2:	d11f      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066e4:	4b68      	ldr	r3, [pc, #416]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	0e1b      	lsrs	r3, r3, #24
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066f2:	4b65      	ldr	r3, [pc, #404]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f8:	0f1b      	lsrs	r3, r3, #28
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	019a      	lsls	r2, r3, #6
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	3b01      	subs	r3, #1
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	431a      	orrs	r2, r3
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	431a      	orrs	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	071b      	lsls	r3, r3, #28
 800671c:	495a      	ldr	r1, [pc, #360]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006724:	4b59      	ldr	r3, [pc, #356]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672a:	f7fb ffc3 	bl	80026b4 <HAL_GetTick>
 800672e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006732:	f7fb ffbf 	bl	80026b4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e09c      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800674c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006750:	d1ef      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8083 	beq.w	8006866 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006760:	2300      	movs	r3, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	4b48      	ldr	r3, [pc, #288]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	4a47      	ldr	r2, [pc, #284]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800676a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676e:	6413      	str	r3, [r2, #64]	; 0x40
 8006770:	4b45      	ldr	r3, [pc, #276]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800677c:	4b44      	ldr	r3, [pc, #272]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a43      	ldr	r2, [pc, #268]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006786:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006788:	f7fb ff94 	bl	80026b4 <HAL_GetTick>
 800678c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006790:	f7fb ff90 	bl	80026b4 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e06d      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067a2:	4b3b      	ldr	r3, [pc, #236]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02f      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d028      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067cc:	4b2e      	ldr	r3, [pc, #184]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067dc:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067e2:	4a29      	ldr	r2, [pc, #164]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067e8:	4b27      	ldr	r3, [pc, #156]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d114      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067f4:	f7fb ff5e 	bl	80026b4 <HAL_GetTick>
 80067f8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fa:	e00a      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fc:	f7fb ff5a 	bl	80026b4 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f241 3288 	movw	r2, #5000	; 0x1388
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e035      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ee      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800682a:	d10d      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800682c:	4b16      	ldr	r3, [pc, #88]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800683c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006840:	4911      	ldr	r1, [pc, #68]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
 8006846:	e005      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006852:	6093      	str	r3, [r2, #8]
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006860:	4909      	ldr	r1, [pc, #36]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006862:	4313      	orrs	r3, r2
 8006864:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800687a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800
 800688c:	42470070 	.word	0x42470070
 8006890:	40007000 	.word	0x40007000
 8006894:	42470e40 	.word	0x42470e40
 8006898:	424711e0 	.word	0x424711e0

0800689c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e273      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d075      	beq.n	80069a6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068ba:	4b88      	ldr	r3, [pc, #544]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d00c      	beq.n	80068e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c6:	4b85      	ldr	r3, [pc, #532]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d112      	bne.n	80068f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068d2:	4b82      	ldr	r3, [pc, #520]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068de:	d10b      	bne.n	80068f8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05b      	beq.n	80069a4 <HAL_RCC_OscConfig+0x108>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d157      	bne.n	80069a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e24e      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006900:	d106      	bne.n	8006910 <HAL_RCC_OscConfig+0x74>
 8006902:	4b76      	ldr	r3, [pc, #472]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a75      	ldr	r2, [pc, #468]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e01d      	b.n	800694c <HAL_RCC_OscConfig+0xb0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006918:	d10c      	bne.n	8006934 <HAL_RCC_OscConfig+0x98>
 800691a:	4b70      	ldr	r3, [pc, #448]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6f      	ldr	r2, [pc, #444]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	4b6d      	ldr	r3, [pc, #436]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6c      	ldr	r2, [pc, #432]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e00b      	b.n	800694c <HAL_RCC_OscConfig+0xb0>
 8006934:	4b69      	ldr	r3, [pc, #420]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a68      	ldr	r2, [pc, #416]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b66      	ldr	r3, [pc, #408]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800694a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fb feae 	bl	80026b4 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800695c:	f7fb feaa 	bl	80026b4 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e213      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696e:	4b5b      	ldr	r3, [pc, #364]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0xc0>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fb fe9a 	bl	80026b4 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006984:	f7fb fe96 	bl	80026b4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	; 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e1ff      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006996:	4b51      	ldr	r3, [pc, #324]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0xe8>
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d063      	beq.n	8006a7a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069b2:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	d11c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ca:	4b44      	ldr	r3, [pc, #272]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d116      	bne.n	8006a04 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d6:	4b41      	ldr	r3, [pc, #260]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_RCC_OscConfig+0x152>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d001      	beq.n	80069ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e1d3      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ee:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4937      	ldr	r1, [pc, #220]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a02:	e03a      	b.n	8006a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d020      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a0c:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_RCC_OscConfig+0x244>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a12:	f7fb fe4f 	bl	80026b4 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a1a:	f7fb fe4b 	bl	80026b4 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e1b4      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	4925      	ldr	r1, [pc, #148]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]
 8006a4c:	e015      	b.n	8006a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <HAL_RCC_OscConfig+0x244>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fb fe2e 	bl	80026b4 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5c:	f7fb fe2a 	bl	80026b4 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e193      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d036      	beq.n	8006af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a8e:	4b15      	ldr	r3, [pc, #84]	; (8006ae4 <HAL_RCC_OscConfig+0x248>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a94:	f7fb fe0e 	bl	80026b4 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a9c:	f7fb fe0a 	bl	80026b4 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e173      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aae:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <HAL_RCC_OscConfig+0x240>)
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0f0      	beq.n	8006a9c <HAL_RCC_OscConfig+0x200>
 8006aba:	e01b      	b.n	8006af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCC_OscConfig+0x248>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac2:	f7fb fdf7 	bl	80026b4 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac8:	e00e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aca:	f7fb fdf3 	bl	80026b4 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d907      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e15c      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	42470000 	.word	0x42470000
 8006ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae8:	4b8a      	ldr	r3, [pc, #552]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1ea      	bne.n	8006aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8097 	beq.w	8006c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b06:	4b83      	ldr	r3, [pc, #524]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10f      	bne.n	8006b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	4a7e      	ldr	r2, [pc, #504]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6413      	str	r3, [r2, #64]	; 0x40
 8006b22:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	60bb      	str	r3, [r7, #8]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b32:	4b79      	ldr	r3, [pc, #484]	; (8006d18 <HAL_RCC_OscConfig+0x47c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d118      	bne.n	8006b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b3e:	4b76      	ldr	r3, [pc, #472]	; (8006d18 <HAL_RCC_OscConfig+0x47c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a75      	ldr	r2, [pc, #468]	; (8006d18 <HAL_RCC_OscConfig+0x47c>)
 8006b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b4a:	f7fb fdb3 	bl	80026b4 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b52:	f7fb fdaf 	bl	80026b4 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e118      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b64:	4b6c      	ldr	r3, [pc, #432]	; (8006d18 <HAL_RCC_OscConfig+0x47c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0f0      	beq.n	8006b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d106      	bne.n	8006b86 <HAL_RCC_OscConfig+0x2ea>
 8006b78:	4b66      	ldr	r3, [pc, #408]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	4a65      	ldr	r2, [pc, #404]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	6713      	str	r3, [r2, #112]	; 0x70
 8006b84:	e01c      	b.n	8006bc0 <HAL_RCC_OscConfig+0x324>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x30c>
 8006b8e:	4b61      	ldr	r3, [pc, #388]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	4a60      	ldr	r2, [pc, #384]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b94:	f043 0304 	orr.w	r3, r3, #4
 8006b98:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9a:	4b5e      	ldr	r3, [pc, #376]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	4a5d      	ldr	r2, [pc, #372]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba6:	e00b      	b.n	8006bc0 <HAL_RCC_OscConfig+0x324>
 8006ba8:	4b5a      	ldr	r3, [pc, #360]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bac:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb4:	4b57      	ldr	r3, [pc, #348]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	4a56      	ldr	r2, [pc, #344]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006bba:	f023 0304 	bic.w	r3, r3, #4
 8006bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc8:	f7fb fd74 	bl	80026b4 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd0:	f7fb fd70 	bl	80026b4 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e0d7      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be6:	4b4b      	ldr	r3, [pc, #300]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0ee      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x334>
 8006bf2:	e014      	b.n	8006c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf4:	f7fb fd5e 	bl	80026b4 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bfa:	e00a      	b.n	8006c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bfc:	f7fb fd5a 	bl	80026b4 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e0c1      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c12:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ee      	bne.n	8006bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80ad 	beq.w	8006d94 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c3a:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d060      	beq.n	8006d08 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d145      	bne.n	8006cda <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4e:	4b33      	ldr	r3, [pc, #204]	; (8006d1c <HAL_RCC_OscConfig+0x480>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fb fd2e 	bl	80026b4 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fb fd2a 	bl	80026b4 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e093      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	071b      	lsls	r3, r3, #28
 8006ca6:	491b      	ldr	r1, [pc, #108]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cac:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <HAL_RCC_OscConfig+0x480>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb2:	f7fb fcff 	bl	80026b4 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cba:	f7fb fcfb 	bl	80026b4 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e064      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0f0      	beq.n	8006cba <HAL_RCC_OscConfig+0x41e>
 8006cd8:	e05c      	b.n	8006d94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cda:	4b10      	ldr	r3, [pc, #64]	; (8006d1c <HAL_RCC_OscConfig+0x480>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fb fce8 	bl	80026b4 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce8:	f7fb fce4 	bl	80026b4 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e04d      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_RCC_OscConfig+0x478>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x44c>
 8006d06:	e045      	b.n	8006d94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e040      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
 8006d14:	40023800 	.word	0x40023800
 8006d18:	40007000 	.word	0x40007000
 8006d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d20:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <HAL_RCC_OscConfig+0x504>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d030      	beq.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d129      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d122      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d50:	4013      	ands	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d119      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10f      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40023800 	.word	0x40023800

08006da4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e10c      	b.n	8006fe0 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fb7e 	bl	80014dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f903 	bl	8006ff4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f938 	bl	8007064 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d030      	beq.n	8006e5e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f957 	bl	80070b0 <SAI_GetInputClock>
 8006e02:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	025b      	lsls	r3, r3, #9
 8006e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a72      	ldr	r2, [pc, #456]	; (8006fe8 <HAL_SAI_Init+0x244>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	08da      	lsrs	r2, r3, #3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	4b6e      	ldr	r3, [pc, #440]	; (8006fe8 <HAL_SAI_Init+0x244>)
 8006e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e32:	08da      	lsrs	r2, r3, #3
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	1aca      	subs	r2, r1, r3
 8006e3e:	2a08      	cmp	r2, #8
 8006e40:	d904      	bls.n	8006e4c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d104      	bne.n	8006e5e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	085a      	lsrs	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_SAI_Init+0xca>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d109      	bne.n	8006e82 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_SAI_Init+0xd6>
 8006e76:	2300      	movs	r3, #0
 8006e78:	e001      	b.n	8006e7e <HAL_SAI_Init+0xda>
 8006e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e008      	b.n	8006e94 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d102      	bne.n	8006e90 <HAL_SAI_Init+0xec>
 8006e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8e:	e000      	b.n	8006e92 <HAL_SAI_Init+0xee>
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d811      	bhi.n	8006ec0 <HAL_SAI_Init+0x11c>
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d20b      	bcs.n	8006eb8 <HAL_SAI_Init+0x114>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <HAL_SAI_Init+0x106>
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d003      	beq.n	8006eb0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8006ea8:	e00a      	b.n	8006ec0 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
    break;
 8006eae:	e008      	b.n	8006ec2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb4:	613b      	str	r3, [r7, #16]
    break;
 8006eb6:	e004      	b.n	8006ec2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ebc:	613b      	str	r3, [r7, #16]
    break;
 8006ebe:	e000      	b.n	8006ec2 <HAL_SAI_Init+0x11e>
      break;
 8006ec0:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	4b47      	ldr	r3, [pc, #284]	; (8006fec <HAL_SAI_Init+0x248>)
 8006ece:	400b      	ands	r3, r1
 8006ed0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ee6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	431a      	orrs	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006efa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006f06:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	051b      	lsls	r3, r3, #20
 8006f0e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006f26:	f023 030f 	bic.w	r3, r3, #15
 8006f2a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6899      	ldr	r1, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <HAL_SAI_Init+0x24c>)
 8006f56:	400b      	ands	r3, r1
 8006f58:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6899      	ldr	r1, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006f6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8006f70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8006f76:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006f80:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68d9      	ldr	r1, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006f98:	400b      	ands	r3, r1
 8006f9a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68d9      	ldr	r1, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006faa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006fb2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	cccccccd 	.word	0xcccccccd
 8006fec:	ff05c010 	.word	0xff05c010
 8006ff0:	fff88000 	.word	0xfff88000

08006ff4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006ffc:	4b17      	ldr	r3, [pc, #92]	; (800705c <SAI_Disable+0x68>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a17      	ldr	r2, [pc, #92]	; (8007060 <SAI_Disable+0x6c>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	0b1b      	lsrs	r3, r3, #12
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800701e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	1e5a      	subs	r2, r3, #1
 8007024:	60fa      	str	r2, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	72fb      	strb	r3, [r7, #11]
      break;
 800703e:	e006      	b.n	800704e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e8      	bne.n	8007020 <SAI_Disable+0x2c>

  return status;
 800704e:	7afb      	ldrb	r3, [r7, #11]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000004 	.word	0x20000004
 8007060:	95cbec1b 	.word	0x95cbec1b

08007064 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d00c      	beq.n	800708e <SAI_BlockSynchroConfig+0x2a>
 8007074:	2b02      	cmp	r3, #2
 8007076:	d80d      	bhi.n	8007094 <SAI_BlockSynchroConfig+0x30>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <SAI_BlockSynchroConfig+0x1e>
 800707c:	2b01      	cmp	r3, #1
 800707e:	d003      	beq.n	8007088 <SAI_BlockSynchroConfig+0x24>
 8007080:	e008      	b.n	8007094 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
      break;
 8007086:	e008      	b.n	800709a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007088:	2310      	movs	r3, #16
 800708a:	60fb      	str	r3, [r7, #12]
      break;
 800708c:	e005      	b.n	800709a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800708e:	2320      	movs	r3, #32
 8007090:	60fb      	str	r3, [r7, #12]
      break;
 8007092:	e002      	b.n	800709a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
      break;
 8007098:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <SAI_BlockSynchroConfig+0x48>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40015800 	.word	0x40015800

080070b0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a44      	ldr	r2, [pc, #272]	; (80071dc <SAI_GetInputClock+0x12c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10b      	bne.n	80070e6 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80070ce:	4b44      	ldr	r3, [pc, #272]	; (80071e0 <SAI_GetInputClock+0x130>)
 80070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	4940      	ldr	r1, [pc, #256]	; (80071e0 <SAI_GetInputClock+0x130>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80070e4:	e00b      	b.n	80070fe <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80070e6:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <SAI_GetInputClock+0x130>)
 80070e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	493a      	ldr	r1, [pc, #232]	; (80071e0 <SAI_GetInputClock+0x130>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80070fe:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <SAI_GetInputClock+0x130>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800710a:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <SAI_GetInputClock+0x130>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007112:	4a34      	ldr	r2, [pc, #208]	; (80071e4 <SAI_GetInputClock+0x134>)
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	e007      	b.n	800712c <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800711c:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <SAI_GetInputClock+0x130>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007124:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <SAI_GetInputClock+0x138>)
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d121      	bne.n	8007178 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007134:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <SAI_GetInputClock+0x130>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713a:	0e1b      	lsrs	r3, r3, #24
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <SAI_GetInputClock+0x130>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	099b      	lsrs	r3, r3, #6
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	fb03 f202 	mul.w	r2, r3, r2
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <SAI_GetInputClock+0x130>)
 800715e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	fbb2 f3f3 	udiv	r3, r2, r3
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e02a      	b.n	80071ce <SAI_GetInputClock+0x11e>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007180:	d120      	bne.n	80071c4 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007182:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <SAI_GetInputClock+0x130>)
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	0e1b      	lsrs	r3, r3, #24
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007190:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <SAI_GetInputClock+0x130>)
 8007192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	fb03 f202 	mul.w	r2, r3, r2
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80071aa:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <SAI_GetInputClock+0x130>)
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	e004      	b.n	80071ce <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <SAI_GetInputClock+0x13c>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <SAI_GetInputClock+0x140>)
 80071cc:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80071ce:	697b      	ldr	r3, [r7, #20]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40015804 	.word	0x40015804
 80071e0:	40023800 	.word	0x40023800
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	007a1200 	.word	0x007a1200
 80071ec:	4247015c 	.word	0x4247015c
 80071f0:	00bb8000 	.word	0x00bb8000

080071f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e022      	b.n	800724c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7fa f9df 	bl	80015dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2203      	movs	r2, #3
 8007222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f814 	bl	8007254 <HAL_SD_InitCard>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e00a      	b.n	800724c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007254:	b5b0      	push	{r4, r5, r7, lr}
 8007256:	b08e      	sub	sp, #56	; 0x38
 8007258:	af04      	add	r7, sp, #16
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800725c:	2300      	movs	r3, #0
 800725e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800726c:	2300      	movs	r3, #0
 800726e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007270:	2376      	movs	r3, #118	; 0x76
 8007272:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681d      	ldr	r5, [r3, #0]
 8007278:	466c      	mov	r4, sp
 800727a:	f107 0314 	add.w	r3, r7, #20
 800727e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800728c:	4628      	mov	r0, r5
 800728e:	f002 fa79 	bl	8009784 <SDIO_Init>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e04f      	b.n	8007344 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80072a4:	4b29      	ldr	r3, [pc, #164]	; (800734c <HAL_SD_InitCard+0xf8>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f002 fab1 	bl	8009816 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80072b4:	4b25      	ldr	r3, [pc, #148]	; (800734c <HAL_SD_InitCard+0xf8>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80072ba:	2002      	movs	r0, #2
 80072bc:	f7fb fa06 	bl	80026cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 ff03 	bl	80080cc <SD_PowerON>
 80072c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02e      	b.n	8007344 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fe22 	bl	8007f30 <SD_InitCard>
 80072ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e01b      	b.n	8007344 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007314:	4618      	mov	r0, r3
 8007316:	f002 fb10 	bl	800993a <SDMMC_CmdBlockLength>
 800731a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00f      	beq.n	8007342 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <HAL_SD_InitCard+0xfc>)
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3728      	adds	r7, #40	; 0x28
 8007348:	46bd      	mov	sp, r7
 800734a:	bdb0      	pop	{r4, r5, r7, pc}
 800734c:	422580a0 	.word	0x422580a0
 8007350:	004005ff 	.word	0x004005ff

08007354 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b092      	sub	sp, #72	; 0x48
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007362:	f7fb f9a7 	bl	80026b4 <HAL_GetTick>
 8007366:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e1bd      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	f040 81b0 	bne.w	80076f4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800739a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	441a      	add	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d907      	bls.n	80073b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e1a4      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2203      	movs	r2, #3
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d002      	beq.n	80073d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295
 80073da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80073e2:	2390      	movs	r3, #144	; 0x90
 80073e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80073e6:	2302      	movs	r3, #2
 80073e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80073ee:	2301      	movs	r3, #1
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f107 0214 	add.w	r2, r7, #20
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f002 fa70 	bl	80098e2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d90a      	bls.n	800741e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2202      	movs	r2, #2
 800740c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007414:	4618      	mov	r0, r3
 8007416:	f002 fad4 	bl	80099c2 <SDMMC_CmdReadMultiBlock>
 800741a:	6478      	str	r0, [r7, #68]	; 0x44
 800741c:	e009      	b.n	8007432 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800742a:	4618      	mov	r0, r3
 800742c:	f002 faa7 	bl	800997e <SDMMC_CmdReadSingleBlock>
 8007430:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a7a      	ldr	r2, [pc, #488]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007446:	431a      	orrs	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e151      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007462:	e061      	b.n	8007528 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03c      	beq.n	80074ec <HAL_SD_ReadBlocks+0x198>
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d039      	beq.n	80074ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007478:	2300      	movs	r3, #0
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
 800747c:	e033      	b.n	80074e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f002 f9a9 	bl	80097da <SDIO_ReadFIFO>
 8007488:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	3301      	adds	r3, #1
 8007496:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	3b01      	subs	r3, #1
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	3301      	adds	r3, #1
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	3b01      	subs	r3, #1
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	3301      	adds	r3, #1
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	3b01      	subs	r3, #1
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	0e1b      	lsrs	r3, r3, #24
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	3301      	adds	r3, #1
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	3b01      	subs	r3, #1
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80074e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e2:	3301      	adds	r3, #1
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	2b07      	cmp	r3, #7
 80074ea:	d9c8      	bls.n	800747e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80074ec:	f7fb f8e2 	bl	80026b4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d902      	bls.n	8007502 <HAL_SD_ReadBlocks+0x1ae>
 80074fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d112      	bne.n	8007528 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a48      	ldr	r2, [pc, #288]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 8007508:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e0ec      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007532:	2b00      	cmp	r3, #0
 8007534:	d096      	beq.n	8007464 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007540:	2b00      	cmp	r3, #0
 8007542:	d022      	beq.n	800758a <HAL_SD_ReadBlocks+0x236>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d91f      	bls.n	800758a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754e:	2b03      	cmp	r3, #3
 8007550:	d01b      	beq.n	800758a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f002 fa9a 	bl	8009a90 <SDMMC_CmdStopTransfer>
 800755c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800755e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007560:	2b00      	cmp	r3, #0
 8007562:	d012      	beq.n	800758a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2f      	ldr	r2, [pc, #188]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007572:	431a      	orrs	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e0bb      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a22      	ldr	r2, [pc, #136]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	f043 0208 	orr.w	r2, r3, #8
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e0a1      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d012      	beq.n	80075f2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a15      	ldr	r2, [pc, #84]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	f043 0202 	orr.w	r2, r3, #2
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e087      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d064      	beq.n	80076ca <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a08      	ldr	r2, [pc, #32]	; (8007628 <HAL_SD_ReadBlocks+0x2d4>)
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e06d      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
 8007626:	bf00      	nop
 8007628:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f002 f8d2 	bl	80097da <SDIO_ReadFIFO>
 8007636:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	3301      	adds	r3, #1
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	3b01      	subs	r3, #1
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007654:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	3301      	adds	r3, #1
 800765a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800765c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765e:	3b01      	subs	r3, #1
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	b2da      	uxtb	r2, r3
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766e:	3301      	adds	r3, #1
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007674:	3b01      	subs	r3, #1
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	0e1b      	lsrs	r3, r3, #24
 800767c:	b2da      	uxtb	r2, r3
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	3301      	adds	r3, #1
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	3b01      	subs	r3, #1
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800768e:	f7fb f811 	bl	80026b4 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800769a:	429a      	cmp	r2, r3
 800769c:	d902      	bls.n	80076a4 <HAL_SD_ReadBlocks+0x350>
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d112      	bne.n	80076ca <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_SD_ReadBlocks+0x3b8>)
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e01b      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SD_ReadBlocks+0x38a>
 80076d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1a6      	bne.n	800762c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80076e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e006      	b.n	8007702 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3748      	adds	r7, #72	; 0x48
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	004005ff 	.word	0x004005ff

08007710 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b092      	sub	sp, #72	; 0x48
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800771e:	f7fa ffc9 	bl	80026b4 <HAL_GetTick>
 8007722:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d107      	bne.n	8007742 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e165      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	f040 8158 	bne.w	8007a00 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	441a      	add	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007760:	429a      	cmp	r2, r3
 8007762:	d907      	bls.n	8007774 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e14c      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2203      	movs	r2, #3
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2200      	movs	r2, #0
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007788:	2b01      	cmp	r3, #1
 800778a:	d002      	beq.n	8007792 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	025b      	lsls	r3, r3, #9
 8007790:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295
 8007796:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	025b      	lsls	r3, r3, #9
 800779c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800779e:	2390      	movs	r3, #144	; 0x90
 80077a0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f107 0218 	add.w	r2, r7, #24
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f002 f892 	bl	80098e2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d90a      	bls.n	80077da <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 f93a 	bl	8009a4a <SDMMC_CmdWriteMultiBlock>
 80077d6:	6478      	str	r0, [r7, #68]	; 0x44
 80077d8:	e009      	b.n	80077ee <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2210      	movs	r2, #16
 80077de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077e6:	4618      	mov	r0, r3
 80077e8:	f002 f90d 	bl	8009a06 <SDMMC_CmdWriteSingleBlock>
 80077ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a87      	ldr	r2, [pc, #540]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007802:	431a      	orrs	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0f9      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800781e:	e065      	b.n	80078ec <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d040      	beq.n	80078b0 <HAL_SD_WriteBlocks+0x1a0>
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d03d      	beq.n	80078b0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007834:	2300      	movs	r3, #0
 8007836:	643b      	str	r3, [r7, #64]	; 0x40
 8007838:	e037      	b.n	80078aa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	3301      	adds	r3, #1
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007848:	3b01      	subs	r3, #1
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	021a      	lsls	r2, r3, #8
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	3301      	adds	r3, #1
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	3b01      	subs	r3, #1
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	041a      	lsls	r2, r3, #16
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	3301      	adds	r3, #1
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007878:	3b01      	subs	r3, #1
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	061a      	lsls	r2, r3, #24
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	3301      	adds	r3, #1
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800788e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007890:	3b01      	subs	r3, #1
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f107 0214 	add.w	r2, r7, #20
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 ffa8 	bl	80097f4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	3301      	adds	r3, #1
 80078a8:	643b      	str	r3, [r7, #64]	; 0x40
 80078aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ac:	2b07      	cmp	r3, #7
 80078ae:	d9c4      	bls.n	800783a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80078b0:	f7fa ff00 	bl	80026b4 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078bc:	429a      	cmp	r2, r3
 80078be:	d902      	bls.n	80078c6 <HAL_SD_WriteBlocks+0x1b6>
 80078c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d112      	bne.n	80078ec <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a53      	ldr	r2, [pc, #332]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e090      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d092      	beq.n	8007820 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d022      	beq.n	800794e <HAL_SD_WriteBlocks+0x23e>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d91f      	bls.n	800794e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007912:	2b03      	cmp	r3, #3
 8007914:	d01b      	beq.n	800794e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f002 f8b8 	bl	8009a90 <SDMMC_CmdStopTransfer>
 8007920:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007924:	2b00      	cmp	r3, #0
 8007926:	d012      	beq.n	800794e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3a      	ldr	r2, [pc, #232]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007936:	431a      	orrs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e05f      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d012      	beq.n	8007982 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2d      	ldr	r2, [pc, #180]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	f043 0208 	orr.w	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e045      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d012      	beq.n	80079b6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f043 0202 	orr.w	r2, r3, #2
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e02b      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d012      	beq.n	80079ea <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <HAL_SD_WriteBlocks+0x308>)
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	f043 0210 	orr.w	r2, r3, #16
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e011      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e006      	b.n	8007a0e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3748      	adds	r7, #72	; 0x48
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	004005ff 	.word	0x004005ff

08007a1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a2a:	0f9b      	lsrs	r3, r3, #30
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a36:	0e9b      	lsrs	r3, r3, #26
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5a:	0c1b      	lsrs	r3, r3, #16
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7c:	0d1b      	lsrs	r3, r3, #20
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9a:	0bdb      	lsrs	r3, r3, #15
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aac:	0b9b      	lsrs	r3, r3, #14
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007abe:	0b5b      	lsrs	r3, r3, #13
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad0:	0b1b      	lsrs	r3, r3, #12
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d163      	bne.n	8007bb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af0:	009a      	lsls	r2, r3, #2
 8007af2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007af6:	4013      	ands	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007afc:	0f92      	lsrs	r2, r2, #30
 8007afe:	431a      	orrs	r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b08:	0edb      	lsrs	r3, r3, #27
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1a:	0e1b      	lsrs	r3, r3, #24
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b2c:	0d5b      	lsrs	r3, r3, #21
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3e:	0c9b      	lsrs	r3, r3, #18
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b50:	0bdb      	lsrs	r3, r3, #15
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	7e1b      	ldrb	r3, [r3, #24]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	3302      	adds	r3, #2
 8007b74:	2201      	movs	r2, #1
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b7e:	fb03 f202 	mul.w	r2, r3, r2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	7a1b      	ldrb	r3, [r3, #8]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	2201      	movs	r2, #1
 8007b92:	409a      	lsls	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007ba0:	0a52      	lsrs	r2, r2, #9
 8007ba2:	fb03 f202 	mul.w	r2, r3, r2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	661a      	str	r2, [r3, #96]	; 0x60
 8007bb2:	e031      	b.n	8007c18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d11d      	bne.n	8007bf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bca:	0c1b      	lsrs	r3, r3, #16
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	029a      	lsls	r2, r3, #10
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	661a      	str	r2, [r3, #96]	; 0x60
 8007bf6:	e00f      	b.n	8007c18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a58      	ldr	r2, [pc, #352]	; (8007d60 <HAL_SD_GetCardCSD+0x344>)
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e09d      	b.n	8007d54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1c:	0b9b      	lsrs	r3, r3, #14
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2e:	09db      	lsrs	r3, r3, #7
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	0fdb      	lsrs	r3, r3, #31
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5c:	0f5b      	lsrs	r3, r3, #29
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	0e9b      	lsrs	r3, r3, #26
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c80:	0d9b      	lsrs	r3, r3, #22
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	0d5b      	lsrs	r3, r3, #21
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	0c1b      	lsrs	r3, r3, #16
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	0bdb      	lsrs	r3, r3, #15
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	0b9b      	lsrs	r3, r3, #14
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	0b5b      	lsrs	r3, r3, #13
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	0b1b      	lsrs	r3, r3, #12
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	0a9b      	lsrs	r3, r3, #10
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	004005ff 	.word	0x004005ff

08007d64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007dbc:	b5b0      	push	{r4, r5, r7, lr}
 8007dbe:	b08e      	sub	sp, #56	; 0x38
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d02e      	beq.n	8007e3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de2:	d106      	bne.n	8007df2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
 8007df0:	e029      	b.n	8007e46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d10a      	bne.n	8007e10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa1c 	bl	8008238 <SD_WideBus_Enable>
 8007e00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e0e:	e01a      	b.n	8007e46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa59 	bl	80082ce <SD_WideBus_Disable>
 8007e1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
 8007e2a:	e00c      	b.n	8007e46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38
 8007e38:	e005      	b.n	8007e46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <HAL_SD_ConfigWideBusOperation+0x130>)
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e64:	e01f      	b.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681d      	ldr	r5, [r3, #0]
 8007e8c:	466c      	mov	r4, sp
 8007e8e:	f107 0314 	add.w	r3, r7, #20
 8007e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f001 fc6f 	bl	8009784 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fd43 	bl	800993a <SDMMC_CmdBlockLength>
 8007eb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00c      	beq.n	8007ed6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <HAL_SD_ConfigWideBusOperation+0x130>)
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3728      	adds	r7, #40	; 0x28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8007eea:	bf00      	nop
 8007eec:	004005ff 	.word	0x004005ff

08007ef0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007efc:	f107 030c 	add.w	r3, r7, #12
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f970 	bl	80081e8 <SD_SendStatus>
 8007f08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0a5b      	lsrs	r3, r3, #9
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f26:	693b      	ldr	r3, [r7, #16]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f30:	b5b0      	push	{r4, r5, r7, lr}
 8007f32:	b094      	sub	sp, #80	; 0x50
 8007f34:	af04      	add	r7, sp, #16
 8007f36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fc76 	bl	8009832 <SDIO_GetPowerState>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f50:	e0b8      	b.n	80080c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d02f      	beq.n	8007fba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fea0 	bl	8009ca4 <SDMMC_CmdSendCID>
 8007f64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <SD_InitCard+0x40>
    {
      return errorstate;
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	e0a9      	b.n	80080c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 fca0 	bl	80098bc <SDIO_GetResponse>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2104      	movs	r1, #4
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fc97 	bl	80098bc <SDIO_GetResponse>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2108      	movs	r1, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 fc8e 	bl	80098bc <SDIO_GetResponse>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	210c      	movs	r1, #12
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fc85 	bl	80098bc <SDIO_GetResponse>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d00d      	beq.n	8007fde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f107 020e 	add.w	r2, r7, #14
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fea6 	bl	8009d1e <SDMMC_CmdSetRelAdd>
 8007fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <SD_InitCard+0xae>
    {
      return errorstate;
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	e072      	b.n	80080c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d036      	beq.n	8008054 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007fe6:	89fb      	ldrh	r3, [r7, #14]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f001 fe70 	bl	8009ce0 <SDMMC_CmdSendCSD>
 8008000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	e05b      	b.n	80080c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fc52 	bl	80098bc <SDIO_GetResponse>
 8008018:	4602      	mov	r2, r0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2104      	movs	r1, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fc49 	bl	80098bc <SDIO_GetResponse>
 800802a:	4602      	mov	r2, r0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2108      	movs	r1, #8
 8008036:	4618      	mov	r0, r3
 8008038:	f001 fc40 	bl	80098bc <SDIO_GetResponse>
 800803c:	4602      	mov	r2, r0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	210c      	movs	r1, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fc37 	bl	80098bc <SDIO_GetResponse>
 800804e:	4602      	mov	r2, r0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2104      	movs	r1, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fc2e 	bl	80098bc <SDIO_GetResponse>
 8008060:	4603      	mov	r3, r0
 8008062:	0d1a      	lsrs	r2, r3, #20
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008068:	f107 0310 	add.w	r3, r7, #16
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fcd4 	bl	8007a1c <HAL_SD_GetCardCSD>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800807a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800807e:	e021      	b.n	80080c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	041b      	lsls	r3, r3, #16
 800808a:	2200      	movs	r2, #0
 800808c:	461c      	mov	r4, r3
 800808e:	4615      	mov	r5, r2
 8008090:	4622      	mov	r2, r4
 8008092:	462b      	mov	r3, r5
 8008094:	4608      	mov	r0, r1
 8008096:	f001 fd1d 	bl	8009ad4 <SDMMC_CmdSelDesel>
 800809a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <SD_InitCard+0x176>
  {
    return errorstate;
 80080a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a4:	e00e      	b.n	80080c4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681d      	ldr	r5, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	466c      	mov	r4, sp
 80080ae:	f103 0210 	add.w	r2, r3, #16
 80080b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80080b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080b8:	3304      	adds	r3, #4
 80080ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080bc:	4628      	mov	r0, r5
 80080be:	f001 fb61 	bl	8009784 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3740      	adds	r7, #64	; 0x40
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bdb0      	pop	{r4, r5, r7, pc}

080080cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fd18 	bl	8009b1a <SDMMC_CmdGoIdleState>
 80080ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	e072      	b.n	80081dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fd2b 	bl	8009b56 <SDMMC_CmdOperCond>
 8008100:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fd01 	bl	8009b1a <SDMMC_CmdGoIdleState>
 8008118:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	e05b      	b.n	80081dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812e:	2b01      	cmp	r3, #1
 8008130:	d137      	bne.n	80081a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fd2b 	bl	8009b94 <SDMMC_CmdAppCommand>
 800813e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d02d      	beq.n	80081a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800814a:	e047      	b.n	80081dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fd1e 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <SD_PowerON+0x98>
    {
      return errorstate;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	e03b      	b.n	80081dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	491e      	ldr	r1, [pc, #120]	; (80081e4 <SD_PowerON+0x118>)
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fd34 	bl	8009bd8 <SDMMC_CmdAppOperCommand>
 8008170:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800817c:	e02e      	b.n	80081dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fb99 	bl	80098bc <SDIO_GetResponse>
 800818a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	0fdb      	lsrs	r3, r3, #31
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <SD_PowerON+0xcc>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <SD_PowerON+0xce>
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]

    count++;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3301      	adds	r3, #1
 80081a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d802      	bhi.n	80081b2 <SD_PowerON+0xe6>
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0cc      	beq.n	800814c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d902      	bls.n	80081c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80081bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081c0:	e00c      	b.n	80081dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	645a      	str	r2, [r3, #68]	; 0x44
 80081d2:	e002      	b.n	80081da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	c1100000 	.word	0xc1100000

080081e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80081f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081fc:	e018      	b.n	8008230 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f001 fda8 	bl	8009d60 <SDMMC_CmdSendStatus>
 8008210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e009      	b.n	8008230 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fb4a 	bl	80098bc <SDIO_GetResponse>
 8008228:	4602      	mov	r2, r0
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	2300      	movs	r3, #0
 8008246:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fb34 	bl	80098bc <SDIO_GetResponse>
 8008254:	4603      	mov	r3, r0
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800825e:	d102      	bne.n	8008266 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008264:	e02f      	b.n	80082c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008266:	f107 030c 	add.w	r3, r7, #12
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f879 	bl	8008364 <SD_FindSCR>
 8008272:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	e023      	b.n	80082c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01c      	beq.n	80082c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f001 fc7d 	bl	8009b94 <SDMMC_CmdAppCommand>
 800829a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	e00f      	b.n	80082c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2102      	movs	r1, #2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fcb6 	bl	8009c1e <SDMMC_CmdBusWidth>
 80082b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	e003      	b.n	80082c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082be:	2300      	movs	r3, #0
 80082c0:	e001      	b.n	80082c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b086      	sub	sp, #24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 fae9 	bl	80098bc <SDIO_GetResponse>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f4:	d102      	bne.n	80082fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80082f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082fa:	e02f      	b.n	800835c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f82e 	bl	8008364 <SD_FindSCR>
 8008308:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	e023      	b.n	800835c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d01c      	beq.n	8008358 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f001 fc32 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008330:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	e00f      	b.n	800835c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fc6b 	bl	8009c1e <SDMMC_CmdBusWidth>
 8008348:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	e003      	b.n	800835c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	e001      	b.n	800835c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008358:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b08f      	sub	sp, #60	; 0x3c
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800836e:	f7fa f9a1 	bl	80026b4 <HAL_GetTick>
 8008372:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008378:	2300      	movs	r3, #0
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2108      	movs	r1, #8
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fad5 	bl	800993a <SDMMC_CmdBlockLength>
 8008390:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	e0b2      	b.n	8008502 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a4:	041b      	lsls	r3, r3, #16
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f001 fbf3 	bl	8009b94 <SDMMC_CmdAppCommand>
 80083ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	e0a3      	b.n	8008502 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80083c0:	2308      	movs	r3, #8
 80083c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80083c4:	2330      	movs	r3, #48	; 0x30
 80083c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083c8:	2302      	movs	r3, #2
 80083ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f107 0210 	add.w	r2, r7, #16
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fa7f 	bl	80098e2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fc3a 	bl	8009c62 <SDMMC_CmdSendSCR>
 80083ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d02a      	beq.n	800844c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	e083      	b.n	8008502 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00f      	beq.n	8008428 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6819      	ldr	r1, [r3, #0]
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	f107 0208 	add.w	r2, r7, #8
 8008414:	18d4      	adds	r4, r2, r3
 8008416:	4608      	mov	r0, r1
 8008418:	f001 f9df 	bl	80097da <SDIO_ReadFIFO>
 800841c:	4603      	mov	r3, r0
 800841e:	6023      	str	r3, [r4, #0]
      index++;
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008422:	3301      	adds	r3, #1
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
 8008426:	e006      	b.n	8008436 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d012      	beq.n	800845c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008436:	f7fa f93d 	bl	80026b4 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d102      	bne.n	800844c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800844a:	e05a      	b.n	8008502 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0cf      	beq.n	80083fa <SD_FindSCR+0x96>
 800845a:	e000      	b.n	800845e <SD_FindSCR+0xfa>
      break;
 800845c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2208      	movs	r2, #8
 8008472:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008474:	2308      	movs	r3, #8
 8008476:	e044      	b.n	8008502 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d005      	beq.n	8008492 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2202      	movs	r2, #2
 800848c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800848e:	2302      	movs	r3, #2
 8008490:	e037      	b.n	8008502 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2220      	movs	r2, #32
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80084a8:	2320      	movs	r3, #32
 80084aa:	e02a      	b.n	8008502 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	061a      	lsls	r2, r3, #24
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0e1b      	lsrs	r3, r3, #24
 80084d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	601a      	str	r2, [r3, #0]
    scr++;
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	3304      	adds	r3, #4
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	061a      	lsls	r2, r3, #24
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	0e1b      	lsrs	r3, r3, #24
 80084fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	373c      	adds	r7, #60	; 0x3c
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}

0800850a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e025      	b.n	800856a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7f8 fab6 	bl	8000aa4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f001 f854 	bl	80095f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	461a      	mov	r2, r3
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	f001 f8a9 	bl	80096b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e041      	b.n	8008608 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7f9 fa7d 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f000 fa95 	bl	8008ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b01      	cmp	r3, #1
 8008622:	d001      	beq.n	8008628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e04e      	b.n	80086c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d022      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008652:	d01d      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1f      	ldr	r2, [pc, #124]	; (80086d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d018      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <HAL_TIM_Base_Start_IT+0xcc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d013      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00e      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d009      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a19      	ldr	r2, [pc, #100]	; (80086e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d004      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x80>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_TIM_Base_Start_IT+0xdc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d111      	bne.n	80086b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b06      	cmp	r3, #6
 80086a0:	d010      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b2:	e007      	b.n	80086c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40000c00 	.word	0x40000c00
 80086e4:	40010400 	.word	0x40010400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40001800 	.word	0x40001800

080086f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b02      	cmp	r3, #2
 8008704:	d122      	bne.n	800874c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b02      	cmp	r3, #2
 8008712:	d11b      	bne.n	800874c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f06f 0202 	mvn.w	r2, #2
 800871c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f9b5 	bl	8008aa2 <HAL_TIM_IC_CaptureCallback>
 8008738:	e005      	b.n	8008746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9a7 	bl	8008a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f9b8 	bl	8008ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b04      	cmp	r3, #4
 8008758:	d122      	bne.n	80087a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b04      	cmp	r3, #4
 8008766:	d11b      	bne.n	80087a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f06f 0204 	mvn.w	r2, #4
 8008770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2202      	movs	r2, #2
 8008776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f98b 	bl	8008aa2 <HAL_TIM_IC_CaptureCallback>
 800878c:	e005      	b.n	800879a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f97d 	bl	8008a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f98e 	bl	8008ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d122      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d11b      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f06f 0208 	mvn.w	r2, #8
 80087c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2204      	movs	r2, #4
 80087ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f961 	bl	8008aa2 <HAL_TIM_IC_CaptureCallback>
 80087e0:	e005      	b.n	80087ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f953 	bl	8008a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f964 	bl	8008ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d122      	bne.n	8008848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b10      	cmp	r3, #16
 800880e:	d11b      	bne.n	8008848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f06f 0210 	mvn.w	r2, #16
 8008818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2208      	movs	r2, #8
 800881e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f937 	bl	8008aa2 <HAL_TIM_IC_CaptureCallback>
 8008834:	e005      	b.n	8008842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f929 	bl	8008a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f93a 	bl	8008ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b01      	cmp	r3, #1
 8008854:	d10e      	bne.n	8008874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b01      	cmp	r3, #1
 8008862:	d107      	bne.n	8008874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f06f 0201 	mvn.w	r2, #1
 800886c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7f8 fd18 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b80      	cmp	r3, #128	; 0x80
 8008880:	d10e      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b80      	cmp	r3, #128	; 0x80
 800888e:	d107      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fae0 	bl	8008e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d10e      	bne.n	80088cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b40      	cmp	r3, #64	; 0x40
 80088ba:	d107      	bne.n	80088cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8ff 	bl	8008aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d10e      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	d107      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0220 	mvn.w	r2, #32
 80088f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 faaa 	bl	8008e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_TIM_ConfigClockSource+0x1c>
 8008918:	2302      	movs	r3, #2
 800891a:	e0b4      	b.n	8008a86 <HAL_TIM_ConfigClockSource+0x186>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800893a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008954:	d03e      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0xd4>
 8008956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800895a:	f200 8087 	bhi.w	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	f000 8086 	beq.w	8008a72 <HAL_TIM_ConfigClockSource+0x172>
 8008966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896a:	d87f      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b70      	cmp	r3, #112	; 0x70
 800896e:	d01a      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0xa6>
 8008970:	2b70      	cmp	r3, #112	; 0x70
 8008972:	d87b      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b60      	cmp	r3, #96	; 0x60
 8008976:	d050      	beq.n	8008a1a <HAL_TIM_ConfigClockSource+0x11a>
 8008978:	2b60      	cmp	r3, #96	; 0x60
 800897a:	d877      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 800897c:	2b50      	cmp	r3, #80	; 0x50
 800897e:	d03c      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0xfa>
 8008980:	2b50      	cmp	r3, #80	; 0x50
 8008982:	d873      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	d058      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0x13a>
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d86f      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b30      	cmp	r3, #48	; 0x30
 800898e:	d064      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x15a>
 8008990:	2b30      	cmp	r3, #48	; 0x30
 8008992:	d86b      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 8008994:	2b20      	cmp	r3, #32
 8008996:	d060      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x15a>
 8008998:	2b20      	cmp	r3, #32
 800899a:	d867      	bhi.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05c      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x15a>
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d05a      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x15a>
 80089a4:	e062      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6899      	ldr	r1, [r3, #8]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f000 f9ad 	bl	8008d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	609a      	str	r2, [r3, #8]
      break;
 80089d2:	e04f      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	6899      	ldr	r1, [r3, #8]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f000 f996 	bl	8008d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089f6:	609a      	str	r2, [r3, #8]
      break;
 80089f8:	e03c      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6818      	ldr	r0, [r3, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	6859      	ldr	r1, [r3, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f000 f90a 	bl	8008c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2150      	movs	r1, #80	; 0x50
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f963 	bl	8008cde <TIM_ITRx_SetConfig>
      break;
 8008a18:	e02c      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6859      	ldr	r1, [r3, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f000 f929 	bl	8008c7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2160      	movs	r1, #96	; 0x60
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f953 	bl	8008cde <TIM_ITRx_SetConfig>
      break;
 8008a38:	e01c      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f000 f8ea 	bl	8008c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2140      	movs	r1, #64	; 0x40
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f943 	bl	8008cde <TIM_ITRx_SetConfig>
      break;
 8008a58:	e00c      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f000 f93a 	bl	8008cde <TIM_ITRx_SetConfig>
      break;
 8008a6a:	e003      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a70:	e000      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
	...

08008ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a40      	ldr	r2, [pc, #256]	; (8008bf4 <TIM_Base_SetConfig+0x114>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d013      	beq.n	8008b20 <TIM_Base_SetConfig+0x40>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afe:	d00f      	beq.n	8008b20 <TIM_Base_SetConfig+0x40>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a3d      	ldr	r2, [pc, #244]	; (8008bf8 <TIM_Base_SetConfig+0x118>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00b      	beq.n	8008b20 <TIM_Base_SetConfig+0x40>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a3c      	ldr	r2, [pc, #240]	; (8008bfc <TIM_Base_SetConfig+0x11c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d007      	beq.n	8008b20 <TIM_Base_SetConfig+0x40>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a3b      	ldr	r2, [pc, #236]	; (8008c00 <TIM_Base_SetConfig+0x120>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a3a      	ldr	r2, [pc, #232]	; (8008c04 <TIM_Base_SetConfig+0x124>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d108      	bne.n	8008b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a2f      	ldr	r2, [pc, #188]	; (8008bf4 <TIM_Base_SetConfig+0x114>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d02b      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b40:	d027      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <TIM_Base_SetConfig+0x118>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d023      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2b      	ldr	r2, [pc, #172]	; (8008bfc <TIM_Base_SetConfig+0x11c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d01f      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a2a      	ldr	r2, [pc, #168]	; (8008c00 <TIM_Base_SetConfig+0x120>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01b      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <TIM_Base_SetConfig+0x124>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d017      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a28      	ldr	r2, [pc, #160]	; (8008c08 <TIM_Base_SetConfig+0x128>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a27      	ldr	r2, [pc, #156]	; (8008c0c <TIM_Base_SetConfig+0x12c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00f      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a26      	ldr	r2, [pc, #152]	; (8008c10 <TIM_Base_SetConfig+0x130>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00b      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a25      	ldr	r2, [pc, #148]	; (8008c14 <TIM_Base_SetConfig+0x134>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d007      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a24      	ldr	r2, [pc, #144]	; (8008c18 <TIM_Base_SetConfig+0x138>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d003      	beq.n	8008b92 <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a23      	ldr	r2, [pc, #140]	; (8008c1c <TIM_Base_SetConfig+0x13c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d108      	bne.n	8008ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <TIM_Base_SetConfig+0x114>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_Base_SetConfig+0xf8>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a0c      	ldr	r2, [pc, #48]	; (8008c04 <TIM_Base_SetConfig+0x124>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d103      	bne.n	8008be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	615a      	str	r2, [r3, #20]
}
 8008be6:	bf00      	nop
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800
 8008c14:	40001800 	.word	0x40001800
 8008c18:	40001c00 	.word	0x40001c00
 8008c1c:	40002000 	.word	0x40002000

08008c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	f023 0201 	bic.w	r2, r3, #1
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f023 030a 	bic.w	r3, r3, #10
 8008c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b087      	sub	sp, #28
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f023 0210 	bic.w	r2, r3, #16
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	031b      	lsls	r3, r3, #12
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	f043 0307 	orr.w	r3, r3, #7
 8008d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	609a      	str	r2, [r3, #8]
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	021a      	lsls	r2, r3, #8
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	609a      	str	r2, [r3, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e05a      	b.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d022      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db8:	d01d      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d018      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a1b      	ldr	r2, [pc, #108]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d013      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a1a      	ldr	r2, [pc, #104]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00e      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a18      	ldr	r2, [pc, #96]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d009      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a17      	ldr	r2, [pc, #92]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d004      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a15      	ldr	r2, [pc, #84]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d10c      	bne.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40000c00 	.word	0x40000c00
 8008e40:	40010400 	.word	0x40010400
 8008e44:	40014000 	.word	0x40014000
 8008e48:	40001800 	.word	0x40001800

08008e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e03f      	b.n	8008f06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7f8 fe72 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2224      	movs	r2, #36	; 0x24
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f929 	bl	8009110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695a      	ldr	r2, [r3, #20]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b08a      	sub	sp, #40	; 0x28
 8008f12:	af02      	add	r7, sp, #8
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	603b      	str	r3, [r7, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d17c      	bne.n	8009028 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_UART_Transmit+0x2c>
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e075      	b.n	800902a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_UART_Transmit+0x3e>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e06e      	b.n	800902a <HAL_UART_Transmit+0x11c>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2221      	movs	r2, #33	; 0x21
 8008f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f62:	f7f9 fba7 	bl	80026b4 <HAL_GetTick>
 8008f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7c:	d108      	bne.n	8008f90 <HAL_UART_Transmit+0x82>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	e003      	b.n	8008f98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fa0:	e02a      	b.n	8008ff8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f840 	bl	8009032 <UART_WaitOnFlagUntilTimeout>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e036      	b.n	800902a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10b      	bne.n	8008fda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	61bb      	str	r3, [r7, #24]
 8008fd8:	e007      	b.n	8008fea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	781a      	ldrb	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1cf      	bne.n	8008fa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2200      	movs	r2, #0
 800900a:	2140      	movs	r1, #64	; 0x40
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f810 	bl	8009032 <UART_WaitOnFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e006      	b.n	800902a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	e000      	b.n	800902a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009028:	2302      	movs	r3, #2
  }
}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b090      	sub	sp, #64	; 0x40
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009042:	e050      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d04c      	beq.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800904c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <UART_WaitOnFlagUntilTimeout+0x30>
 8009052:	f7f9 fb2f 	bl	80026b4 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800905e:	429a      	cmp	r2, r3
 8009060:	d241      	bcs.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	330c      	adds	r3, #12
 8009080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009082:	637a      	str	r2, [r7, #52]	; 0x34
 8009084:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3314      	adds	r3, #20
 800909c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	613b      	str	r3, [r7, #16]
   return(result);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b6:	623a      	str	r2, [r7, #32]
 80090b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	69f9      	ldr	r1, [r7, #28]
 80090bc:	6a3a      	ldr	r2, [r7, #32]
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e00f      	b.n	8009106 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4013      	ands	r3, r2
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	bf0c      	ite	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	2300      	movne	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d09f      	beq.n	8009044 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3740      	adds	r7, #64	; 0x40
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009114:	b0c0      	sub	sp, #256	; 0x100
 8009116:	af00      	add	r7, sp, #0
 8009118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	ea40 0301 	orr.w	r3, r0, r1
 8009138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	431a      	orrs	r2, r3
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	431a      	orrs	r2, r3
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009168:	f021 010c 	bic.w	r1, r1, #12
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009176:	430b      	orrs	r3, r1
 8009178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918a:	6999      	ldr	r1, [r3, #24]
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	ea40 0301 	orr.w	r3, r0, r1
 8009196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b8f      	ldr	r3, [pc, #572]	; (80093dc <UART_SetConfig+0x2cc>)
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d005      	beq.n	80091b0 <UART_SetConfig+0xa0>
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b8d      	ldr	r3, [pc, #564]	; (80093e0 <UART_SetConfig+0x2d0>)
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d104      	bne.n	80091ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091b0:	f7fd f8f0 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 80091b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091b8:	e003      	b.n	80091c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091ba:	f7fd f8d7 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 80091be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091cc:	f040 810c 	bne.w	80093e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091e2:	4622      	mov	r2, r4
 80091e4:	462b      	mov	r3, r5
 80091e6:	1891      	adds	r1, r2, r2
 80091e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80091ea:	415b      	adcs	r3, r3
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091f2:	4621      	mov	r1, r4
 80091f4:	eb12 0801 	adds.w	r8, r2, r1
 80091f8:	4629      	mov	r1, r5
 80091fa:	eb43 0901 	adc.w	r9, r3, r1
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800920a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800920e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009212:	4690      	mov	r8, r2
 8009214:	4699      	mov	r9, r3
 8009216:	4623      	mov	r3, r4
 8009218:	eb18 0303 	adds.w	r3, r8, r3
 800921c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009220:	462b      	mov	r3, r5
 8009222:	eb49 0303 	adc.w	r3, r9, r3
 8009226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800923a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800923e:	460b      	mov	r3, r1
 8009240:	18db      	adds	r3, r3, r3
 8009242:	653b      	str	r3, [r7, #80]	; 0x50
 8009244:	4613      	mov	r3, r2
 8009246:	eb42 0303 	adc.w	r3, r2, r3
 800924a:	657b      	str	r3, [r7, #84]	; 0x54
 800924c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009254:	f7f6 ffce 	bl	80001f4 <__aeabi_uldivmod>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4b61      	ldr	r3, [pc, #388]	; (80093e4 <UART_SetConfig+0x2d4>)
 800925e:	fba3 2302 	umull	r2, r3, r3, r2
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	011c      	lsls	r4, r3, #4
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	1891      	adds	r1, r2, r2
 800927e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009280:	415b      	adcs	r3, r3
 8009282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009288:	4641      	mov	r1, r8
 800928a:	eb12 0a01 	adds.w	sl, r2, r1
 800928e:	4649      	mov	r1, r9
 8009290:	eb43 0b01 	adc.w	fp, r3, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092a8:	4692      	mov	sl, r2
 80092aa:	469b      	mov	fp, r3
 80092ac:	4643      	mov	r3, r8
 80092ae:	eb1a 0303 	adds.w	r3, sl, r3
 80092b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092b6:	464b      	mov	r3, r9
 80092b8:	eb4b 0303 	adc.w	r3, fp, r3
 80092bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092d4:	460b      	mov	r3, r1
 80092d6:	18db      	adds	r3, r3, r3
 80092d8:	643b      	str	r3, [r7, #64]	; 0x40
 80092da:	4613      	mov	r3, r2
 80092dc:	eb42 0303 	adc.w	r3, r2, r3
 80092e0:	647b      	str	r3, [r7, #68]	; 0x44
 80092e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092ea:	f7f6 ff83 	bl	80001f4 <__aeabi_uldivmod>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <UART_SetConfig+0x2d4>)
 80092f6:	fba3 2301 	umull	r2, r3, r3, r1
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	2264      	movs	r2, #100	; 0x64
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	1acb      	subs	r3, r1, r3
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800930a:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <UART_SetConfig+0x2d4>)
 800930c:	fba3 2302 	umull	r2, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009318:	441c      	add	r4, r3
 800931a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800931e:	2200      	movs	r2, #0
 8009320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800932c:	4642      	mov	r2, r8
 800932e:	464b      	mov	r3, r9
 8009330:	1891      	adds	r1, r2, r2
 8009332:	63b9      	str	r1, [r7, #56]	; 0x38
 8009334:	415b      	adcs	r3, r3
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800933c:	4641      	mov	r1, r8
 800933e:	1851      	adds	r1, r2, r1
 8009340:	6339      	str	r1, [r7, #48]	; 0x30
 8009342:	4649      	mov	r1, r9
 8009344:	414b      	adcs	r3, r1
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009354:	4659      	mov	r1, fp
 8009356:	00cb      	lsls	r3, r1, #3
 8009358:	4651      	mov	r1, sl
 800935a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935e:	4651      	mov	r1, sl
 8009360:	00ca      	lsls	r2, r1, #3
 8009362:	4610      	mov	r0, r2
 8009364:	4619      	mov	r1, r3
 8009366:	4603      	mov	r3, r0
 8009368:	4642      	mov	r2, r8
 800936a:	189b      	adds	r3, r3, r2
 800936c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009370:	464b      	mov	r3, r9
 8009372:	460a      	mov	r2, r1
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800938c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009390:	460b      	mov	r3, r1
 8009392:	18db      	adds	r3, r3, r3
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
 8009396:	4613      	mov	r3, r2
 8009398:	eb42 0303 	adc.w	r3, r2, r3
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800939e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093a6:	f7f6 ff25 	bl	80001f4 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <UART_SetConfig+0x2d4>)
 80093b0:	fba3 1302 	umull	r1, r3, r3, r2
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	2164      	movs	r1, #100	; 0x64
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	3332      	adds	r3, #50	; 0x32
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <UART_SetConfig+0x2d4>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	f003 0207 	and.w	r2, r3, #7
 80093ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4422      	add	r2, r4
 80093d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093d8:	e105      	b.n	80095e6 <UART_SetConfig+0x4d6>
 80093da:	bf00      	nop
 80093dc:	40011000 	.word	0x40011000
 80093e0:	40011400 	.word	0x40011400
 80093e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	1891      	adds	r1, r2, r2
 8009400:	6239      	str	r1, [r7, #32]
 8009402:	415b      	adcs	r3, r3
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
 8009406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800940a:	4641      	mov	r1, r8
 800940c:	1854      	adds	r4, r2, r1
 800940e:	4649      	mov	r1, r9
 8009410:	eb43 0501 	adc.w	r5, r3, r1
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	00eb      	lsls	r3, r5, #3
 800941e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009422:	00e2      	lsls	r2, r4, #3
 8009424:	4614      	mov	r4, r2
 8009426:	461d      	mov	r5, r3
 8009428:	4643      	mov	r3, r8
 800942a:	18e3      	adds	r3, r4, r3
 800942c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009430:	464b      	mov	r3, r9
 8009432:	eb45 0303 	adc.w	r3, r5, r3
 8009436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800943a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009456:	4629      	mov	r1, r5
 8009458:	008b      	lsls	r3, r1, #2
 800945a:	4621      	mov	r1, r4
 800945c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009460:	4621      	mov	r1, r4
 8009462:	008a      	lsls	r2, r1, #2
 8009464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009468:	f7f6 fec4 	bl	80001f4 <__aeabi_uldivmod>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4b60      	ldr	r3, [pc, #384]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009472:	fba3 2302 	umull	r2, r3, r3, r2
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	011c      	lsls	r4, r3, #4
 800947a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800947e:	2200      	movs	r2, #0
 8009480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	1891      	adds	r1, r2, r2
 8009492:	61b9      	str	r1, [r7, #24]
 8009494:	415b      	adcs	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800949c:	4641      	mov	r1, r8
 800949e:	1851      	adds	r1, r2, r1
 80094a0:	6139      	str	r1, [r7, #16]
 80094a2:	4649      	mov	r1, r9
 80094a4:	414b      	adcs	r3, r1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094b4:	4659      	mov	r1, fp
 80094b6:	00cb      	lsls	r3, r1, #3
 80094b8:	4651      	mov	r1, sl
 80094ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094be:	4651      	mov	r1, sl
 80094c0:	00ca      	lsls	r2, r1, #3
 80094c2:	4610      	mov	r0, r2
 80094c4:	4619      	mov	r1, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	4642      	mov	r2, r8
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094d0:	464b      	mov	r3, r9
 80094d2:	460a      	mov	r2, r1
 80094d4:	eb42 0303 	adc.w	r3, r2, r3
 80094d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094f4:	4649      	mov	r1, r9
 80094f6:	008b      	lsls	r3, r1, #2
 80094f8:	4641      	mov	r1, r8
 80094fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fe:	4641      	mov	r1, r8
 8009500:	008a      	lsls	r2, r1, #2
 8009502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009506:	f7f6 fe75 	bl	80001f4 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4b39      	ldr	r3, [pc, #228]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009510:	fba3 1302 	umull	r1, r3, r3, r2
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	2164      	movs	r1, #100	; 0x64
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	3332      	adds	r3, #50	; 0x32
 8009522:	4a34      	ldr	r2, [pc, #208]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009524:	fba2 2303 	umull	r2, r3, r2, r3
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800952e:	441c      	add	r4, r3
 8009530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009534:	2200      	movs	r2, #0
 8009536:	673b      	str	r3, [r7, #112]	; 0x70
 8009538:	677a      	str	r2, [r7, #116]	; 0x74
 800953a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800953e:	4642      	mov	r2, r8
 8009540:	464b      	mov	r3, r9
 8009542:	1891      	adds	r1, r2, r2
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	415b      	adcs	r3, r3
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800954e:	4641      	mov	r1, r8
 8009550:	1851      	adds	r1, r2, r1
 8009552:	6039      	str	r1, [r7, #0]
 8009554:	4649      	mov	r1, r9
 8009556:	414b      	adcs	r3, r1
 8009558:	607b      	str	r3, [r7, #4]
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009566:	4659      	mov	r1, fp
 8009568:	00cb      	lsls	r3, r1, #3
 800956a:	4651      	mov	r1, sl
 800956c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009570:	4651      	mov	r1, sl
 8009572:	00ca      	lsls	r2, r1, #3
 8009574:	4610      	mov	r0, r2
 8009576:	4619      	mov	r1, r3
 8009578:	4603      	mov	r3, r0
 800957a:	4642      	mov	r2, r8
 800957c:	189b      	adds	r3, r3, r2
 800957e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009580:	464b      	mov	r3, r9
 8009582:	460a      	mov	r2, r1
 8009584:	eb42 0303 	adc.w	r3, r2, r3
 8009588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800958a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	663b      	str	r3, [r7, #96]	; 0x60
 8009594:	667a      	str	r2, [r7, #100]	; 0x64
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095a2:	4649      	mov	r1, r9
 80095a4:	008b      	lsls	r3, r1, #2
 80095a6:	4641      	mov	r1, r8
 80095a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ac:	4641      	mov	r1, r8
 80095ae:	008a      	lsls	r2, r1, #2
 80095b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095b4:	f7f6 fe1e 	bl	80001f4 <__aeabi_uldivmod>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <UART_SetConfig+0x4e4>)
 80095be:	fba3 1302 	umull	r1, r3, r3, r2
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	2164      	movs	r1, #100	; 0x64
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	3332      	adds	r3, #50	; 0x32
 80095d0:	4a08      	ldr	r2, [pc, #32]	; (80095f4 <UART_SetConfig+0x4e4>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4422      	add	r2, r4
 80095e4:	609a      	str	r2, [r3, #8]
}
 80095e6:	bf00      	nop
 80095e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095ec:	46bd      	mov	sp, r7
 80095ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095f2:	bf00      	nop
 80095f4:	51eb851f 	.word	0x51eb851f

080095f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d123      	bne.n	8009652 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	6851      	ldr	r1, [r2, #4]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	6892      	ldr	r2, [r2, #8]
 800961e:	4311      	orrs	r1, r2
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	68d2      	ldr	r2, [r2, #12]
 8009624:	4311      	orrs	r1, r2
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	6912      	ldr	r2, [r2, #16]
 800962a:	4311      	orrs	r1, r2
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	6952      	ldr	r2, [r2, #20]
 8009630:	4311      	orrs	r1, r2
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	6992      	ldr	r2, [r2, #24]
 8009636:	4311      	orrs	r1, r2
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	69d2      	ldr	r2, [r2, #28]
 800963c:	4311      	orrs	r1, r2
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	6a12      	ldr	r2, [r2, #32]
 8009642:	4311      	orrs	r1, r2
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009648:	430a      	orrs	r2, r1
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e028      	b.n	80096a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	69d9      	ldr	r1, [r3, #28]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	4319      	orrs	r1, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	430b      	orrs	r3, r1
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	6851      	ldr	r1, [r2, #4]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	6892      	ldr	r2, [r2, #8]
 8009684:	4311      	orrs	r1, r2
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	68d2      	ldr	r2, [r2, #12]
 800968a:	4311      	orrs	r1, r2
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	6912      	ldr	r2, [r2, #16]
 8009690:	4311      	orrs	r1, r2
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	6952      	ldr	r2, [r2, #20]
 8009696:	4311      	orrs	r1, r2
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	6992      	ldr	r2, [r2, #24]
 800969c:	430a      	orrs	r2, r1
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d128      	bne.n	8009716 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	1e59      	subs	r1, r3, #1
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	4319      	orrs	r1, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	4319      	orrs	r1, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	031b      	lsls	r3, r3, #12
 80096ee:	4319      	orrs	r1, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	041b      	lsls	r3, r3, #16
 80096f8:	4319      	orrs	r1, r3
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	3b01      	subs	r3, #1
 8009700:	051b      	lsls	r3, r3, #20
 8009702:	4319      	orrs	r1, r3
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	3b01      	subs	r3, #1
 800970a:	061b      	lsls	r3, r3, #24
 800970c:	430b      	orrs	r3, r1
 800970e:	431a      	orrs	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	609a      	str	r2, [r3, #8]
 8009714:	e02f      	b.n	8009776 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800971e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	68d2      	ldr	r2, [r2, #12]
 8009726:	3a01      	subs	r2, #1
 8009728:	0311      	lsls	r1, r2, #12
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	6952      	ldr	r2, [r2, #20]
 800972e:	3a01      	subs	r2, #1
 8009730:	0512      	lsls	r2, r2, #20
 8009732:	430a      	orrs	r2, r1
 8009734:	431a      	orrs	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	1e59      	subs	r1, r3, #1
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	3b01      	subs	r3, #1
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	4319      	orrs	r1, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	3b01      	subs	r3, #1
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	4319      	orrs	r1, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	3b01      	subs	r3, #1
 8009762:	041b      	lsls	r3, r3, #16
 8009764:	4319      	orrs	r1, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	3b01      	subs	r3, #1
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	430b      	orrs	r3, r1
 8009770:	431a      	orrs	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009784:	b084      	sub	sp, #16
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	f107 001c 	add.w	r0, r7, #28
 8009792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800979a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800979c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800979e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80097a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80097a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80097aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80097ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80097be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	b004      	add	sp, #16
 80097d8:	4770      	bx	lr

080097da <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2203      	movs	r2, #3
 8009822:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0303 	and.w	r3, r3, #3
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800986c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009872:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009878:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009888:	f023 030f 	bic.w	r3, r3, #15
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	b2db      	uxtb	r3, r3
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3314      	adds	r3, #20
 80098ca:	461a      	mov	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	4413      	add	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
}  
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009908:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800990e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009914:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800992c:	2300      	movs	r3, #0

}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b088      	sub	sp, #32
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009948:	2310      	movs	r3, #16
 800994a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff ff74 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009966:	f241 3288 	movw	r2, #5000	; 0x1388
 800996a:	2110      	movs	r1, #16
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa19 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009974:	69fb      	ldr	r3, [r7, #28]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b088      	sub	sp, #32
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800998c:	2311      	movs	r3, #17
 800998e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009990:	2340      	movs	r3, #64	; 0x40
 8009992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009994:	2300      	movs	r3, #0
 8009996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800999e:	f107 0308 	add.w	r3, r7, #8
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ff52 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80099aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ae:	2111      	movs	r1, #17
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f9f7 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b8:	69fb      	ldr	r3, [r7, #28]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3720      	adds	r7, #32
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b088      	sub	sp, #32
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099d0:	2312      	movs	r3, #18
 80099d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099d4:	2340      	movs	r3, #64	; 0x40
 80099d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099e2:	f107 0308 	add.w	r3, r7, #8
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ff30 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80099ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f2:	2112      	movs	r1, #18
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9d5 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099fc:	69fb      	ldr	r3, [r7, #28]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a14:	2318      	movs	r3, #24
 8009a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff0e 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a36:	2118      	movs	r1, #24
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f9b3 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a40:	69fb      	ldr	r3, [r7, #28]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a58:	2319      	movs	r3, #25
 8009a5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a5c:	2340      	movs	r3, #64	; 0x40
 8009a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff feec 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a7a:	2119      	movs	r1, #25
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f991 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a84:	69fb      	ldr	r3, [r7, #28]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aa0:	2340      	movs	r3, #64	; 0x40
 8009aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff feca 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009aba:	4a05      	ldr	r2, [pc, #20]	; (8009ad0 <SDMMC_CmdStopTransfer+0x40>)
 8009abc:	210c      	movs	r1, #12
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f970 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	05f5e100 	.word	0x05f5e100

08009ad4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009ae4:	2307      	movs	r3, #7
 8009ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af6:	f107 0310 	add.w	r3, r7, #16
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7ff fea6 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b06:	2107      	movs	r1, #7
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f94b 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3728      	adds	r7, #40	; 0x28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b088      	sub	sp, #32
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fe85 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb65 	bl	800a214 <SDMMC_GetCmdError>
 8009b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b088      	sub	sp, #32
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009b62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b64:	2308      	movs	r3, #8
 8009b66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fe66 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 faf8 	bl	800a178 <SDMMC_GetCmdResp7>
 8009b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ba2:	2337      	movs	r3, #55	; 0x37
 8009ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fe47 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc4:	2137      	movs	r1, #55	; 0x37
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8ec 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bce:	69fb      	ldr	r3, [r7, #28]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009bee:	2329      	movs	r3, #41	; 0x29
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf2:	2340      	movs	r3, #64	; 0x40
 8009bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fe21 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9ff 	bl	800a010 <SDMMC_GetCmdResp3>
 8009c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c14:	69fb      	ldr	r3, [r7, #28]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c2c:	2306      	movs	r3, #6
 8009c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c3e:	f107 0308 	add.w	r3, r7, #8
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff fe02 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4e:	2106      	movs	r1, #6
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8a7 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c58:	69fb      	ldr	r3, [r7, #28]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b088      	sub	sp, #32
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c6e:	2333      	movs	r3, #51	; 0x33
 8009c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff fde1 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c90:	2133      	movs	r1, #51	; 0x33
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f886 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009cb4:	23c0      	movs	r3, #192	; 0xc0
 8009cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fdc0 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f956 	bl	8009f80 <SDMMC_GetCmdResp2>
 8009cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009cee:	2309      	movs	r3, #9
 8009cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009cf2:	23c0      	movs	r3, #192	; 0xc0
 8009cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fda1 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f937 	bl	8009f80 <SDMMC_GetCmdResp2>
 8009d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d14:	69fb      	ldr	r3, [r7, #28]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b088      	sub	sp, #32
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fd82 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	2103      	movs	r1, #3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f99c 	bl	800a08c <SDMMC_GetCmdResp6>
 8009d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d56:	69fb      	ldr	r3, [r7, #28]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3720      	adds	r7, #32
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d6e:	230d      	movs	r3, #13
 8009d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fd61 	bl	800984e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d90:	210d      	movs	r1, #13
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f806 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009db2:	4b70      	ldr	r3, [pc, #448]	; (8009f74 <SDMMC_GetCmdResp1+0x1d0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a70      	ldr	r2, [pc, #448]	; (8009f78 <SDMMC_GetCmdResp1+0x1d4>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	0a5a      	lsrs	r2, r3, #9
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	1e5a      	subs	r2, r3, #1
 8009dca:	61fa      	str	r2, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dd4:	e0c9      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dda:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ef      	beq.n	8009dc6 <SDMMC_GetCmdResp1+0x22>
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1ea      	bne.n	8009dc6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e02:	2304      	movs	r3, #4
 8009e04:	e0b1      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e0a6      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	22c5      	movs	r2, #197	; 0xc5
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff fd3d 	bl	80098a2 <SDIO_GetCommandResponse>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	7afb      	ldrb	r3, [r7, #11]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d001      	beq.n	8009e36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e099      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e36:	2100      	movs	r1, #0
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff fd3f 	bl	80098bc <SDIO_GetResponse>
 8009e3e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	4b4e      	ldr	r3, [pc, #312]	; (8009f7c <SDMMC_GetCmdResp1+0x1d8>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e08d      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da02      	bge.n	8009e5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e58:	e087      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	e080      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	e079      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e84:	e071      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e94:	e069      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea4:	e061      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb4:	e059      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec4:	e051      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed4:	e049      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ee4:	e041      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef4:	e039      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f04:	e031      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f14:	e029      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f24:	e021      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f34:	e019      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f44:	e011      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f54:	e009      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f64:	e001      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000004 	.word	0x20000004
 8009f78:	10624dd3 	.word	0x10624dd3
 8009f7c:	fdffe008 	.word	0xfdffe008

08009f80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f88:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <SDMMC_GetCmdResp2+0x88>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1f      	ldr	r2, [pc, #124]	; (800a00c <SDMMC_GetCmdResp2+0x8c>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	0a5b      	lsrs	r3, r3, #9
 8009f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f98:	fb02 f303 	mul.w	r3, r2, r3
 8009f9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1e5a      	subs	r2, r3, #1
 8009fa2:	60fa      	str	r2, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fac:	e026      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0ef      	beq.n	8009f9e <SDMMC_GetCmdResp2+0x1e>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1ea      	bne.n	8009f9e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2204      	movs	r2, #4
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fda:	2304      	movs	r3, #4
 8009fdc:	e00e      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d004      	beq.n	8009ff4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e003      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	22c5      	movs	r2, #197	; 0xc5
 8009ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	20000004 	.word	0x20000004
 800a00c:	10624dd3 	.word	0x10624dd3

0800a010 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <SDMMC_GetCmdResp3+0x74>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a1a      	ldr	r2, [pc, #104]	; (800a088 <SDMMC_GetCmdResp3+0x78>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	0a5b      	lsrs	r3, r3, #9
 800a024:	f241 3288 	movw	r2, #5000	; 0x1388
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	60fa      	str	r2, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a03c:	e01b      	b.n	800a076 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ef      	beq.n	800a02e <SDMMC_GetCmdResp3+0x1e>
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1ea      	bne.n	800a02e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2204      	movs	r2, #4
 800a068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a06a:	2304      	movs	r3, #4
 800a06c:	e003      	b.n	800a076 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	22c5      	movs	r2, #197	; 0xc5
 800a072:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000004 	.word	0x20000004
 800a088:	10624dd3 	.word	0x10624dd3

0800a08c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a09a:	4b35      	ldr	r3, [pc, #212]	; (800a170 <SDMMC_GetCmdResp6+0xe4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a35      	ldr	r2, [pc, #212]	; (800a174 <SDMMC_GetCmdResp6+0xe8>)
 800a0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a4:	0a5b      	lsrs	r3, r3, #9
 800a0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0aa:	fb02 f303 	mul.w	r3, r2, r3
 800a0ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	61fa      	str	r2, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0be:	e052      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0ef      	beq.n	800a0b0 <SDMMC_GetCmdResp6+0x24>
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1ea      	bne.n	800a0b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d004      	beq.n	800a0f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	e03a      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a102:	2301      	movs	r3, #1
 800a104:	e02f      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fbcb 	bl	80098a2 <SDIO_GetCommandResponse>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	4293      	cmp	r3, r2
 800a114:	d001      	beq.n	800a11a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a116:	2301      	movs	r3, #1
 800a118:	e025      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	22c5      	movs	r2, #197	; 0xc5
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fbca 	bl	80098bc <SDIO_GetResponse>
 800a128:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	b29a      	uxth	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a13e:	2300      	movs	r3, #0
 800a140:	e011      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a14c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a150:	e009      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a15c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a160:	e001      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20000004 	.word	0x20000004
 800a174:	10624dd3 	.word	0x10624dd3

0800a178 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <SDMMC_GetCmdResp7+0x94>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a22      	ldr	r2, [pc, #136]	; (800a210 <SDMMC_GetCmdResp7+0x98>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	0a5b      	lsrs	r3, r3, #9
 800a18c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a190:	fb02 f303 	mul.w	r3, r2, r3
 800a194:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	60fa      	str	r2, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a4:	e02c      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ef      	beq.n	800a196 <SDMMC_GetCmdResp7+0x1e>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1ea      	bne.n	800a196 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d2:	2304      	movs	r3, #4
 800a1d4:	e014      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e009      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2240      	movs	r2, #64	; 0x40
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1fe:	2300      	movs	r3, #0
  
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000004 	.word	0x20000004
 800a210:	10624dd3 	.word	0x10624dd3

0800a214 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a21c:	4b11      	ldr	r3, [pc, #68]	; (800a264 <SDMMC_GetCmdError+0x50>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a11      	ldr	r2, [pc, #68]	; (800a268 <SDMMC_GetCmdError+0x54>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	0a5b      	lsrs	r3, r3, #9
 800a228:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22c:	fb02 f303 	mul.w	r3, r2, r3
 800a230:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	60fa      	str	r2, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a23c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a240:	e009      	b.n	800a256 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f1      	beq.n	800a232 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	22c5      	movs	r2, #197	; 0xc5
 800a252:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000004 	.word	0x20000004
 800a268:	10624dd3 	.word	0x10624dd3

0800a26c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a26c:	b084      	sub	sp, #16
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	f107 001c 	add.w	r0, r7, #28
 800a27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b01      	cmp	r3, #1
 800a282:	d122      	bne.n	800a2ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d105      	bne.n	800a2be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f9c0 	bl	800a644 <USB_CoreReset>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
 800a2c8:	e01a      	b.n	800a300 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f9b4 	bl	800a644 <USB_CoreReset>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
 800a2f2:	e005      	b.n	800a300 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	2b01      	cmp	r3, #1
 800a304:	d10b      	bne.n	800a31e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f043 0206 	orr.w	r2, r3, #6
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f043 0220 	orr.w	r2, r3, #32
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a32a:	b004      	add	sp, #16
 800a32c:	4770      	bx	lr

0800a32e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f043 0201 	orr.w	r2, r3, #1
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f023 0201 	bic.w	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d115      	bne.n	800a3c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7f8 f993 	bl	80026cc <HAL_Delay>
      ms++;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f93a 	bl	800a626 <USB_GetMode>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d01e      	beq.n	800a3f6 <USB_SetCurrentMode+0x84>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b31      	cmp	r3, #49	; 0x31
 800a3bc:	d9f0      	bls.n	800a3a0 <USB_SetCurrentMode+0x2e>
 800a3be:	e01a      	b.n	800a3f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d115      	bne.n	800a3f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	f7f8 f97a 	bl	80026cc <HAL_Delay>
      ms++;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f921 	bl	800a626 <USB_GetMode>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d005      	beq.n	800a3f6 <USB_SetCurrentMode+0x84>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b31      	cmp	r3, #49	; 0x31
 800a3ee:	d9f0      	bls.n	800a3d2 <USB_SetCurrentMode+0x60>
 800a3f0:	e001      	b.n	800a3f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e005      	b.n	800a402 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b32      	cmp	r3, #50	; 0x32
 800a3fa:	d101      	bne.n	800a400 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3301      	adds	r3, #1
 800a41e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a13      	ldr	r2, [pc, #76]	; (800a470 <USB_FlushTxFifo+0x64>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d901      	bls.n	800a42c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e01b      	b.n	800a464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	daf2      	bge.n	800a41a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	019b      	lsls	r3, r3, #6
 800a43c:	f043 0220 	orr.w	r2, r3, #32
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4a08      	ldr	r2, [pc, #32]	; (800a470 <USB_FlushTxFifo+0x64>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d901      	bls.n	800a456 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e006      	b.n	800a464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b20      	cmp	r3, #32
 800a460:	d0f0      	beq.n	800a444 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	00030d40 	.word	0x00030d40

0800a474 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a11      	ldr	r2, [pc, #68]	; (800a4d0 <USB_FlushRxFifo+0x5c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d901      	bls.n	800a492 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e018      	b.n	800a4c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	daf2      	bge.n	800a480 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2210      	movs	r2, #16
 800a4a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a08      	ldr	r2, [pc, #32]	; (800a4d0 <USB_FlushRxFifo+0x5c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d901      	bls.n	800a4b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e006      	b.n	800a4c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0310 	and.w	r3, r3, #16
 800a4be:	2b10      	cmp	r3, #16
 800a4c0:	d0f0      	beq.n	800a4a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	00030d40 	.word	0x00030d40

0800a4d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b089      	sub	sp, #36	; 0x24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	4611      	mov	r1, r2
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	71fb      	strb	r3, [r7, #7]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a4f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d123      	bne.n	800a542 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4fa:	88bb      	ldrh	r3, [r7, #4]
 800a4fc:	3303      	adds	r3, #3
 800a4fe:	089b      	lsrs	r3, r3, #2
 800a500:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a502:	2300      	movs	r3, #0
 800a504:	61bb      	str	r3, [r7, #24]
 800a506:	e018      	b.n	800a53a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	031a      	lsls	r2, r3, #12
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a514:	461a      	mov	r2, r3
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3301      	adds	r3, #1
 800a520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	3301      	adds	r3, #1
 800a526:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	3301      	adds	r3, #1
 800a52c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	3301      	adds	r3, #1
 800a532:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	3301      	adds	r3, #1
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d3e2      	bcc.n	800a508 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3724      	adds	r7, #36	; 0x24
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a550:	b480      	push	{r7}
 800a552:	b08b      	sub	sp, #44	; 0x2c
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a566:	88fb      	ldrh	r3, [r7, #6]
 800a568:	089b      	lsrs	r3, r3, #2
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a576:	2300      	movs	r3, #0
 800a578:	623b      	str	r3, [r7, #32]
 800a57a:	e014      	b.n	800a5a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	601a      	str	r2, [r3, #0]
    pDest++;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	3301      	adds	r3, #1
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	3301      	adds	r3, #1
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	3301      	adds	r3, #1
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	3301      	adds	r3, #1
 800a59e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	623b      	str	r3, [r7, #32]
 800a5a6:	6a3a      	ldr	r2, [r7, #32]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d3e6      	bcc.n	800a57c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5ae:	8bfb      	ldrh	r3, [r7, #30]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01e      	beq.n	800a5f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f107 0310 	add.w	r3, r7, #16
 800a5c4:	6812      	ldr	r2, [r2, #0]
 800a5c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	701a      	strb	r2, [r3, #0]
      i++;
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	623b      	str	r3, [r7, #32]
      pDest++;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a5e6:	8bfb      	ldrh	r3, [r7, #30]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a5ec:	8bfb      	ldrh	r3, [r7, #30]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1ea      	bne.n	800a5c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	372c      	adds	r7, #44	; 0x2c
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	4013      	ands	r3, r2
 800a616:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a618:	68fb      	ldr	r3, [r7, #12]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	f003 0301 	and.w	r3, r3, #1
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
	...

0800a644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3301      	adds	r3, #1
 800a654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4a13      	ldr	r2, [pc, #76]	; (800a6a8 <USB_CoreReset+0x64>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d901      	bls.n	800a662 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e01b      	b.n	800a69a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	daf2      	bge.n	800a650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f043 0201 	orr.w	r2, r3, #1
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <USB_CoreReset+0x64>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d901      	bls.n	800a68c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e006      	b.n	800a69a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b01      	cmp	r3, #1
 800a696:	d0f0      	beq.n	800a67a <USB_CoreReset+0x36>

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	00030d40 	.word	0x00030d40

0800a6ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a6ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d018      	beq.n	800a71c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10a      	bne.n	800a706 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6fe:	f043 0304 	orr.w	r3, r3, #4
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	e014      	b.n	800a730 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a714:	f023 0304 	bic.w	r3, r3, #4
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	e009      	b.n	800a730 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a72a:	f023 0304 	bic.w	r3, r3, #4
 800a72e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a730:	2110      	movs	r1, #16
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fe6a 	bl	800a40c <USB_FlushTxFifo>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fe96 	bl	800a474 <USB_FlushRxFifo>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	e015      	b.n	800a784 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a764:	461a      	mov	r2, r3
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a778:	461a      	mov	r2, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	3301      	adds	r3, #1
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d3e5      	bcc.n	800a758 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f04f 32ff 	mov.w	r2, #4294967295
 800a798:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00b      	beq.n	800a7be <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a13      	ldr	r2, [pc, #76]	; (800a800 <USB_HostInit+0x154>)
 800a7b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a13      	ldr	r2, [pc, #76]	; (800a804 <USB_HostInit+0x158>)
 800a7b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a7bc:	e009      	b.n	800a7d2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2280      	movs	r2, #128	; 0x80
 800a7c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a10      	ldr	r2, [pc, #64]	; (800a808 <USB_HostInit+0x15c>)
 800a7c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a0f      	ldr	r2, [pc, #60]	; (800a80c <USB_HostInit+0x160>)
 800a7ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d105      	bne.n	800a7e4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	f043 0210 	orr.w	r2, r3, #16
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699a      	ldr	r2, [r3, #24]
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <USB_HostInit+0x164>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7fc:	b004      	add	sp, #16
 800a7fe:	4770      	bx	lr
 800a800:	01000200 	.word	0x01000200
 800a804:	00e00300 	.word	0x00e00300
 800a808:	00600080 	.word	0x00600080
 800a80c:	004000e0 	.word	0x004000e0
 800a810:	a3200008 	.word	0xa3200008

0800a814 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a84c:	4313      	orrs	r3, r2
 800a84e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d107      	bne.n	800a866 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a85c:	461a      	mov	r2, r3
 800a85e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a862:	6053      	str	r3, [r2, #4]
 800a864:	e009      	b.n	800a87a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d106      	bne.n	800a87a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a872:	461a      	mov	r2, r3
 800a874:	f241 7370 	movw	r3, #6000	; 0x1770
 800a878:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a8b8:	2064      	movs	r0, #100	; 0x64
 800a8ba:	f7f7 ff07 	bl	80026cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a8cc:	200a      	movs	r0, #10
 800a8ce:	f7f7 fefd 	bl	80026cc <HAL_Delay>

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a900:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d109      	bne.n	800a920 <USB_DriveVbus+0x44>
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d106      	bne.n	800a920 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a91a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a91e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92a:	d109      	bne.n	800a940 <USB_DriveVbus+0x64>
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a94e:	b480      	push	{r7}
 800a950:	b085      	sub	sp, #20
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	0c5b      	lsrs	r3, r3, #17
 800a96c:	f003 0303 	and.w	r3, r3, #3
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	b29b      	uxth	r3, r3
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
	...

0800a9a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	70fb      	strb	r3, [r7, #3]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70bb      	strb	r3, [r7, #2]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a9d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d87e      	bhi.n	800aadc <USB_HC_Init+0x13c>
 800a9de:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <USB_HC_Init+0x44>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800a9f5 	.word	0x0800a9f5
 800a9e8:	0800aa9f 	.word	0x0800aa9f
 800a9ec:	0800a9f5 	.word	0x0800a9f5
 800a9f0:	0800aa61 	.word	0x0800aa61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa00:	461a      	mov	r2, r3
 800aa02:	f240 439d 	movw	r3, #1181	; 0x49d
 800aa06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aa08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da10      	bge.n	800aa32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa2e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800aa30:	e057      	b.n	800aae2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d051      	beq.n	800aae2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	78fa      	ldrb	r2, [r7, #3]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa5c:	60d3      	str	r3, [r2, #12]
      break;
 800aa5e:	e040      	b.n	800aae2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f240 639d 	movw	r3, #1693	; 0x69d
 800aa72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aa74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da34      	bge.n	800aae6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aa9c:	e023      	b.n	800aae6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f240 2325 	movw	r3, #549	; 0x225
 800aab0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da17      	bge.n	800aaea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aad4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aad8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aada:	e006      	b.n	800aaea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	77fb      	strb	r3, [r7, #31]
      break;
 800aae0:	e004      	b.n	800aaec <USB_HC_Init+0x14c>
      break;
 800aae2:	bf00      	nop
 800aae4:	e002      	b.n	800aaec <USB_HC_Init+0x14c>
      break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <USB_HC_Init+0x14c>
      break;
 800aaea:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800aaec:	78fb      	ldrb	r3, [r7, #3]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	78fa      	ldrb	r2, [r7, #3]
 800aafc:	0151      	lsls	r1, r2, #5
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	440a      	add	r2, r1
 800ab02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab06:	f043 0302 	orr.w	r3, r3, #2
 800ab0a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab12:	699a      	ldr	r2, [r3, #24]
 800ab14:	78fb      	ldrb	r3, [r7, #3]
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab20:	6939      	ldr	r1, [r7, #16]
 800ab22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab26:	4313      	orrs	r3, r2
 800ab28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ab36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da03      	bge.n	800ab46 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ab3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab42:	61bb      	str	r3, [r7, #24]
 800ab44:	e001      	b.n	800ab4a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff feff 	bl	800a94e <USB_GetHostSpeed>
 800ab50:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ab52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d106      	bne.n	800ab68 <USB_HC_Init+0x1c8>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d003      	beq.n	800ab68 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ab60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab64:	617b      	str	r3, [r7, #20]
 800ab66:	e001      	b.n	800ab6c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab6c:	787b      	ldrb	r3, [r7, #1]
 800ab6e:	059b      	lsls	r3, r3, #22
 800ab70:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab74:	78bb      	ldrb	r3, [r7, #2]
 800ab76:	02db      	lsls	r3, r3, #11
 800ab78:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab7c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab82:	049b      	lsls	r3, r3, #18
 800ab84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	0159      	lsls	r1, r3, #5
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	440b      	add	r3, r1
 800ab9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aba8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800abaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d003      	beq.n	800abba <USB_HC_Init+0x21a>
 800abb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d10f      	bne.n	800abda <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	78fa      	ldrb	r2, [r7, #3]
 800abca:	0151      	lsls	r1, r2, #5
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	440a      	add	r2, r1
 800abd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800abda:	7ffb      	ldrb	r3, [r7, #31]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	; 0x30
 800abe8:	af02      	add	r7, sp, #8
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	785b      	ldrb	r3, [r3, #1]
 800abfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800abfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac00:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d02d      	beq.n	800ac6a <USB_HC_StartXfer+0x86>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d129      	bne.n	800ac6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d117      	bne.n	800ac4c <USB_HC_StartXfer+0x68>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	79db      	ldrb	r3, [r3, #7]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <USB_HC_StartXfer+0x48>
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	79db      	ldrb	r3, [r3, #7]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d10f      	bne.n	800ac4c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	0151      	lsls	r1, r2, #5
 800ac3e:	6a3a      	ldr	r2, [r7, #32]
 800ac40:	440a      	add	r2, r1
 800ac42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac4a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10b      	bne.n	800ac6a <USB_HC_StartXfer+0x86>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	795b      	ldrb	r3, [r3, #5]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d107      	bne.n	800ac6a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fa0f 	bl	800b084 <USB_DoPing>
      return HAL_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e0f8      	b.n	800ae5c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d018      	beq.n	800aca4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	8912      	ldrh	r2, [r2, #8]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	8912      	ldrh	r2, [r2, #8]
 800ac82:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac86:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ac88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac8a:	8b7b      	ldrh	r3, [r7, #26]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d90b      	bls.n	800aca8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ac90:	8b7b      	ldrh	r3, [r7, #26]
 800ac92:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ac94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	8912      	ldrh	r2, [r2, #8]
 800ac9a:	fb03 f202 	mul.w	r2, r3, r2
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	611a      	str	r2, [r3, #16]
 800aca2:	e001      	b.n	800aca8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aca4:	2301      	movs	r3, #1
 800aca6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	78db      	ldrb	r3, [r3, #3]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d007      	beq.n	800acc0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800acb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	8912      	ldrh	r2, [r2, #8]
 800acb6:	fb03 f202 	mul.w	r2, r3, r2
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	611a      	str	r2, [r3, #16]
 800acbe:	e003      	b.n	800acc8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	695a      	ldr	r2, [r3, #20]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acd2:	04d9      	lsls	r1, r3, #19
 800acd4:	4b63      	ldr	r3, [pc, #396]	; (800ae64 <USB_HC_StartXfer+0x280>)
 800acd6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acd8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	7a9b      	ldrb	r3, [r3, #10]
 800acde:	075b      	lsls	r3, r3, #29
 800ace0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ace4:	69f9      	ldr	r1, [r7, #28]
 800ace6:	0148      	lsls	r0, r1, #5
 800ace8:	6a39      	ldr	r1, [r7, #32]
 800acea:	4401      	add	r1, r0
 800acec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acf0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acf2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	68d9      	ldr	r1, [r3, #12]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	460a      	mov	r2, r1
 800ad0c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	bf0c      	ite	eq
 800ad1e:	2301      	moveq	r3, #1
 800ad20:	2300      	movne	r3, #0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	0151      	lsls	r1, r2, #5
 800ad38:	6a3a      	ldr	r2, [r7, #32]
 800ad3a:	440a      	add	r2, r1
 800ad3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad44:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	7e7b      	ldrb	r3, [r7, #25]
 800ad56:	075b      	lsls	r3, r3, #29
 800ad58:	69f9      	ldr	r1, [r7, #28]
 800ad5a:	0148      	lsls	r0, r1, #5
 800ad5c:	6a39      	ldr	r1, [r7, #32]
 800ad5e:	4401      	add	r1, r0
 800ad60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ad64:	4313      	orrs	r3, r2
 800ad66:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad7e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	78db      	ldrb	r3, [r3, #3]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d004      	beq.n	800ad92 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	e003      	b.n	800ad9a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad98:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adae:	461a      	mov	r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	e04e      	b.n	800ae5c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	78db      	ldrb	r3, [r3, #3]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d149      	bne.n	800ae5a <USB_HC_StartXfer+0x276>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d045      	beq.n	800ae5a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	79db      	ldrb	r3, [r3, #7]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d830      	bhi.n	800ae38 <USB_HC_StartXfer+0x254>
 800add6:	a201      	add	r2, pc, #4	; (adr r2, 800addc <USB_HC_StartXfer+0x1f8>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800ae11 	.word	0x0800ae11
 800ade4:	0800aded 	.word	0x0800aded
 800ade8:	0800ae11 	.word	0x0800ae11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	3303      	adds	r3, #3
 800adf2:	089b      	lsrs	r3, r3, #2
 800adf4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800adf6:	8afa      	ldrh	r2, [r7, #22]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d91c      	bls.n	800ae3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	f043 0220 	orr.w	r2, r3, #32
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae0e:	e015      	b.n	800ae3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	3303      	adds	r3, #3
 800ae16:	089b      	lsrs	r3, r3, #2
 800ae18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ae1a:	8afa      	ldrh	r2, [r7, #22]
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d90a      	bls.n	800ae40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae36:	e003      	b.n	800ae40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ae38:	bf00      	nop
 800ae3a:	e002      	b.n	800ae42 <USB_HC_StartXfer+0x25e>
        break;
 800ae3c:	bf00      	nop
 800ae3e:	e000      	b.n	800ae42 <USB_HC_StartXfer+0x25e>
        break;
 800ae40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	68d9      	ldr	r1, [r3, #12]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	785a      	ldrb	r2, [r3, #1]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	2000      	movs	r0, #0
 800ae52:	9000      	str	r0, [sp, #0]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fb3d 	bl	800a4d4 <USB_WritePacket>
  }

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3728      	adds	r7, #40	; 0x28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	1ff80000 	.word	0x1ff80000

0800ae68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	b29b      	uxth	r3, r3
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b089      	sub	sp, #36	; 0x24
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	0c9b      	lsrs	r3, r3, #18
 800aeb2:	f003 0303 	and.w	r3, r3, #3
 800aeb6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	0fdb      	lsrs	r3, r3, #31
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d104      	bne.n	800aee4 <USB_HC_Halt+0x5a>
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	e0c8      	b.n	800b076 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <USB_HC_Halt+0x66>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d163      	bne.n	800afb8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	0151      	lsls	r1, r2, #5
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	440a      	add	r2, r1
 800af06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af0e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f040 80ab 	bne.w	800b074 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d133      	bne.n	800af92 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	4413      	add	r3, r2
 800af32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	0151      	lsls	r1, r2, #5
 800af3c:	69fa      	ldr	r2, [r7, #28]
 800af3e:	440a      	add	r2, r1
 800af40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af48:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	4413      	add	r3, r2
 800af52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	0151      	lsls	r1, r2, #5
 800af5c:	69fa      	ldr	r2, [r7, #28]
 800af5e:	440a      	add	r2, r1
 800af60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af68:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af76:	d81d      	bhi.n	800afb4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	015a      	lsls	r2, r3, #5
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4413      	add	r3, r2
 800af80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af8e:	d0ec      	beq.n	800af6a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af90:	e070      	b.n	800b074 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	015a      	lsls	r2, r3, #5
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	0151      	lsls	r1, r2, #5
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	440a      	add	r2, r1
 800afa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afb2:	e05f      	b.n	800b074 <USB_HC_Halt+0x1ea>
            break;
 800afb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afb6:	e05d      	b.n	800b074 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	0151      	lsls	r1, r2, #5
 800afca:	69fa      	ldr	r2, [r7, #28]
 800afcc:	440a      	add	r2, r1
 800afce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d133      	bne.n	800b050 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	0151      	lsls	r1, r2, #5
 800affa:	69fa      	ldr	r2, [r7, #28]
 800affc:	440a      	add	r2, r1
 800affe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b006:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	0151      	lsls	r1, r2, #5
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	440a      	add	r2, r1
 800b01e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b026:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b034:	d81d      	bhi.n	800b072 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b04c:	d0ec      	beq.n	800b028 <USB_HC_Halt+0x19e>
 800b04e:	e011      	b.n	800b074 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	4413      	add	r3, r2
 800b058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	440a      	add	r2, r1
 800b066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b06a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	e000      	b.n	800b074 <USB_HC_Halt+0x1ea>
          break;
 800b072:	bf00      	nop
    }
  }

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3724      	adds	r7, #36	; 0x24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b098:	2301      	movs	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	04da      	lsls	r2, r3, #19
 800b0a0:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <USB_DoPing+0x74>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	0151      	lsls	r1, r2, #5
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	440a      	add	r2, r1
 800b0ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	1ff80000 	.word	0x1ff80000

0800b0fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff f91d 	bl	800a350 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b116:	2110      	movs	r1, #16
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff f977 	bl	800a40c <USB_FlushTxFifo>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff f9a3 	bl	800a474 <USB_FlushRxFifo>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b138:	2300      	movs	r3, #0
 800b13a:	61bb      	str	r3, [r7, #24]
 800b13c:	e01f      	b.n	800b17e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	4413      	add	r3, r2
 800b146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b154:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b15c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b164:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b172:	461a      	mov	r2, r3
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	3301      	adds	r3, #1
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2b0f      	cmp	r3, #15
 800b182:	d9dc      	bls.n	800b13e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b184:	2300      	movs	r3, #0
 800b186:	61bb      	str	r3, [r7, #24]
 800b188:	e034      	b.n	800b1f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1be:	461a      	mov	r2, r3
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1d0:	d80c      	bhi.n	800b1ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1e8:	d0ec      	beq.n	800b1c4 <USB_StopHost+0xc8>
 800b1ea:	e000      	b.n	800b1ee <USB_StopHost+0xf2>
        break;
 800b1ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2b0f      	cmp	r3, #15
 800b1f8:	d9c7      	bls.n	800b18a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b200:	461a      	mov	r2, r3
 800b202:	f04f 33ff 	mov.w	r3, #4294967295
 800b206:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f04f 32ff 	mov.w	r2, #4294967295
 800b20e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff f88c 	bl	800a32e <USB_EnableGlobalInt>

  return ret;
 800b216:	7ffb      	ldrb	r3, [r7, #31]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3720      	adds	r7, #32
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b22e:	2301      	movs	r3, #1
 800b230:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b236:	4b1f      	ldr	r3, [pc, #124]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b238:	7a5b      	ldrb	r3, [r3, #9]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d131      	bne.n	800b2a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b240:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b242:	7a5b      	ldrb	r3, [r3, #9]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	4b1a      	ldr	r3, [pc, #104]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b24a:	2100      	movs	r1, #0
 800b24c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b24e:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b250:	7a5b      	ldrb	r3, [r3, #9]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	4a17      	ldr	r2, [pc, #92]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b25e:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b260:	7a5b      	ldrb	r3, [r3, #9]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	461a      	mov	r2, r3
 800b266:	4b13      	ldr	r3, [pc, #76]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b268:	4413      	add	r3, r2
 800b26a:	79fa      	ldrb	r2, [r7, #7]
 800b26c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b26e:	4b11      	ldr	r3, [pc, #68]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b270:	7a5b      	ldrb	r3, [r3, #9]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	b2d1      	uxtb	r1, r2
 800b278:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <FATFS_LinkDriverEx+0x94>)
 800b27a:	7251      	strb	r1, [r2, #9]
 800b27c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b27e:	7dbb      	ldrb	r3, [r7, #22]
 800b280:	3330      	adds	r3, #48	; 0x30
 800b282:	b2da      	uxtb	r2, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	3301      	adds	r3, #1
 800b28c:	223a      	movs	r2, #58	; 0x3a
 800b28e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	3302      	adds	r3, #2
 800b294:	222f      	movs	r2, #47	; 0x2f
 800b296:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	3303      	adds	r3, #3
 800b29c:	2200      	movs	r2, #0
 800b29e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20000c00 	.word	0x20000c00

0800b2b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7ff ffaa 	bl	800b220 <FATFS_LinkDriverEx>
 800b2cc:	4603      	mov	r3, r0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b2d6:	b590      	push	{r4, r7, lr}
 800b2d8:	b089      	sub	sp, #36	; 0x24
 800b2da:	af04      	add	r7, sp, #16
 800b2dc:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b2de:	2301      	movs	r3, #1
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	2102      	movs	r1, #2
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fc67 	bl	800bbb8 <USBH_FindInterface>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	2bff      	cmp	r3, #255	; 0xff
 800b2f2:	d002      	beq.n	800b2fa <USBH_CDC_InterfaceInit+0x24>
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d901      	bls.n	800b2fe <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e13d      	b.n	800b57a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fc3c 	bl	800bb80 <USBH_SelectInterface>
 800b308:	4603      	mov	r3, r0
 800b30a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b312:	2302      	movs	r3, #2
 800b314:	e131      	b.n	800b57a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b31c:	2050      	movs	r0, #80	; 0x50
 800b31e:	f001 fff3 	bl	800d308 <malloc>
 800b322:	4603      	mov	r3, r0
 800b324:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b336:	2302      	movs	r3, #2
 800b338:	e11f      	b.n	800b57a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b33a:	2250      	movs	r2, #80	; 0x50
 800b33c:	2100      	movs	r1, #0
 800b33e:	68b8      	ldr	r0, [r7, #8]
 800b340:	f001 fff2 	bl	800d328 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	211a      	movs	r1, #26
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	4413      	add	r3, r2
 800b350:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b25b      	sxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da15      	bge.n	800b388 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	211a      	movs	r1, #26
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	4413      	add	r3, r2
 800b368:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b36c:	781a      	ldrb	r2, [r3, #0]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	211a      	movs	r1, #26
 800b378:	fb01 f303 	mul.w	r3, r1, r3
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b382:	881a      	ldrh	r2, [r3, #0]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	785b      	ldrb	r3, [r3, #1]
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f001 ff2d 	bl	800d1ee <USBH_AllocPipe>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	7819      	ldrb	r1, [r3, #0]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	7858      	ldrb	r0, [r3, #1]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	8952      	ldrh	r2, [r2, #10]
 800b3b4:	9202      	str	r2, [sp, #8]
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	9201      	str	r2, [sp, #4]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4623      	mov	r3, r4
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 fee5 	bl	800d190 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7f7 f8a4 	bl	800251c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	210a      	movs	r1, #10
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fbec 	bl	800bbb8 <USBH_FindInterface>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	2bff      	cmp	r3, #255	; 0xff
 800b3e8:	d002      	beq.n	800b3f0 <USBH_CDC_InterfaceInit+0x11a>
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d901      	bls.n	800b3f4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e0c2      	b.n	800b57a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	211a      	movs	r1, #26
 800b3fa:	fb01 f303 	mul.w	r3, r1, r3
 800b3fe:	4413      	add	r3, r2
 800b400:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	b25b      	sxtb	r3, r3
 800b408:	2b00      	cmp	r3, #0
 800b40a:	da16      	bge.n	800b43a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	211a      	movs	r1, #26
 800b412:	fb01 f303 	mul.w	r3, r1, r3
 800b416:	4413      	add	r3, r2
 800b418:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	211a      	movs	r1, #26
 800b428:	fb01 f303 	mul.w	r3, r1, r3
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b432:	881a      	ldrh	r2, [r3, #0]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	835a      	strh	r2, [r3, #26]
 800b438:	e015      	b.n	800b466 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	211a      	movs	r1, #26
 800b440:	fb01 f303 	mul.w	r3, r1, r3
 800b444:	4413      	add	r3, r2
 800b446:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b44a:	781a      	ldrb	r2, [r3, #0]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	211a      	movs	r1, #26
 800b456:	fb01 f303 	mul.w	r3, r1, r3
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b460:	881a      	ldrh	r2, [r3, #0]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	211a      	movs	r1, #26
 800b46c:	fb01 f303 	mul.w	r3, r1, r3
 800b470:	4413      	add	r3, r2
 800b472:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da16      	bge.n	800b4ac <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	211a      	movs	r1, #26
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	4413      	add	r3, r2
 800b48a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	211a      	movs	r1, #26
 800b49a:	fb01 f303 	mul.w	r3, r1, r3
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	835a      	strh	r2, [r3, #26]
 800b4aa:	e015      	b.n	800b4d8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	211a      	movs	r1, #26
 800b4b2:	fb01 f303 	mul.w	r3, r1, r3
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	211a      	movs	r1, #26
 800b4c8:	fb01 f303 	mul.w	r3, r1, r3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b4d2:	881a      	ldrh	r2, [r3, #0]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	7b9b      	ldrb	r3, [r3, #14]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 fe85 	bl	800d1ee <USBH_AllocPipe>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	7bdb      	ldrb	r3, [r3, #15]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 fe7b 	bl	800d1ee <USBH_AllocPipe>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	7b59      	ldrb	r1, [r3, #13]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	7b98      	ldrb	r0, [r3, #14]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	8b12      	ldrh	r2, [r2, #24]
 800b518:	9202      	str	r2, [sp, #8]
 800b51a:	2202      	movs	r2, #2
 800b51c:	9201      	str	r2, [sp, #4]
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	4623      	mov	r3, r4
 800b522:	4602      	mov	r2, r0
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 fe33 	bl	800d190 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	7b19      	ldrb	r1, [r3, #12]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	7bd8      	ldrb	r0, [r3, #15]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	8b52      	ldrh	r2, [r2, #26]
 800b542:	9202      	str	r2, [sp, #8]
 800b544:	2202      	movs	r2, #2
 800b546:	9201      	str	r2, [sp, #4]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	4623      	mov	r3, r4
 800b54c:	4602      	mov	r2, r0
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 fe1e 	bl	800d190 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	7b5b      	ldrb	r3, [r3, #13]
 800b560:	2200      	movs	r2, #0
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7f6 ffd9 	bl	800251c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	7b1b      	ldrb	r3, [r3, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7f6 ffd2 	bl	800251c <USBH_LL_SetToggle>

  return USBH_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd90      	pop	{r4, r7, pc}

0800b582 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00e      	beq.n	800b5ba <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 fe13 	bl	800d1ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 fe3e 	bl	800d230 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	7b1b      	ldrb	r3, [r3, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00e      	beq.n	800b5e0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	7b1b      	ldrb	r3, [r3, #12]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 fe00 	bl	800d1ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	7b1b      	ldrb	r3, [r3, #12]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 fe2b 	bl	800d230 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	7b5b      	ldrb	r3, [r3, #13]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00e      	beq.n	800b606 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	7b5b      	ldrb	r3, [r3, #13]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 fded 	bl	800d1ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	7b5b      	ldrb	r3, [r3, #13]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fe18 	bl	800d230 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00b      	beq.n	800b62a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 fe7c 	bl	800d318 <free>
    phost->pActiveClass->pData = 0U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b626:	2200      	movs	r2, #0
 800b628:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b642:	69db      	ldr	r3, [r3, #28]
 800b644:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3340      	adds	r3, #64	; 0x40
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8b2 	bl	800b7b6 <GetLineCoding>
 800b652:	4603      	mov	r3, r0
 800b654:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d105      	bne.n	800b668 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b662:	2102      	movs	r1, #2
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b668:	7afb      	ldrb	r3, [r7, #11]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b67c:	2301      	movs	r3, #1
 800b67e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b694:	2b04      	cmp	r3, #4
 800b696:	d877      	bhi.n	800b788 <USBH_CDC_Process+0x114>
 800b698:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <USBH_CDC_Process+0x2c>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6b5 	.word	0x0800b6b5
 800b6a4:	0800b6bb 	.word	0x0800b6bb
 800b6a8:	0800b6eb 	.word	0x0800b6eb
 800b6ac:	0800b75f 	.word	0x0800b75f
 800b6b0:	0800b76d 	.word	0x0800b76d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b8:	e06d      	b.n	800b796 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f897 	bl	800b7f4 <SetLineCoding>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d104      	bne.n	800b6da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b6d8:	e058      	b.n	800b78c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d055      	beq.n	800b78c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2204      	movs	r2, #4
 800b6e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b6e8:	e050      	b.n	800b78c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3340      	adds	r3, #64	; 0x40
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f860 	bl	800b7b6 <GetLineCoding>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d126      	bne.n	800b74e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	429a      	cmp	r2, r3
 800b716:	d13b      	bne.n	800b790 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b722:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b724:	429a      	cmp	r2, r3
 800b726:	d133      	bne.n	800b790 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b732:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b734:	429a      	cmp	r2, r3
 800b736:	d12b      	bne.n	800b790 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b740:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b742:	429a      	cmp	r2, r3
 800b744:	d124      	bne.n	800b790 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f958 	bl	800b9fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b74c:	e020      	b.n	800b790 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d01d      	beq.n	800b790 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2204      	movs	r2, #4
 800b758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b75c:	e018      	b.n	800b790 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f867 	bl	800b832 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f8da 	bl	800b91e <CDC_ProcessReception>
      break;
 800b76a:	e014      	b.n	800b796 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b76c:	2100      	movs	r1, #0
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 ffef 	bl	800c752 <USBH_ClrFeature>
 800b774:	4603      	mov	r3, r0
 800b776:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b786:	e005      	b.n	800b794 <USBH_CDC_Process+0x120>

    default:
      break;
 800b788:	bf00      	nop
 800b78a:	e004      	b.n	800b796 <USBH_CDC_Process+0x122>
      break;
 800b78c:	bf00      	nop
 800b78e:	e002      	b.n	800b796 <USBH_CDC_Process+0x122>
      break;
 800b790:	bf00      	nop
 800b792:	e000      	b.n	800b796 <USBH_CDC_Process+0x122>
      break;
 800b794:	bf00      	nop

  }

  return status;
 800b796:	7bfb      	ldrb	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	22a1      	movs	r2, #161	; 0xa1
 800b7c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2221      	movs	r2, #33	; 0x21
 800b7ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2207      	movs	r2, #7
 800b7dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2207      	movs	r2, #7
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fa81 	bl	800ccec <USBH_CtlReq>
 800b7ea:	4603      	mov	r3, r0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2221      	movs	r2, #33	; 0x21
 800b802:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2207      	movs	r2, #7
 800b81a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2207      	movs	r2, #7
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fa62 	bl	800ccec <USBH_CtlReq>
 800b828:	4603      	mov	r3, r0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b086      	sub	sp, #24
 800b836:	af02      	add	r7, sp, #8
 800b838:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b844:	2300      	movs	r3, #0
 800b846:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d002      	beq.n	800b858 <CDC_ProcessTransmission+0x26>
 800b852:	2b02      	cmp	r3, #2
 800b854:	d023      	beq.n	800b89e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b856:	e05e      	b.n	800b916 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	8b12      	ldrh	r2, [r2, #24]
 800b860:	4293      	cmp	r3, r2
 800b862:	d90b      	bls.n	800b87c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	69d9      	ldr	r1, [r3, #28]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8b1a      	ldrh	r2, [r3, #24]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	7b5b      	ldrb	r3, [r3, #13]
 800b870:	2001      	movs	r0, #1
 800b872:	9000      	str	r0, [sp, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fc48 	bl	800d10a <USBH_BulkSendData>
 800b87a:	e00b      	b.n	800b894 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	7b5b      	ldrb	r3, [r3, #13]
 800b88a:	2001      	movs	r0, #1
 800b88c:	9000      	str	r0, [sp, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 fc3b 	bl	800d10a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2202      	movs	r2, #2
 800b898:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b89c:	e03b      	b.n	800b916 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	7b5b      	ldrb	r3, [r3, #13]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7f6 fe0f 	bl	80024c8 <USBH_LL_GetURBState>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d128      	bne.n	800b906 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	8b12      	ldrh	r2, [r2, #24]
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d90e      	bls.n	800b8de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	8b12      	ldrh	r2, [r2, #24]
 800b8c8:	1a9a      	subs	r2, r3, r2
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	8b12      	ldrh	r2, [r2, #24]
 800b8d6:	441a      	add	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	61da      	str	r2, [r3, #28]
 800b8dc:	e002      	b.n	800b8e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8f4:	e00e      	b.n	800b914 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f868 	bl	800b9d4 <USBH_CDC_TransmitCallback>
      break;
 800b904:	e006      	b.n	800b914 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d103      	bne.n	800b914 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b914:	bf00      	nop
  }
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b930:	2300      	movs	r3, #0
 800b932:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d002      	beq.n	800b944 <CDC_ProcessReception+0x26>
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d00e      	beq.n	800b960 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b942:	e043      	b.n	800b9cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	6a19      	ldr	r1, [r3, #32]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	8b5a      	ldrh	r2, [r3, #26]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	7b1b      	ldrb	r3, [r3, #12]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 fbff 	bl	800d154 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2204      	movs	r2, #4
 800b95a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b95e:	e035      	b.n	800b9cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	7b1b      	ldrb	r3, [r3, #12]
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7f6 fdae 	bl	80024c8 <USBH_LL_GetURBState>
 800b96c:	4603      	mov	r3, r0
 800b96e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b970:	7cfb      	ldrb	r3, [r7, #19]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d129      	bne.n	800b9ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	7b1b      	ldrb	r3, [r3, #12]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7f6 fd11 	bl	80023a4 <USBH_LL_GetLastXferSize>
 800b982:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d016      	beq.n	800b9bc <CDC_ProcessReception+0x9e>
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	8b5b      	ldrh	r3, [r3, #26]
 800b992:	461a      	mov	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4293      	cmp	r3, r2
 800b998:	d910      	bls.n	800b9bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	6a1a      	ldr	r2, [r3, #32]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b9ba:	e006      	b.n	800b9ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f80f 	bl	800b9e8 <USBH_CDC_ReceiveCallback>
      break;
 800b9ca:	bf00      	nop
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ba24:	2302      	movs	r3, #2
 800ba26:	e029      	b.n	800ba7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	79fa      	ldrb	r2, [r7, #7]
 800ba2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f81f 	bl	800ba84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7f6 fbe1 	bl	800223c <USBH_LL_Init>

  return USBH_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e009      	b.n	800baaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	33e0      	adds	r3, #224	; 0xe0
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	2200      	movs	r2, #0
 800baa2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3301      	adds	r3, #1
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b0f      	cmp	r3, #15
 800baae:	d9f2      	bls.n	800ba96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bab0:	2300      	movs	r3, #0
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	e009      	b.n	800baca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4413      	add	r3, r2
 800babc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bac0:	2200      	movs	r2, #0
 800bac2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bad0:	d3f1      	bcc.n	800bab6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2240      	movs	r2, #64	; 0x40
 800baf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d016      	beq.n	800bb6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10e      	bne.n	800bb68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb50:	1c59      	adds	r1, r3, #1
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	33de      	adds	r3, #222	; 0xde
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]
 800bb66:	e004      	b.n	800bb72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	73fb      	strb	r3, [r7, #15]
 800bb6c:	e001      	b.n	800bb72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d204      	bcs.n	800bba6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	78fa      	ldrb	r2, [r7, #3]
 800bba0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bba4:	e001      	b.n	800bbaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bba6:	2302      	movs	r3, #2
 800bba8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	70fb      	strb	r3, [r7, #3]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70bb      	strb	r3, [r7, #2]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bbe0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbe2:	e025      	b.n	800bc30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	221a      	movs	r2, #26
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	3308      	adds	r3, #8
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	795b      	ldrb	r3, [r3, #5]
 800bbfa:	78fa      	ldrb	r2, [r7, #3]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d002      	beq.n	800bc06 <USBH_FindInterface+0x4e>
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	2bff      	cmp	r3, #255	; 0xff
 800bc04:	d111      	bne.n	800bc2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bc0a:	78ba      	ldrb	r2, [r7, #2]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d002      	beq.n	800bc16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc10:	78bb      	ldrb	r3, [r7, #2]
 800bc12:	2bff      	cmp	r3, #255	; 0xff
 800bc14:	d109      	bne.n	800bc2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc1a:	787a      	ldrb	r2, [r7, #1]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d002      	beq.n	800bc26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bc20:	787b      	ldrb	r3, [r7, #1]
 800bc22:	2bff      	cmp	r3, #255	; 0xff
 800bc24:	d101      	bne.n	800bc2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	e006      	b.n	800bc38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d9d6      	bls.n	800bbe4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bc36:	23ff      	movs	r3, #255	; 0xff
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7f6 fb31 	bl	80022b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bc52:	2101      	movs	r1, #1
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7f6 fc4a 	bl	80024ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af04      	add	r7, sp, #16
 800bc6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d102      	bne.n	800bc86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2203      	movs	r2, #3
 800bc84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b0b      	cmp	r3, #11
 800bc8e:	f200 81be 	bhi.w	800c00e <USBH_Process+0x3aa>
 800bc92:	a201      	add	r2, pc, #4	; (adr r2, 800bc98 <USBH_Process+0x34>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bcc9 	.word	0x0800bcc9
 800bc9c:	0800bcfb 	.word	0x0800bcfb
 800bca0:	0800bd63 	.word	0x0800bd63
 800bca4:	0800bfa9 	.word	0x0800bfa9
 800bca8:	0800c00f 	.word	0x0800c00f
 800bcac:	0800be07 	.word	0x0800be07
 800bcb0:	0800bf4f 	.word	0x0800bf4f
 800bcb4:	0800be3d 	.word	0x0800be3d
 800bcb8:	0800be5d 	.word	0x0800be5d
 800bcbc:	0800be7d 	.word	0x0800be7d
 800bcc0:	0800bec1 	.word	0x0800bec1
 800bcc4:	0800bf91 	.word	0x0800bf91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 819e 	beq.w	800c012 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bcdc:	20c8      	movs	r0, #200	; 0xc8
 800bcde:	f7f6 fc4d 	bl	800257c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7f6 fb43 	bl	800236e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcf8:	e18b      	b.n	800c012 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d107      	bne.n	800bd14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd12:	e18d      	b.n	800c030 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd1e:	d914      	bls.n	800bd4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bd26:	3301      	adds	r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d903      	bls.n	800bd42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	220d      	movs	r2, #13
 800bd3e:	701a      	strb	r2, [r3, #0]
      break;
 800bd40:	e176      	b.n	800c030 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
      break;
 800bd48:	e172      	b.n	800c030 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd50:	f103 020a 	add.w	r2, r3, #10
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bd5a:	200a      	movs	r0, #10
 800bd5c:	f7f6 fc0e 	bl	800257c <USBH_Delay>
      break;
 800bd60:	e166      	b.n	800c030 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d005      	beq.n	800bd78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd72:	2104      	movs	r1, #4
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd78:	2064      	movs	r0, #100	; 0x64
 800bd7a:	f7f6 fbff 	bl	800257c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7f6 face 	bl	8002320 <USBH_LL_GetSpeed>
 800bd84:	4603      	mov	r3, r0
 800bd86:	461a      	mov	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2205      	movs	r2, #5
 800bd92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd94:	2100      	movs	r1, #0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 fa29 	bl	800d1ee <USBH_AllocPipe>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	461a      	mov	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bda4:	2180      	movs	r1, #128	; 0x80
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f001 fa21 	bl	800d1ee <USBH_AllocPipe>
 800bdac:	4603      	mov	r3, r0
 800bdae:	461a      	mov	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7919      	ldrb	r1, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bdc8:	b292      	uxth	r2, r2
 800bdca:	9202      	str	r2, [sp, #8]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	9201      	str	r2, [sp, #4]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2280      	movs	r2, #128	; 0x80
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f001 f9da 	bl	800d190 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	7959      	ldrb	r1, [r3, #5]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bdf0:	b292      	uxth	r2, r2
 800bdf2:	9202      	str	r2, [sp, #8]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	9201      	str	r2, [sp, #4]
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f9c6 	bl	800d190 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be04:	e114      	b.n	800c030 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f918 	bl	800c03c <USBH_HandleEnum>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 80fe 	bne.w	800c016 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d103      	bne.n	800be34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2208      	movs	r2, #8
 800be30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be32:	e0f0      	b.n	800c016 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2207      	movs	r2, #7
 800be38:	701a      	strb	r2, [r3, #0]
      break;
 800be3a:	e0ec      	b.n	800c016 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 80e9 	beq.w	800c01a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be4e:	2101      	movs	r1, #1
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2208      	movs	r2, #8
 800be58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800be5a:	e0de      	b.n	800c01a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be62:	b29b      	uxth	r3, r3
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fc2c 	bl	800c6c4 <USBH_SetCfg>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f040 80d5 	bne.w	800c01e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2209      	movs	r2, #9
 800be78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be7a:	e0d0      	b.n	800c01e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b00      	cmp	r3, #0
 800be88:	d016      	beq.n	800beb8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be8a:	2101      	movs	r1, #1
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fc3c 	bl	800c70a <USBH_SetFeature>
 800be92:	4603      	mov	r3, r0
 800be94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d103      	bne.n	800bea6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	220a      	movs	r2, #10
 800bea2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bea4:	e0bd      	b.n	800c022 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b03      	cmp	r3, #3
 800beac:	f040 80b9 	bne.w	800c022 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	220a      	movs	r2, #10
 800beb4:	701a      	strb	r2, [r3, #0]
      break;
 800beb6:	e0b4      	b.n	800c022 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	220a      	movs	r2, #10
 800bebc:	701a      	strb	r2, [r3, #0]
      break;
 800bebe:	e0b0      	b.n	800c022 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 80ad 	beq.w	800c026 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]
 800bed8:	e016      	b.n	800bf08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800beda:	7bfa      	ldrb	r2, [r7, #15]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	32de      	adds	r2, #222	; 0xde
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	791a      	ldrb	r2, [r3, #4]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800beec:	429a      	cmp	r2, r3
 800beee:	d108      	bne.n	800bf02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bef0:	7bfa      	ldrb	r2, [r7, #15]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	32de      	adds	r2, #222	; 0xde
 800bef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bf00:	e005      	b.n	800bf0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	3301      	adds	r3, #1
 800bf06:	73fb      	strb	r3, [r7, #15]
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0e5      	beq.n	800beda <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d016      	beq.n	800bf46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4798      	blx	r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d109      	bne.n	800bf3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2206      	movs	r2, #6
 800bf2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf36:	2103      	movs	r1, #3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf3c:	e073      	b.n	800c026 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	220d      	movs	r2, #13
 800bf42:	701a      	strb	r2, [r3, #0]
      break;
 800bf44:	e06f      	b.n	800c026 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	220d      	movs	r2, #13
 800bf4a:	701a      	strb	r2, [r3, #0]
      break;
 800bf4c:	e06b      	b.n	800c026 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d017      	beq.n	800bf88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	4798      	blx	r3
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d103      	bne.n	800bf78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	220b      	movs	r2, #11
 800bf74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf76:	e058      	b.n	800c02a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d154      	bne.n	800c02a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	220d      	movs	r2, #13
 800bf84:	701a      	strb	r2, [r3, #0]
      break;
 800bf86:	e050      	b.n	800c02a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	220d      	movs	r2, #13
 800bf8c:	701a      	strb	r2, [r3, #0]
      break;
 800bf8e:	e04c      	b.n	800c02a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d049      	beq.n	800c02e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	4798      	blx	r3
      }
      break;
 800bfa6:	e042      	b.n	800c02e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff fd67 	bl	800ba84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfe4:	2105      	movs	r1, #5
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d107      	bne.n	800c006 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7ff fe20 	bl	800bc44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c004:	e014      	b.n	800c030 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7f6 f954 	bl	80022b4 <USBH_LL_Start>
      break;
 800c00c:	e010      	b.n	800c030 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c00e:	bf00      	nop
 800c010:	e00e      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c012:	bf00      	nop
 800c014:	e00c      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c016:	bf00      	nop
 800c018:	e00a      	b.n	800c030 <USBH_Process+0x3cc>
    break;
 800c01a:	bf00      	nop
 800c01c:	e008      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c01e:	bf00      	nop
 800c020:	e006      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c022:	bf00      	nop
 800c024:	e004      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <USBH_Process+0x3cc>
      break;
 800c02e:	bf00      	nop
  }
  return USBH_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop

0800c03c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af04      	add	r7, sp, #16
 800c042:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c044:	2301      	movs	r3, #1
 800c046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c048:	2301      	movs	r3, #1
 800c04a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	2b07      	cmp	r3, #7
 800c052:	f200 81c1 	bhi.w	800c3d8 <USBH_HandleEnum+0x39c>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <USBH_HandleEnum+0x20>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c07d 	.word	0x0800c07d
 800c060:	0800c13b 	.word	0x0800c13b
 800c064:	0800c1a5 	.word	0x0800c1a5
 800c068:	0800c233 	.word	0x0800c233
 800c06c:	0800c29d 	.word	0x0800c29d
 800c070:	0800c30d 	.word	0x0800c30d
 800c074:	0800c353 	.word	0x0800c353
 800c078:	0800c399 	.word	0x0800c399
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c07c:	2108      	movs	r1, #8
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa50 	bl	800c524 <USBH_Get_DevDesc>
 800c084:	4603      	mov	r3, r0
 800c086:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d130      	bne.n	800c0f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	7919      	ldrb	r1, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0b2:	b292      	uxth	r2, r2
 800c0b4:	9202      	str	r2, [sp, #8]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	9201      	str	r2, [sp, #4]
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2280      	movs	r2, #128	; 0x80
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f865 	bl	800d190 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7959      	ldrb	r1, [r3, #5]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0da:	b292      	uxth	r2, r2
 800c0dc:	9202      	str	r2, [sp, #8]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	9201      	str	r2, [sp, #4]
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f001 f851 	bl	800d190 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c0ee:	e175      	b.n	800c3dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	f040 8172 	bne.w	800c3dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0fe:	3301      	adds	r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d903      	bls.n	800c11a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	220d      	movs	r2, #13
 800c116:	701a      	strb	r2, [r3, #0]
      break;
 800c118:	e160      	b.n	800c3dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	795b      	ldrb	r3, [r3, #5]
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 f885 	bl	800d230 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	791b      	ldrb	r3, [r3, #4]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f001 f87f 	bl	800d230 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]
      break;
 800c138:	e150      	b.n	800c3dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c13a:	2112      	movs	r1, #18
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f9f1 	bl	800c524 <USBH_Get_DevDesc>
 800c142:	4603      	mov	r3, r0
 800c144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c152:	e145      	b.n	800c3e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c154:	7bbb      	ldrb	r3, [r7, #14]
 800c156:	2b03      	cmp	r3, #3
 800c158:	f040 8142 	bne.w	800c3e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c162:	3301      	adds	r3, #1
 800c164:	b2da      	uxtb	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c172:	2b03      	cmp	r3, #3
 800c174:	d903      	bls.n	800c17e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	220d      	movs	r2, #13
 800c17a:	701a      	strb	r2, [r3, #0]
      break;
 800c17c:	e130      	b.n	800c3e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	795b      	ldrb	r3, [r3, #5]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 f853 	bl	800d230 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	791b      	ldrb	r3, [r3, #4]
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f001 f84d 	bl	800d230 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
      break;
 800c1a2:	e11d      	b.n	800c3e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fa68 	bl	800c67c <USBH_SetAddress>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d132      	bne.n	800c21c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c1b6:	2002      	movs	r0, #2
 800c1b8:	f7f6 f9e0 	bl	800257c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2203      	movs	r2, #3
 800c1c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	7919      	ldrb	r1, [r3, #4]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1de:	b292      	uxth	r2, r2
 800c1e0:	9202      	str	r2, [sp, #8]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	9201      	str	r2, [sp, #4]
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2280      	movs	r2, #128	; 0x80
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 ffcf 	bl	800d190 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7959      	ldrb	r1, [r3, #5]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c206:	b292      	uxth	r2, r2
 800c208:	9202      	str	r2, [sp, #8]
 800c20a:	2200      	movs	r2, #0
 800c20c:	9201      	str	r2, [sp, #4]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	4603      	mov	r3, r0
 800c212:	2200      	movs	r2, #0
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 ffbb 	bl	800d190 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c21a:	e0e3      	b.n	800c3e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b03      	cmp	r3, #3
 800c220:	f040 80e0 	bne.w	800c3e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	220d      	movs	r2, #13
 800c228:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	705a      	strb	r2, [r3, #1]
      break;
 800c230:	e0d8      	b.n	800c3e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c232:	2109      	movs	r1, #9
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f99d 	bl	800c574 <USBH_Get_CfgDesc>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2204      	movs	r2, #4
 800c248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c24a:	e0cd      	b.n	800c3e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	2b03      	cmp	r3, #3
 800c250:	f040 80ca 	bne.w	800c3e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c25a:	3301      	adds	r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d903      	bls.n	800c276 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	220d      	movs	r2, #13
 800c272:	701a      	strb	r2, [r3, #0]
      break;
 800c274:	e0b8      	b.n	800c3e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	795b      	ldrb	r3, [r3, #5]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 ffd7 	bl	800d230 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	791b      	ldrb	r3, [r3, #4]
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 ffd1 	bl	800d230 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
      break;
 800c29a:	e0a5      	b.n	800c3e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f965 	bl	800c574 <USBH_Get_CfgDesc>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d103      	bne.n	800c2bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2ba:	e097      	b.n	800c3ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	f040 8094 	bne.w	800c3ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d903      	bls.n	800c2e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	220d      	movs	r2, #13
 800c2e2:	701a      	strb	r2, [r3, #0]
      break;
 800c2e4:	e082      	b.n	800c3ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	795b      	ldrb	r3, [r3, #5]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 ff9f 	bl	800d230 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	791b      	ldrb	r3, [r3, #4]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 ff99 	bl	800d230 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
      break;
 800c30a:	e06f      	b.n	800c3ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c312:	2b00      	cmp	r3, #0
 800c314:	d019      	beq.n	800c34a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c322:	23ff      	movs	r3, #255	; 0xff
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 f949 	bl	800c5bc <USBH_Get_StringDesc>
 800c32a:	4603      	mov	r3, r0
 800c32c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2206      	movs	r2, #6
 800c338:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c33a:	e059      	b.n	800c3f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d156      	bne.n	800c3f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2206      	movs	r2, #6
 800c346:	705a      	strb	r2, [r3, #1]
      break;
 800c348:	e052      	b.n	800c3f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2206      	movs	r2, #6
 800c34e:	705a      	strb	r2, [r3, #1]
      break;
 800c350:	e04e      	b.n	800c3f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d019      	beq.n	800c390 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c368:	23ff      	movs	r3, #255	; 0xff
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f926 	bl	800c5bc <USBH_Get_StringDesc>
 800c370:	4603      	mov	r3, r0
 800c372:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d103      	bne.n	800c382 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2207      	movs	r2, #7
 800c37e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c380:	e038      	b.n	800c3f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b03      	cmp	r3, #3
 800c386:	d135      	bne.n	800c3f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2207      	movs	r2, #7
 800c38c:	705a      	strb	r2, [r3, #1]
      break;
 800c38e:	e031      	b.n	800c3f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2207      	movs	r2, #7
 800c394:	705a      	strb	r2, [r3, #1]
      break;
 800c396:	e02d      	b.n	800c3f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d017      	beq.n	800c3d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3ae:	23ff      	movs	r3, #255	; 0xff
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f903 	bl	800c5bc <USBH_Get_StringDesc>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d102      	bne.n	800c3c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c3c4:	e018      	b.n	800c3f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d115      	bne.n	800c3f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d0:	e012      	b.n	800c3f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d6:	e00f      	b.n	800c3f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c3d8:	bf00      	nop
 800c3da:	e00e      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3dc:	bf00      	nop
 800c3de:	e00c      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3e0:	bf00      	nop
 800c3e2:	e00a      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3e4:	bf00      	nop
 800c3e6:	e008      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3e8:	bf00      	nop
 800c3ea:	e006      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3ec:	bf00      	nop
 800c3ee:	e004      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3f0:	bf00      	nop
 800c3f2:	e002      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3f4:	bf00      	nop
 800c3f6:	e000      	b.n	800c3fa <USBH_HandleEnum+0x3be>
      break;
 800c3f8:	bf00      	nop
  }
  return Status;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f804 	bl	800c446 <USBH_HandleSof>
}
 800c43e:	bf00      	nop
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b0b      	cmp	r3, #11
 800c456:	d10a      	bne.n	800c46e <USBH_HandleSof+0x28>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	4798      	blx	r3
  }
}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c486:	bf00      	nop
}
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c4a2:	bf00      	nop
}
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7f5 fef4 	bl	80022ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	791b      	ldrb	r3, [r3, #4]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fe91 	bl	800d230 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	795b      	ldrb	r3, [r3, #5]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fe8b 	bl	800d230 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af02      	add	r7, sp, #8
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c536:	78fb      	ldrb	r3, [r7, #3]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	4613      	mov	r3, r2
 800c53e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c542:	2100      	movs	r1, #0
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f864 	bl	800c612 <USBH_GetDescriptor>
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	b292      	uxth	r2, r2
 800c564:	4619      	mov	r1, r3
 800c566:	f000 f918 	bl	800c79a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af02      	add	r7, sp, #8
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	331c      	adds	r3, #28
 800c584:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c586:	887b      	ldrh	r3, [r7, #2]
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c590:	2100      	movs	r1, #0
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f83d 	bl	800c612 <USBH_GetDescriptor>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d107      	bne.n	800c5b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c5a2:	887b      	ldrh	r3, [r7, #2]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f987 	bl	800c8bc <USBH_ParseCfgDesc>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b088      	sub	sp, #32
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	607a      	str	r2, [r7, #4]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	72fb      	strb	r3, [r7, #11]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c5d0:	7afb      	ldrb	r3, [r7, #11]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c5d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c5e0:	893b      	ldrh	r3, [r7, #8]
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f812 	bl	800c612 <USBH_GetDescriptor>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d107      	bne.n	800c608 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c5fe:	893a      	ldrh	r2, [r7, #8]
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fb24 	bl	800cc50 <USBH_ParseStringDesc>
  }

  return status;
 800c608:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	607b      	str	r3, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	72fb      	strb	r3, [r7, #11]
 800c620:	4613      	mov	r3, r2
 800c622:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	789b      	ldrb	r3, [r3, #2]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d11c      	bne.n	800c666 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c62c:	7afb      	ldrb	r3, [r7, #11]
 800c62e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2206      	movs	r2, #6
 800c63c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	893a      	ldrh	r2, [r7, #8]
 800c642:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c644:	893b      	ldrh	r3, [r7, #8]
 800c646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c64a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c64e:	d104      	bne.n	800c65a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f240 4209 	movw	r2, #1033	; 0x409
 800c656:	829a      	strh	r2, [r3, #20]
 800c658:	e002      	b.n	800c660 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	8b3a      	ldrh	r2, [r7, #24]
 800c664:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c666:	8b3b      	ldrh	r3, [r7, #24]
 800c668:	461a      	mov	r2, r3
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f000 fb3d 	bl	800ccec <USBH_CtlReq>
 800c672:	4603      	mov	r3, r0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	789b      	ldrb	r3, [r3, #2]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d10f      	bne.n	800c6b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2205      	movs	r2, #5
 800c69a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fb19 	bl	800ccec <USBH_CtlReq>
 800c6ba:	4603      	mov	r3, r0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	789b      	ldrb	r3, [r3, #2]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d10e      	bne.n	800c6f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2209      	movs	r2, #9
 800c6e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	887a      	ldrh	r2, [r7, #2]
 800c6e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 faf6 	bl	800ccec <USBH_CtlReq>
 800c700:	4603      	mov	r3, r0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	789b      	ldrb	r3, [r3, #2]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d10f      	bne.n	800c73e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2203      	movs	r2, #3
 800c728:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fad2 	bl	800ccec <USBH_CtlReq>
 800c748:	4603      	mov	r3, r0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	789b      	ldrb	r3, [r3, #2]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d10f      	bne.n	800c786 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2202      	movs	r2, #2
 800c76a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c786:	2200      	movs	r2, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 faae 	bl	800ccec <USBH_CtlReq>
 800c790:	4603      	mov	r3, r0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b085      	sub	sp, #20
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	785a      	ldrb	r2, [r3, #1]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	3302      	adds	r3, #2
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	3303      	adds	r3, #3
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	791a      	ldrb	r2, [r3, #4]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	795a      	ldrb	r2, [r3, #5]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	799a      	ldrb	r2, [r3, #6]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	79da      	ldrb	r2, [r3, #7]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	79db      	ldrb	r3, [r3, #7]
 800c7f8:	2b20      	cmp	r3, #32
 800c7fa:	dc11      	bgt.n	800c820 <USBH_ParseDevDesc+0x86>
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	db16      	blt.n	800c82e <USBH_ParseDevDesc+0x94>
 800c800:	3b08      	subs	r3, #8
 800c802:	2201      	movs	r2, #1
 800c804:	fa02 f303 	lsl.w	r3, r2, r3
 800c808:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c80c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c810:	2b00      	cmp	r3, #0
 800c812:	bf14      	ite	ne
 800c814:	2301      	movne	r3, #1
 800c816:	2300      	moveq	r3, #0
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d102      	bne.n	800c824 <USBH_ParseDevDesc+0x8a>
 800c81e:	e006      	b.n	800c82e <USBH_ParseDevDesc+0x94>
 800c820:	2b40      	cmp	r3, #64	; 0x40
 800c822:	d104      	bne.n	800c82e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	79da      	ldrb	r2, [r3, #7]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	71da      	strb	r2, [r3, #7]
      break;
 800c82c:	e003      	b.n	800c836 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2240      	movs	r2, #64	; 0x40
 800c832:	71da      	strb	r2, [r3, #7]
      break;
 800c834:	bf00      	nop
  }

  if (length > 8U)
 800c836:	88fb      	ldrh	r3, [r7, #6]
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d939      	bls.n	800c8b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3308      	adds	r3, #8
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b29a      	uxth	r2, r3
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3309      	adds	r3, #9
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	021b      	lsls	r3, r3, #8
 800c84e:	b29b      	uxth	r3, r3
 800c850:	4313      	orrs	r3, r2
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	330a      	adds	r3, #10
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b29a      	uxth	r2, r3
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	330b      	adds	r3, #11
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	021b      	lsls	r3, r3, #8
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	4313      	orrs	r3, r2
 800c86e:	b29a      	uxth	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	330c      	adds	r3, #12
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	330d      	adds	r3, #13
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	b29b      	uxth	r3, r3
 800c884:	021b      	lsls	r3, r3, #8
 800c886:	b29b      	uxth	r3, r3
 800c888:	4313      	orrs	r3, r2
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	7b9a      	ldrb	r2, [r3, #14]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	7bda      	ldrb	r2, [r3, #15]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	7c1a      	ldrb	r2, [r3, #16]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	7c5a      	ldrb	r2, [r3, #17]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	745a      	strb	r2, [r3, #17]
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08c      	sub	sp, #48	; 0x30
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c8d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	6a3b      	ldr	r3, [r7, #32]
 800c8f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	785a      	ldrb	r2, [r3, #1]
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3302      	adds	r3, #2
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b29a      	uxth	r2, r3
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	3303      	adds	r3, #3
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4313      	orrs	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c918:	bf28      	it	cs
 800c91a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c91e:	b29a      	uxth	r2, r3
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	791a      	ldrb	r2, [r3, #4]
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	795a      	ldrb	r2, [r3, #5]
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	799a      	ldrb	r2, [r3, #6]
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	79da      	ldrb	r2, [r3, #7]
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	7a1a      	ldrb	r2, [r3, #8]
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b09      	cmp	r3, #9
 800c952:	d002      	beq.n	800c95a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	2209      	movs	r2, #9
 800c958:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	2b09      	cmp	r3, #9
 800c95e:	f240 809d 	bls.w	800ca9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c962:	2309      	movs	r3, #9
 800c964:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c966:	2300      	movs	r3, #0
 800c968:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c96a:	e081      	b.n	800ca70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c96c:	f107 0316 	add.w	r3, r7, #22
 800c970:	4619      	mov	r1, r3
 800c972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c974:	f000 f99f 	bl	800ccb6 <USBH_GetNextDesc>
 800c978:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	785b      	ldrb	r3, [r3, #1]
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d176      	bne.n	800ca70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b09      	cmp	r3, #9
 800c988:	d002      	beq.n	800c990 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	2209      	movs	r2, #9
 800c98e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c994:	221a      	movs	r2, #26
 800c996:	fb02 f303 	mul.w	r3, r2, r3
 800c99a:	3308      	adds	r3, #8
 800c99c:	6a3a      	ldr	r2, [r7, #32]
 800c99e:	4413      	add	r3, r2
 800c9a0:	3302      	adds	r3, #2
 800c9a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c9a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9a6:	69f8      	ldr	r0, [r7, #28]
 800c9a8:	f000 f87e 	bl	800caa8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c9b6:	e043      	b.n	800ca40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9b8:	f107 0316 	add.w	r3, r7, #22
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9c0:	f000 f979 	bl	800ccb6 <USBH_GetNextDesc>
 800c9c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	2b05      	cmp	r3, #5
 800c9cc:	d138      	bne.n	800ca40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	795b      	ldrb	r3, [r3, #5]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d10f      	bne.n	800c9f6 <USBH_ParseCfgDesc+0x13a>
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	799b      	ldrb	r3, [r3, #6]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d10b      	bne.n	800c9f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	79db      	ldrb	r3, [r3, #7]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10f      	bne.n	800ca06 <USBH_ParseCfgDesc+0x14a>
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b09      	cmp	r3, #9
 800c9ec:	d00b      	beq.n	800ca06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f0:	2209      	movs	r2, #9
 800c9f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9f4:	e007      	b.n	800ca06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b07      	cmp	r3, #7
 800c9fc:	d004      	beq.n	800ca08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	2207      	movs	r2, #7
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	e000      	b.n	800ca08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ca06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca10:	3201      	adds	r2, #1
 800ca12:	00d2      	lsls	r2, r2, #3
 800ca14:	211a      	movs	r1, #26
 800ca16:	fb01 f303 	mul.w	r3, r1, r3
 800ca1a:	4413      	add	r3, r2
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	6a3a      	ldr	r2, [r7, #32]
 800ca20:	4413      	add	r3, r2
 800ca22:	3304      	adds	r3, #4
 800ca24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ca26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca28:	69b9      	ldr	r1, [r7, #24]
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 f86b 	bl	800cb06 <USBH_ParseEPDesc>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ca36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	791b      	ldrb	r3, [r3, #4]
 800ca44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d204      	bcs.n	800ca56 <USBH_ParseCfgDesc+0x19a>
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	885a      	ldrh	r2, [r3, #2]
 800ca50:	8afb      	ldrh	r3, [r7, #22]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d8b0      	bhi.n	800c9b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	791b      	ldrb	r3, [r3, #4]
 800ca5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d201      	bcs.n	800ca66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e01c      	b.n	800caa0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ca66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d805      	bhi.n	800ca84 <USBH_ParseCfgDesc+0x1c8>
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	885a      	ldrh	r2, [r3, #2]
 800ca7c:	8afb      	ldrh	r3, [r7, #22]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	f63f af74 	bhi.w	800c96c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	791b      	ldrb	r3, [r3, #4]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	bf28      	it	cs
 800ca8c:	2302      	movcs	r3, #2
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d201      	bcs.n	800ca9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e001      	b.n	800caa0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ca9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3730      	adds	r7, #48	; 0x30
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	781a      	ldrb	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	785a      	ldrb	r2, [r3, #1]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	789a      	ldrb	r2, [r3, #2]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	78da      	ldrb	r2, [r3, #3]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	791a      	ldrb	r2, [r3, #4]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	795a      	ldrb	r2, [r3, #5]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	799a      	ldrb	r2, [r3, #6]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	79da      	ldrb	r2, [r3, #7]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	7a1a      	ldrb	r2, [r3, #8]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	721a      	strb	r2, [r3, #8]
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b087      	sub	sp, #28
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	781a      	ldrb	r2, [r3, #0]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	785a      	ldrb	r2, [r3, #1]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	789a      	ldrb	r2, [r3, #2]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	78da      	ldrb	r2, [r3, #3]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3304      	adds	r3, #4
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	3305      	adds	r3, #5
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	021b      	lsls	r3, r3, #8
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	799a      	ldrb	r2, [r3, #6]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	889b      	ldrh	r3, [r3, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d102      	bne.n	800cb68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cb62:	2303      	movs	r3, #3
 800cb64:	75fb      	strb	r3, [r7, #23]
 800cb66:	e033      	b.n	800cbd0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	889b      	ldrh	r3, [r3, #4]
 800cb6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb70:	f023 0307 	bic.w	r3, r3, #7
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	889b      	ldrh	r3, [r3, #4]
 800cb7e:	b21a      	sxth	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3304      	adds	r3, #4
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	b299      	uxth	r1, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3305      	adds	r3, #5
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	021b      	lsls	r3, r3, #8
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	430b      	orrs	r3, r1
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d110      	bne.n	800cbc2 <USBH_ParseEPDesc+0xbc>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3304      	adds	r3, #4
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	b299      	uxth	r1, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3305      	adds	r3, #5
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	430b      	orrs	r3, r1
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	b21b      	sxth	r3, r3
 800cbba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbbe:	b21b      	sxth	r3, r3
 800cbc0:	e001      	b.n	800cbc6 <USBH_ParseEPDesc+0xc0>
 800cbc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b21b      	sxth	r3, r3
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d116      	bne.n	800cc08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	78db      	ldrb	r3, [r3, #3]
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d005      	beq.n	800cbf2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	78db      	ldrb	r3, [r3, #3]
 800cbea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	d127      	bne.n	800cc42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	799b      	ldrb	r3, [r3, #6]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <USBH_ParseEPDesc+0xfc>
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	799b      	ldrb	r3, [r3, #6]
 800cbfe:	2b10      	cmp	r3, #16
 800cc00:	d91f      	bls.n	800cc42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cc02:	2303      	movs	r3, #3
 800cc04:	75fb      	strb	r3, [r7, #23]
 800cc06:	e01c      	b.n	800cc42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	78db      	ldrb	r3, [r3, #3]
 800cc0c:	f003 0303 	and.w	r3, r3, #3
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d10a      	bne.n	800cc2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	799b      	ldrb	r3, [r3, #6]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <USBH_ParseEPDesc+0x11e>
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	799b      	ldrb	r3, [r3, #6]
 800cc20:	2b10      	cmp	r3, #16
 800cc22:	d90e      	bls.n	800cc42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cc24:	2303      	movs	r3, #3
 800cc26:	75fb      	strb	r3, [r7, #23]
 800cc28:	e00b      	b.n	800cc42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	78db      	ldrb	r3, [r3, #3]
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d105      	bne.n	800cc42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	799b      	ldrb	r3, [r3, #6]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	371c      	adds	r7, #28
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d120      	bne.n	800ccaa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	1e9a      	subs	r2, r3, #2
 800cc6e:	88fb      	ldrh	r3, [r7, #6]
 800cc70:	4293      	cmp	r3, r2
 800cc72:	bf28      	it	cs
 800cc74:	4613      	movcs	r3, r2
 800cc76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3302      	adds	r3, #2
 800cc7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	82fb      	strh	r3, [r7, #22]
 800cc82:	e00b      	b.n	800cc9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc84:	8afb      	ldrh	r3, [r7, #22]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	4413      	add	r3, r2
 800cc8a:	781a      	ldrb	r2, [r3, #0]
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	3301      	adds	r3, #1
 800cc94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc96:	8afb      	ldrh	r3, [r7, #22]
 800cc98:	3302      	adds	r3, #2
 800cc9a:	82fb      	strh	r3, [r7, #22]
 800cc9c:	8afa      	ldrh	r2, [r7, #22]
 800cc9e:	8abb      	ldrh	r3, [r7, #20]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d3ef      	bcc.n	800cc84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
  }
}
 800ccaa:	bf00      	nop
 800ccac:	371c      	adds	r7, #28
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	b085      	sub	sp, #20
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	881a      	ldrh	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	4413      	add	r3, r2
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccde:	68fb      	ldr	r3, [r7, #12]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	789b      	ldrb	r3, [r3, #2]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d002      	beq.n	800cd0c <USBH_CtlReq+0x20>
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d00f      	beq.n	800cd2a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cd0a:	e027      	b.n	800cd5c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	88fa      	ldrh	r2, [r7, #6]
 800cd16:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2202      	movs	r2, #2
 800cd22:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cd24:	2301      	movs	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]
      break;
 800cd28:	e018      	b.n	800cd5c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f000 f81c 	bl	800cd68 <USBH_HandleControl>
 800cd30:	4603      	mov	r3, r0
 800cd32:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <USBH_CtlReq+0x54>
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d106      	bne.n	800cd4e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2201      	movs	r2, #1
 800cd44:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	761a      	strb	r2, [r3, #24]
      break;
 800cd4c:	e005      	b.n	800cd5a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d102      	bne.n	800cd5a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2201      	movs	r2, #1
 800cd58:	709a      	strb	r2, [r3, #2]
      break;
 800cd5a:	bf00      	nop
  }
  return status;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd70:	2301      	movs	r3, #1
 800cd72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7e1b      	ldrb	r3, [r3, #24]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	2b0a      	cmp	r3, #10
 800cd80:	f200 8156 	bhi.w	800d030 <USBH_HandleControl+0x2c8>
 800cd84:	a201      	add	r2, pc, #4	; (adr r2, 800cd8c <USBH_HandleControl+0x24>)
 800cd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8a:	bf00      	nop
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	0800cdd3 	.word	0x0800cdd3
 800cd94:	0800ce3d 	.word	0x0800ce3d
 800cd98:	0800ce63 	.word	0x0800ce63
 800cd9c:	0800ce9b 	.word	0x0800ce9b
 800cda0:	0800cec5 	.word	0x0800cec5
 800cda4:	0800cf17 	.word	0x0800cf17
 800cda8:	0800cf39 	.word	0x0800cf39
 800cdac:	0800cf75 	.word	0x0800cf75
 800cdb0:	0800cf9b 	.word	0x0800cf9b
 800cdb4:	0800cfd9 	.word	0x0800cfd9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f103 0110 	add.w	r1, r3, #16
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	795b      	ldrb	r3, [r3, #5]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f943 	bl	800d050 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2202      	movs	r2, #2
 800cdce:	761a      	strb	r2, [r3, #24]
      break;
 800cdd0:	e139      	b.n	800d046 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	795b      	ldrb	r3, [r3, #5]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7f5 fb75 	bl	80024c8 <USBH_LL_GetURBState>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cde2:	7bbb      	ldrb	r3, [r7, #14]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d11e      	bne.n	800ce26 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7c1b      	ldrb	r3, [r3, #16]
 800cdec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdf0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8adb      	ldrh	r3, [r3, #22]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdfa:	7b7b      	ldrb	r3, [r7, #13]
 800cdfc:	2b80      	cmp	r3, #128	; 0x80
 800cdfe:	d103      	bne.n	800ce08 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2203      	movs	r2, #3
 800ce04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce06:	e115      	b.n	800d034 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2205      	movs	r2, #5
 800ce0c:	761a      	strb	r2, [r3, #24]
      break;
 800ce0e:	e111      	b.n	800d034 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ce10:	7b7b      	ldrb	r3, [r7, #13]
 800ce12:	2b80      	cmp	r3, #128	; 0x80
 800ce14:	d103      	bne.n	800ce1e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2209      	movs	r2, #9
 800ce1a:	761a      	strb	r2, [r3, #24]
      break;
 800ce1c:	e10a      	b.n	800d034 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2207      	movs	r2, #7
 800ce22:	761a      	strb	r2, [r3, #24]
      break;
 800ce24:	e106      	b.n	800d034 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d003      	beq.n	800ce34 <USBH_HandleControl+0xcc>
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	f040 8100 	bne.w	800d034 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	220b      	movs	r2, #11
 800ce38:	761a      	strb	r2, [r3, #24]
      break;
 800ce3a:	e0fb      	b.n	800d034 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6899      	ldr	r1, [r3, #8]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	899a      	ldrh	r2, [r3, #12]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	791b      	ldrb	r3, [r3, #4]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f93a 	bl	800d0ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	761a      	strb	r2, [r3, #24]
      break;
 800ce60:	e0f1      	b.n	800d046 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	791b      	ldrb	r3, [r3, #4]
 800ce66:	4619      	mov	r1, r3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7f5 fb2d 	bl	80024c8 <USBH_LL_GetURBState>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d102      	bne.n	800ce7e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2209      	movs	r2, #9
 800ce7c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d102      	bne.n	800ce8a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce84:	2303      	movs	r3, #3
 800ce86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce88:	e0d6      	b.n	800d038 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	f040 80d3 	bne.w	800d038 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	220b      	movs	r2, #11
 800ce96:	761a      	strb	r2, [r3, #24]
      break;
 800ce98:	e0ce      	b.n	800d038 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6899      	ldr	r1, [r3, #8]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	899a      	ldrh	r2, [r3, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	795b      	ldrb	r3, [r3, #5]
 800cea6:	2001      	movs	r0, #1
 800cea8:	9000      	str	r0, [sp, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f8ea 	bl	800d084 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2206      	movs	r2, #6
 800cec0:	761a      	strb	r2, [r3, #24]
      break;
 800cec2:	e0c0      	b.n	800d046 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	795b      	ldrb	r3, [r3, #5]
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7f5 fafc 	bl	80024c8 <USBH_LL_GetURBState>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d103      	bne.n	800cee2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2207      	movs	r2, #7
 800cede:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cee0:	e0ac      	b.n	800d03c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cee2:	7bbb      	ldrb	r3, [r7, #14]
 800cee4:	2b05      	cmp	r3, #5
 800cee6:	d105      	bne.n	800cef4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	220c      	movs	r2, #12
 800ceec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ceee:	2303      	movs	r3, #3
 800cef0:	73fb      	strb	r3, [r7, #15]
      break;
 800cef2:	e0a3      	b.n	800d03c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d103      	bne.n	800cf02 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2205      	movs	r2, #5
 800cefe:	761a      	strb	r2, [r3, #24]
      break;
 800cf00:	e09c      	b.n	800d03c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cf02:	7bbb      	ldrb	r3, [r7, #14]
 800cf04:	2b04      	cmp	r3, #4
 800cf06:	f040 8099 	bne.w	800d03c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	220b      	movs	r2, #11
 800cf0e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cf10:	2302      	movs	r3, #2
 800cf12:	73fb      	strb	r3, [r7, #15]
      break;
 800cf14:	e092      	b.n	800d03c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	791b      	ldrb	r3, [r3, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f8d5 	bl	800d0ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2208      	movs	r2, #8
 800cf34:	761a      	strb	r2, [r3, #24]

      break;
 800cf36:	e086      	b.n	800d046 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	791b      	ldrb	r3, [r3, #4]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7f5 fac2 	bl	80024c8 <USBH_LL_GetURBState>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d105      	bne.n	800cf5a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	220d      	movs	r2, #13
 800cf52:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf58:	e072      	b.n	800d040 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d103      	bne.n	800cf68 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	220b      	movs	r2, #11
 800cf64:	761a      	strb	r2, [r3, #24]
      break;
 800cf66:	e06b      	b.n	800d040 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
 800cf6a:	2b05      	cmp	r3, #5
 800cf6c:	d168      	bne.n	800d040 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	73fb      	strb	r3, [r7, #15]
      break;
 800cf72:	e065      	b.n	800d040 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	795b      	ldrb	r3, [r3, #5]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	9200      	str	r2, [sp, #0]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2100      	movs	r1, #0
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f87f 	bl	800d084 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	220a      	movs	r2, #10
 800cf96:	761a      	strb	r2, [r3, #24]
      break;
 800cf98:	e055      	b.n	800d046 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	795b      	ldrb	r3, [r3, #5]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7f5 fa91 	bl	80024c8 <USBH_LL_GetURBState>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d105      	bne.n	800cfbc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	220d      	movs	r2, #13
 800cfb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cfba:	e043      	b.n	800d044 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d103      	bne.n	800cfca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2209      	movs	r2, #9
 800cfc6:	761a      	strb	r2, [r3, #24]
      break;
 800cfc8:	e03c      	b.n	800d044 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	d139      	bne.n	800d044 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	220b      	movs	r2, #11
 800cfd4:	761a      	strb	r2, [r3, #24]
      break;
 800cfd6:	e035      	b.n	800d044 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	7e5b      	ldrb	r3, [r3, #25]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	765a      	strb	r2, [r3, #25]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7e5b      	ldrb	r3, [r3, #25]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d806      	bhi.n	800cffa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cff8:	e025      	b.n	800d046 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d000:	2106      	movs	r1, #6
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	795b      	ldrb	r3, [r3, #5]
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f90c 	bl	800d230 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f906 	bl	800d230 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d02a:	2302      	movs	r3, #2
 800d02c:	73fb      	strb	r3, [r7, #15]
      break;
 800d02e:	e00a      	b.n	800d046 <USBH_HandleControl+0x2de>

    default:
      break;
 800d030:	bf00      	nop
 800d032:	e008      	b.n	800d046 <USBH_HandleControl+0x2de>
      break;
 800d034:	bf00      	nop
 800d036:	e006      	b.n	800d046 <USBH_HandleControl+0x2de>
      break;
 800d038:	bf00      	nop
 800d03a:	e004      	b.n	800d046 <USBH_HandleControl+0x2de>
      break;
 800d03c:	bf00      	nop
 800d03e:	e002      	b.n	800d046 <USBH_HandleControl+0x2de>
      break;
 800d040:	bf00      	nop
 800d042:	e000      	b.n	800d046 <USBH_HandleControl+0x2de>
      break;
 800d044:	bf00      	nop
  }

  return status;
 800d046:	7bfb      	ldrb	r3, [r7, #15]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b088      	sub	sp, #32
 800d054:	af04      	add	r7, sp, #16
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d05e:	79f9      	ldrb	r1, [r7, #7]
 800d060:	2300      	movs	r3, #0
 800d062:	9303      	str	r3, [sp, #12]
 800d064:	2308      	movs	r3, #8
 800d066:	9302      	str	r3, [sp, #8]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	9301      	str	r3, [sp, #4]
 800d06c:	2300      	movs	r3, #0
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	2300      	movs	r3, #0
 800d072:	2200      	movs	r2, #0
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7f5 f9f6 	bl	8002466 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b088      	sub	sp, #32
 800d088:	af04      	add	r7, sp, #16
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	4611      	mov	r1, r2
 800d090:	461a      	mov	r2, r3
 800d092:	460b      	mov	r3, r1
 800d094:	80fb      	strh	r3, [r7, #6]
 800d096:	4613      	mov	r3, r2
 800d098:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0a8:	7979      	ldrb	r1, [r7, #5]
 800d0aa:	7e3b      	ldrb	r3, [r7, #24]
 800d0ac:	9303      	str	r3, [sp, #12]
 800d0ae:	88fb      	ldrh	r3, [r7, #6]
 800d0b0:	9302      	str	r3, [sp, #8]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2200      	movs	r2, #0
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f7f5 f9d1 	bl	8002466 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b088      	sub	sp, #32
 800d0d2:	af04      	add	r7, sp, #16
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	461a      	mov	r2, r3
 800d0dc:	460b      	mov	r3, r1
 800d0de:	80fb      	strh	r3, [r7, #6]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0e4:	7979      	ldrb	r1, [r7, #5]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	88fb      	ldrh	r3, [r7, #6]
 800d0ec:	9302      	str	r3, [sp, #8]
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7f5 f9b3 	bl	8002466 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d100:	2300      	movs	r3, #0

}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af04      	add	r7, sp, #16
 800d110:	60f8      	str	r0, [r7, #12]
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	4611      	mov	r1, r2
 800d116:	461a      	mov	r2, r3
 800d118:	460b      	mov	r3, r1
 800d11a:	80fb      	strh	r3, [r7, #6]
 800d11c:	4613      	mov	r3, r2
 800d11e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d12e:	7979      	ldrb	r1, [r7, #5]
 800d130:	7e3b      	ldrb	r3, [r7, #24]
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	2301      	movs	r3, #1
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	2302      	movs	r3, #2
 800d142:	2200      	movs	r2, #0
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7f5 f98e 	bl	8002466 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af04      	add	r7, sp, #16
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4611      	mov	r1, r2
 800d160:	461a      	mov	r2, r3
 800d162:	460b      	mov	r3, r1
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	4613      	mov	r3, r2
 800d168:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d16a:	7979      	ldrb	r1, [r7, #5]
 800d16c:	2300      	movs	r3, #0
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	88fb      	ldrh	r3, [r7, #6]
 800d172:	9302      	str	r3, [sp, #8]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	2301      	movs	r3, #1
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	2302      	movs	r3, #2
 800d17e:	2201      	movs	r2, #1
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7f5 f970 	bl	8002466 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af04      	add	r7, sp, #16
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	4603      	mov	r3, r0
 800d1a0:	70fb      	strb	r3, [r7, #3]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70bb      	strb	r3, [r7, #2]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d1aa:	7878      	ldrb	r0, [r7, #1]
 800d1ac:	78ba      	ldrb	r2, [r7, #2]
 800d1ae:	78f9      	ldrb	r1, [r7, #3]
 800d1b0:	8b3b      	ldrh	r3, [r7, #24]
 800d1b2:	9302      	str	r3, [sp, #8]
 800d1b4:	7d3b      	ldrb	r3, [r7, #20]
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	7c3b      	ldrb	r3, [r7, #16]
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	4603      	mov	r3, r0
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7f5 f903 	bl	80023ca <USBH_LL_OpenPipe>

  return USBH_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7f5 f922 	bl	8002428 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f836 	bl	800d26c <USBH_GetFreePipe>
 800d200:	4603      	mov	r3, r0
 800d202:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d204:	89fb      	ldrh	r3, [r7, #14]
 800d206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d00a      	beq.n	800d224 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d20e:	78fa      	ldrb	r2, [r7, #3]
 800d210:	89fb      	ldrh	r3, [r7, #14]
 800d212:	f003 030f 	and.w	r3, r3, #15
 800d216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d21a:	6879      	ldr	r1, [r7, #4]
 800d21c:	33e0      	adds	r3, #224	; 0xe0
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d224:	89fb      	ldrh	r3, [r7, #14]
 800d226:	b2db      	uxtb	r3, r3
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	2b0f      	cmp	r3, #15
 800d240:	d80d      	bhi.n	800d25e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d242:	78fb      	ldrb	r3, [r7, #3]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	33e0      	adds	r3, #224	; 0xe0
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	33e0      	adds	r3, #224	; 0xe0
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	440b      	add	r3, r1
 800d25c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d278:	2300      	movs	r3, #0
 800d27a:	73fb      	strb	r3, [r7, #15]
 800d27c:	e00f      	b.n	800d29e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	33e0      	adds	r3, #224	; 0xe0
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d102      	bne.n	800d298 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
 800d294:	b29b      	uxth	r3, r3
 800d296:	e007      	b.n	800d2a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	3301      	adds	r3, #1
 800d29c:	73fb      	strb	r3, [r7, #15]
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	2b0f      	cmp	r3, #15
 800d2a2:	d9ec      	bls.n	800d27e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d2a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <__errno>:
 800d2b4:	4b01      	ldr	r3, [pc, #4]	; (800d2bc <__errno+0x8>)
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	20000030 	.word	0x20000030

0800d2c0 <__libc_init_array>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4d0d      	ldr	r5, [pc, #52]	; (800d2f8 <__libc_init_array+0x38>)
 800d2c4:	4c0d      	ldr	r4, [pc, #52]	; (800d2fc <__libc_init_array+0x3c>)
 800d2c6:	1b64      	subs	r4, r4, r5
 800d2c8:	10a4      	asrs	r4, r4, #2
 800d2ca:	2600      	movs	r6, #0
 800d2cc:	42a6      	cmp	r6, r4
 800d2ce:	d109      	bne.n	800d2e4 <__libc_init_array+0x24>
 800d2d0:	4d0b      	ldr	r5, [pc, #44]	; (800d300 <__libc_init_array+0x40>)
 800d2d2:	4c0c      	ldr	r4, [pc, #48]	; (800d304 <__libc_init_array+0x44>)
 800d2d4:	f000 fdf4 	bl	800dec0 <_init>
 800d2d8:	1b64      	subs	r4, r4, r5
 800d2da:	10a4      	asrs	r4, r4, #2
 800d2dc:	2600      	movs	r6, #0
 800d2de:	42a6      	cmp	r6, r4
 800d2e0:	d105      	bne.n	800d2ee <__libc_init_array+0x2e>
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e8:	4798      	blx	r3
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7ee      	b.n	800d2cc <__libc_init_array+0xc>
 800d2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f2:	4798      	blx	r3
 800d2f4:	3601      	adds	r6, #1
 800d2f6:	e7f2      	b.n	800d2de <__libc_init_array+0x1e>
 800d2f8:	0800df7c 	.word	0x0800df7c
 800d2fc:	0800df7c 	.word	0x0800df7c
 800d300:	0800df7c 	.word	0x0800df7c
 800d304:	0800df80 	.word	0x0800df80

0800d308 <malloc>:
 800d308:	4b02      	ldr	r3, [pc, #8]	; (800d314 <malloc+0xc>)
 800d30a:	4601      	mov	r1, r0
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	f000 b87f 	b.w	800d410 <_malloc_r>
 800d312:	bf00      	nop
 800d314:	20000030 	.word	0x20000030

0800d318 <free>:
 800d318:	4b02      	ldr	r3, [pc, #8]	; (800d324 <free+0xc>)
 800d31a:	4601      	mov	r1, r0
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	f000 b80b 	b.w	800d338 <_free_r>
 800d322:	bf00      	nop
 800d324:	20000030 	.word	0x20000030

0800d328 <memset>:
 800d328:	4402      	add	r2, r0
 800d32a:	4603      	mov	r3, r0
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d100      	bne.n	800d332 <memset+0xa>
 800d330:	4770      	bx	lr
 800d332:	f803 1b01 	strb.w	r1, [r3], #1
 800d336:	e7f9      	b.n	800d32c <memset+0x4>

0800d338 <_free_r>:
 800d338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d33a:	2900      	cmp	r1, #0
 800d33c:	d044      	beq.n	800d3c8 <_free_r+0x90>
 800d33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d342:	9001      	str	r0, [sp, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f1a1 0404 	sub.w	r4, r1, #4
 800d34a:	bfb8      	it	lt
 800d34c:	18e4      	addlt	r4, r4, r3
 800d34e:	f000 fcff 	bl	800dd50 <__malloc_lock>
 800d352:	4a1e      	ldr	r2, [pc, #120]	; (800d3cc <_free_r+0x94>)
 800d354:	9801      	ldr	r0, [sp, #4]
 800d356:	6813      	ldr	r3, [r2, #0]
 800d358:	b933      	cbnz	r3, 800d368 <_free_r+0x30>
 800d35a:	6063      	str	r3, [r4, #4]
 800d35c:	6014      	str	r4, [r2, #0]
 800d35e:	b003      	add	sp, #12
 800d360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d364:	f000 bcfa 	b.w	800dd5c <__malloc_unlock>
 800d368:	42a3      	cmp	r3, r4
 800d36a:	d908      	bls.n	800d37e <_free_r+0x46>
 800d36c:	6825      	ldr	r5, [r4, #0]
 800d36e:	1961      	adds	r1, r4, r5
 800d370:	428b      	cmp	r3, r1
 800d372:	bf01      	itttt	eq
 800d374:	6819      	ldreq	r1, [r3, #0]
 800d376:	685b      	ldreq	r3, [r3, #4]
 800d378:	1949      	addeq	r1, r1, r5
 800d37a:	6021      	streq	r1, [r4, #0]
 800d37c:	e7ed      	b.n	800d35a <_free_r+0x22>
 800d37e:	461a      	mov	r2, r3
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	b10b      	cbz	r3, 800d388 <_free_r+0x50>
 800d384:	42a3      	cmp	r3, r4
 800d386:	d9fa      	bls.n	800d37e <_free_r+0x46>
 800d388:	6811      	ldr	r1, [r2, #0]
 800d38a:	1855      	adds	r5, r2, r1
 800d38c:	42a5      	cmp	r5, r4
 800d38e:	d10b      	bne.n	800d3a8 <_free_r+0x70>
 800d390:	6824      	ldr	r4, [r4, #0]
 800d392:	4421      	add	r1, r4
 800d394:	1854      	adds	r4, r2, r1
 800d396:	42a3      	cmp	r3, r4
 800d398:	6011      	str	r1, [r2, #0]
 800d39a:	d1e0      	bne.n	800d35e <_free_r+0x26>
 800d39c:	681c      	ldr	r4, [r3, #0]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	6053      	str	r3, [r2, #4]
 800d3a2:	4421      	add	r1, r4
 800d3a4:	6011      	str	r1, [r2, #0]
 800d3a6:	e7da      	b.n	800d35e <_free_r+0x26>
 800d3a8:	d902      	bls.n	800d3b0 <_free_r+0x78>
 800d3aa:	230c      	movs	r3, #12
 800d3ac:	6003      	str	r3, [r0, #0]
 800d3ae:	e7d6      	b.n	800d35e <_free_r+0x26>
 800d3b0:	6825      	ldr	r5, [r4, #0]
 800d3b2:	1961      	adds	r1, r4, r5
 800d3b4:	428b      	cmp	r3, r1
 800d3b6:	bf04      	itt	eq
 800d3b8:	6819      	ldreq	r1, [r3, #0]
 800d3ba:	685b      	ldreq	r3, [r3, #4]
 800d3bc:	6063      	str	r3, [r4, #4]
 800d3be:	bf04      	itt	eq
 800d3c0:	1949      	addeq	r1, r1, r5
 800d3c2:	6021      	streq	r1, [r4, #0]
 800d3c4:	6054      	str	r4, [r2, #4]
 800d3c6:	e7ca      	b.n	800d35e <_free_r+0x26>
 800d3c8:	b003      	add	sp, #12
 800d3ca:	bd30      	pop	{r4, r5, pc}
 800d3cc:	20000c0c 	.word	0x20000c0c

0800d3d0 <sbrk_aligned>:
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	4e0e      	ldr	r6, [pc, #56]	; (800d40c <sbrk_aligned+0x3c>)
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	6831      	ldr	r1, [r6, #0]
 800d3d8:	4605      	mov	r5, r0
 800d3da:	b911      	cbnz	r1, 800d3e2 <sbrk_aligned+0x12>
 800d3dc:	f000 f902 	bl	800d5e4 <_sbrk_r>
 800d3e0:	6030      	str	r0, [r6, #0]
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f000 f8fd 	bl	800d5e4 <_sbrk_r>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	d00a      	beq.n	800d404 <sbrk_aligned+0x34>
 800d3ee:	1cc4      	adds	r4, r0, #3
 800d3f0:	f024 0403 	bic.w	r4, r4, #3
 800d3f4:	42a0      	cmp	r0, r4
 800d3f6:	d007      	beq.n	800d408 <sbrk_aligned+0x38>
 800d3f8:	1a21      	subs	r1, r4, r0
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f000 f8f2 	bl	800d5e4 <_sbrk_r>
 800d400:	3001      	adds	r0, #1
 800d402:	d101      	bne.n	800d408 <sbrk_aligned+0x38>
 800d404:	f04f 34ff 	mov.w	r4, #4294967295
 800d408:	4620      	mov	r0, r4
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	20000c10 	.word	0x20000c10

0800d410 <_malloc_r>:
 800d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d414:	1ccd      	adds	r5, r1, #3
 800d416:	f025 0503 	bic.w	r5, r5, #3
 800d41a:	3508      	adds	r5, #8
 800d41c:	2d0c      	cmp	r5, #12
 800d41e:	bf38      	it	cc
 800d420:	250c      	movcc	r5, #12
 800d422:	2d00      	cmp	r5, #0
 800d424:	4607      	mov	r7, r0
 800d426:	db01      	blt.n	800d42c <_malloc_r+0x1c>
 800d428:	42a9      	cmp	r1, r5
 800d42a:	d905      	bls.n	800d438 <_malloc_r+0x28>
 800d42c:	230c      	movs	r3, #12
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	2600      	movs	r6, #0
 800d432:	4630      	mov	r0, r6
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	4e2e      	ldr	r6, [pc, #184]	; (800d4f4 <_malloc_r+0xe4>)
 800d43a:	f000 fc89 	bl	800dd50 <__malloc_lock>
 800d43e:	6833      	ldr	r3, [r6, #0]
 800d440:	461c      	mov	r4, r3
 800d442:	bb34      	cbnz	r4, 800d492 <_malloc_r+0x82>
 800d444:	4629      	mov	r1, r5
 800d446:	4638      	mov	r0, r7
 800d448:	f7ff ffc2 	bl	800d3d0 <sbrk_aligned>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	4604      	mov	r4, r0
 800d450:	d14d      	bne.n	800d4ee <_malloc_r+0xde>
 800d452:	6834      	ldr	r4, [r6, #0]
 800d454:	4626      	mov	r6, r4
 800d456:	2e00      	cmp	r6, #0
 800d458:	d140      	bne.n	800d4dc <_malloc_r+0xcc>
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	4631      	mov	r1, r6
 800d45e:	4638      	mov	r0, r7
 800d460:	eb04 0803 	add.w	r8, r4, r3
 800d464:	f000 f8be 	bl	800d5e4 <_sbrk_r>
 800d468:	4580      	cmp	r8, r0
 800d46a:	d13a      	bne.n	800d4e2 <_malloc_r+0xd2>
 800d46c:	6821      	ldr	r1, [r4, #0]
 800d46e:	3503      	adds	r5, #3
 800d470:	1a6d      	subs	r5, r5, r1
 800d472:	f025 0503 	bic.w	r5, r5, #3
 800d476:	3508      	adds	r5, #8
 800d478:	2d0c      	cmp	r5, #12
 800d47a:	bf38      	it	cc
 800d47c:	250c      	movcc	r5, #12
 800d47e:	4629      	mov	r1, r5
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff ffa5 	bl	800d3d0 <sbrk_aligned>
 800d486:	3001      	adds	r0, #1
 800d488:	d02b      	beq.n	800d4e2 <_malloc_r+0xd2>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	442b      	add	r3, r5
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	e00e      	b.n	800d4b0 <_malloc_r+0xa0>
 800d492:	6822      	ldr	r2, [r4, #0]
 800d494:	1b52      	subs	r2, r2, r5
 800d496:	d41e      	bmi.n	800d4d6 <_malloc_r+0xc6>
 800d498:	2a0b      	cmp	r2, #11
 800d49a:	d916      	bls.n	800d4ca <_malloc_r+0xba>
 800d49c:	1961      	adds	r1, r4, r5
 800d49e:	42a3      	cmp	r3, r4
 800d4a0:	6025      	str	r5, [r4, #0]
 800d4a2:	bf18      	it	ne
 800d4a4:	6059      	strne	r1, [r3, #4]
 800d4a6:	6863      	ldr	r3, [r4, #4]
 800d4a8:	bf08      	it	eq
 800d4aa:	6031      	streq	r1, [r6, #0]
 800d4ac:	5162      	str	r2, [r4, r5]
 800d4ae:	604b      	str	r3, [r1, #4]
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	f104 060b 	add.w	r6, r4, #11
 800d4b6:	f000 fc51 	bl	800dd5c <__malloc_unlock>
 800d4ba:	f026 0607 	bic.w	r6, r6, #7
 800d4be:	1d23      	adds	r3, r4, #4
 800d4c0:	1af2      	subs	r2, r6, r3
 800d4c2:	d0b6      	beq.n	800d432 <_malloc_r+0x22>
 800d4c4:	1b9b      	subs	r3, r3, r6
 800d4c6:	50a3      	str	r3, [r4, r2]
 800d4c8:	e7b3      	b.n	800d432 <_malloc_r+0x22>
 800d4ca:	6862      	ldr	r2, [r4, #4]
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	bf0c      	ite	eq
 800d4d0:	6032      	streq	r2, [r6, #0]
 800d4d2:	605a      	strne	r2, [r3, #4]
 800d4d4:	e7ec      	b.n	800d4b0 <_malloc_r+0xa0>
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	6864      	ldr	r4, [r4, #4]
 800d4da:	e7b2      	b.n	800d442 <_malloc_r+0x32>
 800d4dc:	4634      	mov	r4, r6
 800d4de:	6876      	ldr	r6, [r6, #4]
 800d4e0:	e7b9      	b.n	800d456 <_malloc_r+0x46>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	603b      	str	r3, [r7, #0]
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f000 fc38 	bl	800dd5c <__malloc_unlock>
 800d4ec:	e7a1      	b.n	800d432 <_malloc_r+0x22>
 800d4ee:	6025      	str	r5, [r4, #0]
 800d4f0:	e7de      	b.n	800d4b0 <_malloc_r+0xa0>
 800d4f2:	bf00      	nop
 800d4f4:	20000c0c 	.word	0x20000c0c

0800d4f8 <_puts_r>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	460e      	mov	r6, r1
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	b118      	cbz	r0, 800d508 <_puts_r+0x10>
 800d500:	6983      	ldr	r3, [r0, #24]
 800d502:	b90b      	cbnz	r3, 800d508 <_puts_r+0x10>
 800d504:	f000 fb1e 	bl	800db44 <__sinit>
 800d508:	69ab      	ldr	r3, [r5, #24]
 800d50a:	68ac      	ldr	r4, [r5, #8]
 800d50c:	b913      	cbnz	r3, 800d514 <_puts_r+0x1c>
 800d50e:	4628      	mov	r0, r5
 800d510:	f000 fb18 	bl	800db44 <__sinit>
 800d514:	4b2c      	ldr	r3, [pc, #176]	; (800d5c8 <_puts_r+0xd0>)
 800d516:	429c      	cmp	r4, r3
 800d518:	d120      	bne.n	800d55c <_puts_r+0x64>
 800d51a:	686c      	ldr	r4, [r5, #4]
 800d51c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d51e:	07db      	lsls	r3, r3, #31
 800d520:	d405      	bmi.n	800d52e <_puts_r+0x36>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	0598      	lsls	r0, r3, #22
 800d526:	d402      	bmi.n	800d52e <_puts_r+0x36>
 800d528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52a:	f000 fba9 	bl	800dc80 <__retarget_lock_acquire_recursive>
 800d52e:	89a3      	ldrh	r3, [r4, #12]
 800d530:	0719      	lsls	r1, r3, #28
 800d532:	d51d      	bpl.n	800d570 <_puts_r+0x78>
 800d534:	6923      	ldr	r3, [r4, #16]
 800d536:	b1db      	cbz	r3, 800d570 <_puts_r+0x78>
 800d538:	3e01      	subs	r6, #1
 800d53a:	68a3      	ldr	r3, [r4, #8]
 800d53c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d540:	3b01      	subs	r3, #1
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	bb39      	cbnz	r1, 800d596 <_puts_r+0x9e>
 800d546:	2b00      	cmp	r3, #0
 800d548:	da38      	bge.n	800d5bc <_puts_r+0xc4>
 800d54a:	4622      	mov	r2, r4
 800d54c:	210a      	movs	r1, #10
 800d54e:	4628      	mov	r0, r5
 800d550:	f000 f91e 	bl	800d790 <__swbuf_r>
 800d554:	3001      	adds	r0, #1
 800d556:	d011      	beq.n	800d57c <_puts_r+0x84>
 800d558:	250a      	movs	r5, #10
 800d55a:	e011      	b.n	800d580 <_puts_r+0x88>
 800d55c:	4b1b      	ldr	r3, [pc, #108]	; (800d5cc <_puts_r+0xd4>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <_puts_r+0x6e>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7da      	b.n	800d51c <_puts_r+0x24>
 800d566:	4b1a      	ldr	r3, [pc, #104]	; (800d5d0 <_puts_r+0xd8>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7d5      	b.n	800d51c <_puts_r+0x24>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f95e 	bl	800d834 <__swsetup_r>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d0dd      	beq.n	800d538 <_puts_r+0x40>
 800d57c:	f04f 35ff 	mov.w	r5, #4294967295
 800d580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d582:	07da      	lsls	r2, r3, #31
 800d584:	d405      	bmi.n	800d592 <_puts_r+0x9a>
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	059b      	lsls	r3, r3, #22
 800d58a:	d402      	bmi.n	800d592 <_puts_r+0x9a>
 800d58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d58e:	f000 fb78 	bl	800dc82 <__retarget_lock_release_recursive>
 800d592:	4628      	mov	r0, r5
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	2b00      	cmp	r3, #0
 800d598:	da04      	bge.n	800d5a4 <_puts_r+0xac>
 800d59a:	69a2      	ldr	r2, [r4, #24]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	dc06      	bgt.n	800d5ae <_puts_r+0xb6>
 800d5a0:	290a      	cmp	r1, #10
 800d5a2:	d004      	beq.n	800d5ae <_puts_r+0xb6>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	6022      	str	r2, [r4, #0]
 800d5aa:	7019      	strb	r1, [r3, #0]
 800d5ac:	e7c5      	b.n	800d53a <_puts_r+0x42>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 f8ed 	bl	800d790 <__swbuf_r>
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d1bf      	bne.n	800d53a <_puts_r+0x42>
 800d5ba:	e7df      	b.n	800d57c <_puts_r+0x84>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	250a      	movs	r5, #10
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	6022      	str	r2, [r4, #0]
 800d5c4:	701d      	strb	r5, [r3, #0]
 800d5c6:	e7db      	b.n	800d580 <_puts_r+0x88>
 800d5c8:	0800df34 	.word	0x0800df34
 800d5cc:	0800df54 	.word	0x0800df54
 800d5d0:	0800df14 	.word	0x0800df14

0800d5d4 <puts>:
 800d5d4:	4b02      	ldr	r3, [pc, #8]	; (800d5e0 <puts+0xc>)
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	6818      	ldr	r0, [r3, #0]
 800d5da:	f7ff bf8d 	b.w	800d4f8 <_puts_r>
 800d5de:	bf00      	nop
 800d5e0:	20000030 	.word	0x20000030

0800d5e4 <_sbrk_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4d06      	ldr	r5, [pc, #24]	; (800d600 <_sbrk_r+0x1c>)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f4 f9cc 	bl	800198c <_sbrk>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_sbrk_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_sbrk_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20000c18 	.word	0x20000c18

0800d604 <setvbuf>:
 800d604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d608:	461d      	mov	r5, r3
 800d60a:	4b5d      	ldr	r3, [pc, #372]	; (800d780 <setvbuf+0x17c>)
 800d60c:	681f      	ldr	r7, [r3, #0]
 800d60e:	4604      	mov	r4, r0
 800d610:	460e      	mov	r6, r1
 800d612:	4690      	mov	r8, r2
 800d614:	b127      	cbz	r7, 800d620 <setvbuf+0x1c>
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	b913      	cbnz	r3, 800d620 <setvbuf+0x1c>
 800d61a:	4638      	mov	r0, r7
 800d61c:	f000 fa92 	bl	800db44 <__sinit>
 800d620:	4b58      	ldr	r3, [pc, #352]	; (800d784 <setvbuf+0x180>)
 800d622:	429c      	cmp	r4, r3
 800d624:	d167      	bne.n	800d6f6 <setvbuf+0xf2>
 800d626:	687c      	ldr	r4, [r7, #4]
 800d628:	f1b8 0f02 	cmp.w	r8, #2
 800d62c:	d006      	beq.n	800d63c <setvbuf+0x38>
 800d62e:	f1b8 0f01 	cmp.w	r8, #1
 800d632:	f200 809f 	bhi.w	800d774 <setvbuf+0x170>
 800d636:	2d00      	cmp	r5, #0
 800d638:	f2c0 809c 	blt.w	800d774 <setvbuf+0x170>
 800d63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d63e:	07db      	lsls	r3, r3, #31
 800d640:	d405      	bmi.n	800d64e <setvbuf+0x4a>
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	0598      	lsls	r0, r3, #22
 800d646:	d402      	bmi.n	800d64e <setvbuf+0x4a>
 800d648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d64a:	f000 fb19 	bl	800dc80 <__retarget_lock_acquire_recursive>
 800d64e:	4621      	mov	r1, r4
 800d650:	4638      	mov	r0, r7
 800d652:	f000 f9e3 	bl	800da1c <_fflush_r>
 800d656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d658:	b141      	cbz	r1, 800d66c <setvbuf+0x68>
 800d65a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d65e:	4299      	cmp	r1, r3
 800d660:	d002      	beq.n	800d668 <setvbuf+0x64>
 800d662:	4638      	mov	r0, r7
 800d664:	f7ff fe68 	bl	800d338 <_free_r>
 800d668:	2300      	movs	r3, #0
 800d66a:	6363      	str	r3, [r4, #52]	; 0x34
 800d66c:	2300      	movs	r3, #0
 800d66e:	61a3      	str	r3, [r4, #24]
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	0619      	lsls	r1, r3, #24
 800d676:	d503      	bpl.n	800d680 <setvbuf+0x7c>
 800d678:	6921      	ldr	r1, [r4, #16]
 800d67a:	4638      	mov	r0, r7
 800d67c:	f7ff fe5c 	bl	800d338 <_free_r>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d686:	f023 0303 	bic.w	r3, r3, #3
 800d68a:	f1b8 0f02 	cmp.w	r8, #2
 800d68e:	81a3      	strh	r3, [r4, #12]
 800d690:	d06c      	beq.n	800d76c <setvbuf+0x168>
 800d692:	ab01      	add	r3, sp, #4
 800d694:	466a      	mov	r2, sp
 800d696:	4621      	mov	r1, r4
 800d698:	4638      	mov	r0, r7
 800d69a:	f000 faf3 	bl	800dc84 <__swhatbuf_r>
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	4318      	orrs	r0, r3
 800d6a2:	81a0      	strh	r0, [r4, #12]
 800d6a4:	2d00      	cmp	r5, #0
 800d6a6:	d130      	bne.n	800d70a <setvbuf+0x106>
 800d6a8:	9d00      	ldr	r5, [sp, #0]
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f7ff fe2c 	bl	800d308 <malloc>
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d155      	bne.n	800d762 <setvbuf+0x15e>
 800d6b6:	f8dd 9000 	ldr.w	r9, [sp]
 800d6ba:	45a9      	cmp	r9, r5
 800d6bc:	d14a      	bne.n	800d754 <setvbuf+0x150>
 800d6be:	f04f 35ff 	mov.w	r5, #4294967295
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	60a2      	str	r2, [r4, #8]
 800d6c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d6ca:	6022      	str	r2, [r4, #0]
 800d6cc:	6122      	str	r2, [r4, #16]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d4:	6162      	str	r2, [r4, #20]
 800d6d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6d8:	f043 0302 	orr.w	r3, r3, #2
 800d6dc:	07d2      	lsls	r2, r2, #31
 800d6de:	81a3      	strh	r3, [r4, #12]
 800d6e0:	d405      	bmi.n	800d6ee <setvbuf+0xea>
 800d6e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d6e6:	d102      	bne.n	800d6ee <setvbuf+0xea>
 800d6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ea:	f000 faca 	bl	800dc82 <__retarget_lock_release_recursive>
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	b003      	add	sp, #12
 800d6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f6:	4b24      	ldr	r3, [pc, #144]	; (800d788 <setvbuf+0x184>)
 800d6f8:	429c      	cmp	r4, r3
 800d6fa:	d101      	bne.n	800d700 <setvbuf+0xfc>
 800d6fc:	68bc      	ldr	r4, [r7, #8]
 800d6fe:	e793      	b.n	800d628 <setvbuf+0x24>
 800d700:	4b22      	ldr	r3, [pc, #136]	; (800d78c <setvbuf+0x188>)
 800d702:	429c      	cmp	r4, r3
 800d704:	bf08      	it	eq
 800d706:	68fc      	ldreq	r4, [r7, #12]
 800d708:	e78e      	b.n	800d628 <setvbuf+0x24>
 800d70a:	2e00      	cmp	r6, #0
 800d70c:	d0cd      	beq.n	800d6aa <setvbuf+0xa6>
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	b913      	cbnz	r3, 800d718 <setvbuf+0x114>
 800d712:	4638      	mov	r0, r7
 800d714:	f000 fa16 	bl	800db44 <__sinit>
 800d718:	f1b8 0f01 	cmp.w	r8, #1
 800d71c:	bf08      	it	eq
 800d71e:	89a3      	ldrheq	r3, [r4, #12]
 800d720:	6026      	str	r6, [r4, #0]
 800d722:	bf04      	itt	eq
 800d724:	f043 0301 	orreq.w	r3, r3, #1
 800d728:	81a3      	strheq	r3, [r4, #12]
 800d72a:	89a2      	ldrh	r2, [r4, #12]
 800d72c:	f012 0308 	ands.w	r3, r2, #8
 800d730:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d734:	d01c      	beq.n	800d770 <setvbuf+0x16c>
 800d736:	07d3      	lsls	r3, r2, #31
 800d738:	bf41      	itttt	mi
 800d73a:	2300      	movmi	r3, #0
 800d73c:	426d      	negmi	r5, r5
 800d73e:	60a3      	strmi	r3, [r4, #8]
 800d740:	61a5      	strmi	r5, [r4, #24]
 800d742:	bf58      	it	pl
 800d744:	60a5      	strpl	r5, [r4, #8]
 800d746:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d748:	f015 0501 	ands.w	r5, r5, #1
 800d74c:	d115      	bne.n	800d77a <setvbuf+0x176>
 800d74e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d752:	e7c8      	b.n	800d6e6 <setvbuf+0xe2>
 800d754:	4648      	mov	r0, r9
 800d756:	f7ff fdd7 	bl	800d308 <malloc>
 800d75a:	4606      	mov	r6, r0
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d0ae      	beq.n	800d6be <setvbuf+0xba>
 800d760:	464d      	mov	r5, r9
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	e7d0      	b.n	800d70e <setvbuf+0x10a>
 800d76c:	2500      	movs	r5, #0
 800d76e:	e7a8      	b.n	800d6c2 <setvbuf+0xbe>
 800d770:	60a3      	str	r3, [r4, #8]
 800d772:	e7e8      	b.n	800d746 <setvbuf+0x142>
 800d774:	f04f 35ff 	mov.w	r5, #4294967295
 800d778:	e7b9      	b.n	800d6ee <setvbuf+0xea>
 800d77a:	2500      	movs	r5, #0
 800d77c:	e7b7      	b.n	800d6ee <setvbuf+0xea>
 800d77e:	bf00      	nop
 800d780:	20000030 	.word	0x20000030
 800d784:	0800df34 	.word	0x0800df34
 800d788:	0800df54 	.word	0x0800df54
 800d78c:	0800df14 	.word	0x0800df14

0800d790 <__swbuf_r>:
 800d790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d792:	460e      	mov	r6, r1
 800d794:	4614      	mov	r4, r2
 800d796:	4605      	mov	r5, r0
 800d798:	b118      	cbz	r0, 800d7a2 <__swbuf_r+0x12>
 800d79a:	6983      	ldr	r3, [r0, #24]
 800d79c:	b90b      	cbnz	r3, 800d7a2 <__swbuf_r+0x12>
 800d79e:	f000 f9d1 	bl	800db44 <__sinit>
 800d7a2:	4b21      	ldr	r3, [pc, #132]	; (800d828 <__swbuf_r+0x98>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	d12b      	bne.n	800d800 <__swbuf_r+0x70>
 800d7a8:	686c      	ldr	r4, [r5, #4]
 800d7aa:	69a3      	ldr	r3, [r4, #24]
 800d7ac:	60a3      	str	r3, [r4, #8]
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	071a      	lsls	r2, r3, #28
 800d7b2:	d52f      	bpl.n	800d814 <__swbuf_r+0x84>
 800d7b4:	6923      	ldr	r3, [r4, #16]
 800d7b6:	b36b      	cbz	r3, 800d814 <__swbuf_r+0x84>
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	6820      	ldr	r0, [r4, #0]
 800d7bc:	1ac0      	subs	r0, r0, r3
 800d7be:	6963      	ldr	r3, [r4, #20]
 800d7c0:	b2f6      	uxtb	r6, r6
 800d7c2:	4283      	cmp	r3, r0
 800d7c4:	4637      	mov	r7, r6
 800d7c6:	dc04      	bgt.n	800d7d2 <__swbuf_r+0x42>
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 f926 	bl	800da1c <_fflush_r>
 800d7d0:	bb30      	cbnz	r0, 800d820 <__swbuf_r+0x90>
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	60a3      	str	r3, [r4, #8]
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	6022      	str	r2, [r4, #0]
 800d7de:	701e      	strb	r6, [r3, #0]
 800d7e0:	6963      	ldr	r3, [r4, #20]
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	4283      	cmp	r3, r0
 800d7e6:	d004      	beq.n	800d7f2 <__swbuf_r+0x62>
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	07db      	lsls	r3, r3, #31
 800d7ec:	d506      	bpl.n	800d7fc <__swbuf_r+0x6c>
 800d7ee:	2e0a      	cmp	r6, #10
 800d7f0:	d104      	bne.n	800d7fc <__swbuf_r+0x6c>
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f000 f911 	bl	800da1c <_fflush_r>
 800d7fa:	b988      	cbnz	r0, 800d820 <__swbuf_r+0x90>
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d800:	4b0a      	ldr	r3, [pc, #40]	; (800d82c <__swbuf_r+0x9c>)
 800d802:	429c      	cmp	r4, r3
 800d804:	d101      	bne.n	800d80a <__swbuf_r+0x7a>
 800d806:	68ac      	ldr	r4, [r5, #8]
 800d808:	e7cf      	b.n	800d7aa <__swbuf_r+0x1a>
 800d80a:	4b09      	ldr	r3, [pc, #36]	; (800d830 <__swbuf_r+0xa0>)
 800d80c:	429c      	cmp	r4, r3
 800d80e:	bf08      	it	eq
 800d810:	68ec      	ldreq	r4, [r5, #12]
 800d812:	e7ca      	b.n	800d7aa <__swbuf_r+0x1a>
 800d814:	4621      	mov	r1, r4
 800d816:	4628      	mov	r0, r5
 800d818:	f000 f80c 	bl	800d834 <__swsetup_r>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d0cb      	beq.n	800d7b8 <__swbuf_r+0x28>
 800d820:	f04f 37ff 	mov.w	r7, #4294967295
 800d824:	e7ea      	b.n	800d7fc <__swbuf_r+0x6c>
 800d826:	bf00      	nop
 800d828:	0800df34 	.word	0x0800df34
 800d82c:	0800df54 	.word	0x0800df54
 800d830:	0800df14 	.word	0x0800df14

0800d834 <__swsetup_r>:
 800d834:	4b32      	ldr	r3, [pc, #200]	; (800d900 <__swsetup_r+0xcc>)
 800d836:	b570      	push	{r4, r5, r6, lr}
 800d838:	681d      	ldr	r5, [r3, #0]
 800d83a:	4606      	mov	r6, r0
 800d83c:	460c      	mov	r4, r1
 800d83e:	b125      	cbz	r5, 800d84a <__swsetup_r+0x16>
 800d840:	69ab      	ldr	r3, [r5, #24]
 800d842:	b913      	cbnz	r3, 800d84a <__swsetup_r+0x16>
 800d844:	4628      	mov	r0, r5
 800d846:	f000 f97d 	bl	800db44 <__sinit>
 800d84a:	4b2e      	ldr	r3, [pc, #184]	; (800d904 <__swsetup_r+0xd0>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	d10f      	bne.n	800d870 <__swsetup_r+0x3c>
 800d850:	686c      	ldr	r4, [r5, #4]
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d858:	0719      	lsls	r1, r3, #28
 800d85a:	d42c      	bmi.n	800d8b6 <__swsetup_r+0x82>
 800d85c:	06dd      	lsls	r5, r3, #27
 800d85e:	d411      	bmi.n	800d884 <__swsetup_r+0x50>
 800d860:	2309      	movs	r3, #9
 800d862:	6033      	str	r3, [r6, #0]
 800d864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d868:	81a3      	strh	r3, [r4, #12]
 800d86a:	f04f 30ff 	mov.w	r0, #4294967295
 800d86e:	e03e      	b.n	800d8ee <__swsetup_r+0xba>
 800d870:	4b25      	ldr	r3, [pc, #148]	; (800d908 <__swsetup_r+0xd4>)
 800d872:	429c      	cmp	r4, r3
 800d874:	d101      	bne.n	800d87a <__swsetup_r+0x46>
 800d876:	68ac      	ldr	r4, [r5, #8]
 800d878:	e7eb      	b.n	800d852 <__swsetup_r+0x1e>
 800d87a:	4b24      	ldr	r3, [pc, #144]	; (800d90c <__swsetup_r+0xd8>)
 800d87c:	429c      	cmp	r4, r3
 800d87e:	bf08      	it	eq
 800d880:	68ec      	ldreq	r4, [r5, #12]
 800d882:	e7e6      	b.n	800d852 <__swsetup_r+0x1e>
 800d884:	0758      	lsls	r0, r3, #29
 800d886:	d512      	bpl.n	800d8ae <__swsetup_r+0x7a>
 800d888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d88a:	b141      	cbz	r1, 800d89e <__swsetup_r+0x6a>
 800d88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d890:	4299      	cmp	r1, r3
 800d892:	d002      	beq.n	800d89a <__swsetup_r+0x66>
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff fd4f 	bl	800d338 <_free_r>
 800d89a:	2300      	movs	r3, #0
 800d89c:	6363      	str	r3, [r4, #52]	; 0x34
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8a4:	81a3      	strh	r3, [r4, #12]
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6063      	str	r3, [r4, #4]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	f043 0308 	orr.w	r3, r3, #8
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	b94b      	cbnz	r3, 800d8ce <__swsetup_r+0x9a>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8c4:	d003      	beq.n	800d8ce <__swsetup_r+0x9a>
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f000 fa01 	bl	800dcd0 <__smakebuf_r>
 800d8ce:	89a0      	ldrh	r0, [r4, #12]
 800d8d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8d4:	f010 0301 	ands.w	r3, r0, #1
 800d8d8:	d00a      	beq.n	800d8f0 <__swsetup_r+0xbc>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60a3      	str	r3, [r4, #8]
 800d8de:	6963      	ldr	r3, [r4, #20]
 800d8e0:	425b      	negs	r3, r3
 800d8e2:	61a3      	str	r3, [r4, #24]
 800d8e4:	6923      	ldr	r3, [r4, #16]
 800d8e6:	b943      	cbnz	r3, 800d8fa <__swsetup_r+0xc6>
 800d8e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d8ec:	d1ba      	bne.n	800d864 <__swsetup_r+0x30>
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	0781      	lsls	r1, r0, #30
 800d8f2:	bf58      	it	pl
 800d8f4:	6963      	ldrpl	r3, [r4, #20]
 800d8f6:	60a3      	str	r3, [r4, #8]
 800d8f8:	e7f4      	b.n	800d8e4 <__swsetup_r+0xb0>
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	e7f7      	b.n	800d8ee <__swsetup_r+0xba>
 800d8fe:	bf00      	nop
 800d900:	20000030 	.word	0x20000030
 800d904:	0800df34 	.word	0x0800df34
 800d908:	0800df54 	.word	0x0800df54
 800d90c:	0800df14 	.word	0x0800df14

0800d910 <__sflush_r>:
 800d910:	898a      	ldrh	r2, [r1, #12]
 800d912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d916:	4605      	mov	r5, r0
 800d918:	0710      	lsls	r0, r2, #28
 800d91a:	460c      	mov	r4, r1
 800d91c:	d458      	bmi.n	800d9d0 <__sflush_r+0xc0>
 800d91e:	684b      	ldr	r3, [r1, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	dc05      	bgt.n	800d930 <__sflush_r+0x20>
 800d924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d926:	2b00      	cmp	r3, #0
 800d928:	dc02      	bgt.n	800d930 <__sflush_r+0x20>
 800d92a:	2000      	movs	r0, #0
 800d92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d932:	2e00      	cmp	r6, #0
 800d934:	d0f9      	beq.n	800d92a <__sflush_r+0x1a>
 800d936:	2300      	movs	r3, #0
 800d938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d93c:	682f      	ldr	r7, [r5, #0]
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	d032      	beq.n	800d9a8 <__sflush_r+0x98>
 800d942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	075a      	lsls	r2, r3, #29
 800d948:	d505      	bpl.n	800d956 <__sflush_r+0x46>
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	1ac0      	subs	r0, r0, r3
 800d94e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d950:	b10b      	cbz	r3, 800d956 <__sflush_r+0x46>
 800d952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d954:	1ac0      	subs	r0, r0, r3
 800d956:	2300      	movs	r3, #0
 800d958:	4602      	mov	r2, r0
 800d95a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d95c:	6a21      	ldr	r1, [r4, #32]
 800d95e:	4628      	mov	r0, r5
 800d960:	47b0      	blx	r6
 800d962:	1c43      	adds	r3, r0, #1
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	d106      	bne.n	800d976 <__sflush_r+0x66>
 800d968:	6829      	ldr	r1, [r5, #0]
 800d96a:	291d      	cmp	r1, #29
 800d96c:	d82c      	bhi.n	800d9c8 <__sflush_r+0xb8>
 800d96e:	4a2a      	ldr	r2, [pc, #168]	; (800da18 <__sflush_r+0x108>)
 800d970:	40ca      	lsrs	r2, r1
 800d972:	07d6      	lsls	r6, r2, #31
 800d974:	d528      	bpl.n	800d9c8 <__sflush_r+0xb8>
 800d976:	2200      	movs	r2, #0
 800d978:	6062      	str	r2, [r4, #4]
 800d97a:	04d9      	lsls	r1, r3, #19
 800d97c:	6922      	ldr	r2, [r4, #16]
 800d97e:	6022      	str	r2, [r4, #0]
 800d980:	d504      	bpl.n	800d98c <__sflush_r+0x7c>
 800d982:	1c42      	adds	r2, r0, #1
 800d984:	d101      	bne.n	800d98a <__sflush_r+0x7a>
 800d986:	682b      	ldr	r3, [r5, #0]
 800d988:	b903      	cbnz	r3, 800d98c <__sflush_r+0x7c>
 800d98a:	6560      	str	r0, [r4, #84]	; 0x54
 800d98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d98e:	602f      	str	r7, [r5, #0]
 800d990:	2900      	cmp	r1, #0
 800d992:	d0ca      	beq.n	800d92a <__sflush_r+0x1a>
 800d994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d998:	4299      	cmp	r1, r3
 800d99a:	d002      	beq.n	800d9a2 <__sflush_r+0x92>
 800d99c:	4628      	mov	r0, r5
 800d99e:	f7ff fccb 	bl	800d338 <_free_r>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	6360      	str	r0, [r4, #52]	; 0x34
 800d9a6:	e7c1      	b.n	800d92c <__sflush_r+0x1c>
 800d9a8:	6a21      	ldr	r1, [r4, #32]
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b0      	blx	r6
 800d9b0:	1c41      	adds	r1, r0, #1
 800d9b2:	d1c7      	bne.n	800d944 <__sflush_r+0x34>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0c4      	beq.n	800d944 <__sflush_r+0x34>
 800d9ba:	2b1d      	cmp	r3, #29
 800d9bc:	d001      	beq.n	800d9c2 <__sflush_r+0xb2>
 800d9be:	2b16      	cmp	r3, #22
 800d9c0:	d101      	bne.n	800d9c6 <__sflush_r+0xb6>
 800d9c2:	602f      	str	r7, [r5, #0]
 800d9c4:	e7b1      	b.n	800d92a <__sflush_r+0x1a>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	e7ad      	b.n	800d92c <__sflush_r+0x1c>
 800d9d0:	690f      	ldr	r7, [r1, #16]
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d0a9      	beq.n	800d92a <__sflush_r+0x1a>
 800d9d6:	0793      	lsls	r3, r2, #30
 800d9d8:	680e      	ldr	r6, [r1, #0]
 800d9da:	bf08      	it	eq
 800d9dc:	694b      	ldreq	r3, [r1, #20]
 800d9de:	600f      	str	r7, [r1, #0]
 800d9e0:	bf18      	it	ne
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	eba6 0807 	sub.w	r8, r6, r7
 800d9e8:	608b      	str	r3, [r1, #8]
 800d9ea:	f1b8 0f00 	cmp.w	r8, #0
 800d9ee:	dd9c      	ble.n	800d92a <__sflush_r+0x1a>
 800d9f0:	6a21      	ldr	r1, [r4, #32]
 800d9f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9f4:	4643      	mov	r3, r8
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b0      	blx	r6
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	dc06      	bgt.n	800da0e <__sflush_r+0xfe>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	f04f 30ff 	mov.w	r0, #4294967295
 800da0c:	e78e      	b.n	800d92c <__sflush_r+0x1c>
 800da0e:	4407      	add	r7, r0
 800da10:	eba8 0800 	sub.w	r8, r8, r0
 800da14:	e7e9      	b.n	800d9ea <__sflush_r+0xda>
 800da16:	bf00      	nop
 800da18:	20400001 	.word	0x20400001

0800da1c <_fflush_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	690b      	ldr	r3, [r1, #16]
 800da20:	4605      	mov	r5, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b913      	cbnz	r3, 800da2c <_fflush_r+0x10>
 800da26:	2500      	movs	r5, #0
 800da28:	4628      	mov	r0, r5
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	b118      	cbz	r0, 800da36 <_fflush_r+0x1a>
 800da2e:	6983      	ldr	r3, [r0, #24]
 800da30:	b90b      	cbnz	r3, 800da36 <_fflush_r+0x1a>
 800da32:	f000 f887 	bl	800db44 <__sinit>
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <_fflush_r+0x6c>)
 800da38:	429c      	cmp	r4, r3
 800da3a:	d11b      	bne.n	800da74 <_fflush_r+0x58>
 800da3c:	686c      	ldr	r4, [r5, #4]
 800da3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d0ef      	beq.n	800da26 <_fflush_r+0xa>
 800da46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da48:	07d0      	lsls	r0, r2, #31
 800da4a:	d404      	bmi.n	800da56 <_fflush_r+0x3a>
 800da4c:	0599      	lsls	r1, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_fflush_r+0x3a>
 800da50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da52:	f000 f915 	bl	800dc80 <__retarget_lock_acquire_recursive>
 800da56:	4628      	mov	r0, r5
 800da58:	4621      	mov	r1, r4
 800da5a:	f7ff ff59 	bl	800d910 <__sflush_r>
 800da5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da60:	07da      	lsls	r2, r3, #31
 800da62:	4605      	mov	r5, r0
 800da64:	d4e0      	bmi.n	800da28 <_fflush_r+0xc>
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	059b      	lsls	r3, r3, #22
 800da6a:	d4dd      	bmi.n	800da28 <_fflush_r+0xc>
 800da6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da6e:	f000 f908 	bl	800dc82 <__retarget_lock_release_recursive>
 800da72:	e7d9      	b.n	800da28 <_fflush_r+0xc>
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <_fflush_r+0x70>)
 800da76:	429c      	cmp	r4, r3
 800da78:	d101      	bne.n	800da7e <_fflush_r+0x62>
 800da7a:	68ac      	ldr	r4, [r5, #8]
 800da7c:	e7df      	b.n	800da3e <_fflush_r+0x22>
 800da7e:	4b04      	ldr	r3, [pc, #16]	; (800da90 <_fflush_r+0x74>)
 800da80:	429c      	cmp	r4, r3
 800da82:	bf08      	it	eq
 800da84:	68ec      	ldreq	r4, [r5, #12]
 800da86:	e7da      	b.n	800da3e <_fflush_r+0x22>
 800da88:	0800df34 	.word	0x0800df34
 800da8c:	0800df54 	.word	0x0800df54
 800da90:	0800df14 	.word	0x0800df14

0800da94 <std>:
 800da94:	2300      	movs	r3, #0
 800da96:	b510      	push	{r4, lr}
 800da98:	4604      	mov	r4, r0
 800da9a:	e9c0 3300 	strd	r3, r3, [r0]
 800da9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800daa2:	6083      	str	r3, [r0, #8]
 800daa4:	8181      	strh	r1, [r0, #12]
 800daa6:	6643      	str	r3, [r0, #100]	; 0x64
 800daa8:	81c2      	strh	r2, [r0, #14]
 800daaa:	6183      	str	r3, [r0, #24]
 800daac:	4619      	mov	r1, r3
 800daae:	2208      	movs	r2, #8
 800dab0:	305c      	adds	r0, #92	; 0x5c
 800dab2:	f7ff fc39 	bl	800d328 <memset>
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <std+0x38>)
 800dab8:	6263      	str	r3, [r4, #36]	; 0x24
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <std+0x3c>)
 800dabc:	62a3      	str	r3, [r4, #40]	; 0x28
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <std+0x40>)
 800dac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <std+0x44>)
 800dac4:	6224      	str	r4, [r4, #32]
 800dac6:	6323      	str	r3, [r4, #48]	; 0x30
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	bf00      	nop
 800dacc:	0800dd69 	.word	0x0800dd69
 800dad0:	0800dd8b 	.word	0x0800dd8b
 800dad4:	0800ddc3 	.word	0x0800ddc3
 800dad8:	0800dde7 	.word	0x0800dde7

0800dadc <_cleanup_r>:
 800dadc:	4901      	ldr	r1, [pc, #4]	; (800dae4 <_cleanup_r+0x8>)
 800dade:	f000 b8af 	b.w	800dc40 <_fwalk_reent>
 800dae2:	bf00      	nop
 800dae4:	0800da1d 	.word	0x0800da1d

0800dae8 <__sfmoreglue>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	2268      	movs	r2, #104	; 0x68
 800daec:	1e4d      	subs	r5, r1, #1
 800daee:	4355      	muls	r5, r2
 800daf0:	460e      	mov	r6, r1
 800daf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800daf6:	f7ff fc8b 	bl	800d410 <_malloc_r>
 800dafa:	4604      	mov	r4, r0
 800dafc:	b140      	cbz	r0, 800db10 <__sfmoreglue+0x28>
 800dafe:	2100      	movs	r1, #0
 800db00:	e9c0 1600 	strd	r1, r6, [r0]
 800db04:	300c      	adds	r0, #12
 800db06:	60a0      	str	r0, [r4, #8]
 800db08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db0c:	f7ff fc0c 	bl	800d328 <memset>
 800db10:	4620      	mov	r0, r4
 800db12:	bd70      	pop	{r4, r5, r6, pc}

0800db14 <__sfp_lock_acquire>:
 800db14:	4801      	ldr	r0, [pc, #4]	; (800db1c <__sfp_lock_acquire+0x8>)
 800db16:	f000 b8b3 	b.w	800dc80 <__retarget_lock_acquire_recursive>
 800db1a:	bf00      	nop
 800db1c:	20000c15 	.word	0x20000c15

0800db20 <__sfp_lock_release>:
 800db20:	4801      	ldr	r0, [pc, #4]	; (800db28 <__sfp_lock_release+0x8>)
 800db22:	f000 b8ae 	b.w	800dc82 <__retarget_lock_release_recursive>
 800db26:	bf00      	nop
 800db28:	20000c15 	.word	0x20000c15

0800db2c <__sinit_lock_acquire>:
 800db2c:	4801      	ldr	r0, [pc, #4]	; (800db34 <__sinit_lock_acquire+0x8>)
 800db2e:	f000 b8a7 	b.w	800dc80 <__retarget_lock_acquire_recursive>
 800db32:	bf00      	nop
 800db34:	20000c16 	.word	0x20000c16

0800db38 <__sinit_lock_release>:
 800db38:	4801      	ldr	r0, [pc, #4]	; (800db40 <__sinit_lock_release+0x8>)
 800db3a:	f000 b8a2 	b.w	800dc82 <__retarget_lock_release_recursive>
 800db3e:	bf00      	nop
 800db40:	20000c16 	.word	0x20000c16

0800db44 <__sinit>:
 800db44:	b510      	push	{r4, lr}
 800db46:	4604      	mov	r4, r0
 800db48:	f7ff fff0 	bl	800db2c <__sinit_lock_acquire>
 800db4c:	69a3      	ldr	r3, [r4, #24]
 800db4e:	b11b      	cbz	r3, 800db58 <__sinit+0x14>
 800db50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db54:	f7ff bff0 	b.w	800db38 <__sinit_lock_release>
 800db58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db5c:	6523      	str	r3, [r4, #80]	; 0x50
 800db5e:	4b13      	ldr	r3, [pc, #76]	; (800dbac <__sinit+0x68>)
 800db60:	4a13      	ldr	r2, [pc, #76]	; (800dbb0 <__sinit+0x6c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	62a2      	str	r2, [r4, #40]	; 0x28
 800db66:	42a3      	cmp	r3, r4
 800db68:	bf04      	itt	eq
 800db6a:	2301      	moveq	r3, #1
 800db6c:	61a3      	streq	r3, [r4, #24]
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 f820 	bl	800dbb4 <__sfp>
 800db74:	6060      	str	r0, [r4, #4]
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f81c 	bl	800dbb4 <__sfp>
 800db7c:	60a0      	str	r0, [r4, #8]
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 f818 	bl	800dbb4 <__sfp>
 800db84:	2200      	movs	r2, #0
 800db86:	60e0      	str	r0, [r4, #12]
 800db88:	2104      	movs	r1, #4
 800db8a:	6860      	ldr	r0, [r4, #4]
 800db8c:	f7ff ff82 	bl	800da94 <std>
 800db90:	68a0      	ldr	r0, [r4, #8]
 800db92:	2201      	movs	r2, #1
 800db94:	2109      	movs	r1, #9
 800db96:	f7ff ff7d 	bl	800da94 <std>
 800db9a:	68e0      	ldr	r0, [r4, #12]
 800db9c:	2202      	movs	r2, #2
 800db9e:	2112      	movs	r1, #18
 800dba0:	f7ff ff78 	bl	800da94 <std>
 800dba4:	2301      	movs	r3, #1
 800dba6:	61a3      	str	r3, [r4, #24]
 800dba8:	e7d2      	b.n	800db50 <__sinit+0xc>
 800dbaa:	bf00      	nop
 800dbac:	0800df10 	.word	0x0800df10
 800dbb0:	0800dadd 	.word	0x0800dadd

0800dbb4 <__sfp>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	f7ff ffac 	bl	800db14 <__sfp_lock_acquire>
 800dbbc:	4b1e      	ldr	r3, [pc, #120]	; (800dc38 <__sfp+0x84>)
 800dbbe:	681e      	ldr	r6, [r3, #0]
 800dbc0:	69b3      	ldr	r3, [r6, #24]
 800dbc2:	b913      	cbnz	r3, 800dbca <__sfp+0x16>
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f7ff ffbd 	bl	800db44 <__sinit>
 800dbca:	3648      	adds	r6, #72	; 0x48
 800dbcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	d503      	bpl.n	800dbdc <__sfp+0x28>
 800dbd4:	6833      	ldr	r3, [r6, #0]
 800dbd6:	b30b      	cbz	r3, 800dc1c <__sfp+0x68>
 800dbd8:	6836      	ldr	r6, [r6, #0]
 800dbda:	e7f7      	b.n	800dbcc <__sfp+0x18>
 800dbdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbe0:	b9d5      	cbnz	r5, 800dc18 <__sfp+0x64>
 800dbe2:	4b16      	ldr	r3, [pc, #88]	; (800dc3c <__sfp+0x88>)
 800dbe4:	60e3      	str	r3, [r4, #12]
 800dbe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbea:	6665      	str	r5, [r4, #100]	; 0x64
 800dbec:	f000 f847 	bl	800dc7e <__retarget_lock_init_recursive>
 800dbf0:	f7ff ff96 	bl	800db20 <__sfp_lock_release>
 800dbf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbfc:	6025      	str	r5, [r4, #0]
 800dbfe:	61a5      	str	r5, [r4, #24]
 800dc00:	2208      	movs	r2, #8
 800dc02:	4629      	mov	r1, r5
 800dc04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc08:	f7ff fb8e 	bl	800d328 <memset>
 800dc0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc14:	4620      	mov	r0, r4
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc18:	3468      	adds	r4, #104	; 0x68
 800dc1a:	e7d9      	b.n	800dbd0 <__sfp+0x1c>
 800dc1c:	2104      	movs	r1, #4
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7ff ff62 	bl	800dae8 <__sfmoreglue>
 800dc24:	4604      	mov	r4, r0
 800dc26:	6030      	str	r0, [r6, #0]
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d1d5      	bne.n	800dbd8 <__sfp+0x24>
 800dc2c:	f7ff ff78 	bl	800db20 <__sfp_lock_release>
 800dc30:	230c      	movs	r3, #12
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	e7ee      	b.n	800dc14 <__sfp+0x60>
 800dc36:	bf00      	nop
 800dc38:	0800df10 	.word	0x0800df10
 800dc3c:	ffff0001 	.word	0xffff0001

0800dc40 <_fwalk_reent>:
 800dc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc44:	4606      	mov	r6, r0
 800dc46:	4688      	mov	r8, r1
 800dc48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc4c:	2700      	movs	r7, #0
 800dc4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc52:	f1b9 0901 	subs.w	r9, r9, #1
 800dc56:	d505      	bpl.n	800dc64 <_fwalk_reent+0x24>
 800dc58:	6824      	ldr	r4, [r4, #0]
 800dc5a:	2c00      	cmp	r4, #0
 800dc5c:	d1f7      	bne.n	800dc4e <_fwalk_reent+0xe>
 800dc5e:	4638      	mov	r0, r7
 800dc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc64:	89ab      	ldrh	r3, [r5, #12]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d907      	bls.n	800dc7a <_fwalk_reent+0x3a>
 800dc6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	d003      	beq.n	800dc7a <_fwalk_reent+0x3a>
 800dc72:	4629      	mov	r1, r5
 800dc74:	4630      	mov	r0, r6
 800dc76:	47c0      	blx	r8
 800dc78:	4307      	orrs	r7, r0
 800dc7a:	3568      	adds	r5, #104	; 0x68
 800dc7c:	e7e9      	b.n	800dc52 <_fwalk_reent+0x12>

0800dc7e <__retarget_lock_init_recursive>:
 800dc7e:	4770      	bx	lr

0800dc80 <__retarget_lock_acquire_recursive>:
 800dc80:	4770      	bx	lr

0800dc82 <__retarget_lock_release_recursive>:
 800dc82:	4770      	bx	lr

0800dc84 <__swhatbuf_r>:
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	460e      	mov	r6, r1
 800dc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	b096      	sub	sp, #88	; 0x58
 800dc90:	4614      	mov	r4, r2
 800dc92:	461d      	mov	r5, r3
 800dc94:	da08      	bge.n	800dca8 <__swhatbuf_r+0x24>
 800dc96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	602a      	str	r2, [r5, #0]
 800dc9e:	061a      	lsls	r2, r3, #24
 800dca0:	d410      	bmi.n	800dcc4 <__swhatbuf_r+0x40>
 800dca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca6:	e00e      	b.n	800dcc6 <__swhatbuf_r+0x42>
 800dca8:	466a      	mov	r2, sp
 800dcaa:	f000 f8c3 	bl	800de34 <_fstat_r>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	dbf1      	blt.n	800dc96 <__swhatbuf_r+0x12>
 800dcb2:	9a01      	ldr	r2, [sp, #4]
 800dcb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcbc:	425a      	negs	r2, r3
 800dcbe:	415a      	adcs	r2, r3
 800dcc0:	602a      	str	r2, [r5, #0]
 800dcc2:	e7ee      	b.n	800dca2 <__swhatbuf_r+0x1e>
 800dcc4:	2340      	movs	r3, #64	; 0x40
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	b016      	add	sp, #88	; 0x58
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcd0 <__smakebuf_r>:
 800dcd0:	898b      	ldrh	r3, [r1, #12]
 800dcd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcd4:	079d      	lsls	r5, r3, #30
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	460c      	mov	r4, r1
 800dcda:	d507      	bpl.n	800dcec <__smakebuf_r+0x1c>
 800dcdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	6123      	str	r3, [r4, #16]
 800dce4:	2301      	movs	r3, #1
 800dce6:	6163      	str	r3, [r4, #20]
 800dce8:	b002      	add	sp, #8
 800dcea:	bd70      	pop	{r4, r5, r6, pc}
 800dcec:	ab01      	add	r3, sp, #4
 800dcee:	466a      	mov	r2, sp
 800dcf0:	f7ff ffc8 	bl	800dc84 <__swhatbuf_r>
 800dcf4:	9900      	ldr	r1, [sp, #0]
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f7ff fb89 	bl	800d410 <_malloc_r>
 800dcfe:	b948      	cbnz	r0, 800dd14 <__smakebuf_r+0x44>
 800dd00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd04:	059a      	lsls	r2, r3, #22
 800dd06:	d4ef      	bmi.n	800dce8 <__smakebuf_r+0x18>
 800dd08:	f023 0303 	bic.w	r3, r3, #3
 800dd0c:	f043 0302 	orr.w	r3, r3, #2
 800dd10:	81a3      	strh	r3, [r4, #12]
 800dd12:	e7e3      	b.n	800dcdc <__smakebuf_r+0xc>
 800dd14:	4b0d      	ldr	r3, [pc, #52]	; (800dd4c <__smakebuf_r+0x7c>)
 800dd16:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd18:	89a3      	ldrh	r3, [r4, #12]
 800dd1a:	6020      	str	r0, [r4, #0]
 800dd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd20:	81a3      	strh	r3, [r4, #12]
 800dd22:	9b00      	ldr	r3, [sp, #0]
 800dd24:	6163      	str	r3, [r4, #20]
 800dd26:	9b01      	ldr	r3, [sp, #4]
 800dd28:	6120      	str	r0, [r4, #16]
 800dd2a:	b15b      	cbz	r3, 800dd44 <__smakebuf_r+0x74>
 800dd2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd30:	4630      	mov	r0, r6
 800dd32:	f000 f891 	bl	800de58 <_isatty_r>
 800dd36:	b128      	cbz	r0, 800dd44 <__smakebuf_r+0x74>
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	f023 0303 	bic.w	r3, r3, #3
 800dd3e:	f043 0301 	orr.w	r3, r3, #1
 800dd42:	81a3      	strh	r3, [r4, #12]
 800dd44:	89a0      	ldrh	r0, [r4, #12]
 800dd46:	4305      	orrs	r5, r0
 800dd48:	81a5      	strh	r5, [r4, #12]
 800dd4a:	e7cd      	b.n	800dce8 <__smakebuf_r+0x18>
 800dd4c:	0800dadd 	.word	0x0800dadd

0800dd50 <__malloc_lock>:
 800dd50:	4801      	ldr	r0, [pc, #4]	; (800dd58 <__malloc_lock+0x8>)
 800dd52:	f7ff bf95 	b.w	800dc80 <__retarget_lock_acquire_recursive>
 800dd56:	bf00      	nop
 800dd58:	20000c14 	.word	0x20000c14

0800dd5c <__malloc_unlock>:
 800dd5c:	4801      	ldr	r0, [pc, #4]	; (800dd64 <__malloc_unlock+0x8>)
 800dd5e:	f7ff bf90 	b.w	800dc82 <__retarget_lock_release_recursive>
 800dd62:	bf00      	nop
 800dd64:	20000c14 	.word	0x20000c14

0800dd68 <__sread>:
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd70:	f000 f894 	bl	800de9c <_read_r>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	bfab      	itete	ge
 800dd78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd7a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd7c:	181b      	addge	r3, r3, r0
 800dd7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd82:	bfac      	ite	ge
 800dd84:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd86:	81a3      	strhlt	r3, [r4, #12]
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <__swrite>:
 800dd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8e:	461f      	mov	r7, r3
 800dd90:	898b      	ldrh	r3, [r1, #12]
 800dd92:	05db      	lsls	r3, r3, #23
 800dd94:	4605      	mov	r5, r0
 800dd96:	460c      	mov	r4, r1
 800dd98:	4616      	mov	r6, r2
 800dd9a:	d505      	bpl.n	800dda8 <__swrite+0x1e>
 800dd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda0:	2302      	movs	r3, #2
 800dda2:	2200      	movs	r2, #0
 800dda4:	f000 f868 	bl	800de78 <_lseek_r>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	463b      	mov	r3, r7
 800ddb8:	4628      	mov	r0, r5
 800ddba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbe:	f000 b817 	b.w	800ddf0 <_write_r>

0800ddc2 <__sseek>:
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddca:	f000 f855 	bl	800de78 <_lseek_r>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	bf15      	itete	ne
 800ddd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddde:	81a3      	strheq	r3, [r4, #12]
 800dde0:	bf18      	it	ne
 800dde2:	81a3      	strhne	r3, [r4, #12]
 800dde4:	bd10      	pop	{r4, pc}

0800dde6 <__sclose>:
 800dde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddea:	f000 b813 	b.w	800de14 <_close_r>
	...

0800ddf0 <_write_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	; (800de10 <_write_r+0x20>)
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	602a      	str	r2, [r5, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f3 fd73 	bl	80018ea <_write>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_write_r+0x1e>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_write_r+0x1e>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20000c18 	.word	0x20000c18

0800de14 <_close_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d06      	ldr	r5, [pc, #24]	; (800de30 <_close_r+0x1c>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4604      	mov	r4, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	602b      	str	r3, [r5, #0]
 800de20:	f7f3 fd7f 	bl	8001922 <_close>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_close_r+0x1a>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_close_r+0x1a>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20000c18 	.word	0x20000c18

0800de34 <_fstat_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4d07      	ldr	r5, [pc, #28]	; (800de54 <_fstat_r+0x20>)
 800de38:	2300      	movs	r3, #0
 800de3a:	4604      	mov	r4, r0
 800de3c:	4608      	mov	r0, r1
 800de3e:	4611      	mov	r1, r2
 800de40:	602b      	str	r3, [r5, #0]
 800de42:	f7f3 fd7a 	bl	800193a <_fstat>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	d102      	bne.n	800de50 <_fstat_r+0x1c>
 800de4a:	682b      	ldr	r3, [r5, #0]
 800de4c:	b103      	cbz	r3, 800de50 <_fstat_r+0x1c>
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	bd38      	pop	{r3, r4, r5, pc}
 800de52:	bf00      	nop
 800de54:	20000c18 	.word	0x20000c18

0800de58 <_isatty_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d06      	ldr	r5, [pc, #24]	; (800de74 <_isatty_r+0x1c>)
 800de5c:	2300      	movs	r3, #0
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	602b      	str	r3, [r5, #0]
 800de64:	f7f3 fd79 	bl	800195a <_isatty>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_isatty_r+0x1a>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_isatty_r+0x1a>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	20000c18 	.word	0x20000c18

0800de78 <_lseek_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d07      	ldr	r5, [pc, #28]	; (800de98 <_lseek_r+0x20>)
 800de7c:	4604      	mov	r4, r0
 800de7e:	4608      	mov	r0, r1
 800de80:	4611      	mov	r1, r2
 800de82:	2200      	movs	r2, #0
 800de84:	602a      	str	r2, [r5, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	f7f3 fd72 	bl	8001970 <_lseek>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_lseek_r+0x1e>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_lseek_r+0x1e>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	20000c18 	.word	0x20000c18

0800de9c <_read_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4d07      	ldr	r5, [pc, #28]	; (800debc <_read_r+0x20>)
 800dea0:	4604      	mov	r4, r0
 800dea2:	4608      	mov	r0, r1
 800dea4:	4611      	mov	r1, r2
 800dea6:	2200      	movs	r2, #0
 800dea8:	602a      	str	r2, [r5, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	f7f3 fd00 	bl	80018b0 <_read>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_read_r+0x1e>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_read_r+0x1e>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20000c18 	.word	0x20000c18

0800dec0 <_init>:
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	bf00      	nop
 800dec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec6:	bc08      	pop	{r3}
 800dec8:	469e      	mov	lr, r3
 800deca:	4770      	bx	lr

0800decc <_fini>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	bf00      	nop
 800ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded2:	bc08      	pop	{r3}
 800ded4:	469e      	mov	lr, r3
 800ded6:	4770      	bx	lr
