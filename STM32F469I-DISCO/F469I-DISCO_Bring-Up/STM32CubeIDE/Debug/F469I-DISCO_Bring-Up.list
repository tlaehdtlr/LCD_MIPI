
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac4  08004ac4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004acc  08004acc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000027c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a69d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5c  00000000  00000000  0002a73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d8  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a4c0  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d284  00000000  00000000  00057bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f115b  00000000  00000000  00064e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155fd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c10  00000000  00000000  00156028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004880 	.word	0x08004880

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08004880 	.word	0x08004880

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <help_func>:
        (void *)0, (void *)0, (void *)0
    }
};

static void help_func(uint8_t argc, void **argv)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d129      	bne.n	800063a <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 80005e6:	4816      	ldr	r0, [pc, #88]	; (8000640 <help_func+0x6c>)
 80005e8:	f003 f8e4 	bl	80037b4 <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e017      	b.n	8000622 <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 80005f2:	4914      	ldr	r1, [pc, #80]	; (8000644 <help_func+0x70>)
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	6819      	ldr	r1, [r3, #0]
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <help_func+0x70>)
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4403      	add	r3, r0
 8000610:	3308      	adds	r3, #8
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <help_func+0x74>)
 8000618:	f003 f846 	bl	80036a8 <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <help_func+0x70>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3304      	adds	r3, #4
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1dc      	bne.n	80005f2 <help_func+0x1e>
        }
        return;
 8000638:	bf00      	nop
    }
}
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	080048bc 	.word	0x080048bc
 8000644:	0800494c 	.word	0x0800494c
 8000648:	080048d8 	.word	0x080048d8

0800064c <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e011      	b.n	8000682 <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 800065e:	4912      	ldr	r1, [pc, #72]	; (80006a8 <shell_get_command_index+0x5c>)
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fdc5 	bl	8000200 <strcmp>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00e      	beq.n	800069a <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <shell_get_command_index+0x5c>)
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1e2      	bne.n	800065e <shell_get_command_index+0x12>
 8000698:	e000      	b.n	800069c <shell_get_command_index+0x50>
        {
            break;
 800069a:	bf00      	nop
        }
    }

    return i;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	b2db      	uxtb	r3, r3
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	0800494c 	.word	0x0800494c

080006ac <cli_process>:

void cli_process(char* cmd)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006b8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006bc:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 80006be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006c2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80006c6:	4618      	mov	r0, r3
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	461a      	mov	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f002 ffe2 	bl	8003698 <memset>
    int i = 0, idx = 0, argc = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 80006e6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006ea:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006ee:	4939      	ldr	r1, [pc, #228]	; (80007d4 <cli_process+0x128>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	f003 f86f 	bl	80037d4 <strtok>
 80006f6:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 80006fa:	e02c      	b.n	8000756 <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000702:	e014      	b.n	800072e <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000704:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000708:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800070c:	1c59      	adds	r1, r3, #1
 800070e:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000712:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000716:	4411      	add	r1, r2
 8000718:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800071c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000724:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000728:	3301      	adds	r3, #1
 800072a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800072e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000732:	f7ff fd6f 	bl	8000214 <strlen>
 8000736:	4602      	mov	r2, r0
 8000738:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800073c:	429a      	cmp	r2, r3
 800073e:	d8e1      	bhi.n	8000704 <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 8000740:	4924      	ldr	r1, [pc, #144]	; (80007d4 <cli_process+0x128>)
 8000742:	2000      	movs	r0, #0
 8000744:	f003 f846 	bl	80037d4 <strtok>
 8000748:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 800074c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000750:	3301      	adds	r3, #1
 8000752:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 8000756:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1ce      	bne.n	80006fc <cli_process+0x50>
    }

    command = argv[0];
 800075e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000762:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 800076c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000770:	2b00      	cmp	r3, #0
 8000772:	d027      	beq.n	80007c4 <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 8000774:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000778:	f7ff ff68 	bl	800064c <shell_get_command_index>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 8000782:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000786:	4914      	ldr	r1, [pc, #80]	; (80007d8 <cli_process+0x12c>)
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	3304      	adds	r3, #4
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <cli_process+0x130>)
 800079c:	f003 f80a 	bl	80037b4 <puts>
 80007a0:	e013      	b.n	80007ca <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 80007a2:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 80007a6:	490c      	ldr	r1, [pc, #48]	; (80007d8 <cli_process+0x12c>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	3304      	adds	r3, #4
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	f107 0108 	add.w	r1, r7, #8
 80007c0:	4610      	mov	r0, r2
 80007c2:	4798      	blx	r3
    }

    printf("\r\n");
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <cli_process+0x134>)
 80007c6:	f002 fff5 	bl	80037b4 <puts>
 80007ca:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080048e8 	.word	0x080048e8
 80007d8:	0800494c 	.word	0x0800494c
 80007dc:	080048ec 	.word	0x080048ec
 80007e0:	08004904 	.word	0x08004904

080007e4 <MX_GPIO_Init>:
     PE12   ------> FMC_D9_DA9
     PE15   ------> FMC_D12_DA12
     PE13   ------> FMC_D10_DA10
*/
void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80007fe:	4bad      	ldr	r3, [pc, #692]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4aac      	ldr	r2, [pc, #688]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4baa      	ldr	r3, [pc, #680]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
 800081a:	4ba6      	ldr	r3, [pc, #664]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4aa5      	ldr	r2, [pc, #660]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	4b9f      	ldr	r3, [pc, #636]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a9e      	ldr	r2, [pc, #632]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b9c      	ldr	r3, [pc, #624]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	623b      	str	r3, [r7, #32]
 800084c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	4b98      	ldr	r3, [pc, #608]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a97      	ldr	r2, [pc, #604]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b95      	ldr	r3, [pc, #596]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b91      	ldr	r3, [pc, #580]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a90      	ldr	r2, [pc, #576]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b8a      	ldr	r3, [pc, #552]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a89      	ldr	r2, [pc, #548]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b83      	ldr	r3, [pc, #524]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a82      	ldr	r2, [pc, #520]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b80      	ldr	r3, [pc, #512]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a7b      	ldr	r2, [pc, #492]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b75      	ldr	r3, [pc, #468]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a74      	ldr	r2, [pc, #464]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b72      	ldr	r3, [pc, #456]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b6e      	ldr	r3, [pc, #440]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a6d      	ldr	r2, [pc, #436]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a66      	ldr	r2, [pc, #408]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 800091c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	210c      	movs	r1, #12
 8000932:	4861      	ldr	r0, [pc, #388]	; (8000ab8 <MX_GPIO_Init+0x2d4>)
 8000934:	f001 f900 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2130      	movs	r1, #48	; 0x30
 800093c:	485f      	ldr	r0, [pc, #380]	; (8000abc <MX_GPIO_Init+0x2d8>)
 800093e:	f001 f8fb 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2108      	movs	r1, #8
 8000946:	485e      	ldr	r0, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x2dc>)
 8000948:	f001 f8f6 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	485c      	ldr	r0, [pc, #368]	; (8000ac4 <MX_GPIO_Init+0x2e0>)
 8000952:	f001 f8f1 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	485b      	ldr	r0, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800095c:	f001 f8ec 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2108      	movs	r1, #8
 8000964:	4859      	ldr	r0, [pc, #356]	; (8000acc <MX_GPIO_Init+0x2e8>)
 8000966:	f001 f8e7 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800096a:	2330      	movs	r3, #48	; 0x30
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800097a:	2306      	movs	r3, #6
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	484c      	ldr	r0, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x2d4>)
 8000986:	f000 ff2b 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800098a:	230c      	movs	r3, #12
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x2d4>)
 80009a2:	f000 ff1d 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80009a6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009b8:	2308      	movs	r3, #8
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4840      	ldr	r0, [pc, #256]	; (8000ac4 <MX_GPIO_Init+0x2e0>)
 80009c4:	f000 ff0c 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80009c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009da:	230c      	movs	r3, #12
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x2d4>)
 80009e6:	f000 fefb 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000a08:	f000 feea 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a24:	4619      	mov	r1, r3
 8000a26:	4828      	ldr	r0, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000a28:	f000 feda 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8000a2c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 8000a4a:	f000 fec9 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000a64:	f000 febc 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000a84:	f000 feac 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8000a88:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_GPIO_Init+0x2e0>)
 8000aa6:	f000 fe9b 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	e010      	b.n	8000ad4 <MX_GPIO_Init+0x2f0>
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40022800 	.word	0x40022800
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	48a5      	ldr	r0, [pc, #660]	; (8000d80 <MX_GPIO_Init+0x59c>)
 8000aea:	f000 fe79 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8000aee:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b00:	230c      	movs	r3, #12
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	489d      	ldr	r0, [pc, #628]	; (8000d80 <MX_GPIO_Init+0x59c>)
 8000b0c:	f000 fe68 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8000b10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b22:	230a      	movs	r3, #10
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4895      	ldr	r0, [pc, #596]	; (8000d84 <MX_GPIO_Init+0x5a0>)
 8000b2e:	f000 fe57 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin
                           PIPin PIPin PIPin PIPin
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000b32:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b44:	230c      	movs	r3, #12
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	488e      	ldr	r0, [pc, #568]	; (8000d88 <MX_GPIO_Init+0x5a4>)
 8000b50:	f000 fe46 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000b54:	2330      	movs	r3, #48	; 0x30
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b58:	2311      	movs	r3, #17
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4885      	ldr	r0, [pc, #532]	; (8000d80 <MX_GPIO_Init+0x59c>)
 8000b6c:	f000 fe38 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b70:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b82:	230c      	movs	r3, #12
 8000b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	487f      	ldr	r0, [pc, #508]	; (8000d8c <MX_GPIO_Init+0x5a8>)
 8000b8e:	f000 fe27 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000b92:	2308      	movs	r3, #8
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b96:	2311      	movs	r3, #17
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4879      	ldr	r0, [pc, #484]	; (8000d90 <MX_GPIO_Init+0x5ac>)
 8000baa:	f000 fe19 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	486d      	ldr	r0, [pc, #436]	; (8000d80 <MX_GPIO_Init+0x59c>)
 8000bca:	f000 fe09 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000bce:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be0:	230c      	movs	r3, #12
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	486a      	ldr	r0, [pc, #424]	; (8000d94 <MX_GPIO_Init+0x5b0>)
 8000bec:	f000 fdf8 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c02:	4619      	mov	r1, r3
 8000c04:	485f      	ldr	r0, [pc, #380]	; (8000d84 <MX_GPIO_Init+0x5a0>)
 8000c06:	f000 fdeb 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000c0a:	2330      	movs	r3, #48	; 0x30
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	4619      	mov	r1, r3
 8000c24:	485b      	ldr	r0, [pc, #364]	; (8000d94 <MX_GPIO_Init+0x5b0>)
 8000c26:	f000 fddb 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	4854      	ldr	r0, [pc, #336]	; (8000d98 <MX_GPIO_Init+0x5b4>)
 8000c46:	f000 fdcb 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	484d      	ldr	r0, [pc, #308]	; (8000d98 <MX_GPIO_Init+0x5b4>)
 8000c62:	f000 fdbd 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8000c66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	4619      	mov	r1, r3
 8000c82:	4842      	ldr	r0, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x5a8>)
 8000c84:	f000 fdac 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8000c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4839      	ldr	r0, [pc, #228]	; (8000d8c <MX_GPIO_Init+0x5a8>)
 8000ca6:	f000 fd9b 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4835      	ldr	r0, [pc, #212]	; (8000d9c <MX_GPIO_Init+0x5b8>)
 8000cc6:	f000 fd8b 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482f      	ldr	r0, [pc, #188]	; (8000da0 <MX_GPIO_Init+0x5bc>)
 8000ce2:	f000 fd7d 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	481f      	ldr	r0, [pc, #124]	; (8000d80 <MX_GPIO_Init+0x59c>)
 8000d04:	f000 fd6c 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481f      	ldr	r0, [pc, #124]	; (8000d98 <MX_GPIO_Init+0x5b4>)
 8000d1c:	f000 fd60 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d20:	2320      	movs	r3, #32
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0x5c0>)
 8000d36:	f000 fd53 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_GPIO_Init+0x5c0>)
 8000d56:	f000 fd43 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_GPIO_Init+0x5a0>)
 8000d72:	f000 fd35 	bl	80017e0 <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3740      	adds	r7, #64	; 0x40
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020c00 	.word	0x40020c00
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40022000 	.word	0x40022000
 8000d8c:	40021400 	.word	0x40021400
 8000d90:	40022800 	.word	0x40022800
 8000d94:	40021c00 	.word	0x40021c00
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40022400 	.word	0x40022400

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 fb02 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f810 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f7ff fd16 	bl	80007e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000db8:	f000 f9a0 	bl	80010fc <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 8000dbc:	4903      	ldr	r1, [pc, #12]	; (8000dcc <main+0x24>)
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <main+0x28>)
 8000dc0:	f002 fc72 	bl	80036a8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 8000dc4:	f000 faa6 	bl	8001314 <uart_check_cmd_recv>
 8000dc8:	e7fc      	b.n	8000dc4 <main+0x1c>
 8000dca:	bf00      	nop
 8000dcc:	08004908 	.word	0x08004908
 8000dd0:	08004910 	.word	0x08004910

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2234      	movs	r2, #52	; 0x34
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fc58 	bl	8003698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <SystemClock_Config+0xdc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <SystemClock_Config+0xdc>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <SystemClock_Config+0xdc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <SystemClock_Config+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <SystemClock_Config+0xe0>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <SystemClock_Config+0xe0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e48:	23b4      	movs	r3, #180	; 0xb4
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 f8f5 	bl	800204c <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e68:	f000 f826 	bl	8000eb8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e6c:	f000 fe7e 	bl	8001b6c <HAL_PWREx_EnableOverDrive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e76:	f000 f81f 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2105      	movs	r1, #5
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 feb7 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ea4:	f000 f808 	bl	8000eb8 <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3750      	adds	r7, #80	; 0x50
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 fa7a 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <USART3_IRQHandler+0x10>)
 8000f6e:	f001 fc01 	bl	8002774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000294 	.word	0x20000294

08000f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_kill>:

int _kill(int pid, int sig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f96:	f002 fb55 	bl	8003644 <__errno>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe7 	bl	8000f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fbe:	e7fe      	b.n	8000fbe <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001022:	605a      	str	r2, [r3, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_isatty>:

int _isatty(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return 1;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f002 fad6 	bl	8003644 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20050000 	.word	0x20050000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	200002f0 	.word	0x200002f0

080010d0 <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <_write+0x28>)
 80010e8:	f001 fa81 	bl	80025ee <HAL_UART_Transmit>
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000294 	.word	0x20000294

080010fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_USART3_UART_Init+0x64>)
 8001104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART3_UART_Init+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART3_UART_Init+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001134:	f001 fa0e 	bl	8002554 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f7ff febb 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART3_UART_Init+0x68>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_USART3_UART_Init+0x6c>)
 800114c:	4413      	add	r3, r2
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <MX_USART3_UART_Init+0x60>)
 8001154:	f001 fadd 	bl	8002712 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000294 	.word	0x20000294
 8001160:	40004800 	.word	0x40004800
 8001164:	20000190 	.word	0x20000190
 8001168:	20000090 	.word	0x20000090

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_UART_MspInit+0x94>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d134      	bne.n	80011f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d8:	2307      	movs	r3, #7
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011e4:	f000 fafc 	bl	80017e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2027      	movs	r0, #39	; 0x27
 80011ee:	f000 fa2e 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f2:	2027      	movs	r0, #39	; 0x27
 80011f4:	f000 fa47 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004800 	.word	0x40004800
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <HAL_UART_RxCpltCallback+0xec>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d167      	bne.n	80012ee <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 8001228:	5c9b      	ldrb	r3, [r3, r2]
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d007      	beq.n	800123e <HAL_UART_RxCpltCallback+0x32>
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 8001238:	5c9b      	ldrb	r3, [r3, r2]
 800123a:	2b0d      	cmp	r3, #13
 800123c:	d111      	bne.n	8001262 <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 8001248:	2100      	movs	r1, #0
 800124a:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 800124e:	2200      	movs	r2, #0
 8001250:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_UART_RxCpltCallback+0xf8>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 800125a:	482b      	ldr	r0, [pc, #172]	; (8001308 <HAL_UART_RxCpltCallback+0xfc>)
 800125c:	f002 fab2 	bl	80037c4 <strcpy>
 8001260:	e03a      	b.n	80012d8 <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 800126c:	5c9b      	ldrb	r3, [r3, r2]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d11a      	bne.n	80012a8 <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	2203      	movs	r2, #3
 8001286:	4921      	ldr	r1, [pc, #132]	; (800130c <HAL_UART_RxCpltCallback+0x100>)
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <HAL_UART_RxCpltCallback+0x104>)
 800128a:	f001 f9b0 	bl	80025ee <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	425a      	negs	r2, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	bf58      	it	pl
 800129e:	4253      	negpl	r3, r2
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	e017      	b.n	80012d8 <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 80012b2:	18d1      	adds	r1, r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2201      	movs	r2, #1
 80012ba:	4815      	ldr	r0, [pc, #84]	; (8001310 <HAL_UART_RxCpltCallback+0x104>)
 80012bc:	f001 f997 	bl	80025ee <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	425a      	negs	r2, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	bf58      	it	pl
 80012d0:	4253      	negpl	r3, r2
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 80012d6:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_UART_RxCpltCallback+0xf0>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_UART_RxCpltCallback+0xf4>)
 80012e2:	4413      	add	r3, r2
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <HAL_UART_RxCpltCallback+0x104>)
 80012ea:	f001 fa12 	bl	8002712 <HAL_UART_Receive_IT>
    } 
  }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40004800 	.word	0x40004800
 80012fc:	20000190 	.word	0x20000190
 8001300:	20000090 	.word	0x20000090
 8001304:	20000192 	.word	0x20000192
 8001308:	20000194 	.word	0x20000194
 800130c:	08004948 	.word	0x08004948
 8001310:	20000294 	.word	0x20000294

08001314 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  if (cmd_ready)
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <uart_check_cmd_recv+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <uart_check_cmd_recv+0x20>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <uart_check_cmd_recv+0x24>)
 800132a:	f7ff f9bf 	bl	80006ac <cli_process>
  }
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000192 	.word	0x20000192
 8001338:	20000194 	.word	0x20000194

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f000 f813 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f002 f971 	bl	8003650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fd1b 	bl	8000da8 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001374:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001380:	08004ad4 	.word	0x08004ad4
  ldr r2, =_sbss
 8001384:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001388:	200002ec 	.word	0x200002ec

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f92b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fd6c 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f943 	bl	80016a2 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f90b 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	200002d8 	.word	0x200002d8

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200002d8 	.word	0x200002d8

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff feda 	bl	8001480 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d008      	beq.n	80016ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e052      	b.n	8001792 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0216 	bic.w	r2, r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_DMA_Abort+0x62>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0208 	bic.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	e013      	b.n	8001766 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173e:	f7ff fe9f 	bl	8001480 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d90c      	bls.n	8001766 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e015      	b.n	8001792 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e4      	bne.n	800173e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	223f      	movs	r2, #63	; 0x3f
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d004      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00c      	b.n	80017d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e177      	b.n	8001aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8166 	bne.w	8001ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80c0 	beq.w	8001ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_GPIO_Init+0x324>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a65      	ldr	r2, [pc, #404]	; (8001b04 <HAL_GPIO_Init+0x324>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_GPIO_Init+0x324>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a61      	ldr	r2, [pc, #388]	; (8001b08 <HAL_GPIO_Init+0x328>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d037      	beq.n	8001a1e <HAL_GPIO_Init+0x23e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_GPIO_Init+0x330>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d031      	beq.n	8001a1a <HAL_GPIO_Init+0x23a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x334>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x236>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a55      	ldr	r2, [pc, #340]	; (8001b18 <HAL_GPIO_Init+0x338>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d025      	beq.n	8001a12 <HAL_GPIO_Init+0x232>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a54      	ldr	r2, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x33c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01f      	beq.n	8001a0e <HAL_GPIO_Init+0x22e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_GPIO_Init+0x340>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x22a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_GPIO_Init+0x344>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x348>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a50      	ldr	r2, [pc, #320]	; (8001b2c <HAL_GPIO_Init+0x34c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x350>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x21a>
 80019f6:	2309      	movs	r3, #9
 80019f8:	e012      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 80019fa:	230a      	movs	r3, #10
 80019fc:	e010      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 80019fe:	2308      	movs	r3, #8
 8001a00:	e00e      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00a      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_GPIO_Init+0x328>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	f67f ae84 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40021c00 	.word	0x40021c00
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40022400 	.word	0x40022400
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b98:	f7ff fc72 	bl	8001480 <HAL_GetTick>
 8001b9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b9e:	e009      	b.n	8001bb4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba0:	f7ff fc6e 	bl	8001480 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bae:	d901      	bls.n	8001bb4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc8:	f7ff fc5a 	bl	8001480 <HAL_GetTick>
 8001bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bce:	e009      	b.n	8001be4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bd0:	f7ff fc56 	bl	8001480 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bde:	d901      	bls.n	8001be4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e007      	b.n	8001bf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bf0:	d1ee      	bne.n	8001bd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	420e0040 	.word	0x420e0040
 8001c04:	40007000 	.word	0x40007000
 8001c08:	420e0044 	.word	0x420e0044

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff fbc0 	bl	8001480 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff fbbc 	bl	8001480 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb20 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08004964 	.word	0x08004964
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b094      	sub	sp, #80	; 0x50
 8001dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de8:	2300      	movs	r3, #0
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	f200 80e1 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e0db      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e10:	e0db      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e16:	e0d8      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
 8001e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5c:	0150      	lsls	r0, r2, #5
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4621      	mov	r1, r4
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	6139      	str	r1, [r7, #16]
 8001e68:	4629      	mov	r1, r5
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	4651      	mov	r1, sl
 8001e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e86:	4651      	mov	r1, sl
 8001e88:	018a      	lsls	r2, r1, #6
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e90:	4659      	mov	r1, fp
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	eb18 0303 	adds.w	r3, r8, r3
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	eb49 0303 	adc.w	r3, r9, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	024b      	lsls	r3, r1, #9
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	024a      	lsls	r2, r1, #9
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee8:	f7fe f9f2 	bl	80002d0 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	e058      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	2200      	movs	r2, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	4611      	mov	r1, r2
 8001f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	f04f 0000 	mov.w	r0, #0
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	0159      	lsls	r1, r3, #5
 8001f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f22:	0150      	lsls	r0, r2, #5
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f2e:	4649      	mov	r1, r9
 8001f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f48:	ebb2 040a 	subs.w	r4, r2, sl
 8001f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	00eb      	lsls	r3, r5, #3
 8001f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5e:	00e2      	lsls	r2, r4, #3
 8001f60:	4614      	mov	r4, r2
 8001f62:	461d      	mov	r5, r3
 8001f64:	4643      	mov	r3, r8
 8001f66:	18e3      	adds	r3, r4, r3
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	eb45 0303 	adc.w	r3, r5, r3
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f7e:	4629      	mov	r1, r5
 8001f80:	028b      	lsls	r3, r1, #10
 8001f82:	4621      	mov	r1, r4
 8001f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f88:	4621      	mov	r1, r4
 8001f8a:	028a      	lsls	r2, r1, #10
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f92:	2200      	movs	r2, #0
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	61fa      	str	r2, [r7, #28]
 8001f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9c:	f7fe f998 	bl	80002d0 <__aeabi_uldivmod>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3750      	adds	r7, #80	; 0x50
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002000:	f7ff fff0 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0a9b      	lsrs	r3, r3, #10
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4903      	ldr	r1, [pc, #12]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	08004974 	.word	0x08004974

08002024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002028:	f7ff ffdc 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0b5b      	lsrs	r3, r3, #13
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	08004974 	.word	0x08004974

0800204c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e273      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d075      	beq.n	8002156 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00c      	beq.n	8002090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b82      	ldr	r3, [pc, #520]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d05b      	beq.n	8002154 <HAL_RCC_OscConfig+0x108>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d157      	bne.n	8002154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e24e      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x74>
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6f      	ldr	r2, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6c      	ldr	r2, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f9bc 	bl	8001480 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff f9b8 	bl	8001480 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e213      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xc0>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff f9a8 	bl	8001480 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff f9a4 	bl	8001480 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ff      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0xe8>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1d3      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f95d 	bl	8001480 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff f959 	bl	8001480 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1b4      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f93c 	bl	8001480 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff f938 	bl	8001480 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e193      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d036      	beq.n	80022a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff f91c 	bl	8001480 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff f918 	bl	8001480 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e173      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x200>
 800226a:	e01b      	b.n	80022a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff f905 	bl	8001480 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	e00e      	b.n	8002298 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff f901 	bl	8001480 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d907      	bls.n	8002298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e15c      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ea      	bne.n	800227a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8097 	beq.w	80023e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b7f      	ldr	r3, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a7e      	ldr	r2, [pc, #504]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <HAL_RCC_OscConfig+0x47c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x47c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x47c>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff f8c1 	bl	8001480 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff f8bd 	bl	8001480 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e118      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x47c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x2ea>
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x30c>
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002358:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff f882 	bl	8001480 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff f87e 	bl	8001480 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0d7      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ee      	beq.n	8002380 <HAL_RCC_OscConfig+0x334>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7ff f86c 	bl	8001480 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7ff f868 	bl	8001480 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0c1      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ee      	bne.n	80023ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80ad 	beq.w	8002544 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d060      	beq.n	80024b8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d145      	bne.n	800248a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b33      	ldr	r3, [pc, #204]	; (80024cc <HAL_RCC_OscConfig+0x480>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff f83c 	bl	8001480 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff f838 	bl	8001480 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e093      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	491b      	ldr	r1, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x480>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff f80d 	bl	8001480 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff f809 	bl	8001480 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e064      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x41e>
 8002488:	e05c      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x480>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fff6 	bl	8001480 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fff2 	bl	8001480 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e04d      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x44c>
 80024b6:	e045      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e040      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d030      	beq.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d129      	bne.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d122      	bne.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	4293      	cmp	r3, r2
 800250a:	d119      	bne.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d10f      	bne.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e03f      	b.n	80025e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fdf6 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fddf 	bl	800315c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08a      	sub	sp, #40	; 0x28
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	d17c      	bne.n	8002708 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_Transmit+0x2c>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e075      	b.n	800270a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_UART_Transmit+0x3e>
 8002628:	2302      	movs	r3, #2
 800262a:	e06e      	b.n	800270a <HAL_UART_Transmit+0x11c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe ff1d 	bl	8001480 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d108      	bne.n	8002670 <HAL_UART_Transmit+0x82>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e003      	b.n	8002678 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002680:	e02a      	b.n	80026d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fb1f 	bl	8002cd0 <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3302      	adds	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e007      	b.n	80026ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1cf      	bne.n	8002682 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 faef 	bl	8002cd0 <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e006      	b.n	800270a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	d11d      	bne.n	8002768 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Receive_IT+0x26>
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e016      	b.n	800276a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_UART_Receive_IT+0x38>
 8002746:	2302      	movs	r3, #2
 8002748:	e00f      	b.n	800276a <HAL_UART_Receive_IT+0x58>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	461a      	mov	r2, r3
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fb24 	bl	8002dac <UART_Start_Receive_IT>
 8002764:	4603      	mov	r3, r0
 8002766:	e000      	b.n	800276a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b0ba      	sub	sp, #232	; 0xe8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_UART_IRQHandler+0x66>
 80027c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fc07 	bl	8002fe6 <UART_Receive_IT>
      return;
 80027d8:	e256      	b.n	8002c88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80de 	beq.w	80029a0 <HAL_UART_IRQHandler+0x22c>
 80027e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80d1 	beq.w	80029a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_UART_IRQHandler+0xae>
 800280a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_UART_IRQHandler+0xd2>
 800282e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_UART_IRQHandler+0xf6>
 8002852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800286a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d011      	beq.n	800289a <HAL_UART_IRQHandler+0x126>
 8002876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0208 	orr.w	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 81ed 	beq.w	8002c7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_UART_IRQHandler+0x14e>
 80028b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb92 	bl	8002fe6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_UART_IRQHandler+0x17a>
 80028e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d04f      	beq.n	800298e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa9a 	bl	8002e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d141      	bne.n	8002986 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3314      	adds	r3, #20
 8002908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800291c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800292e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800293a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1d9      	bne.n	8002902 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	2b00      	cmp	r3, #0
 8002954:	d013      	beq.n	800297e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_UART_IRQHandler+0x3dc>)
 800295c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe ff19 	bl	800179a <HAL_DMA_Abort_IT>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002978:	4610      	mov	r0, r2
 800297a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e00e      	b.n	800299c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f990 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	e00a      	b.n	800299c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f98c 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298c:	e006      	b.n	800299c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f988 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800299a:	e170      	b.n	8002c7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	bf00      	nop
    return;
 800299e:	e16e      	b.n	8002c7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 814a 	bne.w	8002c3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8143 	beq.w	8002c3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 813c 	beq.w	8002c3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	f040 80b4 	bne.w	8002b54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8140 	beq.w	8002c82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	f080 8139 	bcs.w	8002c82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a22:	f000 8088 	beq.w	8002b36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1d9      	bne.n	8002a26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e1      	bne.n	8002a72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ad2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ad4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e3      	bne.n	8002aae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b06:	f023 0310 	bic.w	r3, r3, #16
 8002b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b18:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e3      	bne.n	8002af4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fdc2 	bl	80016ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8b6 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4c:	e099      	b.n	8002c82 <HAL_UART_IRQHandler+0x50e>
 8002b4e:	bf00      	nop
 8002b50:	08002eef 	.word	0x08002eef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 808b 	beq.w	8002c86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8086 	beq.w	8002c86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b9e:	647a      	str	r2, [r7, #68]	; 0x44
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e3      	bne.n	8002b7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e3      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	617b      	str	r3, [r7, #20]
   return(result);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f83e 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c3c:	e023      	b.n	8002c86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_UART_IRQHandler+0x4ea>
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f95d 	bl	8002f16 <UART_Transmit_IT>
    return;
 8002c5c:	e014      	b.n	8002c88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00e      	beq.n	8002c88 <HAL_UART_IRQHandler+0x514>
 8002c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f99d 	bl	8002fb6 <UART_EndTransmit_IT>
    return;
 8002c7c:	e004      	b.n	8002c88 <HAL_UART_IRQHandler+0x514>
    return;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <HAL_UART_IRQHandler+0x514>
      return;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <HAL_UART_IRQHandler+0x514>
      return;
 8002c86:	bf00      	nop
  }
}
 8002c88:	37e8      	adds	r7, #232	; 0xe8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop

08002c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce0:	e050      	b.n	8002d84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d04c      	beq.n	8002d84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf0:	f7fe fbc6 	bl	8001480 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d241      	bcs.n	8002d84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d20:	637a      	str	r2, [r7, #52]	; 0x34
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d28:	e841 2300 	strex	r3, r2, [r1]
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e5      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3314      	adds	r3, #20
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	613b      	str	r3, [r7, #16]
   return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d54:	623a      	str	r2, [r7, #32]
 8002d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	69f9      	ldr	r1, [r7, #28]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00f      	b.n	8002da4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d09f      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3740      	adds	r7, #64	; 0x40
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2222      	movs	r2, #34	; 0x22
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0220 	orr.w	r2, r2, #32
 8002e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b095      	sub	sp, #84	; 0x54
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e50:	643a      	str	r2, [r7, #64]	; 0x40
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e5      	bne.n	8002e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3314      	adds	r3, #20
 8002e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d119      	bne.n	8002ed4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f023 0310 	bic.w	r3, r3, #16
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec0:	61ba      	str	r2, [r7, #24]
 8002ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ee2:	bf00      	nop
 8002ee4:	3754      	adds	r7, #84	; 0x54
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fecb 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b21      	cmp	r3, #33	; 0x21
 8002f28:	d13e      	bne.n	8002fa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f32:	d114      	bne.n	8002f5e <UART_Transmit_IT+0x48>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d110      	bne.n	8002f5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	621a      	str	r2, [r3, #32]
 8002f5c:	e008      	b.n	8002f70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	1c59      	adds	r1, r3, #1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6211      	str	r1, [r2, #32]
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe5a 	bl	8002c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b08c      	sub	sp, #48	; 0x30
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b22      	cmp	r3, #34	; 0x22
 8002ff8:	f040 80ab 	bne.w	8003152 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d117      	bne.n	8003036 <UART_Receive_IT+0x50>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	b29a      	uxth	r2, r3
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	1c9a      	adds	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
 8003034:	e026      	b.n	8003084 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003048:	d007      	beq.n	800305a <UART_Receive_IT+0x74>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <UART_Receive_IT+0x82>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e008      	b.n	800307a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003094:	2b00      	cmp	r3, #0
 8003096:	d15a      	bne.n	800314e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0220 	bic.w	r2, r2, #32
 80030a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d135      	bne.n	8003144 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	613b      	str	r3, [r7, #16]
   return(result);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	623a      	str	r2, [r7, #32]
 8003100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	61bb      	str	r3, [r7, #24]
   return(result);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b10      	cmp	r3, #16
 800311e:	d10a      	bne.n	8003136 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fdbb 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
 8003142:	e002      	b.n	800314a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe f861 	bl	800120c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e002      	b.n	8003154 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3730      	adds	r7, #48	; 0x30
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003160:	b0c0      	sub	sp, #256	; 0x100
 8003162:	af00      	add	r7, sp, #0
 8003164:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	68d9      	ldr	r1, [r3, #12]
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	ea40 0301 	orr.w	r3, r0, r1
 8003184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031b4:	f021 010c 	bic.w	r1, r1, #12
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031c2:	430b      	orrs	r3, r1
 80031c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d6:	6999      	ldr	r1, [r3, #24]
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	ea40 0301 	orr.w	r3, r0, r1
 80031e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <UART_SetConfig+0x2cc>)
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d005      	beq.n	80031fc <UART_SetConfig+0xa0>
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b8d      	ldr	r3, [pc, #564]	; (800342c <UART_SetConfig+0x2d0>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d104      	bne.n	8003206 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7fe ff12 	bl	8002024 <HAL_RCC_GetPCLK2Freq>
 8003200:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003204:	e003      	b.n	800320e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003206:	f7fe fef9 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 800320a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	f040 810c 	bne.w	8003434 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800321c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003226:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800322a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800322e:	4622      	mov	r2, r4
 8003230:	462b      	mov	r3, r5
 8003232:	1891      	adds	r1, r2, r2
 8003234:	65b9      	str	r1, [r7, #88]	; 0x58
 8003236:	415b      	adcs	r3, r3
 8003238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800323a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800323e:	4621      	mov	r1, r4
 8003240:	eb12 0801 	adds.w	r8, r2, r1
 8003244:	4629      	mov	r1, r5
 8003246:	eb43 0901 	adc.w	r9, r3, r1
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325e:	4690      	mov	r8, r2
 8003260:	4699      	mov	r9, r3
 8003262:	4623      	mov	r3, r4
 8003264:	eb18 0303 	adds.w	r3, r8, r3
 8003268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800326c:	462b      	mov	r3, r5
 800326e:	eb49 0303 	adc.w	r3, r9, r3
 8003272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003282:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800328a:	460b      	mov	r3, r1
 800328c:	18db      	adds	r3, r3, r3
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
 8003290:	4613      	mov	r3, r2
 8003292:	eb42 0303 	adc.w	r3, r2, r3
 8003296:	657b      	str	r3, [r7, #84]	; 0x54
 8003298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800329c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032a0:	f7fd f816 	bl	80002d0 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4b61      	ldr	r3, [pc, #388]	; (8003430 <UART_SetConfig+0x2d4>)
 80032aa:	fba3 2302 	umull	r2, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	011c      	lsls	r4, r3, #4
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032c4:	4642      	mov	r2, r8
 80032c6:	464b      	mov	r3, r9
 80032c8:	1891      	adds	r1, r2, r2
 80032ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80032cc:	415b      	adcs	r3, r3
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032d4:	4641      	mov	r1, r8
 80032d6:	eb12 0a01 	adds.w	sl, r2, r1
 80032da:	4649      	mov	r1, r9
 80032dc:	eb43 0b01 	adc.w	fp, r3, r1
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f4:	4692      	mov	sl, r2
 80032f6:	469b      	mov	fp, r3
 80032f8:	4643      	mov	r3, r8
 80032fa:	eb1a 0303 	adds.w	r3, sl, r3
 80032fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003302:	464b      	mov	r3, r9
 8003304:	eb4b 0303 	adc.w	r3, fp, r3
 8003308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003318:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800331c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003320:	460b      	mov	r3, r1
 8003322:	18db      	adds	r3, r3, r3
 8003324:	643b      	str	r3, [r7, #64]	; 0x40
 8003326:	4613      	mov	r3, r2
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
 800332e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003332:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003336:	f7fc ffcb 	bl	80002d0 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4611      	mov	r1, r2
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <UART_SetConfig+0x2d4>)
 8003342:	fba3 2301 	umull	r2, r3, r3, r1
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2264      	movs	r2, #100	; 0x64
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	1acb      	subs	r3, r1, r3
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003356:	4b36      	ldr	r3, [pc, #216]	; (8003430 <UART_SetConfig+0x2d4>)
 8003358:	fba3 2302 	umull	r2, r3, r3, r2
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003364:	441c      	add	r4, r3
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003370:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003374:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	1891      	adds	r1, r2, r2
 800337e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003380:	415b      	adcs	r3, r3
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003388:	4641      	mov	r1, r8
 800338a:	1851      	adds	r1, r2, r1
 800338c:	6339      	str	r1, [r7, #48]	; 0x30
 800338e:	4649      	mov	r1, r9
 8003390:	414b      	adcs	r3, r1
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033a0:	4659      	mov	r1, fp
 80033a2:	00cb      	lsls	r3, r1, #3
 80033a4:	4651      	mov	r1, sl
 80033a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033aa:	4651      	mov	r1, sl
 80033ac:	00ca      	lsls	r2, r1, #3
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	4642      	mov	r2, r8
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033bc:	464b      	mov	r3, r9
 80033be:	460a      	mov	r2, r1
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033dc:	460b      	mov	r3, r1
 80033de:	18db      	adds	r3, r3, r3
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e2:	4613      	mov	r3, r2
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033f2:	f7fc ff6d 	bl	80002d0 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <UART_SetConfig+0x2d4>)
 80033fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	2164      	movs	r1, #100	; 0x64
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	3332      	adds	r3, #50	; 0x32
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <UART_SetConfig+0x2d4>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	f003 0207 	and.w	r2, r3, #7
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4422      	add	r2, r4
 8003422:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003424:	e105      	b.n	8003632 <UART_SetConfig+0x4d6>
 8003426:	bf00      	nop
 8003428:	40011000 	.word	0x40011000
 800342c:	40011400 	.word	0x40011400
 8003430:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800343e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003446:	4642      	mov	r2, r8
 8003448:	464b      	mov	r3, r9
 800344a:	1891      	adds	r1, r2, r2
 800344c:	6239      	str	r1, [r7, #32]
 800344e:	415b      	adcs	r3, r3
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003456:	4641      	mov	r1, r8
 8003458:	1854      	adds	r4, r2, r1
 800345a:	4649      	mov	r1, r9
 800345c:	eb43 0501 	adc.w	r5, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	00eb      	lsls	r3, r5, #3
 800346a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346e:	00e2      	lsls	r2, r4, #3
 8003470:	4614      	mov	r4, r2
 8003472:	461d      	mov	r5, r3
 8003474:	4643      	mov	r3, r8
 8003476:	18e3      	adds	r3, r4, r3
 8003478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800347c:	464b      	mov	r3, r9
 800347e:	eb45 0303 	adc.w	r3, r5, r3
 8003482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034a2:	4629      	mov	r1, r5
 80034a4:	008b      	lsls	r3, r1, #2
 80034a6:	4621      	mov	r1, r4
 80034a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ac:	4621      	mov	r1, r4
 80034ae:	008a      	lsls	r2, r1, #2
 80034b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034b4:	f7fc ff0c 	bl	80002d0 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b60      	ldr	r3, [pc, #384]	; (8003640 <UART_SetConfig+0x4e4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	61b9      	str	r1, [r7, #24]
 80034e0:	415b      	adcs	r3, r3
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e8:	4641      	mov	r1, r8
 80034ea:	1851      	adds	r1, r2, r1
 80034ec:	6139      	str	r1, [r7, #16]
 80034ee:	4649      	mov	r1, r9
 80034f0:	414b      	adcs	r3, r1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003500:	4659      	mov	r1, fp
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350a:	4651      	mov	r1, sl
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4642      	mov	r2, r8
 8003516:	189b      	adds	r3, r3, r2
 8003518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800351c:	464b      	mov	r3, r9
 800351e:	460a      	mov	r2, r1
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	67bb      	str	r3, [r7, #120]	; 0x78
 8003532:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003540:	4649      	mov	r1, r9
 8003542:	008b      	lsls	r3, r1, #2
 8003544:	4641      	mov	r1, r8
 8003546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354a:	4641      	mov	r1, r8
 800354c:	008a      	lsls	r2, r1, #2
 800354e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003552:	f7fc febd 	bl	80002d0 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <UART_SetConfig+0x4e4>)
 800355c:	fba3 1302 	umull	r1, r3, r3, r2
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	2164      	movs	r1, #100	; 0x64
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	3332      	adds	r3, #50	; 0x32
 800356e:	4a34      	ldr	r2, [pc, #208]	; (8003640 <UART_SetConfig+0x4e4>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357a:	441c      	add	r4, r3
 800357c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003580:	2200      	movs	r2, #0
 8003582:	673b      	str	r3, [r7, #112]	; 0x70
 8003584:	677a      	str	r2, [r7, #116]	; 0x74
 8003586:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800358a:	4642      	mov	r2, r8
 800358c:	464b      	mov	r3, r9
 800358e:	1891      	adds	r1, r2, r2
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	415b      	adcs	r3, r3
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800359a:	4641      	mov	r1, r8
 800359c:	1851      	adds	r1, r2, r1
 800359e:	6039      	str	r1, [r7, #0]
 80035a0:	4649      	mov	r1, r9
 80035a2:	414b      	adcs	r3, r1
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b2:	4659      	mov	r1, fp
 80035b4:	00cb      	lsls	r3, r1, #3
 80035b6:	4651      	mov	r1, sl
 80035b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035bc:	4651      	mov	r1, sl
 80035be:	00ca      	lsls	r2, r1, #3
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	4603      	mov	r3, r0
 80035c6:	4642      	mov	r2, r8
 80035c8:	189b      	adds	r3, r3, r2
 80035ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80035cc:	464b      	mov	r3, r9
 80035ce:	460a      	mov	r2, r1
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	663b      	str	r3, [r7, #96]	; 0x60
 80035e0:	667a      	str	r2, [r7, #100]	; 0x64
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035ee:	4649      	mov	r1, r9
 80035f0:	008b      	lsls	r3, r1, #2
 80035f2:	4641      	mov	r1, r8
 80035f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f8:	4641      	mov	r1, r8
 80035fa:	008a      	lsls	r2, r1, #2
 80035fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003600:	f7fc fe66 	bl	80002d0 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <UART_SetConfig+0x4e4>)
 800360a:	fba3 1302 	umull	r1, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2164      	movs	r1, #100	; 0x64
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <UART_SetConfig+0x4e4>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 020f 	and.w	r2, r3, #15
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4422      	add	r2, r4
 8003630:	609a      	str	r2, [r3, #8]
}
 8003632:	bf00      	nop
 8003634:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003638:	46bd      	mov	sp, r7
 800363a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800363e:	bf00      	nop
 8003640:	51eb851f 	.word	0x51eb851f

08003644 <__errno>:
 8003644:	4b01      	ldr	r3, [pc, #4]	; (800364c <__errno+0x8>)
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2000000c 	.word	0x2000000c

08003650 <__libc_init_array>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4d0d      	ldr	r5, [pc, #52]	; (8003688 <__libc_init_array+0x38>)
 8003654:	4c0d      	ldr	r4, [pc, #52]	; (800368c <__libc_init_array+0x3c>)
 8003656:	1b64      	subs	r4, r4, r5
 8003658:	10a4      	asrs	r4, r4, #2
 800365a:	2600      	movs	r6, #0
 800365c:	42a6      	cmp	r6, r4
 800365e:	d109      	bne.n	8003674 <__libc_init_array+0x24>
 8003660:	4d0b      	ldr	r5, [pc, #44]	; (8003690 <__libc_init_array+0x40>)
 8003662:	4c0c      	ldr	r4, [pc, #48]	; (8003694 <__libc_init_array+0x44>)
 8003664:	f001 f90c 	bl	8004880 <_init>
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	2600      	movs	r6, #0
 800366e:	42a6      	cmp	r6, r4
 8003670:	d105      	bne.n	800367e <__libc_init_array+0x2e>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	f855 3b04 	ldr.w	r3, [r5], #4
 8003678:	4798      	blx	r3
 800367a:	3601      	adds	r6, #1
 800367c:	e7ee      	b.n	800365c <__libc_init_array+0xc>
 800367e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003682:	4798      	blx	r3
 8003684:	3601      	adds	r6, #1
 8003686:	e7f2      	b.n	800366e <__libc_init_array+0x1e>
 8003688:	08004acc 	.word	0x08004acc
 800368c:	08004acc 	.word	0x08004acc
 8003690:	08004acc 	.word	0x08004acc
 8003694:	08004ad0 	.word	0x08004ad0

08003698 <memset>:
 8003698:	4402      	add	r2, r0
 800369a:	4603      	mov	r3, r0
 800369c:	4293      	cmp	r3, r2
 800369e:	d100      	bne.n	80036a2 <memset+0xa>
 80036a0:	4770      	bx	lr
 80036a2:	f803 1b01 	strb.w	r1, [r3], #1
 80036a6:	e7f9      	b.n	800369c <memset+0x4>

080036a8 <iprintf>:
 80036a8:	b40f      	push	{r0, r1, r2, r3}
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <iprintf+0x2c>)
 80036ac:	b513      	push	{r0, r1, r4, lr}
 80036ae:	681c      	ldr	r4, [r3, #0]
 80036b0:	b124      	cbz	r4, 80036bc <iprintf+0x14>
 80036b2:	69a3      	ldr	r3, [r4, #24]
 80036b4:	b913      	cbnz	r3, 80036bc <iprintf+0x14>
 80036b6:	4620      	mov	r0, r4
 80036b8:	f000 fae0 	bl	8003c7c <__sinit>
 80036bc:	ab05      	add	r3, sp, #20
 80036be:	9a04      	ldr	r2, [sp, #16]
 80036c0:	68a1      	ldr	r1, [r4, #8]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fd03 	bl	80040d0 <_vfiprintf_r>
 80036ca:	b002      	add	sp, #8
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d0:	b004      	add	sp, #16
 80036d2:	4770      	bx	lr
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <_puts_r>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	460e      	mov	r6, r1
 80036dc:	4605      	mov	r5, r0
 80036de:	b118      	cbz	r0, 80036e8 <_puts_r+0x10>
 80036e0:	6983      	ldr	r3, [r0, #24]
 80036e2:	b90b      	cbnz	r3, 80036e8 <_puts_r+0x10>
 80036e4:	f000 faca 	bl	8003c7c <__sinit>
 80036e8:	69ab      	ldr	r3, [r5, #24]
 80036ea:	68ac      	ldr	r4, [r5, #8]
 80036ec:	b913      	cbnz	r3, 80036f4 <_puts_r+0x1c>
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 fac4 	bl	8003c7c <__sinit>
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <_puts_r+0xd0>)
 80036f6:	429c      	cmp	r4, r3
 80036f8:	d120      	bne.n	800373c <_puts_r+0x64>
 80036fa:	686c      	ldr	r4, [r5, #4]
 80036fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036fe:	07db      	lsls	r3, r3, #31
 8003700:	d405      	bmi.n	800370e <_puts_r+0x36>
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	0598      	lsls	r0, r3, #22
 8003706:	d402      	bmi.n	800370e <_puts_r+0x36>
 8003708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370a:	f000 fb67 	bl	8003ddc <__retarget_lock_acquire_recursive>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	0719      	lsls	r1, r3, #28
 8003712:	d51d      	bpl.n	8003750 <_puts_r+0x78>
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	b1db      	cbz	r3, 8003750 <_puts_r+0x78>
 8003718:	3e01      	subs	r6, #1
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003720:	3b01      	subs	r3, #1
 8003722:	60a3      	str	r3, [r4, #8]
 8003724:	bb39      	cbnz	r1, 8003776 <_puts_r+0x9e>
 8003726:	2b00      	cmp	r3, #0
 8003728:	da38      	bge.n	800379c <_puts_r+0xc4>
 800372a:	4622      	mov	r2, r4
 800372c:	210a      	movs	r1, #10
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f8ac 	bl	800388c <__swbuf_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d011      	beq.n	800375c <_puts_r+0x84>
 8003738:	250a      	movs	r5, #10
 800373a:	e011      	b.n	8003760 <_puts_r+0x88>
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <_puts_r+0xd4>)
 800373e:	429c      	cmp	r4, r3
 8003740:	d101      	bne.n	8003746 <_puts_r+0x6e>
 8003742:	68ac      	ldr	r4, [r5, #8]
 8003744:	e7da      	b.n	80036fc <_puts_r+0x24>
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <_puts_r+0xd8>)
 8003748:	429c      	cmp	r4, r3
 800374a:	bf08      	it	eq
 800374c:	68ec      	ldreq	r4, [r5, #12]
 800374e:	e7d5      	b.n	80036fc <_puts_r+0x24>
 8003750:	4621      	mov	r1, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 f8ec 	bl	8003930 <__swsetup_r>
 8003758:	2800      	cmp	r0, #0
 800375a:	d0dd      	beq.n	8003718 <_puts_r+0x40>
 800375c:	f04f 35ff 	mov.w	r5, #4294967295
 8003760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003762:	07da      	lsls	r2, r3, #31
 8003764:	d405      	bmi.n	8003772 <_puts_r+0x9a>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	059b      	lsls	r3, r3, #22
 800376a:	d402      	bmi.n	8003772 <_puts_r+0x9a>
 800376c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376e:	f000 fb36 	bl	8003dde <__retarget_lock_release_recursive>
 8003772:	4628      	mov	r0, r5
 8003774:	bd70      	pop	{r4, r5, r6, pc}
 8003776:	2b00      	cmp	r3, #0
 8003778:	da04      	bge.n	8003784 <_puts_r+0xac>
 800377a:	69a2      	ldr	r2, [r4, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	dc06      	bgt.n	800378e <_puts_r+0xb6>
 8003780:	290a      	cmp	r1, #10
 8003782:	d004      	beq.n	800378e <_puts_r+0xb6>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	6022      	str	r2, [r4, #0]
 800378a:	7019      	strb	r1, [r3, #0]
 800378c:	e7c5      	b.n	800371a <_puts_r+0x42>
 800378e:	4622      	mov	r2, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f87b 	bl	800388c <__swbuf_r>
 8003796:	3001      	adds	r0, #1
 8003798:	d1bf      	bne.n	800371a <_puts_r+0x42>
 800379a:	e7df      	b.n	800375c <_puts_r+0x84>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	250a      	movs	r5, #10
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	6022      	str	r2, [r4, #0]
 80037a4:	701d      	strb	r5, [r3, #0]
 80037a6:	e7db      	b.n	8003760 <_puts_r+0x88>
 80037a8:	08004a50 	.word	0x08004a50
 80037ac:	08004a70 	.word	0x08004a70
 80037b0:	08004a30 	.word	0x08004a30

080037b4 <puts>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <puts+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bf8d 	b.w	80036d8 <_puts_r>
 80037be:	bf00      	nop
 80037c0:	2000000c 	.word	0x2000000c

080037c4 <strcpy>:
 80037c4:	4603      	mov	r3, r0
 80037c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ca:	f803 2b01 	strb.w	r2, [r3], #1
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	d1f9      	bne.n	80037c6 <strcpy+0x2>
 80037d2:	4770      	bx	lr

080037d4 <strtok>:
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <strtok+0x5c>)
 80037d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037d8:	681e      	ldr	r6, [r3, #0]
 80037da:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80037dc:	4605      	mov	r5, r0
 80037de:	b9fc      	cbnz	r4, 8003820 <strtok+0x4c>
 80037e0:	2050      	movs	r0, #80	; 0x50
 80037e2:	9101      	str	r1, [sp, #4]
 80037e4:	f000 fb62 	bl	8003eac <malloc>
 80037e8:	9901      	ldr	r1, [sp, #4]
 80037ea:	65b0      	str	r0, [r6, #88]	; 0x58
 80037ec:	4602      	mov	r2, r0
 80037ee:	b920      	cbnz	r0, 80037fa <strtok+0x26>
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <strtok+0x60>)
 80037f2:	4811      	ldr	r0, [pc, #68]	; (8003838 <strtok+0x64>)
 80037f4:	2157      	movs	r1, #87	; 0x57
 80037f6:	f000 f909 	bl	8003a0c <__assert_func>
 80037fa:	e9c0 4400 	strd	r4, r4, [r0]
 80037fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003802:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003806:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800380a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800380e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003812:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003816:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800381a:	6184      	str	r4, [r0, #24]
 800381c:	7704      	strb	r4, [r0, #28]
 800381e:	6244      	str	r4, [r0, #36]	; 0x24
 8003820:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003822:	2301      	movs	r3, #1
 8003824:	4628      	mov	r0, r5
 8003826:	b002      	add	sp, #8
 8003828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800382c:	f000 b806 	b.w	800383c <__strtok_r>
 8003830:	2000000c 	.word	0x2000000c
 8003834:	08004980 	.word	0x08004980
 8003838:	08004997 	.word	0x08004997

0800383c <__strtok_r>:
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	b908      	cbnz	r0, 8003844 <__strtok_r+0x8>
 8003840:	6810      	ldr	r0, [r2, #0]
 8003842:	b188      	cbz	r0, 8003868 <__strtok_r+0x2c>
 8003844:	4604      	mov	r4, r0
 8003846:	4620      	mov	r0, r4
 8003848:	f814 5b01 	ldrb.w	r5, [r4], #1
 800384c:	460f      	mov	r7, r1
 800384e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003852:	b91e      	cbnz	r6, 800385c <__strtok_r+0x20>
 8003854:	b965      	cbnz	r5, 8003870 <__strtok_r+0x34>
 8003856:	6015      	str	r5, [r2, #0]
 8003858:	4628      	mov	r0, r5
 800385a:	e005      	b.n	8003868 <__strtok_r+0x2c>
 800385c:	42b5      	cmp	r5, r6
 800385e:	d1f6      	bne.n	800384e <__strtok_r+0x12>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <__strtok_r+0xa>
 8003864:	6014      	str	r4, [r2, #0]
 8003866:	7003      	strb	r3, [r0, #0]
 8003868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386a:	461c      	mov	r4, r3
 800386c:	e00c      	b.n	8003888 <__strtok_r+0x4c>
 800386e:	b915      	cbnz	r5, 8003876 <__strtok_r+0x3a>
 8003870:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003874:	460e      	mov	r6, r1
 8003876:	f816 5b01 	ldrb.w	r5, [r6], #1
 800387a:	42ab      	cmp	r3, r5
 800387c:	d1f7      	bne.n	800386e <__strtok_r+0x32>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f3      	beq.n	800386a <__strtok_r+0x2e>
 8003882:	2300      	movs	r3, #0
 8003884:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003888:	6014      	str	r4, [r2, #0]
 800388a:	e7ed      	b.n	8003868 <__strtok_r+0x2c>

0800388c <__swbuf_r>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	460e      	mov	r6, r1
 8003890:	4614      	mov	r4, r2
 8003892:	4605      	mov	r5, r0
 8003894:	b118      	cbz	r0, 800389e <__swbuf_r+0x12>
 8003896:	6983      	ldr	r3, [r0, #24]
 8003898:	b90b      	cbnz	r3, 800389e <__swbuf_r+0x12>
 800389a:	f000 f9ef 	bl	8003c7c <__sinit>
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <__swbuf_r+0x98>)
 80038a0:	429c      	cmp	r4, r3
 80038a2:	d12b      	bne.n	80038fc <__swbuf_r+0x70>
 80038a4:	686c      	ldr	r4, [r5, #4]
 80038a6:	69a3      	ldr	r3, [r4, #24]
 80038a8:	60a3      	str	r3, [r4, #8]
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	071a      	lsls	r2, r3, #28
 80038ae:	d52f      	bpl.n	8003910 <__swbuf_r+0x84>
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	b36b      	cbz	r3, 8003910 <__swbuf_r+0x84>
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	1ac0      	subs	r0, r0, r3
 80038ba:	6963      	ldr	r3, [r4, #20]
 80038bc:	b2f6      	uxtb	r6, r6
 80038be:	4283      	cmp	r3, r0
 80038c0:	4637      	mov	r7, r6
 80038c2:	dc04      	bgt.n	80038ce <__swbuf_r+0x42>
 80038c4:	4621      	mov	r1, r4
 80038c6:	4628      	mov	r0, r5
 80038c8:	f000 f944 	bl	8003b54 <_fflush_r>
 80038cc:	bb30      	cbnz	r0, 800391c <__swbuf_r+0x90>
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	60a3      	str	r3, [r4, #8]
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	701e      	strb	r6, [r3, #0]
 80038dc:	6963      	ldr	r3, [r4, #20]
 80038de:	3001      	adds	r0, #1
 80038e0:	4283      	cmp	r3, r0
 80038e2:	d004      	beq.n	80038ee <__swbuf_r+0x62>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	07db      	lsls	r3, r3, #31
 80038e8:	d506      	bpl.n	80038f8 <__swbuf_r+0x6c>
 80038ea:	2e0a      	cmp	r6, #10
 80038ec:	d104      	bne.n	80038f8 <__swbuf_r+0x6c>
 80038ee:	4621      	mov	r1, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f92f 	bl	8003b54 <_fflush_r>
 80038f6:	b988      	cbnz	r0, 800391c <__swbuf_r+0x90>
 80038f8:	4638      	mov	r0, r7
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <__swbuf_r+0x9c>)
 80038fe:	429c      	cmp	r4, r3
 8003900:	d101      	bne.n	8003906 <__swbuf_r+0x7a>
 8003902:	68ac      	ldr	r4, [r5, #8]
 8003904:	e7cf      	b.n	80038a6 <__swbuf_r+0x1a>
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <__swbuf_r+0xa0>)
 8003908:	429c      	cmp	r4, r3
 800390a:	bf08      	it	eq
 800390c:	68ec      	ldreq	r4, [r5, #12]
 800390e:	e7ca      	b.n	80038a6 <__swbuf_r+0x1a>
 8003910:	4621      	mov	r1, r4
 8003912:	4628      	mov	r0, r5
 8003914:	f000 f80c 	bl	8003930 <__swsetup_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	d0cb      	beq.n	80038b4 <__swbuf_r+0x28>
 800391c:	f04f 37ff 	mov.w	r7, #4294967295
 8003920:	e7ea      	b.n	80038f8 <__swbuf_r+0x6c>
 8003922:	bf00      	nop
 8003924:	08004a50 	.word	0x08004a50
 8003928:	08004a70 	.word	0x08004a70
 800392c:	08004a30 	.word	0x08004a30

08003930 <__swsetup_r>:
 8003930:	4b32      	ldr	r3, [pc, #200]	; (80039fc <__swsetup_r+0xcc>)
 8003932:	b570      	push	{r4, r5, r6, lr}
 8003934:	681d      	ldr	r5, [r3, #0]
 8003936:	4606      	mov	r6, r0
 8003938:	460c      	mov	r4, r1
 800393a:	b125      	cbz	r5, 8003946 <__swsetup_r+0x16>
 800393c:	69ab      	ldr	r3, [r5, #24]
 800393e:	b913      	cbnz	r3, 8003946 <__swsetup_r+0x16>
 8003940:	4628      	mov	r0, r5
 8003942:	f000 f99b 	bl	8003c7c <__sinit>
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <__swsetup_r+0xd0>)
 8003948:	429c      	cmp	r4, r3
 800394a:	d10f      	bne.n	800396c <__swsetup_r+0x3c>
 800394c:	686c      	ldr	r4, [r5, #4]
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003954:	0719      	lsls	r1, r3, #28
 8003956:	d42c      	bmi.n	80039b2 <__swsetup_r+0x82>
 8003958:	06dd      	lsls	r5, r3, #27
 800395a:	d411      	bmi.n	8003980 <__swsetup_r+0x50>
 800395c:	2309      	movs	r3, #9
 800395e:	6033      	str	r3, [r6, #0]
 8003960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	e03e      	b.n	80039ea <__swsetup_r+0xba>
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <__swsetup_r+0xd4>)
 800396e:	429c      	cmp	r4, r3
 8003970:	d101      	bne.n	8003976 <__swsetup_r+0x46>
 8003972:	68ac      	ldr	r4, [r5, #8]
 8003974:	e7eb      	b.n	800394e <__swsetup_r+0x1e>
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <__swsetup_r+0xd8>)
 8003978:	429c      	cmp	r4, r3
 800397a:	bf08      	it	eq
 800397c:	68ec      	ldreq	r4, [r5, #12]
 800397e:	e7e6      	b.n	800394e <__swsetup_r+0x1e>
 8003980:	0758      	lsls	r0, r3, #29
 8003982:	d512      	bpl.n	80039aa <__swsetup_r+0x7a>
 8003984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003986:	b141      	cbz	r1, 800399a <__swsetup_r+0x6a>
 8003988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800398c:	4299      	cmp	r1, r3
 800398e:	d002      	beq.n	8003996 <__swsetup_r+0x66>
 8003990:	4630      	mov	r0, r6
 8003992:	f000 fa93 	bl	8003ebc <_free_r>
 8003996:	2300      	movs	r3, #0
 8003998:	6363      	str	r3, [r4, #52]	; 0x34
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	2300      	movs	r3, #0
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	6923      	ldr	r3, [r4, #16]
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	b94b      	cbnz	r3, 80039ca <__swsetup_r+0x9a>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d003      	beq.n	80039ca <__swsetup_r+0x9a>
 80039c2:	4621      	mov	r1, r4
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 fa31 	bl	8003e2c <__smakebuf_r>
 80039ca:	89a0      	ldrh	r0, [r4, #12]
 80039cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039d0:	f010 0301 	ands.w	r3, r0, #1
 80039d4:	d00a      	beq.n	80039ec <__swsetup_r+0xbc>
 80039d6:	2300      	movs	r3, #0
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	6963      	ldr	r3, [r4, #20]
 80039dc:	425b      	negs	r3, r3
 80039de:	61a3      	str	r3, [r4, #24]
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	b943      	cbnz	r3, 80039f6 <__swsetup_r+0xc6>
 80039e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039e8:	d1ba      	bne.n	8003960 <__swsetup_r+0x30>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	0781      	lsls	r1, r0, #30
 80039ee:	bf58      	it	pl
 80039f0:	6963      	ldrpl	r3, [r4, #20]
 80039f2:	60a3      	str	r3, [r4, #8]
 80039f4:	e7f4      	b.n	80039e0 <__swsetup_r+0xb0>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e7f7      	b.n	80039ea <__swsetup_r+0xba>
 80039fa:	bf00      	nop
 80039fc:	2000000c 	.word	0x2000000c
 8003a00:	08004a50 	.word	0x08004a50
 8003a04:	08004a70 	.word	0x08004a70
 8003a08:	08004a30 	.word	0x08004a30

08003a0c <__assert_func>:
 8003a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a0e:	4614      	mov	r4, r2
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <__assert_func+0x2c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4605      	mov	r5, r0
 8003a18:	68d8      	ldr	r0, [r3, #12]
 8003a1a:	b14c      	cbz	r4, 8003a30 <__assert_func+0x24>
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <__assert_func+0x30>)
 8003a1e:	9100      	str	r1, [sp, #0]
 8003a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a24:	4906      	ldr	r1, [pc, #24]	; (8003a40 <__assert_func+0x34>)
 8003a26:	462b      	mov	r3, r5
 8003a28:	f000 f9a6 	bl	8003d78 <fiprintf>
 8003a2c:	f000 fe7a 	bl	8004724 <abort>
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <__assert_func+0x38>)
 8003a32:	461c      	mov	r4, r3
 8003a34:	e7f3      	b.n	8003a1e <__assert_func+0x12>
 8003a36:	bf00      	nop
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	080049f4 	.word	0x080049f4
 8003a40:	08004a01 	.word	0x08004a01
 8003a44:	08004a2f 	.word	0x08004a2f

08003a48 <__sflush_r>:
 8003a48:	898a      	ldrh	r2, [r1, #12]
 8003a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	4605      	mov	r5, r0
 8003a50:	0710      	lsls	r0, r2, #28
 8003a52:	460c      	mov	r4, r1
 8003a54:	d458      	bmi.n	8003b08 <__sflush_r+0xc0>
 8003a56:	684b      	ldr	r3, [r1, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	dc05      	bgt.n	8003a68 <__sflush_r+0x20>
 8003a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	dc02      	bgt.n	8003a68 <__sflush_r+0x20>
 8003a62:	2000      	movs	r0, #0
 8003a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	d0f9      	beq.n	8003a62 <__sflush_r+0x1a>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a74:	682f      	ldr	r7, [r5, #0]
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	d032      	beq.n	8003ae0 <__sflush_r+0x98>
 8003a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	075a      	lsls	r2, r3, #29
 8003a80:	d505      	bpl.n	8003a8e <__sflush_r+0x46>
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	1ac0      	subs	r0, r0, r3
 8003a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a88:	b10b      	cbz	r3, 8003a8e <__sflush_r+0x46>
 8003a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a8c:	1ac0      	subs	r0, r0, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	4602      	mov	r2, r0
 8003a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a94:	6a21      	ldr	r1, [r4, #32]
 8003a96:	4628      	mov	r0, r5
 8003a98:	47b0      	blx	r6
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	d106      	bne.n	8003aae <__sflush_r+0x66>
 8003aa0:	6829      	ldr	r1, [r5, #0]
 8003aa2:	291d      	cmp	r1, #29
 8003aa4:	d82c      	bhi.n	8003b00 <__sflush_r+0xb8>
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <__sflush_r+0x108>)
 8003aa8:	40ca      	lsrs	r2, r1
 8003aaa:	07d6      	lsls	r6, r2, #31
 8003aac:	d528      	bpl.n	8003b00 <__sflush_r+0xb8>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	6062      	str	r2, [r4, #4]
 8003ab2:	04d9      	lsls	r1, r3, #19
 8003ab4:	6922      	ldr	r2, [r4, #16]
 8003ab6:	6022      	str	r2, [r4, #0]
 8003ab8:	d504      	bpl.n	8003ac4 <__sflush_r+0x7c>
 8003aba:	1c42      	adds	r2, r0, #1
 8003abc:	d101      	bne.n	8003ac2 <__sflush_r+0x7a>
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	b903      	cbnz	r3, 8003ac4 <__sflush_r+0x7c>
 8003ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac6:	602f      	str	r7, [r5, #0]
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d0ca      	beq.n	8003a62 <__sflush_r+0x1a>
 8003acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ad0:	4299      	cmp	r1, r3
 8003ad2:	d002      	beq.n	8003ada <__sflush_r+0x92>
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f9f1 	bl	8003ebc <_free_r>
 8003ada:	2000      	movs	r0, #0
 8003adc:	6360      	str	r0, [r4, #52]	; 0x34
 8003ade:	e7c1      	b.n	8003a64 <__sflush_r+0x1c>
 8003ae0:	6a21      	ldr	r1, [r4, #32]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b0      	blx	r6
 8003ae8:	1c41      	adds	r1, r0, #1
 8003aea:	d1c7      	bne.n	8003a7c <__sflush_r+0x34>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0c4      	beq.n	8003a7c <__sflush_r+0x34>
 8003af2:	2b1d      	cmp	r3, #29
 8003af4:	d001      	beq.n	8003afa <__sflush_r+0xb2>
 8003af6:	2b16      	cmp	r3, #22
 8003af8:	d101      	bne.n	8003afe <__sflush_r+0xb6>
 8003afa:	602f      	str	r7, [r5, #0]
 8003afc:	e7b1      	b.n	8003a62 <__sflush_r+0x1a>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b04:	81a3      	strh	r3, [r4, #12]
 8003b06:	e7ad      	b.n	8003a64 <__sflush_r+0x1c>
 8003b08:	690f      	ldr	r7, [r1, #16]
 8003b0a:	2f00      	cmp	r7, #0
 8003b0c:	d0a9      	beq.n	8003a62 <__sflush_r+0x1a>
 8003b0e:	0793      	lsls	r3, r2, #30
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	bf08      	it	eq
 8003b14:	694b      	ldreq	r3, [r1, #20]
 8003b16:	600f      	str	r7, [r1, #0]
 8003b18:	bf18      	it	ne
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	eba6 0807 	sub.w	r8, r6, r7
 8003b20:	608b      	str	r3, [r1, #8]
 8003b22:	f1b8 0f00 	cmp.w	r8, #0
 8003b26:	dd9c      	ble.n	8003a62 <__sflush_r+0x1a>
 8003b28:	6a21      	ldr	r1, [r4, #32]
 8003b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	463a      	mov	r2, r7
 8003b30:	4628      	mov	r0, r5
 8003b32:	47b0      	blx	r6
 8003b34:	2800      	cmp	r0, #0
 8003b36:	dc06      	bgt.n	8003b46 <__sflush_r+0xfe>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	e78e      	b.n	8003a64 <__sflush_r+0x1c>
 8003b46:	4407      	add	r7, r0
 8003b48:	eba8 0800 	sub.w	r8, r8, r0
 8003b4c:	e7e9      	b.n	8003b22 <__sflush_r+0xda>
 8003b4e:	bf00      	nop
 8003b50:	20400001 	.word	0x20400001

08003b54 <_fflush_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	690b      	ldr	r3, [r1, #16]
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	b913      	cbnz	r3, 8003b64 <_fflush_r+0x10>
 8003b5e:	2500      	movs	r5, #0
 8003b60:	4628      	mov	r0, r5
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	b118      	cbz	r0, 8003b6e <_fflush_r+0x1a>
 8003b66:	6983      	ldr	r3, [r0, #24]
 8003b68:	b90b      	cbnz	r3, 8003b6e <_fflush_r+0x1a>
 8003b6a:	f000 f887 	bl	8003c7c <__sinit>
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <_fflush_r+0x6c>)
 8003b70:	429c      	cmp	r4, r3
 8003b72:	d11b      	bne.n	8003bac <_fflush_r+0x58>
 8003b74:	686c      	ldr	r4, [r5, #4]
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ef      	beq.n	8003b5e <_fflush_r+0xa>
 8003b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b80:	07d0      	lsls	r0, r2, #31
 8003b82:	d404      	bmi.n	8003b8e <_fflush_r+0x3a>
 8003b84:	0599      	lsls	r1, r3, #22
 8003b86:	d402      	bmi.n	8003b8e <_fflush_r+0x3a>
 8003b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b8a:	f000 f927 	bl	8003ddc <__retarget_lock_acquire_recursive>
 8003b8e:	4628      	mov	r0, r5
 8003b90:	4621      	mov	r1, r4
 8003b92:	f7ff ff59 	bl	8003a48 <__sflush_r>
 8003b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b98:	07da      	lsls	r2, r3, #31
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	d4e0      	bmi.n	8003b60 <_fflush_r+0xc>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	059b      	lsls	r3, r3, #22
 8003ba2:	d4dd      	bmi.n	8003b60 <_fflush_r+0xc>
 8003ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ba6:	f000 f91a 	bl	8003dde <__retarget_lock_release_recursive>
 8003baa:	e7d9      	b.n	8003b60 <_fflush_r+0xc>
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <_fflush_r+0x70>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d101      	bne.n	8003bb6 <_fflush_r+0x62>
 8003bb2:	68ac      	ldr	r4, [r5, #8]
 8003bb4:	e7df      	b.n	8003b76 <_fflush_r+0x22>
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <_fflush_r+0x74>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	bf08      	it	eq
 8003bbc:	68ec      	ldreq	r4, [r5, #12]
 8003bbe:	e7da      	b.n	8003b76 <_fflush_r+0x22>
 8003bc0:	08004a50 	.word	0x08004a50
 8003bc4:	08004a70 	.word	0x08004a70
 8003bc8:	08004a30 	.word	0x08004a30

08003bcc <std>:
 8003bcc:	2300      	movs	r3, #0
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8003bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bda:	6083      	str	r3, [r0, #8]
 8003bdc:	8181      	strh	r1, [r0, #12]
 8003bde:	6643      	str	r3, [r0, #100]	; 0x64
 8003be0:	81c2      	strh	r2, [r0, #14]
 8003be2:	6183      	str	r3, [r0, #24]
 8003be4:	4619      	mov	r1, r3
 8003be6:	2208      	movs	r2, #8
 8003be8:	305c      	adds	r0, #92	; 0x5c
 8003bea:	f7ff fd55 	bl	8003698 <memset>
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <std+0x38>)
 8003bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <std+0x3c>)
 8003bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <std+0x40>)
 8003bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <std+0x44>)
 8003bfc:	6224      	str	r4, [r4, #32]
 8003bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	08004679 	.word	0x08004679
 8003c08:	0800469b 	.word	0x0800469b
 8003c0c:	080046d3 	.word	0x080046d3
 8003c10:	080046f7 	.word	0x080046f7

08003c14 <_cleanup_r>:
 8003c14:	4901      	ldr	r1, [pc, #4]	; (8003c1c <_cleanup_r+0x8>)
 8003c16:	f000 b8c1 	b.w	8003d9c <_fwalk_reent>
 8003c1a:	bf00      	nop
 8003c1c:	08003b55 	.word	0x08003b55

08003c20 <__sfmoreglue>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	2268      	movs	r2, #104	; 0x68
 8003c24:	1e4d      	subs	r5, r1, #1
 8003c26:	4355      	muls	r5, r2
 8003c28:	460e      	mov	r6, r1
 8003c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c2e:	f000 f9b1 	bl	8003f94 <_malloc_r>
 8003c32:	4604      	mov	r4, r0
 8003c34:	b140      	cbz	r0, 8003c48 <__sfmoreglue+0x28>
 8003c36:	2100      	movs	r1, #0
 8003c38:	e9c0 1600 	strd	r1, r6, [r0]
 8003c3c:	300c      	adds	r0, #12
 8003c3e:	60a0      	str	r0, [r4, #8]
 8003c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c44:	f7ff fd28 	bl	8003698 <memset>
 8003c48:	4620      	mov	r0, r4
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}

08003c4c <__sfp_lock_acquire>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__sfp_lock_acquire+0x8>)
 8003c4e:	f000 b8c5 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200002dd 	.word	0x200002dd

08003c58 <__sfp_lock_release>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__sfp_lock_release+0x8>)
 8003c5a:	f000 b8c0 	b.w	8003dde <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200002dd 	.word	0x200002dd

08003c64 <__sinit_lock_acquire>:
 8003c64:	4801      	ldr	r0, [pc, #4]	; (8003c6c <__sinit_lock_acquire+0x8>)
 8003c66:	f000 b8b9 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 8003c6a:	bf00      	nop
 8003c6c:	200002de 	.word	0x200002de

08003c70 <__sinit_lock_release>:
 8003c70:	4801      	ldr	r0, [pc, #4]	; (8003c78 <__sinit_lock_release+0x8>)
 8003c72:	f000 b8b4 	b.w	8003dde <__retarget_lock_release_recursive>
 8003c76:	bf00      	nop
 8003c78:	200002de 	.word	0x200002de

08003c7c <__sinit>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	f7ff fff0 	bl	8003c64 <__sinit_lock_acquire>
 8003c84:	69a3      	ldr	r3, [r4, #24]
 8003c86:	b11b      	cbz	r3, 8003c90 <__sinit+0x14>
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f7ff bff0 	b.w	8003c70 <__sinit_lock_release>
 8003c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c94:	6523      	str	r3, [r4, #80]	; 0x50
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <__sinit+0x68>)
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <__sinit+0x6c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	bf04      	itt	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	61a3      	streq	r3, [r4, #24]
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f000 f820 	bl	8003cec <__sfp>
 8003cac:	6060      	str	r0, [r4, #4]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 f81c 	bl	8003cec <__sfp>
 8003cb4:	60a0      	str	r0, [r4, #8]
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 f818 	bl	8003cec <__sfp>
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60e0      	str	r0, [r4, #12]
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	6860      	ldr	r0, [r4, #4]
 8003cc4:	f7ff ff82 	bl	8003bcc <std>
 8003cc8:	68a0      	ldr	r0, [r4, #8]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	2109      	movs	r1, #9
 8003cce:	f7ff ff7d 	bl	8003bcc <std>
 8003cd2:	68e0      	ldr	r0, [r4, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	2112      	movs	r1, #18
 8003cd8:	f7ff ff78 	bl	8003bcc <std>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61a3      	str	r3, [r4, #24]
 8003ce0:	e7d2      	b.n	8003c88 <__sinit+0xc>
 8003ce2:	bf00      	nop
 8003ce4:	0800497c 	.word	0x0800497c
 8003ce8:	08003c15 	.word	0x08003c15

08003cec <__sfp>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	4607      	mov	r7, r0
 8003cf0:	f7ff ffac 	bl	8003c4c <__sfp_lock_acquire>
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <__sfp+0x84>)
 8003cf6:	681e      	ldr	r6, [r3, #0]
 8003cf8:	69b3      	ldr	r3, [r6, #24]
 8003cfa:	b913      	cbnz	r3, 8003d02 <__sfp+0x16>
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7ff ffbd 	bl	8003c7c <__sinit>
 8003d02:	3648      	adds	r6, #72	; 0x48
 8003d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	d503      	bpl.n	8003d14 <__sfp+0x28>
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	b30b      	cbz	r3, 8003d54 <__sfp+0x68>
 8003d10:	6836      	ldr	r6, [r6, #0]
 8003d12:	e7f7      	b.n	8003d04 <__sfp+0x18>
 8003d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d18:	b9d5      	cbnz	r5, 8003d50 <__sfp+0x64>
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <__sfp+0x88>)
 8003d1c:	60e3      	str	r3, [r4, #12]
 8003d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d22:	6665      	str	r5, [r4, #100]	; 0x64
 8003d24:	f000 f859 	bl	8003dda <__retarget_lock_init_recursive>
 8003d28:	f7ff ff96 	bl	8003c58 <__sfp_lock_release>
 8003d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d34:	6025      	str	r5, [r4, #0]
 8003d36:	61a5      	str	r5, [r4, #24]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d40:	f7ff fcaa 	bl	8003698 <memset>
 8003d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	3468      	adds	r4, #104	; 0x68
 8003d52:	e7d9      	b.n	8003d08 <__sfp+0x1c>
 8003d54:	2104      	movs	r1, #4
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7ff ff62 	bl	8003c20 <__sfmoreglue>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	6030      	str	r0, [r6, #0]
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d1d5      	bne.n	8003d10 <__sfp+0x24>
 8003d64:	f7ff ff78 	bl	8003c58 <__sfp_lock_release>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	e7ee      	b.n	8003d4c <__sfp+0x60>
 8003d6e:	bf00      	nop
 8003d70:	0800497c 	.word	0x0800497c
 8003d74:	ffff0001 	.word	0xffff0001

08003d78 <fiprintf>:
 8003d78:	b40e      	push	{r1, r2, r3}
 8003d7a:	b503      	push	{r0, r1, lr}
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	ab03      	add	r3, sp, #12
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <fiprintf+0x20>)
 8003d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d86:	6800      	ldr	r0, [r0, #0]
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	f000 f9a1 	bl	80040d0 <_vfiprintf_r>
 8003d8e:	b002      	add	sp, #8
 8003d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d94:	b003      	add	sp, #12
 8003d96:	4770      	bx	lr
 8003d98:	2000000c 	.word	0x2000000c

08003d9c <_fwalk_reent>:
 8003d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da0:	4606      	mov	r6, r0
 8003da2:	4688      	mov	r8, r1
 8003da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003da8:	2700      	movs	r7, #0
 8003daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dae:	f1b9 0901 	subs.w	r9, r9, #1
 8003db2:	d505      	bpl.n	8003dc0 <_fwalk_reent+0x24>
 8003db4:	6824      	ldr	r4, [r4, #0]
 8003db6:	2c00      	cmp	r4, #0
 8003db8:	d1f7      	bne.n	8003daa <_fwalk_reent+0xe>
 8003dba:	4638      	mov	r0, r7
 8003dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc0:	89ab      	ldrh	r3, [r5, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d907      	bls.n	8003dd6 <_fwalk_reent+0x3a>
 8003dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	d003      	beq.n	8003dd6 <_fwalk_reent+0x3a>
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	47c0      	blx	r8
 8003dd4:	4307      	orrs	r7, r0
 8003dd6:	3568      	adds	r5, #104	; 0x68
 8003dd8:	e7e9      	b.n	8003dae <_fwalk_reent+0x12>

08003dda <__retarget_lock_init_recursive>:
 8003dda:	4770      	bx	lr

08003ddc <__retarget_lock_acquire_recursive>:
 8003ddc:	4770      	bx	lr

08003dde <__retarget_lock_release_recursive>:
 8003dde:	4770      	bx	lr

08003de0 <__swhatbuf_r>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	460e      	mov	r6, r1
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	2900      	cmp	r1, #0
 8003dea:	b096      	sub	sp, #88	; 0x58
 8003dec:	4614      	mov	r4, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	da08      	bge.n	8003e04 <__swhatbuf_r+0x24>
 8003df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	602a      	str	r2, [r5, #0]
 8003dfa:	061a      	lsls	r2, r3, #24
 8003dfc:	d410      	bmi.n	8003e20 <__swhatbuf_r+0x40>
 8003dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e02:	e00e      	b.n	8003e22 <__swhatbuf_r+0x42>
 8003e04:	466a      	mov	r2, sp
 8003e06:	f000 fca5 	bl	8004754 <_fstat_r>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	dbf1      	blt.n	8003df2 <__swhatbuf_r+0x12>
 8003e0e:	9a01      	ldr	r2, [sp, #4]
 8003e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e18:	425a      	negs	r2, r3
 8003e1a:	415a      	adcs	r2, r3
 8003e1c:	602a      	str	r2, [r5, #0]
 8003e1e:	e7ee      	b.n	8003dfe <__swhatbuf_r+0x1e>
 8003e20:	2340      	movs	r3, #64	; 0x40
 8003e22:	2000      	movs	r0, #0
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	b016      	add	sp, #88	; 0x58
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e2c <__smakebuf_r>:
 8003e2c:	898b      	ldrh	r3, [r1, #12]
 8003e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e30:	079d      	lsls	r5, r3, #30
 8003e32:	4606      	mov	r6, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	d507      	bpl.n	8003e48 <__smakebuf_r+0x1c>
 8003e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	2301      	movs	r3, #1
 8003e42:	6163      	str	r3, [r4, #20]
 8003e44:	b002      	add	sp, #8
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	ab01      	add	r3, sp, #4
 8003e4a:	466a      	mov	r2, sp
 8003e4c:	f7ff ffc8 	bl	8003de0 <__swhatbuf_r>
 8003e50:	9900      	ldr	r1, [sp, #0]
 8003e52:	4605      	mov	r5, r0
 8003e54:	4630      	mov	r0, r6
 8003e56:	f000 f89d 	bl	8003f94 <_malloc_r>
 8003e5a:	b948      	cbnz	r0, 8003e70 <__smakebuf_r+0x44>
 8003e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e60:	059a      	lsls	r2, r3, #22
 8003e62:	d4ef      	bmi.n	8003e44 <__smakebuf_r+0x18>
 8003e64:	f023 0303 	bic.w	r3, r3, #3
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	e7e3      	b.n	8003e38 <__smakebuf_r+0xc>
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <__smakebuf_r+0x7c>)
 8003e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	6020      	str	r0, [r4, #0]
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	9b00      	ldr	r3, [sp, #0]
 8003e80:	6163      	str	r3, [r4, #20]
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	6120      	str	r0, [r4, #16]
 8003e86:	b15b      	cbz	r3, 8003ea0 <__smakebuf_r+0x74>
 8003e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 fc73 	bl	8004778 <_isatty_r>
 8003e92:	b128      	cbz	r0, 8003ea0 <__smakebuf_r+0x74>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	89a0      	ldrh	r0, [r4, #12]
 8003ea2:	4305      	orrs	r5, r0
 8003ea4:	81a5      	strh	r5, [r4, #12]
 8003ea6:	e7cd      	b.n	8003e44 <__smakebuf_r+0x18>
 8003ea8:	08003c15 	.word	0x08003c15

08003eac <malloc>:
 8003eac:	4b02      	ldr	r3, [pc, #8]	; (8003eb8 <malloc+0xc>)
 8003eae:	4601      	mov	r1, r0
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	f000 b86f 	b.w	8003f94 <_malloc_r>
 8003eb6:	bf00      	nop
 8003eb8:	2000000c 	.word	0x2000000c

08003ebc <_free_r>:
 8003ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	d044      	beq.n	8003f4c <_free_r+0x90>
 8003ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec6:	9001      	str	r0, [sp, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f1a1 0404 	sub.w	r4, r1, #4
 8003ece:	bfb8      	it	lt
 8003ed0:	18e4      	addlt	r4, r4, r3
 8003ed2:	f000 fc73 	bl	80047bc <__malloc_lock>
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <_free_r+0x94>)
 8003ed8:	9801      	ldr	r0, [sp, #4]
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	b933      	cbnz	r3, 8003eec <_free_r+0x30>
 8003ede:	6063      	str	r3, [r4, #4]
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	b003      	add	sp, #12
 8003ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ee8:	f000 bc6e 	b.w	80047c8 <__malloc_unlock>
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d908      	bls.n	8003f02 <_free_r+0x46>
 8003ef0:	6825      	ldr	r5, [r4, #0]
 8003ef2:	1961      	adds	r1, r4, r5
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	bf01      	itttt	eq
 8003ef8:	6819      	ldreq	r1, [r3, #0]
 8003efa:	685b      	ldreq	r3, [r3, #4]
 8003efc:	1949      	addeq	r1, r1, r5
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	e7ed      	b.n	8003ede <_free_r+0x22>
 8003f02:	461a      	mov	r2, r3
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b10b      	cbz	r3, 8003f0c <_free_r+0x50>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d9fa      	bls.n	8003f02 <_free_r+0x46>
 8003f0c:	6811      	ldr	r1, [r2, #0]
 8003f0e:	1855      	adds	r5, r2, r1
 8003f10:	42a5      	cmp	r5, r4
 8003f12:	d10b      	bne.n	8003f2c <_free_r+0x70>
 8003f14:	6824      	ldr	r4, [r4, #0]
 8003f16:	4421      	add	r1, r4
 8003f18:	1854      	adds	r4, r2, r1
 8003f1a:	42a3      	cmp	r3, r4
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	d1e0      	bne.n	8003ee2 <_free_r+0x26>
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	6053      	str	r3, [r2, #4]
 8003f26:	4421      	add	r1, r4
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	e7da      	b.n	8003ee2 <_free_r+0x26>
 8003f2c:	d902      	bls.n	8003f34 <_free_r+0x78>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	6003      	str	r3, [r0, #0]
 8003f32:	e7d6      	b.n	8003ee2 <_free_r+0x26>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	1961      	adds	r1, r4, r5
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf04      	itt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	bf04      	itt	eq
 8003f44:	1949      	addeq	r1, r1, r5
 8003f46:	6021      	streq	r1, [r4, #0]
 8003f48:	6054      	str	r4, [r2, #4]
 8003f4a:	e7ca      	b.n	8003ee2 <_free_r+0x26>
 8003f4c:	b003      	add	sp, #12
 8003f4e:	bd30      	pop	{r4, r5, pc}
 8003f50:	200002e0 	.word	0x200002e0

08003f54 <sbrk_aligned>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4e0e      	ldr	r6, [pc, #56]	; (8003f90 <sbrk_aligned+0x3c>)
 8003f58:	460c      	mov	r4, r1
 8003f5a:	6831      	ldr	r1, [r6, #0]
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	b911      	cbnz	r1, 8003f66 <sbrk_aligned+0x12>
 8003f60:	f000 fb7a 	bl	8004658 <_sbrk_r>
 8003f64:	6030      	str	r0, [r6, #0]
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 fb75 	bl	8004658 <_sbrk_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d00a      	beq.n	8003f88 <sbrk_aligned+0x34>
 8003f72:	1cc4      	adds	r4, r0, #3
 8003f74:	f024 0403 	bic.w	r4, r4, #3
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d007      	beq.n	8003f8c <sbrk_aligned+0x38>
 8003f7c:	1a21      	subs	r1, r4, r0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 fb6a 	bl	8004658 <_sbrk_r>
 8003f84:	3001      	adds	r0, #1
 8003f86:	d101      	bne.n	8003f8c <sbrk_aligned+0x38>
 8003f88:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	200002e4 	.word	0x200002e4

08003f94 <_malloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	1ccd      	adds	r5, r1, #3
 8003f9a:	f025 0503 	bic.w	r5, r5, #3
 8003f9e:	3508      	adds	r5, #8
 8003fa0:	2d0c      	cmp	r5, #12
 8003fa2:	bf38      	it	cc
 8003fa4:	250c      	movcc	r5, #12
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	4607      	mov	r7, r0
 8003faa:	db01      	blt.n	8003fb0 <_malloc_r+0x1c>
 8003fac:	42a9      	cmp	r1, r5
 8003fae:	d905      	bls.n	8003fbc <_malloc_r+0x28>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	4e2e      	ldr	r6, [pc, #184]	; (8004078 <_malloc_r+0xe4>)
 8003fbe:	f000 fbfd 	bl	80047bc <__malloc_lock>
 8003fc2:	6833      	ldr	r3, [r6, #0]
 8003fc4:	461c      	mov	r4, r3
 8003fc6:	bb34      	cbnz	r4, 8004016 <_malloc_r+0x82>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ffc2 	bl	8003f54 <sbrk_aligned>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	d14d      	bne.n	8004072 <_malloc_r+0xde>
 8003fd6:	6834      	ldr	r4, [r6, #0]
 8003fd8:	4626      	mov	r6, r4
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	d140      	bne.n	8004060 <_malloc_r+0xcc>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	eb04 0803 	add.w	r8, r4, r3
 8003fe8:	f000 fb36 	bl	8004658 <_sbrk_r>
 8003fec:	4580      	cmp	r8, r0
 8003fee:	d13a      	bne.n	8004066 <_malloc_r+0xd2>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	3503      	adds	r5, #3
 8003ff4:	1a6d      	subs	r5, r5, r1
 8003ff6:	f025 0503 	bic.w	r5, r5, #3
 8003ffa:	3508      	adds	r5, #8
 8003ffc:	2d0c      	cmp	r5, #12
 8003ffe:	bf38      	it	cc
 8004000:	250c      	movcc	r5, #12
 8004002:	4629      	mov	r1, r5
 8004004:	4638      	mov	r0, r7
 8004006:	f7ff ffa5 	bl	8003f54 <sbrk_aligned>
 800400a:	3001      	adds	r0, #1
 800400c:	d02b      	beq.n	8004066 <_malloc_r+0xd2>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	442b      	add	r3, r5
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	e00e      	b.n	8004034 <_malloc_r+0xa0>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	1b52      	subs	r2, r2, r5
 800401a:	d41e      	bmi.n	800405a <_malloc_r+0xc6>
 800401c:	2a0b      	cmp	r2, #11
 800401e:	d916      	bls.n	800404e <_malloc_r+0xba>
 8004020:	1961      	adds	r1, r4, r5
 8004022:	42a3      	cmp	r3, r4
 8004024:	6025      	str	r5, [r4, #0]
 8004026:	bf18      	it	ne
 8004028:	6059      	strne	r1, [r3, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	bf08      	it	eq
 800402e:	6031      	streq	r1, [r6, #0]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4638      	mov	r0, r7
 8004036:	f104 060b 	add.w	r6, r4, #11
 800403a:	f000 fbc5 	bl	80047c8 <__malloc_unlock>
 800403e:	f026 0607 	bic.w	r6, r6, #7
 8004042:	1d23      	adds	r3, r4, #4
 8004044:	1af2      	subs	r2, r6, r3
 8004046:	d0b6      	beq.n	8003fb6 <_malloc_r+0x22>
 8004048:	1b9b      	subs	r3, r3, r6
 800404a:	50a3      	str	r3, [r4, r2]
 800404c:	e7b3      	b.n	8003fb6 <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	6032      	streq	r2, [r6, #0]
 8004056:	605a      	strne	r2, [r3, #4]
 8004058:	e7ec      	b.n	8004034 <_malloc_r+0xa0>
 800405a:	4623      	mov	r3, r4
 800405c:	6864      	ldr	r4, [r4, #4]
 800405e:	e7b2      	b.n	8003fc6 <_malloc_r+0x32>
 8004060:	4634      	mov	r4, r6
 8004062:	6876      	ldr	r6, [r6, #4]
 8004064:	e7b9      	b.n	8003fda <_malloc_r+0x46>
 8004066:	230c      	movs	r3, #12
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4638      	mov	r0, r7
 800406c:	f000 fbac 	bl	80047c8 <__malloc_unlock>
 8004070:	e7a1      	b.n	8003fb6 <_malloc_r+0x22>
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa0>
 8004076:	bf00      	nop
 8004078:	200002e0 	.word	0x200002e0

0800407c <__sfputc_r>:
 800407c:	6893      	ldr	r3, [r2, #8]
 800407e:	3b01      	subs	r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	b410      	push	{r4}
 8004084:	6093      	str	r3, [r2, #8]
 8004086:	da08      	bge.n	800409a <__sfputc_r+0x1e>
 8004088:	6994      	ldr	r4, [r2, #24]
 800408a:	42a3      	cmp	r3, r4
 800408c:	db01      	blt.n	8004092 <__sfputc_r+0x16>
 800408e:	290a      	cmp	r1, #10
 8004090:	d103      	bne.n	800409a <__sfputc_r+0x1e>
 8004092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004096:	f7ff bbf9 	b.w	800388c <__swbuf_r>
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	1c58      	adds	r0, r3, #1
 800409e:	6010      	str	r0, [r2, #0]
 80040a0:	7019      	strb	r1, [r3, #0]
 80040a2:	4608      	mov	r0, r1
 80040a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <__sfputs_r>:
 80040aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ac:	4606      	mov	r6, r0
 80040ae:	460f      	mov	r7, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	18d5      	adds	r5, r2, r3
 80040b4:	42ac      	cmp	r4, r5
 80040b6:	d101      	bne.n	80040bc <__sfputs_r+0x12>
 80040b8:	2000      	movs	r0, #0
 80040ba:	e007      	b.n	80040cc <__sfputs_r+0x22>
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	463a      	mov	r2, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff ffda 	bl	800407c <__sfputc_r>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d1f3      	bne.n	80040b4 <__sfputs_r+0xa>
 80040cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040d0 <_vfiprintf_r>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	460d      	mov	r5, r1
 80040d6:	b09d      	sub	sp, #116	; 0x74
 80040d8:	4614      	mov	r4, r2
 80040da:	4698      	mov	r8, r3
 80040dc:	4606      	mov	r6, r0
 80040de:	b118      	cbz	r0, 80040e8 <_vfiprintf_r+0x18>
 80040e0:	6983      	ldr	r3, [r0, #24]
 80040e2:	b90b      	cbnz	r3, 80040e8 <_vfiprintf_r+0x18>
 80040e4:	f7ff fdca 	bl	8003c7c <__sinit>
 80040e8:	4b89      	ldr	r3, [pc, #548]	; (8004310 <_vfiprintf_r+0x240>)
 80040ea:	429d      	cmp	r5, r3
 80040ec:	d11b      	bne.n	8004126 <_vfiprintf_r+0x56>
 80040ee:	6875      	ldr	r5, [r6, #4]
 80040f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040f2:	07d9      	lsls	r1, r3, #31
 80040f4:	d405      	bmi.n	8004102 <_vfiprintf_r+0x32>
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	059a      	lsls	r2, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_vfiprintf_r+0x32>
 80040fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040fe:	f7ff fe6d 	bl	8003ddc <__retarget_lock_acquire_recursive>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	071b      	lsls	r3, r3, #28
 8004106:	d501      	bpl.n	800410c <_vfiprintf_r+0x3c>
 8004108:	692b      	ldr	r3, [r5, #16]
 800410a:	b9eb      	cbnz	r3, 8004148 <_vfiprintf_r+0x78>
 800410c:	4629      	mov	r1, r5
 800410e:	4630      	mov	r0, r6
 8004110:	f7ff fc0e 	bl	8003930 <__swsetup_r>
 8004114:	b1c0      	cbz	r0, 8004148 <_vfiprintf_r+0x78>
 8004116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004118:	07dc      	lsls	r4, r3, #31
 800411a:	d50e      	bpl.n	800413a <_vfiprintf_r+0x6a>
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	b01d      	add	sp, #116	; 0x74
 8004122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004126:	4b7b      	ldr	r3, [pc, #492]	; (8004314 <_vfiprintf_r+0x244>)
 8004128:	429d      	cmp	r5, r3
 800412a:	d101      	bne.n	8004130 <_vfiprintf_r+0x60>
 800412c:	68b5      	ldr	r5, [r6, #8]
 800412e:	e7df      	b.n	80040f0 <_vfiprintf_r+0x20>
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <_vfiprintf_r+0x248>)
 8004132:	429d      	cmp	r5, r3
 8004134:	bf08      	it	eq
 8004136:	68f5      	ldreq	r5, [r6, #12]
 8004138:	e7da      	b.n	80040f0 <_vfiprintf_r+0x20>
 800413a:	89ab      	ldrh	r3, [r5, #12]
 800413c:	0598      	lsls	r0, r3, #22
 800413e:	d4ed      	bmi.n	800411c <_vfiprintf_r+0x4c>
 8004140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004142:	f7ff fe4c 	bl	8003dde <__retarget_lock_release_recursive>
 8004146:	e7e9      	b.n	800411c <_vfiprintf_r+0x4c>
 8004148:	2300      	movs	r3, #0
 800414a:	9309      	str	r3, [sp, #36]	; 0x24
 800414c:	2320      	movs	r3, #32
 800414e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004152:	f8cd 800c 	str.w	r8, [sp, #12]
 8004156:	2330      	movs	r3, #48	; 0x30
 8004158:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800431c <_vfiprintf_r+0x24c>
 800415c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004160:	f04f 0901 	mov.w	r9, #1
 8004164:	4623      	mov	r3, r4
 8004166:	469a      	mov	sl, r3
 8004168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800416c:	b10a      	cbz	r2, 8004172 <_vfiprintf_r+0xa2>
 800416e:	2a25      	cmp	r2, #37	; 0x25
 8004170:	d1f9      	bne.n	8004166 <_vfiprintf_r+0x96>
 8004172:	ebba 0b04 	subs.w	fp, sl, r4
 8004176:	d00b      	beq.n	8004190 <_vfiprintf_r+0xc0>
 8004178:	465b      	mov	r3, fp
 800417a:	4622      	mov	r2, r4
 800417c:	4629      	mov	r1, r5
 800417e:	4630      	mov	r0, r6
 8004180:	f7ff ff93 	bl	80040aa <__sfputs_r>
 8004184:	3001      	adds	r0, #1
 8004186:	f000 80aa 	beq.w	80042de <_vfiprintf_r+0x20e>
 800418a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800418c:	445a      	add	r2, fp
 800418e:	9209      	str	r2, [sp, #36]	; 0x24
 8004190:	f89a 3000 	ldrb.w	r3, [sl]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a2 	beq.w	80042de <_vfiprintf_r+0x20e>
 800419a:	2300      	movs	r3, #0
 800419c:	f04f 32ff 	mov.w	r2, #4294967295
 80041a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041a4:	f10a 0a01 	add.w	sl, sl, #1
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	9307      	str	r3, [sp, #28]
 80041ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b0:	931a      	str	r3, [sp, #104]	; 0x68
 80041b2:	4654      	mov	r4, sl
 80041b4:	2205      	movs	r2, #5
 80041b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ba:	4858      	ldr	r0, [pc, #352]	; (800431c <_vfiprintf_r+0x24c>)
 80041bc:	f7fc f838 	bl	8000230 <memchr>
 80041c0:	9a04      	ldr	r2, [sp, #16]
 80041c2:	b9d8      	cbnz	r0, 80041fc <_vfiprintf_r+0x12c>
 80041c4:	06d1      	lsls	r1, r2, #27
 80041c6:	bf44      	itt	mi
 80041c8:	2320      	movmi	r3, #32
 80041ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ce:	0713      	lsls	r3, r2, #28
 80041d0:	bf44      	itt	mi
 80041d2:	232b      	movmi	r3, #43	; 0x2b
 80041d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d8:	f89a 3000 	ldrb.w	r3, [sl]
 80041dc:	2b2a      	cmp	r3, #42	; 0x2a
 80041de:	d015      	beq.n	800420c <_vfiprintf_r+0x13c>
 80041e0:	9a07      	ldr	r2, [sp, #28]
 80041e2:	4654      	mov	r4, sl
 80041e4:	2000      	movs	r0, #0
 80041e6:	f04f 0c0a 	mov.w	ip, #10
 80041ea:	4621      	mov	r1, r4
 80041ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f0:	3b30      	subs	r3, #48	; 0x30
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	d94e      	bls.n	8004294 <_vfiprintf_r+0x1c4>
 80041f6:	b1b0      	cbz	r0, 8004226 <_vfiprintf_r+0x156>
 80041f8:	9207      	str	r2, [sp, #28]
 80041fa:	e014      	b.n	8004226 <_vfiprintf_r+0x156>
 80041fc:	eba0 0308 	sub.w	r3, r0, r8
 8004200:	fa09 f303 	lsl.w	r3, r9, r3
 8004204:	4313      	orrs	r3, r2
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	46a2      	mov	sl, r4
 800420a:	e7d2      	b.n	80041b2 <_vfiprintf_r+0xe2>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	1d19      	adds	r1, r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	9103      	str	r1, [sp, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	bfbb      	ittet	lt
 8004218:	425b      	neglt	r3, r3
 800421a:	f042 0202 	orrlt.w	r2, r2, #2
 800421e:	9307      	strge	r3, [sp, #28]
 8004220:	9307      	strlt	r3, [sp, #28]
 8004222:	bfb8      	it	lt
 8004224:	9204      	strlt	r2, [sp, #16]
 8004226:	7823      	ldrb	r3, [r4, #0]
 8004228:	2b2e      	cmp	r3, #46	; 0x2e
 800422a:	d10c      	bne.n	8004246 <_vfiprintf_r+0x176>
 800422c:	7863      	ldrb	r3, [r4, #1]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d135      	bne.n	800429e <_vfiprintf_r+0x1ce>
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	9203      	str	r2, [sp, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfb8      	it	lt
 800423e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004242:	3402      	adds	r4, #2
 8004244:	9305      	str	r3, [sp, #20]
 8004246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800432c <_vfiprintf_r+0x25c>
 800424a:	7821      	ldrb	r1, [r4, #0]
 800424c:	2203      	movs	r2, #3
 800424e:	4650      	mov	r0, sl
 8004250:	f7fb ffee 	bl	8000230 <memchr>
 8004254:	b140      	cbz	r0, 8004268 <_vfiprintf_r+0x198>
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	eba0 000a 	sub.w	r0, r0, sl
 800425c:	fa03 f000 	lsl.w	r0, r3, r0
 8004260:	9b04      	ldr	r3, [sp, #16]
 8004262:	4303      	orrs	r3, r0
 8004264:	3401      	adds	r4, #1
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426c:	482c      	ldr	r0, [pc, #176]	; (8004320 <_vfiprintf_r+0x250>)
 800426e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004272:	2206      	movs	r2, #6
 8004274:	f7fb ffdc 	bl	8000230 <memchr>
 8004278:	2800      	cmp	r0, #0
 800427a:	d03f      	beq.n	80042fc <_vfiprintf_r+0x22c>
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <_vfiprintf_r+0x254>)
 800427e:	bb1b      	cbnz	r3, 80042c8 <_vfiprintf_r+0x1f8>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	3307      	adds	r3, #7
 8004284:	f023 0307 	bic.w	r3, r3, #7
 8004288:	3308      	adds	r3, #8
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428e:	443b      	add	r3, r7
 8004290:	9309      	str	r3, [sp, #36]	; 0x24
 8004292:	e767      	b.n	8004164 <_vfiprintf_r+0x94>
 8004294:	fb0c 3202 	mla	r2, ip, r2, r3
 8004298:	460c      	mov	r4, r1
 800429a:	2001      	movs	r0, #1
 800429c:	e7a5      	b.n	80041ea <_vfiprintf_r+0x11a>
 800429e:	2300      	movs	r3, #0
 80042a0:	3401      	adds	r4, #1
 80042a2:	9305      	str	r3, [sp, #20]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f04f 0c0a 	mov.w	ip, #10
 80042aa:	4620      	mov	r0, r4
 80042ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b0:	3a30      	subs	r2, #48	; 0x30
 80042b2:	2a09      	cmp	r2, #9
 80042b4:	d903      	bls.n	80042be <_vfiprintf_r+0x1ee>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0c5      	beq.n	8004246 <_vfiprintf_r+0x176>
 80042ba:	9105      	str	r1, [sp, #20]
 80042bc:	e7c3      	b.n	8004246 <_vfiprintf_r+0x176>
 80042be:	fb0c 2101 	mla	r1, ip, r1, r2
 80042c2:	4604      	mov	r4, r0
 80042c4:	2301      	movs	r3, #1
 80042c6:	e7f0      	b.n	80042aa <_vfiprintf_r+0x1da>
 80042c8:	ab03      	add	r3, sp, #12
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	462a      	mov	r2, r5
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <_vfiprintf_r+0x258>)
 80042d0:	a904      	add	r1, sp, #16
 80042d2:	4630      	mov	r0, r6
 80042d4:	f3af 8000 	nop.w
 80042d8:	4607      	mov	r7, r0
 80042da:	1c78      	adds	r0, r7, #1
 80042dc:	d1d6      	bne.n	800428c <_vfiprintf_r+0x1bc>
 80042de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042e0:	07d9      	lsls	r1, r3, #31
 80042e2:	d405      	bmi.n	80042f0 <_vfiprintf_r+0x220>
 80042e4:	89ab      	ldrh	r3, [r5, #12]
 80042e6:	059a      	lsls	r2, r3, #22
 80042e8:	d402      	bmi.n	80042f0 <_vfiprintf_r+0x220>
 80042ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ec:	f7ff fd77 	bl	8003dde <__retarget_lock_release_recursive>
 80042f0:	89ab      	ldrh	r3, [r5, #12]
 80042f2:	065b      	lsls	r3, r3, #25
 80042f4:	f53f af12 	bmi.w	800411c <_vfiprintf_r+0x4c>
 80042f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fa:	e711      	b.n	8004120 <_vfiprintf_r+0x50>
 80042fc:	ab03      	add	r3, sp, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	462a      	mov	r2, r5
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <_vfiprintf_r+0x258>)
 8004304:	a904      	add	r1, sp, #16
 8004306:	4630      	mov	r0, r6
 8004308:	f000 f880 	bl	800440c <_printf_i>
 800430c:	e7e4      	b.n	80042d8 <_vfiprintf_r+0x208>
 800430e:	bf00      	nop
 8004310:	08004a50 	.word	0x08004a50
 8004314:	08004a70 	.word	0x08004a70
 8004318:	08004a30 	.word	0x08004a30
 800431c:	08004a90 	.word	0x08004a90
 8004320:	08004a9a 	.word	0x08004a9a
 8004324:	00000000 	.word	0x00000000
 8004328:	080040ab 	.word	0x080040ab
 800432c:	08004a96 	.word	0x08004a96

08004330 <_printf_common>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	4616      	mov	r6, r2
 8004336:	4699      	mov	r9, r3
 8004338:	688a      	ldr	r2, [r1, #8]
 800433a:	690b      	ldr	r3, [r1, #16]
 800433c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004340:	4293      	cmp	r3, r2
 8004342:	bfb8      	it	lt
 8004344:	4613      	movlt	r3, r2
 8004346:	6033      	str	r3, [r6, #0]
 8004348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800434c:	4607      	mov	r7, r0
 800434e:	460c      	mov	r4, r1
 8004350:	b10a      	cbz	r2, 8004356 <_printf_common+0x26>
 8004352:	3301      	adds	r3, #1
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	0699      	lsls	r1, r3, #26
 800435a:	bf42      	ittt	mi
 800435c:	6833      	ldrmi	r3, [r6, #0]
 800435e:	3302      	addmi	r3, #2
 8004360:	6033      	strmi	r3, [r6, #0]
 8004362:	6825      	ldr	r5, [r4, #0]
 8004364:	f015 0506 	ands.w	r5, r5, #6
 8004368:	d106      	bne.n	8004378 <_printf_common+0x48>
 800436a:	f104 0a19 	add.w	sl, r4, #25
 800436e:	68e3      	ldr	r3, [r4, #12]
 8004370:	6832      	ldr	r2, [r6, #0]
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	42ab      	cmp	r3, r5
 8004376:	dc26      	bgt.n	80043c6 <_printf_common+0x96>
 8004378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800437c:	1e13      	subs	r3, r2, #0
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	bf18      	it	ne
 8004382:	2301      	movne	r3, #1
 8004384:	0692      	lsls	r2, r2, #26
 8004386:	d42b      	bmi.n	80043e0 <_printf_common+0xb0>
 8004388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800438c:	4649      	mov	r1, r9
 800438e:	4638      	mov	r0, r7
 8004390:	47c0      	blx	r8
 8004392:	3001      	adds	r0, #1
 8004394:	d01e      	beq.n	80043d4 <_printf_common+0xa4>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	68e5      	ldr	r5, [r4, #12]
 800439a:	6832      	ldr	r2, [r6, #0]
 800439c:	f003 0306 	and.w	r3, r3, #6
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	bf08      	it	eq
 80043a4:	1aad      	subeq	r5, r5, r2
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	bf0c      	ite	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	2500      	movne	r5, #0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bfc4      	itt	gt
 80043b6:	1a9b      	subgt	r3, r3, r2
 80043b8:	18ed      	addgt	r5, r5, r3
 80043ba:	2600      	movs	r6, #0
 80043bc:	341a      	adds	r4, #26
 80043be:	42b5      	cmp	r5, r6
 80043c0:	d11a      	bne.n	80043f8 <_printf_common+0xc8>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e008      	b.n	80043d8 <_printf_common+0xa8>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4652      	mov	r2, sl
 80043ca:	4649      	mov	r1, r9
 80043cc:	4638      	mov	r0, r7
 80043ce:	47c0      	blx	r8
 80043d0:	3001      	adds	r0, #1
 80043d2:	d103      	bne.n	80043dc <_printf_common+0xac>
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	3501      	adds	r5, #1
 80043de:	e7c6      	b.n	800436e <_printf_common+0x3e>
 80043e0:	18e1      	adds	r1, r4, r3
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	2030      	movs	r0, #48	; 0x30
 80043e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ea:	4422      	add	r2, r4
 80043ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f4:	3302      	adds	r3, #2
 80043f6:	e7c7      	b.n	8004388 <_printf_common+0x58>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4622      	mov	r2, r4
 80043fc:	4649      	mov	r1, r9
 80043fe:	4638      	mov	r0, r7
 8004400:	47c0      	blx	r8
 8004402:	3001      	adds	r0, #1
 8004404:	d0e6      	beq.n	80043d4 <_printf_common+0xa4>
 8004406:	3601      	adds	r6, #1
 8004408:	e7d9      	b.n	80043be <_printf_common+0x8e>
	...

0800440c <_printf_i>:
 800440c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	7e0f      	ldrb	r7, [r1, #24]
 8004412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004414:	2f78      	cmp	r7, #120	; 0x78
 8004416:	4691      	mov	r9, r2
 8004418:	4680      	mov	r8, r0
 800441a:	460c      	mov	r4, r1
 800441c:	469a      	mov	sl, r3
 800441e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004422:	d807      	bhi.n	8004434 <_printf_i+0x28>
 8004424:	2f62      	cmp	r7, #98	; 0x62
 8004426:	d80a      	bhi.n	800443e <_printf_i+0x32>
 8004428:	2f00      	cmp	r7, #0
 800442a:	f000 80d8 	beq.w	80045de <_printf_i+0x1d2>
 800442e:	2f58      	cmp	r7, #88	; 0x58
 8004430:	f000 80a3 	beq.w	800457a <_printf_i+0x16e>
 8004434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800443c:	e03a      	b.n	80044b4 <_printf_i+0xa8>
 800443e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004442:	2b15      	cmp	r3, #21
 8004444:	d8f6      	bhi.n	8004434 <_printf_i+0x28>
 8004446:	a101      	add	r1, pc, #4	; (adr r1, 800444c <_printf_i+0x40>)
 8004448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800444c:	080044a5 	.word	0x080044a5
 8004450:	080044b9 	.word	0x080044b9
 8004454:	08004435 	.word	0x08004435
 8004458:	08004435 	.word	0x08004435
 800445c:	08004435 	.word	0x08004435
 8004460:	08004435 	.word	0x08004435
 8004464:	080044b9 	.word	0x080044b9
 8004468:	08004435 	.word	0x08004435
 800446c:	08004435 	.word	0x08004435
 8004470:	08004435 	.word	0x08004435
 8004474:	08004435 	.word	0x08004435
 8004478:	080045c5 	.word	0x080045c5
 800447c:	080044e9 	.word	0x080044e9
 8004480:	080045a7 	.word	0x080045a7
 8004484:	08004435 	.word	0x08004435
 8004488:	08004435 	.word	0x08004435
 800448c:	080045e7 	.word	0x080045e7
 8004490:	08004435 	.word	0x08004435
 8004494:	080044e9 	.word	0x080044e9
 8004498:	08004435 	.word	0x08004435
 800449c:	08004435 	.word	0x08004435
 80044a0:	080045af 	.word	0x080045af
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	602a      	str	r2, [r5, #0]
 80044ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0a3      	b.n	8004600 <_printf_i+0x1f4>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	6829      	ldr	r1, [r5, #0]
 80044bc:	0606      	lsls	r6, r0, #24
 80044be:	f101 0304 	add.w	r3, r1, #4
 80044c2:	d50a      	bpl.n	80044da <_printf_i+0xce>
 80044c4:	680e      	ldr	r6, [r1, #0]
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	da03      	bge.n	80044d4 <_printf_i+0xc8>
 80044cc:	232d      	movs	r3, #45	; 0x2d
 80044ce:	4276      	negs	r6, r6
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d4:	485e      	ldr	r0, [pc, #376]	; (8004650 <_printf_i+0x244>)
 80044d6:	230a      	movs	r3, #10
 80044d8:	e019      	b.n	800450e <_printf_i+0x102>
 80044da:	680e      	ldr	r6, [r1, #0]
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044e2:	bf18      	it	ne
 80044e4:	b236      	sxthne	r6, r6
 80044e6:	e7ef      	b.n	80044c8 <_printf_i+0xbc>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	6029      	str	r1, [r5, #0]
 80044f0:	0601      	lsls	r1, r0, #24
 80044f2:	d501      	bpl.n	80044f8 <_printf_i+0xec>
 80044f4:	681e      	ldr	r6, [r3, #0]
 80044f6:	e002      	b.n	80044fe <_printf_i+0xf2>
 80044f8:	0646      	lsls	r6, r0, #25
 80044fa:	d5fb      	bpl.n	80044f4 <_printf_i+0xe8>
 80044fc:	881e      	ldrh	r6, [r3, #0]
 80044fe:	4854      	ldr	r0, [pc, #336]	; (8004650 <_printf_i+0x244>)
 8004500:	2f6f      	cmp	r7, #111	; 0x6f
 8004502:	bf0c      	ite	eq
 8004504:	2308      	moveq	r3, #8
 8004506:	230a      	movne	r3, #10
 8004508:	2100      	movs	r1, #0
 800450a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800450e:	6865      	ldr	r5, [r4, #4]
 8004510:	60a5      	str	r5, [r4, #8]
 8004512:	2d00      	cmp	r5, #0
 8004514:	bfa2      	ittt	ge
 8004516:	6821      	ldrge	r1, [r4, #0]
 8004518:	f021 0104 	bicge.w	r1, r1, #4
 800451c:	6021      	strge	r1, [r4, #0]
 800451e:	b90e      	cbnz	r6, 8004524 <_printf_i+0x118>
 8004520:	2d00      	cmp	r5, #0
 8004522:	d04d      	beq.n	80045c0 <_printf_i+0x1b4>
 8004524:	4615      	mov	r5, r2
 8004526:	fbb6 f1f3 	udiv	r1, r6, r3
 800452a:	fb03 6711 	mls	r7, r3, r1, r6
 800452e:	5dc7      	ldrb	r7, [r0, r7]
 8004530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004534:	4637      	mov	r7, r6
 8004536:	42bb      	cmp	r3, r7
 8004538:	460e      	mov	r6, r1
 800453a:	d9f4      	bls.n	8004526 <_printf_i+0x11a>
 800453c:	2b08      	cmp	r3, #8
 800453e:	d10b      	bne.n	8004558 <_printf_i+0x14c>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	07de      	lsls	r6, r3, #31
 8004544:	d508      	bpl.n	8004558 <_printf_i+0x14c>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	6861      	ldr	r1, [r4, #4]
 800454a:	4299      	cmp	r1, r3
 800454c:	bfde      	ittt	le
 800454e:	2330      	movle	r3, #48	; 0x30
 8004550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004558:	1b52      	subs	r2, r2, r5
 800455a:	6122      	str	r2, [r4, #16]
 800455c:	f8cd a000 	str.w	sl, [sp]
 8004560:	464b      	mov	r3, r9
 8004562:	aa03      	add	r2, sp, #12
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff fee2 	bl	8004330 <_printf_common>
 800456c:	3001      	adds	r0, #1
 800456e:	d14c      	bne.n	800460a <_printf_i+0x1fe>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	b004      	add	sp, #16
 8004576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457a:	4835      	ldr	r0, [pc, #212]	; (8004650 <_printf_i+0x244>)
 800457c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004580:	6829      	ldr	r1, [r5, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f851 6b04 	ldr.w	r6, [r1], #4
 8004588:	6029      	str	r1, [r5, #0]
 800458a:	061d      	lsls	r5, r3, #24
 800458c:	d514      	bpl.n	80045b8 <_printf_i+0x1ac>
 800458e:	07df      	lsls	r7, r3, #31
 8004590:	bf44      	itt	mi
 8004592:	f043 0320 	orrmi.w	r3, r3, #32
 8004596:	6023      	strmi	r3, [r4, #0]
 8004598:	b91e      	cbnz	r6, 80045a2 <_printf_i+0x196>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f023 0320 	bic.w	r3, r3, #32
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	2310      	movs	r3, #16
 80045a4:	e7b0      	b.n	8004508 <_printf_i+0xfc>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	2378      	movs	r3, #120	; 0x78
 80045b0:	4828      	ldr	r0, [pc, #160]	; (8004654 <_printf_i+0x248>)
 80045b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045b6:	e7e3      	b.n	8004580 <_printf_i+0x174>
 80045b8:	0659      	lsls	r1, r3, #25
 80045ba:	bf48      	it	mi
 80045bc:	b2b6      	uxthmi	r6, r6
 80045be:	e7e6      	b.n	800458e <_printf_i+0x182>
 80045c0:	4615      	mov	r5, r2
 80045c2:	e7bb      	b.n	800453c <_printf_i+0x130>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	6826      	ldr	r6, [r4, #0]
 80045c8:	6961      	ldr	r1, [r4, #20]
 80045ca:	1d18      	adds	r0, r3, #4
 80045cc:	6028      	str	r0, [r5, #0]
 80045ce:	0635      	lsls	r5, r6, #24
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	d501      	bpl.n	80045d8 <_printf_i+0x1cc>
 80045d4:	6019      	str	r1, [r3, #0]
 80045d6:	e002      	b.n	80045de <_printf_i+0x1d2>
 80045d8:	0670      	lsls	r0, r6, #25
 80045da:	d5fb      	bpl.n	80045d4 <_printf_i+0x1c8>
 80045dc:	8019      	strh	r1, [r3, #0]
 80045de:	2300      	movs	r3, #0
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	4615      	mov	r5, r2
 80045e4:	e7ba      	b.n	800455c <_printf_i+0x150>
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	602a      	str	r2, [r5, #0]
 80045ec:	681d      	ldr	r5, [r3, #0]
 80045ee:	6862      	ldr	r2, [r4, #4]
 80045f0:	2100      	movs	r1, #0
 80045f2:	4628      	mov	r0, r5
 80045f4:	f7fb fe1c 	bl	8000230 <memchr>
 80045f8:	b108      	cbz	r0, 80045fe <_printf_i+0x1f2>
 80045fa:	1b40      	subs	r0, r0, r5
 80045fc:	6060      	str	r0, [r4, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	2300      	movs	r3, #0
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	e7a8      	b.n	800455c <_printf_i+0x150>
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	462a      	mov	r2, r5
 800460e:	4649      	mov	r1, r9
 8004610:	4640      	mov	r0, r8
 8004612:	47d0      	blx	sl
 8004614:	3001      	adds	r0, #1
 8004616:	d0ab      	beq.n	8004570 <_printf_i+0x164>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	079b      	lsls	r3, r3, #30
 800461c:	d413      	bmi.n	8004646 <_printf_i+0x23a>
 800461e:	68e0      	ldr	r0, [r4, #12]
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	4298      	cmp	r0, r3
 8004624:	bfb8      	it	lt
 8004626:	4618      	movlt	r0, r3
 8004628:	e7a4      	b.n	8004574 <_printf_i+0x168>
 800462a:	2301      	movs	r3, #1
 800462c:	4632      	mov	r2, r6
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	47d0      	blx	sl
 8004634:	3001      	adds	r0, #1
 8004636:	d09b      	beq.n	8004570 <_printf_i+0x164>
 8004638:	3501      	adds	r5, #1
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	9903      	ldr	r1, [sp, #12]
 800463e:	1a5b      	subs	r3, r3, r1
 8004640:	42ab      	cmp	r3, r5
 8004642:	dcf2      	bgt.n	800462a <_printf_i+0x21e>
 8004644:	e7eb      	b.n	800461e <_printf_i+0x212>
 8004646:	2500      	movs	r5, #0
 8004648:	f104 0619 	add.w	r6, r4, #25
 800464c:	e7f5      	b.n	800463a <_printf_i+0x22e>
 800464e:	bf00      	nop
 8004650:	08004aa1 	.word	0x08004aa1
 8004654:	08004ab2 	.word	0x08004ab2

08004658 <_sbrk_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d06      	ldr	r5, [pc, #24]	; (8004674 <_sbrk_r+0x1c>)
 800465c:	2300      	movs	r3, #0
 800465e:	4604      	mov	r4, r0
 8004660:	4608      	mov	r0, r1
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fc fcfe 	bl	8001064 <_sbrk>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_sbrk_r+0x1a>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_sbrk_r+0x1a>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	200002e8 	.word	0x200002e8

08004678 <__sread>:
 8004678:	b510      	push	{r4, lr}
 800467a:	460c      	mov	r4, r1
 800467c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004680:	f000 f8a8 	bl	80047d4 <_read_r>
 8004684:	2800      	cmp	r0, #0
 8004686:	bfab      	itete	ge
 8004688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800468a:	89a3      	ldrhlt	r3, [r4, #12]
 800468c:	181b      	addge	r3, r3, r0
 800468e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004692:	bfac      	ite	ge
 8004694:	6563      	strge	r3, [r4, #84]	; 0x54
 8004696:	81a3      	strhlt	r3, [r4, #12]
 8004698:	bd10      	pop	{r4, pc}

0800469a <__swrite>:
 800469a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469e:	461f      	mov	r7, r3
 80046a0:	898b      	ldrh	r3, [r1, #12]
 80046a2:	05db      	lsls	r3, r3, #23
 80046a4:	4605      	mov	r5, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	4616      	mov	r6, r2
 80046aa:	d505      	bpl.n	80046b8 <__swrite+0x1e>
 80046ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b0:	2302      	movs	r3, #2
 80046b2:	2200      	movs	r2, #0
 80046b4:	f000 f870 	bl	8004798 <_lseek_r>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	4632      	mov	r2, r6
 80046c6:	463b      	mov	r3, r7
 80046c8:	4628      	mov	r0, r5
 80046ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ce:	f000 b817 	b.w	8004700 <_write_r>

080046d2 <__sseek>:
 80046d2:	b510      	push	{r4, lr}
 80046d4:	460c      	mov	r4, r1
 80046d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046da:	f000 f85d 	bl	8004798 <_lseek_r>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	bf15      	itete	ne
 80046e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ee:	81a3      	strheq	r3, [r4, #12]
 80046f0:	bf18      	it	ne
 80046f2:	81a3      	strhne	r3, [r4, #12]
 80046f4:	bd10      	pop	{r4, pc}

080046f6 <__sclose>:
 80046f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fa:	f000 b81b 	b.w	8004734 <_close_r>
	...

08004700 <_write_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d07      	ldr	r5, [pc, #28]	; (8004720 <_write_r+0x20>)
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	2200      	movs	r2, #0
 800470c:	602a      	str	r2, [r5, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f7fc fcde 	bl	80010d0 <_write>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_write_r+0x1e>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_write_r+0x1e>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	200002e8 	.word	0x200002e8

08004724 <abort>:
 8004724:	b508      	push	{r3, lr}
 8004726:	2006      	movs	r0, #6
 8004728:	f000 f88e 	bl	8004848 <raise>
 800472c:	2001      	movs	r0, #1
 800472e:	f7fc fc3d 	bl	8000fac <_exit>
	...

08004734 <_close_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d06      	ldr	r5, [pc, #24]	; (8004750 <_close_r+0x1c>)
 8004738:	2300      	movs	r3, #0
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	f7fc fc5b 	bl	8000ffa <_close>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_close_r+0x1a>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_close_r+0x1a>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200002e8 	.word	0x200002e8

08004754 <_fstat_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	; (8004774 <_fstat_r+0x20>)
 8004758:	2300      	movs	r3, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	f7fc fc56 	bl	8001012 <_fstat>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	d102      	bne.n	8004770 <_fstat_r+0x1c>
 800476a:	682b      	ldr	r3, [r5, #0]
 800476c:	b103      	cbz	r3, 8004770 <_fstat_r+0x1c>
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	bd38      	pop	{r3, r4, r5, pc}
 8004772:	bf00      	nop
 8004774:	200002e8 	.word	0x200002e8

08004778 <_isatty_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d06      	ldr	r5, [pc, #24]	; (8004794 <_isatty_r+0x1c>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc fc55 	bl	8001032 <_isatty>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_isatty_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_isatty_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200002e8 	.word	0x200002e8

08004798 <_lseek_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d07      	ldr	r5, [pc, #28]	; (80047b8 <_lseek_r+0x20>)
 800479c:	4604      	mov	r4, r0
 800479e:	4608      	mov	r0, r1
 80047a0:	4611      	mov	r1, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	602a      	str	r2, [r5, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f7fc fc4e 	bl	8001048 <_lseek>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_lseek_r+0x1e>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_lseek_r+0x1e>
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	200002e8 	.word	0x200002e8

080047bc <__malloc_lock>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__malloc_lock+0x8>)
 80047be:	f7ff bb0d 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	200002dc 	.word	0x200002dc

080047c8 <__malloc_unlock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__malloc_unlock+0x8>)
 80047ca:	f7ff bb08 	b.w	8003dde <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	200002dc 	.word	0x200002dc

080047d4 <_read_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d07      	ldr	r5, [pc, #28]	; (80047f4 <_read_r+0x20>)
 80047d8:	4604      	mov	r4, r0
 80047da:	4608      	mov	r0, r1
 80047dc:	4611      	mov	r1, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	602a      	str	r2, [r5, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f7fc fbec 	bl	8000fc0 <_read>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_read_r+0x1e>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_read_r+0x1e>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	200002e8 	.word	0x200002e8

080047f8 <_raise_r>:
 80047f8:	291f      	cmp	r1, #31
 80047fa:	b538      	push	{r3, r4, r5, lr}
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	d904      	bls.n	800480c <_raise_r+0x14>
 8004802:	2316      	movs	r3, #22
 8004804:	6003      	str	r3, [r0, #0]
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800480e:	b112      	cbz	r2, 8004816 <_raise_r+0x1e>
 8004810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004814:	b94b      	cbnz	r3, 800482a <_raise_r+0x32>
 8004816:	4620      	mov	r0, r4
 8004818:	f000 f830 	bl	800487c <_getpid_r>
 800481c:	462a      	mov	r2, r5
 800481e:	4601      	mov	r1, r0
 8004820:	4620      	mov	r0, r4
 8004822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004826:	f000 b817 	b.w	8004858 <_kill_r>
 800482a:	2b01      	cmp	r3, #1
 800482c:	d00a      	beq.n	8004844 <_raise_r+0x4c>
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	d103      	bne.n	800483a <_raise_r+0x42>
 8004832:	2316      	movs	r3, #22
 8004834:	6003      	str	r3, [r0, #0]
 8004836:	2001      	movs	r0, #1
 8004838:	e7e7      	b.n	800480a <_raise_r+0x12>
 800483a:	2400      	movs	r4, #0
 800483c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004840:	4628      	mov	r0, r5
 8004842:	4798      	blx	r3
 8004844:	2000      	movs	r0, #0
 8004846:	e7e0      	b.n	800480a <_raise_r+0x12>

08004848 <raise>:
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <raise+0xc>)
 800484a:	4601      	mov	r1, r0
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f7ff bfd3 	b.w	80047f8 <_raise_r>
 8004852:	bf00      	nop
 8004854:	2000000c 	.word	0x2000000c

08004858 <_kill_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4d07      	ldr	r5, [pc, #28]	; (8004878 <_kill_r+0x20>)
 800485c:	2300      	movs	r3, #0
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	602b      	str	r3, [r5, #0]
 8004866:	f7fc fb91 	bl	8000f8c <_kill>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d102      	bne.n	8004874 <_kill_r+0x1c>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	b103      	cbz	r3, 8004874 <_kill_r+0x1c>
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	bd38      	pop	{r3, r4, r5, pc}
 8004876:	bf00      	nop
 8004878:	200002e8 	.word	0x200002e8

0800487c <_getpid_r>:
 800487c:	f7fc bb7e 	b.w	8000f7c <_getpid>

08004880 <_init>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr

0800488c <_fini>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr
