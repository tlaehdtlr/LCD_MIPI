
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00096588  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a2208  080a2208  000c009c  2**0
                  CONTENTS
  4 .ARM          00000008  080a2208  080a2208  000b2208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a2210  080a2210  000c009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a2210  080a2210  000b2210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a2214  080a2214  000b2214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080a2218  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000c009c  2**0
                  CONTENTS
 10 .bss          0000046c  2000009c  2000009c  000c009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  000c009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000c009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a471  00000000  00000000  000c00cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004521  00000000  00000000  000da53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  000dea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  000dff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fe98  00000000  00000000  000e12f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201e2  00000000  00000000  00111188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101fa3  00000000  00000000  0013136a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0023330d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006134  00000000  00000000  00233360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bc68 	.word	0x0800bc68

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	0800bc68 	.word	0x0800bc68

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <lcd_control>:
        (void *)0, (void *)0, (void *)0
    }
};

static void lcd_control(uint8_t argc, void **argv)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	623b      	str	r3, [r7, #32]
    char *arg1 = argv[0 + strlen(command)];
 80005e6:	6a38      	ldr	r0, [r7, #32]
 80005e8:	f7ff fe14 	bl	8000214 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	61fb      	str	r3, [r7, #28]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80005f8:	6a38      	ldr	r0, [r7, #32]
 80005fa:	f7ff fe0b 	bl	8000214 <strlen>
 80005fe:	4604      	mov	r4, r0
 8000600:	69f8      	ldr	r0, [r7, #28]
 8000602:	f7ff fe07 	bl	8000214 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4423      	add	r3, r4
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	61bb      	str	r3, [r7, #24]
    char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];
 8000614:	6a38      	ldr	r0, [r7, #32]
 8000616:	f7ff fdfd 	bl	8000214 <strlen>
 800061a:	4604      	mov	r4, r0
 800061c:	69f8      	ldr	r0, [r7, #28]
 800061e:	f7ff fdf9 	bl	8000214 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	441c      	add	r4, r3
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f7ff fdf4 	bl	8000214 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	4423      	add	r3, r4
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	617b      	str	r3, [r7, #20]
    char *arg4 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2) + strlen(arg3)];
 800063a:	6a38      	ldr	r0, [r7, #32]
 800063c:	f7ff fdea 	bl	8000214 <strlen>
 8000640:	4604      	mov	r4, r0
 8000642:	69f8      	ldr	r0, [r7, #28]
 8000644:	f7ff fde6 	bl	8000214 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	441c      	add	r4, r3
 800064c:	69b8      	ldr	r0, [r7, #24]
 800064e:	f7ff fde1 	bl	8000214 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	441c      	add	r4, r3
 8000656:	6978      	ldr	r0, [r7, #20]
 8000658:	f7ff fddc 	bl	8000214 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	4423      	add	r3, r4
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	613b      	str	r3, [r7, #16]

    if (argc == 1)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d136      	bne.n	80006de <lcd_control+0x10a>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	e027      	b.n	80006c6 <lcd_control+0xf2>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000676:	4989      	ldr	r1, [pc, #548]	; (800089c <lcd_control+0x2c8>)
 8000678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6a39      	ldr	r1, [r7, #32]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdb9 	bl	8000200 <strcmp>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d115      	bne.n	80006c0 <lcd_control+0xec>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000694:	4981      	ldr	r1, [pc, #516]	; (800089c <lcd_control+0x2c8>)
 8000696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	487d      	ldr	r0, [pc, #500]	; (800089c <lcd_control+0x2c8>)
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4403      	add	r3, r0
 80006b2:	3308      	adds	r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4879      	ldr	r0, [pc, #484]	; (80008a0 <lcd_control+0x2cc>)
 80006ba:	f00a f95d 	bl	800a978 <iprintf>
                return;
 80006be:	e0e9      	b.n	8000894 <lcd_control+0x2c0>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	3301      	adds	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	4975      	ldr	r1, [pc, #468]	; (800089c <lcd_control+0x2c8>)
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	3304      	adds	r3, #4
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1cc      	bne.n	8000676 <lcd_control+0xa2>
 80006dc:	e0d7      	b.n	800088e <lcd_control+0x2ba>
            }
        }
    }
    else if (argc == 2)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d120      	bne.n	8000726 <lcd_control+0x152>
    {
        if (strcmp(arg1, "err") == 0)
 80006e4:	496f      	ldr	r1, [pc, #444]	; (80008a4 <lcd_control+0x2d0>)
 80006e6:	69f8      	ldr	r0, [r7, #28]
 80006e8:	f7ff fd8a 	bl	8000200 <strcmp>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <lcd_control+0x124>
        {
            ltdc_get_err();
 80006f2:	f001 fd05 	bl	8002100 <ltdc_get_err>
            return ;
 80006f6:	e0cd      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "start") == 0)
 80006f8:	496b      	ldr	r1, [pc, #428]	; (80008a8 <lcd_control+0x2d4>)
 80006fa:	69f8      	ldr	r0, [r7, #28]
 80006fc:	f7ff fd80 	bl	8000200 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d103      	bne.n	800070e <lcd_control+0x13a>
        {
            dsi_start(true);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc6c 	bl	8000fe4 <dsi_start>
            return ;
 800070c:	e0c2      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "stop") == 0)
 800070e:	4967      	ldr	r1, [pc, #412]	; (80008ac <lcd_control+0x2d8>)
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	f7ff fd75 	bl	8000200 <strcmp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	f040 80b8 	bne.w	800088e <lcd_control+0x2ba>
        {
            dsi_start(false);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fc60 	bl	8000fe4 <dsi_start>
            return ;
 8000724:	e0b6      	b.n	8000894 <lcd_control+0x2c0>
        }

    }
    else if (argc == 3)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d121      	bne.n	8000770 <lcd_control+0x19c>
    {
        if (strcmp(arg1, "layer") == 0)
 800072c:	4960      	ldr	r1, [pc, #384]	; (80008b0 <lcd_control+0x2dc>)
 800072e:	69f8      	ldr	r0, [r7, #28]
 8000730:	f7ff fd66 	bl	8000200 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 80a9 	bne.w	800088e <lcd_control+0x2ba>
        {
            if (strcmp(arg2, "int") == 0)
 800073c:	495d      	ldr	r1, [pc, #372]	; (80008b4 <lcd_control+0x2e0>)
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f7ff fd5e 	bl	8000200 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <lcd_control+0x180>
            {
                ltdc_change_layer(0, LAYER0_ADDRESS);
 800074a:	495b      	ldr	r1, [pc, #364]	; (80008b8 <lcd_control+0x2e4>)
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fc8b 	bl	8002068 <ltdc_change_layer>
                return;
 8000752:	e09f      	b.n	8000894 <lcd_control+0x2c0>
            }
            else if (strcmp(arg2, "ext") == 0)
 8000754:	4959      	ldr	r1, [pc, #356]	; (80008bc <lcd_control+0x2e8>)
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f7ff fd52 	bl	8000200 <strcmp>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 8095 	bne.w	800088e <lcd_control+0x2ba>
            {
                ltdc_change_layer(0, SDRAM_ADDRESS);
 8000764:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000768:	2000      	movs	r0, #0
 800076a:	f001 fc7d 	bl	8002068 <ltdc_change_layer>
                return;
 800076e:	e091      	b.n	8000894 <lcd_control+0x2c0>
            }
        }

    }
    else if (argc == 5)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b05      	cmp	r3, #5
 8000774:	f040 808b 	bne.w	800088e <lcd_control+0x2ba>
    {
        if (strcmp(arg1, "ch") == 0)
 8000778:	4951      	ldr	r1, [pc, #324]	; (80008c0 <lcd_control+0x2ec>)
 800077a:	69f8      	ldr	r0, [r7, #28]
 800077c:	f7ff fd40 	bl	8000200 <strcmp>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	f040 8083 	bne.w	800088e <lcd_control+0x2ba>
        {
            uint8_t sector = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
            if (strcmp(arg2, "int") == 0)
 800078c:	4949      	ldr	r1, [pc, #292]	; (80008b4 <lcd_control+0x2e0>)
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f7ff fd36 	bl	8000200 <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d140      	bne.n	800081c <lcd_control+0x248>
            {
                sector = atoi(arg3) - 1;
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f00a f8b6 	bl	800a90c <atoi>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b01      	subs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
                if (sector <= 1)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d86f      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 80007ae:	4945      	ldr	r1, [pc, #276]	; (80008c4 <lcd_control+0x2f0>)
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	f7ff fd25 	bl	8000200 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10a      	bne.n	80007d2 <lcd_control+0x1fe>
                    {
                        lcd_control_change_flash(LCD_COLOR_RED, sector);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	483f      	ldr	r0, [pc, #252]	; (80008c8 <lcd_control+0x2f4>)
 80007cc:	f001 fad6 	bl	8001d7c <lcd_control_change_flash>
                        return ;
 80007d0:	e060      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 80007d2:	493e      	ldr	r1, [pc, #248]	; (80008cc <lcd_control+0x2f8>)
 80007d4:	6938      	ldr	r0, [r7, #16]
 80007d6:	f7ff fd13 	bl	8000200 <strcmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <lcd_control+0x224>
                    {
                        lcd_control_change_flash(LCD_COLOR_GREEN, sector);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80007f2:	f001 fac3 	bl	8001d7c <lcd_control_change_flash>
                        return ;
 80007f6:	e04d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 80007f8:	4935      	ldr	r1, [pc, #212]	; (80008d0 <lcd_control+0x2fc>)
 80007fa:	6938      	ldr	r0, [r7, #16]
 80007fc:	f7ff fd00 	bl	8000200 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d143      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_flash(LCD_COLOR_BLUE, sector);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	; (80008d4 <lcd_control+0x300>)
 8000816:	f001 fab1 	bl	8001d7c <lcd_control_change_flash>
                        return ;
 800081a:	e03b      	b.n	8000894 <lcd_control+0x2c0>
                    }
                }
            }
            else if (strcmp(arg2, "ext") == 0)
 800081c:	4927      	ldr	r1, [pc, #156]	; (80008bc <lcd_control+0x2e8>)
 800081e:	69b8      	ldr	r0, [r7, #24]
 8000820:	f7ff fcee 	bl	8000200 <strcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d131      	bne.n	800088e <lcd_control+0x2ba>
            {
                sector = atoi(arg3) - 1;
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f00a f86e 	bl	800a90c <atoi>
 8000830:	4603      	mov	r3, r0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
                if (sector <= 3)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d827      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 800083e:	4921      	ldr	r1, [pc, #132]	; (80008c4 <lcd_control+0x2f0>)
 8000840:	6938      	ldr	r0, [r7, #16]
 8000842:	f7ff fcdd 	bl	8000200 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <lcd_control+0x284>
                    {
                        lcd_control_change_sdram(LCD_COLOR_RED, sector);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4619      	mov	r1, r3
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <lcd_control+0x2f4>)
 8000852:	f001 fa63 	bl	8001d1c <lcd_control_change_sdram>
                        return ;
 8000856:	e01d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 8000858:	491c      	ldr	r1, [pc, #112]	; (80008cc <lcd_control+0x2f8>)
 800085a:	6938      	ldr	r0, [r7, #16]
 800085c:	f7ff fcd0 	bl	8000200 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d106      	bne.n	8000874 <lcd_control+0x2a0>
                    {
                        lcd_control_change_sdram(LCD_COLOR_GREEN, sector);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800086e:	f001 fa55 	bl	8001d1c <lcd_control_change_sdram>
                        return ;
 8000872:	e00f      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 8000874:	4916      	ldr	r1, [pc, #88]	; (80008d0 <lcd_control+0x2fc>)
 8000876:	6938      	ldr	r0, [r7, #16]
 8000878:	f7ff fcc2 	bl	8000200 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_sdram(LCD_COLOR_BLUE, sector);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <lcd_control+0x300>)
 8000888:	f001 fa48 	bl	8001d1c <lcd_control_change_sdram>
                        return ;
 800088c:	e002      	b.n	8000894 <lcd_control+0x2c0>
                }
                
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <lcd_control+0x304>)
 8000890:	f00a f8f8 	bl	800aa84 <puts>
}
 8000894:	372c      	adds	r7, #44	; 0x2c
 8000896:	46bd      	mov	sp, r7
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	bf00      	nop
 800089c:	0800bf74 	.word	0x0800bf74
 80008a0:	0800bd8c 	.word	0x0800bd8c
 80008a4:	0800bd9c 	.word	0x0800bd9c
 80008a8:	0800bda0 	.word	0x0800bda0
 80008ac:	0800bda8 	.word	0x0800bda8
 80008b0:	0800bdb0 	.word	0x0800bdb0
 80008b4:	0800bdb8 	.word	0x0800bdb8
 80008b8:	08020000 	.word	0x08020000
 80008bc:	0800bdbc 	.word	0x0800bdbc
 80008c0:	0800bdc0 	.word	0x0800bdc0
 80008c4:	0800bdc4 	.word	0x0800bdc4
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	0800bdc8 	.word	0x0800bdc8
 80008d0:	0800bdcc 	.word	0x0800bdcc
 80008d4:	ff0000ff 	.word	0xff0000ff
 80008d8:	0800bdd0 	.word	0x0800bdd0

080008dc <led_control>:

static void led_control(uint8_t argc, void **argv)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	613b      	str	r3, [r7, #16]
    char *arg1 = argv[0 + strlen(command)];
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f7ff fc90 	bl	8000214 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 8000900:	6938      	ldr	r0, [r7, #16]
 8000902:	f7ff fc87 	bl	8000214 <strlen>
 8000906:	4604      	mov	r4, r0
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff fc83 	bl	8000214 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	4423      	add	r3, r4
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60bb      	str	r3, [r7, #8]

    if (argc == 1)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d136      	bne.n	8000990 <led_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e027      	b.n	8000978 <led_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000928:	493f      	ldr	r1, [pc, #252]	; (8000a28 <led_control+0x14c>)
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc60 	bl	8000200 <strcmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d115      	bne.n	8000972 <led_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000946:	4938      	ldr	r1, [pc, #224]	; (8000a28 <led_control+0x14c>)
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <led_control+0x14c>)
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4403      	add	r3, r0
 8000964:	3308      	adds	r3, #8
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4830      	ldr	r0, [pc, #192]	; (8000a2c <led_control+0x150>)
 800096c:	f00a f804 	bl	800a978 <iprintf>
                return;
 8000970:	e056      	b.n	8000a20 <led_control+0x144>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	492b      	ldr	r1, [pc, #172]	; (8000a28 <led_control+0x14c>)
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1cc      	bne.n	8000928 <led_control+0x4c>
 800098e:	e044      	b.n	8000a1a <led_control+0x13e>
            }
        }
    }
    else if (argc == 3)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d141      	bne.n	8000a1a <led_control+0x13e>
    {
        if (strcmp(arg1, "on") == 0)
 8000996:	4926      	ldr	r1, [pc, #152]	; (8000a30 <led_control+0x154>)
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fc31 	bl	8000200 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d119      	bne.n	80009d8 <led_control+0xfc>
        {
            if (strcmp(arg2, "1") == 0)
 80009a4:	4923      	ldr	r1, [pc, #140]	; (8000a34 <led_control+0x158>)
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff fc2a 	bl	8000200 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <led_control+0xe2>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <led_control+0x15c>)
 80009b8:	f004 fdee 	bl	8005598 <HAL_GPIO_WritePin>
                return;
 80009bc:	e030      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80009be:	491f      	ldr	r1, [pc, #124]	; (8000a3c <led_control+0x160>)
 80009c0:	68b8      	ldr	r0, [r7, #8]
 80009c2:	f7ff fc1d 	bl	8000200 <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d126      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <led_control+0x164>)
 80009d2:	f004 fde1 	bl	8005598 <HAL_GPIO_WritePin>
                return;
 80009d6:	e023      	b.n	8000a20 <led_control+0x144>
            }
        }
        else if (strcmp(arg1, "off") == 0)
 80009d8:	491a      	ldr	r1, [pc, #104]	; (8000a44 <led_control+0x168>)
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fc10 	bl	8000200 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d119      	bne.n	8000a1a <led_control+0x13e>
        {
            if (strcmp(arg2, "1") == 0)
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <led_control+0x158>)
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff fc09 	bl	8000200 <strcmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <led_control+0x124>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <led_control+0x15c>)
 80009fa:	f004 fdcd 	bl	8005598 <HAL_GPIO_WritePin>
                return;
 80009fe:	e00f      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 8000a00:	490e      	ldr	r1, [pc, #56]	; (8000a3c <led_control+0x160>)
 8000a02:	68b8      	ldr	r0, [r7, #8]
 8000a04:	f7ff fbfc 	bl	8000200 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <led_control+0x164>)
 8000a14:	f004 fdc0 	bl	8005598 <HAL_GPIO_WritePin>
                return;
 8000a18:	e002      	b.n	8000a20 <led_control+0x144>
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <led_control+0x16c>)
 8000a1c:	f00a f832 	bl	800aa84 <puts>
    
}
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	0800bf74 	.word	0x0800bf74
 8000a2c:	0800bd8c 	.word	0x0800bd8c
 8000a30:	0800bdec 	.word	0x0800bdec
 8000a34:	0800bdf0 	.word	0x0800bdf0
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	0800bdf4 	.word	0x0800bdf4
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	0800bdf8 	.word	0x0800bdf8
 8000a48:	0800bdd0 	.word	0x0800bdd0

08000a4c <help_func>:

static void help_func(uint8_t argc, void **argv)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d129      	bne.n	8000ab2 <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <help_func+0x6c>)
 8000a60:	f00a f810 	bl	800aa84 <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e017      	b.n	8000a9a <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000a6a:	4914      	ldr	r1, [pc, #80]	; (8000abc <help_func+0x70>)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <help_func+0x70>)
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4403      	add	r3, r0
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <help_func+0x74>)
 8000a90:	f009 ff72 	bl	800a978 <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <help_func+0x70>)
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1dc      	bne.n	8000a6a <help_func+0x1e>
        }
        return;
 8000ab0:	bf00      	nop
    }
}
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800bdfc 	.word	0x0800bdfc
 8000abc:	0800bf74 	.word	0x0800bf74
 8000ac0:	0800bd8c 	.word	0x0800bd8c

08000ac4 <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e011      	b.n	8000afa <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 8000ad6:	4912      	ldr	r1, [pc, #72]	; (8000b20 <shell_get_command_index+0x5c>)
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fb89 	bl	8000200 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00e      	beq.n	8000b12 <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <shell_get_command_index+0x5c>)
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	3304      	adds	r3, #4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e2      	bne.n	8000ad6 <shell_get_command_index+0x12>
 8000b10:	e000      	b.n	8000b14 <shell_get_command_index+0x50>
        {
            break;
 8000b12:	bf00      	nop
        }
    }

    return i;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	0800bf74 	.word	0x0800bf74

08000b24 <cli_process>:

void cli_process(char* cmd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b30:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b34:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 8000b36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b3a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	461a      	mov	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f009 ff0e 	bl	800a968 <memset>
    int i = 0, idx = 0, argc = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 8000b5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b66:	4939      	ldr	r1, [pc, #228]	; (8000c4c <cli_process+0x128>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f009 ff9b 	bl	800aaa4 <strtok>
 8000b6e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 8000b72:	e02c      	b.n	8000bce <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b7a:	e014      	b.n	8000ba6 <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000b7c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000b80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b84:	1c59      	adds	r1, r3, #1
 8000b86:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000b8a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000b8e:	4411      	add	r1, r2
 8000b90:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000b94:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000b9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ba6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000baa:	f7ff fb33 	bl	8000214 <strlen>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8e1      	bhi.n	8000b7c <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 8000bb8:	4924      	ldr	r1, [pc, #144]	; (8000c4c <cli_process+0x128>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f009 ff72 	bl	800aaa4 <strtok>
 8000bc0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 8000bc4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 8000bce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ce      	bne.n	8000b74 <cli_process+0x50>
    }

    command = argv[0];
 8000bd6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000bda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 8000be4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d027      	beq.n	8000c3c <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 8000bec:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000bf0:	f7ff ff68 	bl	8000ac4 <shell_get_command_index>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 8000bfa:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <cli_process+0x12c>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <cli_process+0x130>)
 8000c14:	f009 ff36 	bl	800aa84 <puts>
 8000c18:	e013      	b.n	8000c42 <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 8000c1a:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <cli_process+0x12c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
    }

    printf("\r\n");
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <cli_process+0x134>)
 8000c3e:	f009 ff21 	bl	800aa84 <puts>
 8000c42:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800be18 	.word	0x0800be18
 8000c50:	0800bf74 	.word	0x0800bf74
 8000c54:	0800be1c 	.word	0x0800be1c
 8000c58:	0800be34 	.word	0x0800be34

08000c5c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_DMA2D_Init+0x60>)
 8000c64:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c92:	f002 fc48 	bl	8003526 <HAL_DMA2D_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c9c:	f001 faea 	bl	8002274 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000ca4:	f002 fd9c 	bl	80037e0 <HAL_DMA2D_ConfigLayer>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000cae:	f001 fae1 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000b8 	.word	0x200000b8
 8000cbc:	4002b000 	.word	0x4002b000

08000cc0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_DMA2D_MspInit+0x3c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	4002b000 	.word	0x4002b000
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ae      	sub	sp, #184	; 0xb8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d1a:	2224      	movs	r2, #36	; 0x24
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 fe22 	bl	800a968 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	226c      	movs	r2, #108	; 0x6c
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f009 fe13 	bl	800a968 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000d42:	4b69      	ldr	r3, [pc, #420]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d44:	4a69      	ldr	r2, [pc, #420]	; (8000eec <MX_DSIHOST_DSI_Init+0x1e8>)
 8000d46:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d48:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000d4e:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000d5a:	237d      	movs	r3, #125	; 0x7d
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d70:	4619      	mov	r1, r3
 8000d72:	485d      	ldr	r0, [pc, #372]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d74:	f002 feaa 	bl	8003acc <HAL_DSI_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000d7e:	f001 fa79 	bl	8002274 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000db8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	484a      	ldr	r0, [pc, #296]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000dc0:	f003 fc06 	bl	80045d0 <HAL_DSI_ConfigHostTimeouts>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000dca:	f001 fa53 	bl	8002274 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000dce:	2323      	movs	r3, #35	; 0x23
 8000dd0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000dd2:	2323      	movs	r3, #35	; 0x23
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 35;
 8000dd6:	2323      	movs	r3, #35	; 0x23
 8000dd8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 35;
 8000dda:	2323      	movs	r3, #35	; 0x23
 8000ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 10;
 8000de4:	230a      	movs	r3, #10
 8000de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000dea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dee:	4619      	mov	r1, r3
 8000df0:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000df2:	f003 fb83 	bl	80044fc <HAL_DSI_ConfigPhyTimer>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000dfc:	f001 fa3a 	bl	8002274 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000e00:	2104      	movs	r1, #4
 8000e02:	4839      	ldr	r0, [pc, #228]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e04:	f003 fb52 	bl	80044ac <HAL_DSI_ConfigFlowControl>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8000e0e:	f001 fa31 	bl	8002274 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000e12:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e18:	f003 fdd2 	bl	80049c0 <HAL_DSI_SetLowPowerRXFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000e22:	f001 fa27 	bl	8002274 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_GEN) != HAL_OK)
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e2c:	f002 ff6a 	bl	8003d04 <HAL_DSI_ConfigErrorMonitor>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_DSIHOST_DSI_Init+0x136>
  {
    Error_Handler();
 8000e36:	f001 fa1d 	bl	8002274 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000e46:	2302      	movs	r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 800;
 8000e4a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e4e:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 68;
 8000e68:	2344      	movs	r3, #68	; 0x44
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1940;
 8000e6c:	f240 7394 	movw	r3, #1940	; 0x794
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 120;
 8000e72:	2378      	movs	r3, #120	; 0x78
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 150;
 8000e76:	2396      	movs	r3, #150	; 0x96
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 150;
 8000e7a:	2396      	movs	r3, #150	; 0x96
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8000e7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ebe:	f003 f8ed 	bl	800409c <HAL_DSI_ConfigVideoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_DSIHOST_DSI_Init+0x1c8>
  {
    Error_Handler();
 8000ec8:	f001 f9d4 	bl	8002274 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ed0:	f003 f8bc 	bl	800404c <HAL_DSI_SetGenericVCID>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_DSIHOST_DSI_Init+0x1da>
  {
    Error_Handler();
 8000eda:	f001 f9cb 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000f8 	.word	0x200000f8
 8000eec:	40016c00 	.word	0x40016c00

08000ef0 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_DSI_MspInit+0x94>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d133      	bne.n	8000f7a <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000f5a:	230d      	movs	r3, #13
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_DSI_MspInit+0x9c>)
 8000f66:	f004 f85f 	bl	8005028 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	205c      	movs	r0, #92	; 0x5c
 8000f70:	f002 f9f5 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000f74:	205c      	movs	r0, #92	; 0x5c
 8000f76:	f002 fa0e 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40016c00 	.word	0x40016c00
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40022400 	.word	0x40022400

08000f90 <DSI_IO_WriteCmd>:
  }
}

/* USER CODE BEGIN 1 */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d80d      	bhi.n	8000fbc <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi, (uint32_t) 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	2215      	movs	r2, #21
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <DSI_IO_WriteCmd+0x50>)
 8000fb6:	f003 fc49 	bl	800484c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000fba:	e00d      	b.n	8000fd8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	9200      	str	r2, [sp, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2239      	movs	r2, #57	; 0x39
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <DSI_IO_WriteCmd+0x50>)
 8000fd4:	f003 fc5c 	bl	8004890 <HAL_DSI_LongWrite>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000f8 	.word	0x200000f8

08000fe4 <dsi_start>:

void dsi_start(bool start)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if(start)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <dsi_start+0x20>
  {
      HAL_DSI_Start(&(hdsi));
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <dsi_start+0x30>)
 8000ff6:	f003 fbb1 	bl	800475c <HAL_DSI_Start>
      ltdc_change_layer(0, LAYER0_ADDRESS);
 8000ffa:	4907      	ldr	r1, [pc, #28]	; (8001018 <dsi_start+0x34>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f001 f833 	bl	8002068 <ltdc_change_layer>
  }
  else
  {
      HAL_DSI_Stop(&(hdsi));
  }
}
 8001002:	e002      	b.n	800100a <dsi_start+0x26>
      HAL_DSI_Stop(&(hdsi));
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <dsi_start+0x30>)
 8001006:	f003 fbe5 	bl	80047d4 <HAL_DSI_Stop>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000f8 	.word	0x200000f8
 8001018:	08020000 	.word	0x08020000

0800101c <sdram_init>:


static FMC_SDRAM_CommandTypeDef Command;

static void sdram_init(SDRAM_HandleTypeDef * p_hsdram1)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <sdram_init+0xbc>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <sdram_init+0xbc>)
 8001030:	2210      	movs	r2, #16
 8001032:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <sdram_init+0xbc>)
 8001036:	2201      	movs	r2, #1
 8001038:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <sdram_init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8001040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001044:	4924      	ldr	r1, [pc, #144]	; (80010d8 <sdram_init+0xbc>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f008 fa72 	bl	8009530 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f002 f863 	bl	8003118 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <sdram_init+0xbc>)
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <sdram_init+0xbc>)
 800105a:	2210      	movs	r2, #16
 800105c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <sdram_init+0xbc>)
 8001060:	2201      	movs	r2, #1
 8001062:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <sdram_init+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 800106a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106e:	491a      	ldr	r1, [pc, #104]	; (80010d8 <sdram_init+0xbc>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f008 fa5d 	bl	8009530 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <sdram_init+0xbc>)
 8001078:	2203      	movs	r2, #3
 800107a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <sdram_init+0xbc>)
 800107e:	2210      	movs	r2, #16
 8001080:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <sdram_init+0xbc>)
 8001084:	2208      	movs	r2, #8
 8001086:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <sdram_init+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	4911      	ldr	r1, [pc, #68]	; (80010d8 <sdram_init+0xbc>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f008 fa4b 	bl	8009530 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800109a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800109e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <sdram_init+0xbc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <sdram_init+0xbc>)
 80010a8:	2210      	movs	r2, #16
 80010aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <sdram_init+0xbc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <sdram_init+0xbc>)
 80010b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <sdram_init+0xbc>)
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f008 fa36 	bl	8009530 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(p_hsdram1, REFRESH_COUNT);
 80010c4:	f240 5169 	movw	r1, #1385	; 0x569
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f008 fa66 	bl	800959a <HAL_SDRAM_ProgramRefreshRate>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000114 	.word	0x20000114

080010dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_FMC_Init+0xa0>)
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <MX_FMC_Init+0xa4>)
 80010f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_FMC_Init+0xa0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_FMC_Init+0xa0>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_FMC_Init+0xa0>)
 8001108:	2204      	movs	r2, #4
 800110a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_FMC_Init+0xa0>)
 800110e:	2220      	movs	r2, #32
 8001110:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_FMC_Init+0xa0>)
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_FMC_Init+0xa0>)
 800111a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800111e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_FMC_Init+0xa0>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_FMC_Init+0xa0>)
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_FMC_Init+0xa0>)
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_FMC_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001140:	2307      	movs	r3, #7
 8001142:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001148:	2307      	movs	r3, #7
 800114a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800114c:	2303      	movs	r3, #3
 800114e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_FMC_Init+0xa0>)
 800115e:	f008 f98f 	bl	8009480 <HAL_SDRAM_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001168:	f001 f884 	bl	8002274 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  sdram_init(&hsdram1);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_FMC_Init+0xa0>)
 800116e:	f7ff ff55 	bl	800101c <sdram_init>
  /* USER CODE END FMC_Init 2 */
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000124 	.word	0x20000124
 8001180:	a0000140 	.word	0xa0000140

08001184 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_FMC_MspInit+0x138>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 8089 	bne.w	80012b4 <HAL_FMC_MspInit+0x130>
    return;
  }
  FMC_Initialized = 1;
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_FMC_MspInit+0x138>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	4a43      	ldr	r2, [pc, #268]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80011c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011c8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <HAL_FMC_MspInit+0x140>)
 80011e0:	f003 ff22 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80011e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80011e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4832      	ldr	r0, [pc, #200]	; (80012c8 <HAL_FMC_MspInit+0x144>)
 8001200:	f003 ff12 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001204:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001208:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	482b      	ldr	r0, [pc, #172]	; (80012cc <HAL_FMC_MspInit+0x148>)
 8001220:	f003 ff02 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001224:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001228:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <HAL_FMC_MspInit+0x14c>)
 8001240:	f003 fef2 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001244:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001248:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	481d      	ldr	r0, [pc, #116]	; (80012d4 <HAL_FMC_MspInit+0x150>)
 8001260:	f003 fee2 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001264:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8001268:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <HAL_FMC_MspInit+0x154>)
 8001280:	f003 fed2 	bl	8005028 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001294:	230c      	movs	r3, #12
 8001296:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	; (80012dc <HAL_FMC_MspInit+0x158>)
 800129e:	f003 fec3 	bl	8005028 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2030      	movs	r0, #48	; 0x30
 80012a8:	f002 f859 	bl	800335e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80012ac:	2030      	movs	r0, #48	; 0x30
 80012ae:	f002 f872 	bl	8003396 <HAL_NVIC_EnableIRQ>
 80012b2:	e000      	b.n	80012b6 <HAL_FMC_MspInit+0x132>
    return;
 80012b4:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000158 	.word	0x20000158
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40020800 	.word	0x40020800

080012e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012e8:	f7ff ff4c 	bl	8001184 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <ft6x06_Init>:
  *         from MCU to FT6xx6 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f90d 	bl	8001520 <ft6x06_GetInstance>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d10e      	bne.n	800132e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f905 	bl	8001520 <ft6x06_GetInstance>
 8001316:	4603      	mov	r3, r0
 8001318:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d806      	bhi.n	800132e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <ft6x06_Init+0x44>)
 8001328:	54d1      	strb	r1, [r2, r3]
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800132a:	f001 fc87 	bl	8002c3c <TS_IO_Init>
    }
  }
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000015c 	.word	0x2000015c

0800133c <ft6x06_Reset>:
  *         @note : Not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6xx6 IC */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <ft6x06_ReadID>:
  *         able to read the FT6xx6 device ID, and verify this is a FT6xx6.
  * @param  DeviceAddr: I2C FT6xx6 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 800135c:	f001 fc6e 	bl	8002c3c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	21a8      	movs	r1, #168	; 0xa8
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fc98 	bl	8002c9c <TS_IO_Read>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6xx6 */
  ft6x06_TS_Configure(DeviceAddr);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f8bc 	bl	8001502 <ft6x06_TS_Configure>

  /* By default set FT6xx6 IC in Polling mode : no INT generation on FT6xx6 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f88d 	bl	80014ac <ft6x06_TS_DisableIT>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fc73 	bl	8002c9c <TS_IO_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6xx6 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <ft6x06_TS_DetectTouch+0x50>)
 80013d8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <ft6x06_TS_DetectTouch+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000160 	.word	0x20000160

080013f0 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001404:	789a      	ldrb	r2, [r3, #2]
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	429a      	cmp	r2, r3
 800140c:	d234      	bcs.n	8001478 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <ft6x06_TS_GetXY+0x2c>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800141a:	e005      	b.n	8001428 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 800141c:	2303      	movs	r3, #3
 800141e:	75fb      	strb	r3, [r7, #23]
      break;
 8001420:	e002      	b.n	8001428 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001422:	2309      	movs	r3, #9
 8001424:	75fb      	strb	r3, [r7, #23]
      break;
 8001426:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	f107 0210 	add.w	r2, r7, #16
 8001430:	7df9      	ldrb	r1, [r7, #23]
 8001432:	2304      	movs	r3, #4
 8001434:	f001 fc5e 	bl	8002cf4 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21b      	sxth	r3, r3
 800143e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001442:	b21a      	sxth	r2, r3
 8001444:	7c7b      	ldrb	r3, [r7, #17]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29a      	uxth	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001452:	7cbb      	ldrb	r3, [r7, #18]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21b      	sxth	r3, r3
 8001458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800145c:	b21a      	sxth	r2, r3
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001476:	709a      	strb	r2, [r3, #2]
  }
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000160 	.word	0x20000160

08001484 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	21a4      	movs	r1, #164	; 0xa4
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fbd4 	bl	8002c4c <TS_IO_Write>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	21a4      	movs	r1, #164	; 0xa4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fbc0 	bl	8002c4c <TS_IO_Write>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6xx6 */
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6xx6 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6xx6 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6xx6 */

  return(status);
 8001510:	68fb      	ldr	r3, [r7, #12]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e00b      	b.n	800154c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <ft6x06_GetInstance+0x40>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	b29b      	uxth	r3, r3
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	429a      	cmp	r2, r3
 8001540:	d101      	bne.n	8001546 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	e006      	b.n	8001554 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d9f0      	bls.n	8001534 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001552:	23ff      	movs	r3, #255	; 0xff
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	2000015c 	.word	0x2000015c

08001564 <MX_GPIO_Init>:
     PF9   ------> QUADSPI_BK1_IO1
     PF8   ------> QUADSPI_BK1_IO0
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b090      	sub	sp, #64	; 0x40
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	4bad      	ldr	r3, [pc, #692]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4aac      	ldr	r2, [pc, #688]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4baa      	ldr	r3, [pc, #680]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	4ba6      	ldr	r3, [pc, #664]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4aa5      	ldr	r2, [pc, #660]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4ba3      	ldr	r3, [pc, #652]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	4b9f      	ldr	r3, [pc, #636]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a9e      	ldr	r2, [pc, #632]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b9c      	ldr	r3, [pc, #624]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	4b98      	ldr	r3, [pc, #608]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a97      	ldr	r2, [pc, #604]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b95      	ldr	r3, [pc, #596]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b91      	ldr	r3, [pc, #580]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a90      	ldr	r2, [pc, #576]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b8e      	ldr	r3, [pc, #568]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b8a      	ldr	r3, [pc, #552]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a89      	ldr	r2, [pc, #548]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b87      	ldr	r3, [pc, #540]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a82      	ldr	r2, [pc, #520]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b80      	ldr	r3, [pc, #512]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b79      	ldr	r3, [pc, #484]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b75      	ldr	r3, [pc, #468]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a74      	ldr	r2, [pc, #464]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a6d      	ldr	r2, [pc, #436]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a66      	ldr	r2, [pc, #408]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800169c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	210c      	movs	r1, #12
 80016b2:	4861      	ldr	r0, [pc, #388]	; (8001838 <MX_GPIO_Init+0x2d4>)
 80016b4:	f003 ff70 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2130      	movs	r1, #48	; 0x30
 80016bc:	485f      	ldr	r0, [pc, #380]	; (800183c <MX_GPIO_Init+0x2d8>)
 80016be:	f003 ff6b 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	485e      	ldr	r0, [pc, #376]	; (8001840 <MX_GPIO_Init+0x2dc>)
 80016c8:	f003 ff66 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	485c      	ldr	r0, [pc, #368]	; (8001844 <MX_GPIO_Init+0x2e0>)
 80016d2:	f003 ff61 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	485b      	ldr	r0, [pc, #364]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80016dc:	f003 ff5c 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	4859      	ldr	r0, [pc, #356]	; (800184c <MX_GPIO_Init+0x2e8>)
 80016e6:	f003 ff57 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2108      	movs	r1, #8
 80016ee:	4858      	ldr	r0, [pc, #352]	; (8001850 <MX_GPIO_Init+0x2ec>)
 80016f0:	f003 ff52 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80016f4:	2330      	movs	r3, #48	; 0x30
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001704:	2306      	movs	r3, #6
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170c:	4619      	mov	r1, r3
 800170e:	484a      	ldr	r0, [pc, #296]	; (8001838 <MX_GPIO_Init+0x2d4>)
 8001710:	f003 fc8a 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001714:	230c      	movs	r3, #12
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4843      	ldr	r0, [pc, #268]	; (8001838 <MX_GPIO_Init+0x2d4>)
 800172c:	f003 fc7c 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001730:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001742:	2308      	movs	r3, #8
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	483d      	ldr	r0, [pc, #244]	; (8001844 <MX_GPIO_Init+0x2e0>)
 800174e:	f003 fc6b 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001752:	2308      	movs	r3, #8
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001762:	2306      	movs	r3, #6
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	4619      	mov	r1, r3
 800176c:	4836      	ldr	r0, [pc, #216]	; (8001848 <MX_GPIO_Init+0x2e4>)
 800176e:	f003 fc5b 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001772:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001784:	230c      	movs	r3, #12
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	4831      	ldr	r0, [pc, #196]	; (8001854 <MX_GPIO_Init+0x2f0>)
 8001790:	f003 fc4a 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4827      	ldr	r0, [pc, #156]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80017aa:	f003 fc3d 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017be:	230a      	movs	r3, #10
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80017ca:	f003 fc2d 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017de:	2306      	movs	r3, #6
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4814      	ldr	r0, [pc, #80]	; (800183c <MX_GPIO_Init+0x2d8>)
 80017ea:	f003 fc1d 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80017ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001800:	230a      	movs	r3, #10
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_GPIO_Init+0x2ec>)
 800180c:	f003 fc0c 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001810:	2330      	movs	r3, #48	; 0x30
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001814:	2311      	movs	r3, #17
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_GPIO_Init+0x2d8>)
 8001828:	f003 fbfe 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800182c:	2308      	movs	r3, #8
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001830:	2311      	movs	r3, #17
 8001832:	e011      	b.n	8001858 <MX_GPIO_Init+0x2f4>
 8001834:	40023800 	.word	0x40023800
 8001838:	40021000 	.word	0x40021000
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40022800 	.word	0x40022800
 8001844:	40021800 	.word	0x40021800
 8001848:	40020400 	.word	0x40020400
 800184c:	40021c00 	.word	0x40021c00
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	4863      	ldr	r0, [pc, #396]	; (80019f8 <MX_GPIO_Init+0x494>)
 800186a:	f003 fbdd 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800186e:	2304      	movs	r3, #4
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800187e:	230c      	movs	r3, #12
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	485c      	ldr	r0, [pc, #368]	; (80019fc <MX_GPIO_Init+0x498>)
 800188a:	f003 fbcd 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4857      	ldr	r0, [pc, #348]	; (8001a00 <MX_GPIO_Init+0x49c>)
 80018a4:	f003 fbc0 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80018a8:	2330      	movs	r3, #48	; 0x30
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b8:	2304      	movs	r3, #4
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4850      	ldr	r0, [pc, #320]	; (8001a04 <MX_GPIO_Init+0x4a0>)
 80018c4:	f003 fbb0 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80018d8:	2306      	movs	r3, #6
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4849      	ldr	r0, [pc, #292]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 80018e4:	f003 fba0 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4842      	ldr	r0, [pc, #264]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 8001900:	f003 fb92 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001904:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001916:	2309      	movs	r3, #9
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	483a      	ldr	r0, [pc, #232]	; (8001a0c <MX_GPIO_Init+0x4a8>)
 8001922:	f003 fb81 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001938:	230a      	movs	r3, #10
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4832      	ldr	r0, [pc, #200]	; (8001a0c <MX_GPIO_Init+0x4a8>)
 8001944:	f003 fb70 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001948:	2305      	movs	r3, #5
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	482c      	ldr	r0, [pc, #176]	; (8001a10 <MX_GPIO_Init+0x4ac>)
 8001960:	f003 fb62 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001976:	2302      	movs	r3, #2
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	481e      	ldr	r0, [pc, #120]	; (80019fc <MX_GPIO_Init+0x498>)
 8001982:	f003 fb51 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001986:	2304      	movs	r3, #4
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 800199a:	f003 fb45 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800199e:	2320      	movs	r3, #32
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_GPIO_Init+0x4b0>)
 80019b4:	f003 fb38 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2302      	movs	r3, #2
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_GPIO_Init+0x4a0>)
 80019d0:	f003 fb2a 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019d4:	2308      	movs	r3, #8
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_GPIO_Init+0x49c>)
 80019ec:	f003 fb1c 	bl	8005028 <HAL_GPIO_Init>

}
 80019f0:	bf00      	nop
 80019f2:	3740      	adds	r7, #64	; 0x40
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40022800 	.word	0x40022800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40021c00 	.word	0x40021c00
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40022400 	.word	0x40022400

08001a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_I2C1_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a56:	f003 fdb9 	bl	80055cc <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 fc08 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000164 	.word	0x20000164
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	00061a80 	.word	0x00061a80

08001a74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_I2C_MspInit+0x104>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d16c      	bne.n	8001b70 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

    /* Perform 10 pulses on SCL to unlock I2C devices if previous I2C transaction aborted.*/
    /* This configuration is needed when using touch screen controller FT6336U */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a9c:	2311      	movs	r3, #17
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct );
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4832      	ldr	r0, [pc, #200]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ab4:	f003 fab8 	bl	8005028 <HAL_GPIO_Init>
    for(uint8_t count = 10; count > 0; count-- )
 8001ab8:	230a      	movs	r3, #10
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001abe:	e016      	b.n	8001aee <HAL_I2C_MspInit+0x7a>
    {
      HAL_GPIO_WritePin(GPIOB, I2C1_SCL_Pin, GPIO_PIN_SET );
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac6:	482d      	ldr	r0, [pc, #180]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ac8:	f003 fd66 	bl	8005598 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f001 fb23 	bl	8003118 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, I2C1_SCL_Pin, GPIO_PIN_RESET );
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad8:	4828      	ldr	r0, [pc, #160]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ada:	f003 fd5d 	bl	8005598 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f001 fb1a 	bl	8003118 <HAL_Delay>
    for(uint8_t count = 10; count > 0; count-- )
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e4      	bne.n	8001ac0 <HAL_I2C_MspInit+0x4c>
    }
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b24:	2304      	movs	r3, #4
 8001b26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001b30:	f003 fa7a 	bl	8005028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	201f      	movs	r0, #31
 8001b56:	f001 fc02 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b5a:	201f      	movs	r0, #31
 8001b5c:	f001 fc1b 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2020      	movs	r0, #32
 8001b66:	f001 fbfa 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f001 fc13 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_I2C_MspDeInit+0x48>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d115      	bne.n	8001bc2 <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_I2C_MspDeInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_I2C_MspDeInit+0x4c>)
 8001b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <HAL_I2C_MspDeInit+0x50>)
 8001ba8:	f003 fbea 	bl	8005380 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb0:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <HAL_I2C_MspDeInit+0x50>)
 8001bb2:	f003 fbe5 	bl	8005380 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001bb6:	201f      	movs	r0, #31
 8001bb8:	f001 fbfb 	bl	80033b2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001bbc:	2020      	movs	r0, #32
 8001bbe:	f001 fbf8 	bl	80033b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <i2c1_error>:

/* USER CODE BEGIN 1 */
void i2c1_error(uint8_t Addr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_DeInit(&hi2c1);
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <i2c1_error+0x1c>)
 8001be4:	f003 fe36 	bl	8005854 <HAL_I2C_DeInit>

  MX_I2C1_Init();
 8001be8:	f7ff ff16 	bl	8001a18 <MX_I2C1_Init>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000164 	.word	0x20000164

08001bf8 <lcd_control_draw_rectangle_value>:
#define DMA2D_USE

static const uint32_t * my_image = vieworks_logo;

void lcd_control_draw_rectangle_value(uint32_t layer_index, void* p_dst, uint32_t x_size, uint32_t y_size, uint32_t off_line, uint32_t value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c0c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = off_line;
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c1c:	f001 fc83 	bl	8003526 <HAL_DMA2D_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <lcd_control_draw_rectangle_value+0x32>
  {
    Error_Handler();
 8001c26:	f000 fb25 	bl	8002274 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c2e:	f001 fdd7 	bl	80037e0 <HAL_DMA2D_ConfigLayer>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <lcd_control_draw_rectangle_value+0x44>
  {
    Error_Handler();
 8001c38:	f000 fb1c 	bl	8002274 <Error_Handler>
  }

  if (HAL_DMA2D_Start(&hdma2d, value, (uint32_t)p_dst, x_size, y_size) == HAL_OK)
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69f9      	ldr	r1, [r7, #28]
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c48:	f001 fcb6 	bl	80035b8 <HAL_DMA2D_Start>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <lcd_control_draw_rectangle_value+0x62>
  {
      /* Polling For DMA transfer */  
      HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8001c52:	2164      	movs	r1, #100	; 0x64
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <lcd_control_draw_rectangle_value+0x6c>)
 8001c56:	f001 fcda 	bl	800360e <HAL_DMA2D_PollForTransfer>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000b8 	.word	0x200000b8

08001c68 <color_write>:

static void color_write(uint8_t sector, uint32_t address, uint32_t color)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	73fb      	strb	r3, [r7, #15]
    printf("sector %d, address 0x%08lx, color 0x%08lx \r\n", sector, address, color);
 8001c76:	7bf9      	ldrb	r1, [r7, #15]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	4824      	ldr	r0, [pc, #144]	; (8001d10 <color_write+0xa8>)
 8001c7e:	f008 fe7b 	bl	800a978 <iprintf>
    HAL_StatusTypeDef status;
    uint32_t error = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    FLASH_EraseInitTypeDef eraseInitStruct;

    HAL_FLASH_Unlock();
 8001c86:	f002 ff1d 	bl	8004ac4 <HAL_FLASH_Unlock>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Sector = sector;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbSectors = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &error);
 8001c9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 f87f 	bl	8004da8 <HAL_FLASHEx_Erase>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (status != HAL_OK)
 8001cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <color_write+0x5c>
    {
        printf("[Error] Flash Erase \r\n");
 8001cb8:	4816      	ldr	r0, [pc, #88]	; (8001d14 <color_write+0xac>)
 8001cba:	f008 fee3 	bl	800aa84 <puts>
        HAL_FLASH_Lock();
 8001cbe:	f002 ff23 	bl	8004b08 <HAL_FLASH_Lock>
 8001cc2:	e022      	b.n	8001d0a <color_write+0xa2>
        return;
    }

    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	e017      	b.n	8001cfa <color_write+0x92>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, color);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	461c      	mov	r4, r3
 8001cd0:	4615      	mov	r5, r2
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f002 fe9f 	bl	8004a1c <HAL_FLASH_Program>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (status != HAL_OK)
 8001ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <color_write+0x8c>
        {
            printf("[Error] Flash write \r\n");
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <color_write+0xb0>)
 8001cee:	f008 fec9 	bl	800aa84 <puts>
            break;
 8001cf2:	e008      	b.n	8001d06 <color_write+0x9e>
    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d3e1      	bcc.n	8001cca <color_write+0x62>
        }
    }

    HAL_FLASH_Lock();
 8001d06:	f002 feff 	bl	8004b08 <HAL_FLASH_Lock>
}
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	0800be38 	.word	0x0800be38
 8001d14:	0800be68 	.word	0x0800be68
 8001d18:	0800be80 	.word	0x0800be80

08001d1c <lcd_control_change_sdram>:

void lcd_control_change_sdram(uint32_t color, uint8_t sector)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
    uint32_t address_offset = SDRAM_ADDRESS; // hltdc.LayerCfg[layer_index].FBStartAdress;
 8001d28:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d2c:	60fb      	str	r3, [r7, #12]
    address_offset += (uint32_t)((800*(480/2)*(sector/2)+(800/2)*(sector%2))*4);
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <lcd_control_change_sdram+0x5c>)
 8001d38:	fb03 f202 	mul.w	r2, r3, r2
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
            address = address_offset + 800*y + x;
            *(uint32_t *)address = color;
        }
    }
#else
    lcd_control_draw_rectangle_value(0, (uint32_t *)address_offset, 400, 240, 800 - 400, color);
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	23f0      	movs	r3, #240	; 0xf0
 8001d64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ff45 	bl	8001bf8 <lcd_control_draw_rectangle_value>
#endif
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	0002ee00 	.word	0x0002ee00

08001d7c <lcd_control_change_flash>:


void lcd_control_change_flash(uint32_t color, bool tmp)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
    if (!tmp) // sector 5~11 (128K*7)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <lcd_control_change_flash+0x52>
    {
        uint32_t address_offset = 0x08020000;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <lcd_control_change_flash+0x94>)
 8001d96:	60fb      	str	r3, [r7, #12]
        uint32_t address = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
        for (int sector=5; sector<7; sector+=1)
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e011      	b.n	8001dc6 <lcd_control_change_flash+0x4a>
        {
            address = address_offset + sector*(0x400*128);
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	045b      	lsls	r3, r3, #17
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
            color_write(sector+5, address, color);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3305      	adds	r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff54 	bl	8001c68 <color_write>
        for (int sector=5; sector<7; sector+=1)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	ddea      	ble.n	8001da2 <lcd_control_change_flash+0x26>
        {
            address = address_offset + sector*(0x400*128);
            color_write(sector+17, address, color);
        }
    }
}
 8001dcc:	e01b      	b.n	8001e06 <lcd_control_change_flash+0x8a>
        uint32_t address_offset = 0x08120000;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <lcd_control_change_flash+0x98>)
 8001dd0:	617b      	str	r3, [r7, #20]
        uint32_t address = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
        for (int sector=0; sector<7; sector+=1)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	e011      	b.n	8001e00 <lcd_control_change_flash+0x84>
            address = address_offset + sector*(0x400*128);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	045b      	lsls	r3, r3, #17
 8001de0:	461a      	mov	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4413      	add	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
            color_write(sector+17, address, color);
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3311      	adds	r3, #17
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff37 	bl	8001c68 <color_write>
        for (int sector=0; sector<7; sector+=1)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	ddea      	ble.n	8001ddc <lcd_control_change_flash+0x60>
}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	08020000 	.word	0x08020000
 8001e14:	08120000 	.word	0x08120000

08001e18 <NT35510_IO_Delay>:

void NT35510_IO_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    HAL_Delay(Delay);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f001 f979 	bl	8003118 <HAL_Delay>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <lcd_reset>:

static void lcd_reset(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <lcd_reset+0x28>)
 8001e3a:	f003 fbad 	bl	8005598 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001e3e:	2014      	movs	r0, #20
 8001e40:	f001 f96a 	bl	8003118 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <lcd_reset+0x28>)
 8001e4a:	f003 fba5 	bl	8005598 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001e4e:	2014      	movs	r0, #20
 8001e50:	f001 f962 	bl	8003118 <HAL_Delay>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021c00 	.word	0x40021c00

08001e5c <lcd_control_init>:

void lcd_control_init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
    lcd_reset();
 8001e60:	f7ff ffe6 	bl	8001e30 <lcd_reset>
    MX_DSIHOST_DSI_Init();
 8001e64:	f7fe ff4e 	bl	8000d04 <MX_DSIHOST_DSI_Init>
    MX_LTDC_Init();
 8001e68:	f000 f82e 	bl	8001ec8 <MX_LTDC_Init>
    dsi_start(true);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7ff f8b9 	bl	8000fe4 <dsi_start>

    NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8001e72:	2101      	movs	r1, #1
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 fa03 	bl	8002280 <NT35510_Init>

    MX_FMC_Init();
 8001e7a:	f7ff f92f 	bl	80010dc <MX_FMC_Init>

    // ltdc_change_layer(0, *(uint32_t *)my_image);
    ltdc_change_layer(0, *(uint32_t *)my_image);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <lcd_control_init+0x68>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f8ee 	bl	8002068 <ltdc_change_layer>
    lcd_control_change_sdram(LCD_COLOR_CYAN, 0);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001e92:	f7ff ff43 	bl	8001d1c <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_MAGENTA, 1);
 8001e96:	2101      	movs	r1, #1
 8001e98:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001e9c:	f7ff ff3e 	bl	8001d1c <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_YELLOW, 2);
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001ea6:	f7ff ff39 	bl	8001d1c <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_BLACK, 3);
 8001eaa:	2103      	movs	r1, #3
 8001eac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001eb0:	f7ff ff34 	bl	8001d1c <lcd_control_change_sdram>
    ltdc_change_layer(0, SDRAM_ADDRESS);
 8001eb4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 f8d5 	bl	8002068 <ltdc_change_layer>
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000028 	.word	0x20000028

08001ec8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08e      	sub	sp, #56	; 0x38
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2234      	movs	r2, #52	; 0x34
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 fd47 	bl	800a968 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001edc:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <MX_LTDC_Init+0x104>)
 8001ede:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ee6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 119;
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f04:	2277      	movs	r2, #119	; 0x77
 8001f06:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 35;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f0a:	2223      	movs	r2, #35	; 0x23
 8001f0c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 269;
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f10:	f240 120d 	movw	r2, #269	; 0x10d
 8001f14:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 835;
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f18:	f240 3243 	movw	r2, #835	; 0x343
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 749;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f20:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 869;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f28:	f240 3265 	movw	r2, #869	; 0x365
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 899;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f30:	f240 3283 	movw	r2, #899	; 0x383
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001f50:	f006 f806 	bl	8007f60 <HAL_LTDC_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8001f5a:	f000 f98b 	bl	8002274 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001f62:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001f66:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001f6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f70:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f76:	23ff      	movs	r3, #255	; 0xff
 8001f78:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f82:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f84:	2307      	movs	r3, #7
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x08020000;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_LTDC_Init+0x108>)
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001f8c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001f92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_LTDC_Init+0x100>)
 8001fb2:	f006 f95d 	bl	8008270 <HAL_LTDC_ConfigLayer>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001fbc:	f000 f95a 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	3738      	adds	r7, #56	; 0x38
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200001b8 	.word	0x200001b8
 8001fcc:	40016800 	.word	0x40016800
 8001fd0:	08020000 	.word	0x08020000

08001fd4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b092      	sub	sp, #72	; 0x48
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	223c      	movs	r2, #60	; 0x3c
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f008 fcbf 	bl	800a968 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_LTDC_MspInit+0x8c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d130      	bne.n	8002056 <HAL_LTDC_MspInit+0x82>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001ff8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ffc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001ffe:	2307      	movs	r3, #7
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	4618      	mov	r0, r3
 800200c:	f006 fd76 	bl	8008afc <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8002016:	f000 f92d 	bl	8002274 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_LTDC_MspInit+0x90>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_LTDC_MspInit+0x90>)
 8002024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_LTDC_MspInit+0x90>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2058      	movs	r0, #88	; 0x58
 800203c:	f001 f98f 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002040:	2058      	movs	r0, #88	; 0x58
 8002042:	f001 f9a8 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2059      	movs	r0, #89	; 0x59
 800204c:	f001 f987 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8002050:	2059      	movs	r0, #89	; 0x59
 8002052:	f001 f9a0 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002056:	bf00      	nop
 8002058:	3748      	adds	r7, #72	; 0x48
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40016800 	.word	0x40016800
 8002064:	40023800 	.word	0x40023800

08002068 <ltdc_change_layer>:
  }
}

/* USER CODE BEGIN 1 */
void ltdc_change_layer(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	80fb      	strh	r3, [r7, #6]
    LTDC_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = NT35510_800X480_WIDTH;
 8002078:	f44f 7348 	mov.w	r3, #800	; 0x320
 800207c:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = NT35510_800X480_HEIGHT;
 8002082:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002086:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002090:	23ff      	movs	r3, #255	; 0xff
 8002092:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020b0:	2307      	movs	r3, #7
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = NT35510_800X480_WIDTH;
 80020b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = NT35510_800X480_HEIGHT;
 80020ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex); 
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <ltdc_change_layer+0x70>)
 80020ca:	f006 f8d1 	bl	8008270 <HAL_LTDC_ConfigLayer>
}
 80020ce:	bf00      	nop
 80020d0:	3740      	adds	r7, #64	; 0x40
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200001b8 	.word	0x200001b8

080020dc <HAL_LTDC_ErrorCallback>:

volatile uint32_t ltdc_err = 0;
void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ltdc_err = hltdc->ErrorCode;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_LTDC_ErrorCallback+0x20>)
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000260 	.word	0x20000260

08002100 <ltdc_get_err>:

void ltdc_get_err(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  printf("[LTDC] err: 0x%08lx \r\n", ltdc_err);
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <ltdc_get_err+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <ltdc_get_err+0x18>)
 800210c:	f008 fc34 	bl	800a978 <iprintf>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000260 	.word	0x20000260
 8002118:	0800be98 	.word	0x0800be98

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f000 ff88 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f832 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff fa1c 	bl	8001564 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800212c:	f000 fe26 	bl	8002d7c <MX_USART3_UART_Init>
  MX_DMA2D_Init();
 8002130:	f7fe fd94 	bl	8000c5c <MX_DMA2D_Init>
  MX_I2C1_Init();
 8002134:	f7ff fc70 	bl	8001a18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 8002138:	4910      	ldr	r1, [pc, #64]	; (800217c <main+0x60>)
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <main+0x64>)
 800213c:	f008 fc1c 	bl	800a978 <iprintf>
  lcd_control_init();
 8002140:	f7ff fe8c 	bl	8001e5c <lcd_control_init>
  HAL_Delay(1000);
 8002144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002148:	f000 ffe6 	bl	8003118 <HAL_Delay>
  if (ts_init(800, 400))
 800214c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002150:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002154:	f000 fc02 	bl	800295c <ts_init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <main+0x48>
  {
    printf("TS Init Fail \r\n");
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <main+0x68>)
 8002160:	f008 fc90 	bl	800aa84 <puts>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(">>> Init Success !!! \r\n");
 8002164:	4808      	ldr	r0, [pc, #32]	; (8002188 <main+0x6c>)
 8002166:	f008 fc8d 	bl	800aa84 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 800216a:	f000 ff13 	bl	8002f94 <uart_check_cmd_recv>
    ts_process();
 800216e:	f000 fbc1 	bl	80028f4 <ts_process>
    HAL_Delay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f000 ffd0 	bl	8003118 <HAL_Delay>
    uart_check_cmd_recv();
 8002178:	e7f7      	b.n	800216a <main+0x4e>
 800217a:	bf00      	nop
 800217c:	0800beb0 	.word	0x0800beb0
 8002180:	0800beb8 	.word	0x0800beb8
 8002184:	0800bef0 	.word	0x0800bef0
 8002188:	0800bf00 	.word	0x0800bf00

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	2234      	movs	r2, #52	; 0x34
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f008 fbe4 	bl	800a968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <SystemClock_Config+0xe0>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a2c      	ldr	r2, [pc, #176]	; (800226c <SystemClock_Config+0xe0>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <SystemClock_Config+0xe0>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	2300      	movs	r3, #0
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <SystemClock_Config+0xe4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <SystemClock_Config+0xe4>)
 80021d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <SystemClock_Config+0xe4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2302      	movs	r3, #2
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021fc:	2308      	movs	r3, #8
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002200:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002206:	2302      	movs	r3, #2
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800220a:	2304      	movs	r3, #4
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800220e:	2306      	movs	r3, #6
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4618      	mov	r0, r3
 8002218:	f006 feae 	bl	8008f78 <HAL_RCC_OscConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002222:	f000 f827 	bl	8002274 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002226:	f006 f9f9 	bl	800861c <HAL_PWREx_EnableOverDrive>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002230:	f000 f820 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002234:	230f      	movs	r3, #15
 8002236:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002238:	2302      	movs	r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002240:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	2105      	movs	r1, #5
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fa32 	bl	80086bc <HAL_RCC_ClockConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800225e:	f000 f809 	bl	8002274 <Error_Handler>
  }
}
 8002262:	bf00      	nop
 8002264:	3750      	adds	r7, #80	; 0x50
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	e7fe      	b.n	800227c <Error_Handler+0x8>
	...

08002280 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0b2      	sub	sp, #200	; 0xc8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 800228a:	2078      	movs	r0, #120	; 0x78
 800228c:	f7ff fdc4 	bl	8001e18 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8002290:	4ac8      	ldr	r2, [pc, #800]	; (80025b4 <NT35510_Init+0x334>)
 8002292:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002296:	e892 0003 	ldmia.w	r2, {r0, r1}
 800229a:	6018      	str	r0, [r3, #0]
 800229c:	3304      	adds	r3, #4
 800229e:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80022a0:	4bc5      	ldr	r3, [pc, #788]	; (80025b8 <NT35510_Init+0x338>)
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80022a6:	4bc5      	ldr	r3, [pc, #788]	; (80025bc <NT35510_Init+0x33c>)
 80022a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80022ac:	4bc4      	ldr	r3, [pc, #784]	; (80025c0 <NT35510_Init+0x340>)
 80022ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 80022b2:	4bc4      	ldr	r3, [pc, #784]	; (80025c4 <NT35510_Init+0x344>)
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 80022b8:	4bc3      	ldr	r3, [pc, #780]	; (80025c8 <NT35510_Init+0x348>)
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80022be:	4bc3      	ldr	r3, [pc, #780]	; (80025cc <NT35510_Init+0x34c>)
 80022c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80022c4:	f240 13bf 	movw	r3, #447	; 0x1bf
 80022c8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80022cc:	4bc0      	ldr	r3, [pc, #768]	; (80025d0 <NT35510_Init+0x350>)
 80022ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80022d2:	4bc0      	ldr	r3, [pc, #768]	; (80025d4 <NT35510_Init+0x354>)
 80022d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80022d8:	4bbf      	ldr	r3, [pc, #764]	; (80025d8 <NT35510_Init+0x358>)
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80022de:	4bbf      	ldr	r3, [pc, #764]	; (80025dc <NT35510_Init+0x35c>)
 80022e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 80022e4:	4bbe      	ldr	r3, [pc, #760]	; (80025e0 <NT35510_Init+0x360>)
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 80022ea:	4bbe      	ldr	r3, [pc, #760]	; (80025e4 <NT35510_Init+0x364>)
 80022ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 80022f0:	4abd      	ldr	r2, [pc, #756]	; (80025e8 <NT35510_Init+0x368>)
 80022f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	4611      	mov	r1, r2
 80022fa:	8019      	strh	r1, [r3, #0]
 80022fc:	3302      	adds	r3, #2
 80022fe:	0c12      	lsrs	r2, r2, #16
 8002300:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8002302:	4aba      	ldr	r2, [pc, #744]	; (80025ec <NT35510_Init+0x36c>)
 8002304:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230c:	6018      	str	r0, [r3, #0]
 800230e:	3304      	adds	r3, #4
 8002310:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8002312:	4ab7      	ldr	r2, [pc, #732]	; (80025f0 <NT35510_Init+0x370>)
 8002314:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4611      	mov	r1, r2
 800231c:	8019      	strh	r1, [r3, #0]
 800231e:	3302      	adds	r3, #2
 8002320:	0c12      	lsrs	r2, r2, #16
 8002322:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8002324:	f240 33b6 	movw	r3, #950	; 0x3b6
 8002328:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 800232c:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8002330:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8002334:	4aaf      	ldr	r2, [pc, #700]	; (80025f4 <NT35510_Init+0x374>)
 8002336:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4611      	mov	r1, r2
 800233e:	8019      	strh	r1, [r3, #0]
 8002340:	3302      	adds	r3, #2
 8002342:	0c12      	lsrs	r2, r2, #16
 8002344:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8002346:	4aac      	ldr	r2, [pc, #688]	; (80025f8 <NT35510_Init+0x378>)
 8002348:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800234c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002350:	6018      	str	r0, [r3, #0]
 8002352:	3304      	adds	r3, #4
 8002354:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8002356:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 800235a:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 800235c:	4ba7      	ldr	r3, [pc, #668]	; (80025fc <NT35510_Init+0x37c>)
 800235e:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8002360:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8002364:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8002368:	2336      	movs	r3, #54	; 0x36
 800236a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 800236e:	4aa4      	ldr	r2, [pc, #656]	; (8002600 <NT35510_Init+0x380>)
 8002370:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002378:	6018      	str	r0, [r3, #0]
 800237a:	3304      	adds	r3, #4
 800237c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 800237e:	4aa1      	ldr	r2, [pc, #644]	; (8002604 <NT35510_Init+0x384>)
 8002380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002388:	6018      	str	r0, [r3, #0]
 800238a:	3304      	adds	r3, #4
 800238c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 800238e:	f246 0336 	movw	r3, #24630	; 0x6036
 8002392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8002396:	4a9c      	ldr	r2, [pc, #624]	; (8002608 <NT35510_Init+0x388>)
 8002398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800239c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a0:	6018      	str	r0, [r3, #0]
 80023a2:	3304      	adds	r3, #4
 80023a4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80023a6:	4a99      	ldr	r2, [pc, #612]	; (800260c <NT35510_Init+0x38c>)
 80023a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b0:	6018      	str	r0, [r3, #0]
 80023b2:	3304      	adds	r3, #4
 80023b4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80023b6:	2335      	movs	r3, #53	; 0x35
 80023b8:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80023ba:	2311      	movs	r3, #17
 80023bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80023be:	2329      	movs	r3, #41	; 0x29
 80023c0:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80023c2:	f647 7351 	movw	r3, #32593	; 0x7f51
 80023c6:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80023c8:	f642 4353 	movw	r3, #11347	; 0x2c53
 80023cc:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80023ce:	f240 2355 	movw	r3, #597	; 0x255
 80023d2:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 80023d4:	f64f 735e 	movw	r3, #65374	; 0xff5e
 80023d8:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 80023da:	232c      	movs	r3, #44	; 0x2c
 80023dc:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 80023de:	f245 533a 	movw	r3, #21818	; 0x553a
 80023e2:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 80023e4:	f247 733a 	movw	r3, #30522	; 0x773a
 80023e8:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 80023ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023ee:	4619      	mov	r1, r3
 80023f0:	2005      	movs	r0, #5
 80023f2:	f7fe fdcd 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 80023f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023fa:	4619      	mov	r1, r3
 80023fc:	2003      	movs	r0, #3
 80023fe:	f7fe fdc7 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8002402:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002406:	4619      	mov	r1, r3
 8002408:	2003      	movs	r0, #3
 800240a:	f7fe fdc1 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800240e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002412:	4619      	mov	r1, r3
 8002414:	2003      	movs	r0, #3
 8002416:	f7fe fdbb 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800241a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800241e:	4619      	mov	r1, r3
 8002420:	2003      	movs	r0, #3
 8002422:	f7fe fdb5 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8002426:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800242a:	4619      	mov	r1, r3
 800242c:	2003      	movs	r0, #3
 800242e:	f7fe fdaf 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8002432:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002436:	4619      	mov	r1, r3
 8002438:	2003      	movs	r0, #3
 800243a:	f7fe fda9 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 800243e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002442:	4619      	mov	r1, r3
 8002444:	2001      	movs	r0, #1
 8002446:	f7fe fda3 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800244a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800244e:	4619      	mov	r1, r3
 8002450:	2003      	movs	r0, #3
 8002452:	f7fe fd9d 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8002456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245a:	4619      	mov	r1, r3
 800245c:	2003      	movs	r0, #3
 800245e:	f7fe fd97 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8002462:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002466:	4619      	mov	r1, r3
 8002468:	2003      	movs	r0, #3
 800246a:	f7fe fd91 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 800246e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002472:	4619      	mov	r1, r3
 8002474:	2003      	movs	r0, #3
 8002476:	f7fe fd8b 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800247a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800247e:	4619      	mov	r1, r3
 8002480:	2003      	movs	r0, #3
 8002482:	f7fe fd85 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8002486:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800248a:	4619      	mov	r1, r3
 800248c:	2003      	movs	r0, #3
 800248e:	f7fe fd7f 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8002492:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002496:	4619      	mov	r1, r3
 8002498:	2002      	movs	r0, #2
 800249a:	f7fe fd79 	bl	8000f90 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 800249e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024a2:	4619      	mov	r1, r3
 80024a4:	2005      	movs	r0, #5
 80024a6:	f7fe fd73 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80024aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024ae:	4619      	mov	r1, r3
 80024b0:	2002      	movs	r0, #2
 80024b2:	f7fe fd6d 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80024b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024ba:	4619      	mov	r1, r3
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fd67 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80024c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c6:	4619      	mov	r1, r3
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7fe fd61 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80024ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024d2:	4619      	mov	r1, r3
 80024d4:	2002      	movs	r0, #2
 80024d6:	f7fe fd5b 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80024da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024de:	4619      	mov	r1, r3
 80024e0:	2004      	movs	r0, #4
 80024e2:	f7fe fd55 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80024e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ea:	4619      	mov	r1, r3
 80024ec:	2003      	movs	r0, #3
 80024ee:	f7fe fd4f 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80024f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024f6:	4619      	mov	r1, r3
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7fe fd49 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80024fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002502:	4619      	mov	r1, r3
 8002504:	2001      	movs	r0, #1
 8002506:	f7fe fd43 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800250a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800250e:	4619      	mov	r1, r3
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fd3d 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	4619      	mov	r1, r3
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fd37 	bl	8000f90 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8002522:	20c8      	movs	r0, #200	; 0xc8
 8002524:	f7ff fc78 	bl	8001e18 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d112      	bne.n	8002554 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800252e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002532:	4619      	mov	r1, r3
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe fd2b 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800253a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800253e:	4619      	mov	r1, r3
 8002540:	2004      	movs	r0, #4
 8002542:	f7fe fd25 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8002546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800254a:	4619      	mov	r1, r3
 800254c:	2004      	movs	r0, #4
 800254e:	f7fe fd1f 	bl	8000f90 <DSI_IO_WriteCmd>
 8002552:	e011      	b.n	8002578 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8002554:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002558:	4619      	mov	r1, r3
 800255a:	2001      	movs	r0, #1
 800255c:	f7fe fd18 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8002560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002564:	4619      	mov	r1, r3
 8002566:	2004      	movs	r0, #4
 8002568:	f7fe fd12 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 800256c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002570:	4619      	mov	r1, r3
 8002572:	2004      	movs	r0, #4
 8002574:	f7fe fd0c 	bl	8000f90 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fd06 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8002584:	2078      	movs	r0, #120	; 0x78
 8002586:	f7ff fc47 	bl	8001e18 <NT35510_IO_Delay>

  switch(ColorCoding)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <NT35510_Init+0x324>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d13c      	bne.n	8002610 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	4619      	mov	r1, r3
 800259c:	2001      	movs	r0, #1
 800259e:	f7fe fcf7 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 80025a2:	e03c      	b.n	800261e <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4619      	mov	r1, r3
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7fe fcf0 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 80025b0:	e035      	b.n	800261e <NT35510_Init+0x39e>
 80025b2:	bf00      	nop
 80025b4:	0800bf18 	.word	0x0800bf18
 80025b8:	b0030303 	.word	0xb0030303
 80025bc:	b6464646 	.word	0xb6464646
 80025c0:	b1030303 	.word	0xb1030303
 80025c4:	b7363636 	.word	0xb7363636
 80025c8:	b2020000 	.word	0xb2020000
 80025cc:	b8262626 	.word	0xb8262626
 80025d0:	b3090909 	.word	0xb3090909
 80025d4:	b9363636 	.word	0xb9363636
 80025d8:	b5080808 	.word	0xb5080808
 80025dc:	ba262626 	.word	0xba262626
 80025e0:	bc008000 	.word	0xbc008000
 80025e4:	bd008000 	.word	0xbd008000
 80025e8:	0800bf20 	.word	0x0800bf20
 80025ec:	0800bf24 	.word	0x0800bf24
 80025f0:	0800bf2c 	.word	0x0800bf2c
 80025f4:	0800bf30 	.word	0x0800bf30
 80025f8:	0800bf34 	.word	0x0800bf34
 80025fc:	cc000003 	.word	0xcc000003
 8002600:	0800bf3c 	.word	0x0800bf3c
 8002604:	0800bf44 	.word	0x0800bf44
 8002608:	0800bf4c 	.word	0x0800bf4c
 800260c:	0800bf54 	.word	0x0800bf54
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	2001      	movs	r0, #1
 8002618:	f7fe fcba 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 800261c:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	2001      	movs	r0, #1
 8002626:	f7fe fcb3 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	4619      	mov	r1, r3
 8002630:	2001      	movs	r0, #1
 8002632:	f7fe fcad 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	4619      	mov	r1, r3
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe fca7 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8002642:	f107 0318 	add.w	r3, r7, #24
 8002646:	4619      	mov	r1, r3
 8002648:	2001      	movs	r0, #1
 800264a:	f7fe fca1 	bl	8000f90 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800264e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002652:	4619      	mov	r1, r3
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fc9b 	bl	8000f90 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fc95 	bl	8000f90 <DSI_IO_WriteCmd>

  return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	37c8      	adds	r7, #200	; 0xc8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_MspInit+0x4c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_MspInit+0x4c>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_MspInit+0x4c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_MspInit+0x4c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_MspInit+0x4c>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_MspInit+0x4c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <NMI_Handler+0x4>

080026c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <MemManage_Handler+0x4>

080026d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <BusFault_Handler+0x4>

080026d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <UsageFault_Handler+0x4>

080026de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800270c:	f000 fce4 	bl	80030d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <I2C1_EV_IRQHandler+0x10>)
 800271a:	f003 fbeb 	bl	8005ef4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000164 	.word	0x20000164

08002728 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <I2C1_ER_IRQHandler+0x10>)
 800272e:	f003 fd52 	bl	80061d6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000164 	.word	0x20000164

0800273c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <USART3_IRQHandler+0x10>)
 8002742:	f007 f861 	bl	8009808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000490 	.word	0x20000490

08002750 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <FMC_IRQHandler+0x10>)
 8002756:	f006 fec7 	bl	80094e8 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000124 	.word	0x20000124

08002764 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <LTDC_IRQHandler+0x10>)
 800276a:	f005 fcc9 	bl	8008100 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200001b8 	.word	0x200001b8

08002778 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <LTDC_ER_IRQHandler+0x10>)
 800277e:	f005 fcbf 	bl	8008100 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001b8 	.word	0x200001b8

0800278c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DSI_IRQHandler+0x10>)
 8002792:	f001 fb74 	bl	8003e7e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200000f8 	.word	0x200000f8

080027a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
	return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_kill>:

int _kill(int pid, int sig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ba:	f008 f8ab 	bl	800a914 <__errno>
 80027be:	4603      	mov	r3, r0
 80027c0:	2216      	movs	r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
	return -1;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_exit>:

void _exit (int status)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffe7 	bl	80027b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027e2:	e7fe      	b.n	80027e2 <_exit+0x12>

080027e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e00a      	b.n	800280c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027f6:	f3af 8000 	nop.w
 80027fa:	4601      	mov	r1, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	b2ca      	uxtb	r2, r1
 8002804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	dbf0      	blt.n	80027f6 <_read+0x12>
	}

return len;
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_close>:
	}
	return len;
}

int _close(int file)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	return -1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002846:	605a      	str	r2, [r3, #4]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_isatty>:

int _isatty(int file)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
	return 1;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
	return 0;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f008 f82c 	bl	800a914 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20050000 	.word	0x20050000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	20000264 	.word	0x20000264
 80028f0:	20000508 	.word	0x20000508

080028f4 <ts_process>:
uint8_t  I2C_Address = 0;

TS_StateTypeDef  ts_state = {0};

void ts_process(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
    TS_StateTypeDef  ts_state_new = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	811a      	strh	r2, [r3, #8]
    // uint16_t x1, y1;
    ts_get_state(&ts_state_new);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f884 	bl	8002a14 <ts_get_state>
    if (ts_state_new.touchDetected)
 800290c:	793b      	ldrb	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01b      	beq.n	800294a <ts_process+0x56>
    {
        ts_state.touchDetected = ts_state_new.touchDetected;
 8002912:	793a      	ldrb	r2, [r7, #4]
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <ts_process+0x60>)
 8002916:	701a      	strb	r2, [r3, #0]
        if (ts_state.touchX[0] != ts_state_new.touchX[0] || ts_state.touchY[0] != ts_state_new.touchY[0])
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <ts_process+0x60>)
 800291a:	885a      	ldrh	r2, [r3, #2]
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	429a      	cmp	r2, r3
 8002920:	d104      	bne.n	800292c <ts_process+0x38>
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <ts_process+0x60>)
 8002924:	88da      	ldrh	r2, [r3, #6]
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	429a      	cmp	r2, r3
 800292a:	d00e      	beq.n	800294a <ts_process+0x56>
        {
            ts_state.touchX[0] = ts_state_new.touchX[0];
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <ts_process+0x60>)
 8002930:	805a      	strh	r2, [r3, #2]
            ts_state.touchY[0] = ts_state_new.touchY[0];
 8002932:	897a      	ldrh	r2, [r7, #10]
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <ts_process+0x60>)
 8002936:	80da      	strh	r2, [r3, #6]
            printf("Touch: [%d, %d] \r\n", ts_state.touchX[0], ts_state.touchY[0]);
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <ts_process+0x60>)
 800293a:	885b      	ldrh	r3, [r3, #2]
 800293c:	4619      	mov	r1, r3
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <ts_process+0x60>)
 8002940:	88db      	ldrh	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <ts_process+0x64>)
 8002946:	f008 f817 	bl	800a978 <iprintf>
        }
    }
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000270 	.word	0x20000270
 8002958:	0800bf5c 	.word	0x0800bf5c

0800295c <ts_init>:
        i2c1_error(Addr);
    }
}

uint8_t ts_init(uint16_t ts_size_x, uint16_t ts_size_y)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	4613      	mov	r3, r2
 800296a:	80bb      	strh	r3, [r7, #4]
    uint8_t ts_status = TS_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
    uint8_t ts_id1, ts_id2 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	73bb      	strb	r3, [r7, #14]

    /* Initialize the communication channel to sensor (I2C) if necessary */
    /* that is initialization is done only once after a power up         */
    // ft6x06_ts_drv.Init(I2C_Address);

    ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <ts_init+0xa8>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2054      	movs	r0, #84	; 0x54
 800297a:	4798      	blx	r3
 800297c:	4603      	mov	r3, r0
 800297e:	737b      	strb	r3, [r7, #13]
    if(ts_id1 != FT6206_ID_VALUE)
 8002980:	7b7b      	ldrb	r3, [r7, #13]
 8002982:	2b11      	cmp	r3, #17
 8002984:	d009      	beq.n	800299a <ts_init+0x3e>
    {
        ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <ts_init+0xa8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2070      	movs	r0, #112	; 0x70
 800298c:	4798      	blx	r3
 800298e:	4603      	mov	r3, r0
 8002990:	73bb      	strb	r3, [r7, #14]
        I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <ts_init+0xac>)
 8002994:	2270      	movs	r2, #112	; 0x70
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e002      	b.n	80029a0 <ts_init+0x44>
    }
    else
    {
        I2C_Address    = TS_I2C_ADDRESS;    
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <ts_init+0xac>)
 800299c:	2254      	movs	r2, #84	; 0x54
 800299e:	701a      	strb	r2, [r3, #0]
    }

    /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
    /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
    if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE) || (ts_id2 == FT6X36_ID2_VALUE))
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	2b11      	cmp	r3, #17
 80029a4:	d005      	beq.n	80029b2 <ts_init+0x56>
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	2b11      	cmp	r3, #17
 80029aa:	d002      	beq.n	80029b2 <ts_init+0x56>
 80029ac:	7bbb      	ldrb	r3, [r7, #14]
 80029ae:	2bd8      	cmp	r3, #216	; 0xd8
 80029b0:	d121      	bne.n	80029f6 <ts_init+0x9a>
    {
        /* Found FT6206 : Initialize the TS driver structure */
        ts_driver = &ft6x06_ts_drv;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <ts_init+0xb0>)
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <ts_init+0xa8>)
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get LCD chosen orientation */
        if(ts_size_x < ts_size_y)
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	88bb      	ldrh	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d203      	bcs.n	80029c8 <ts_init+0x6c>
        {
            ts_orientation = TS_SWAP_NONE;                
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <ts_init+0xb4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e002      	b.n	80029ce <ts_init+0x72>
        }
        else
        {
            ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <ts_init+0xb4>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	701a      	strb	r2, [r3, #0]
        }

        if(ts_status == TS_OK)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d112      	bne.n	80029fa <ts_init+0x9e>
        {
            /* Software reset the TouchScreen */
            ts_driver->Reset(I2C_Address);
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <ts_init+0xb0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <ts_init+0xac>)
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	b292      	uxth	r2, r2
 80029e0:	4610      	mov	r0, r2
 80029e2:	4798      	blx	r3

            /* Calibrate, Configure and Start the TouchScreen driver */
            ts_driver->Start(I2C_Address);
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <ts_init+0xb0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <ts_init+0xac>)
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	b292      	uxth	r2, r2
 80029f0:	4610      	mov	r0, r2
 80029f2:	4798      	blx	r3
        if(ts_status == TS_OK)
 80029f4:	e001      	b.n	80029fa <ts_init+0x9e>

        } /* of if(ts_status == TS_OK) */
    }
    else
    {
        ts_status = TS_DEVICE_NOT_FOUND;
 80029f6:	2303      	movs	r3, #3
 80029f8:	73fb      	strb	r3, [r7, #15]
    }

    return (ts_status);
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000000 	.word	0x20000000
 8002a08:	2000026d 	.word	0x2000026d
 8002a0c:	20000268 	.word	0x20000268
 8002a10:	2000026c 	.word	0x2000026c

08002a14 <ts_get_state>:

uint8_t ts_get_state(TS_StateTypeDef *ts_state)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
    static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
    uint8_t ts_status = TS_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	76fb      	strb	r3, [r7, #27]
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    ts_state->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <ts_get_state+0x214>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <ts_get_state+0x218>)
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	701a      	strb	r2, [r3, #0]
    if(ts_state->touchDetected)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80ee 	beq.w	8002c1e <ts_get_state+0x20a>
    {
    for(index=0; index < ts_state->touchDetected; index++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e0e3      	b.n	8002c10 <ts_get_state+0x1fc>
    {
        /* Get each touch coordinates */
        ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002a48:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <ts_get_state+0x214>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <ts_get_state+0x218>)
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	b290      	uxth	r0, r2
 8002a54:	f107 0110 	add.w	r1, r7, #16
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	188c      	adds	r4, r1, r2
 8002a5e:	f107 010c 	add.w	r1, r7, #12
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	0052      	lsls	r2, r2, #1
 8002a66:	440a      	add	r2, r1
 8002a68:	4621      	mov	r1, r4
 8002a6a:	4798      	blx	r3

        if(ts_orientation & TS_SWAP_XY)
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <ts_get_state+0x21c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <ts_get_state+0x98>
        {
        tmp = Raw_x[index];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	443b      	add	r3, r7
 8002a80:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002a84:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	3320      	adds	r3, #32
 8002a8c:	443b      	add	r3, r7
 8002a8e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	3320      	adds	r3, #32
 8002a98:	443b      	add	r3, r7
 8002a9a:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	443b      	add	r3, r7
 8002aa6:	8b3a      	ldrh	r2, [r7, #24]
 8002aa8:	f823 2c14 	strh.w	r2, [r3, #-20]
        }
        
        if(ts_orientation & TS_SWAP_X)
 8002aac:	4b60      	ldr	r3, [pc, #384]	; (8002c30 <ts_get_state+0x21c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <ts_get_state+0xc4>
        {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	3320      	adds	r3, #32
 8002abe:	443b      	add	r3, r7
 8002ac0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002ac4:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8002ac8:	3303      	adds	r3, #3
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	443b      	add	r3, r7
 8002ad4:	f823 2c10 	strh.w	r2, [r3, #-16]
        }

        if(ts_orientation & TS_SWAP_Y)
 8002ad8:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <ts_get_state+0x21c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00f      	beq.n	8002b04 <ts_get_state+0xf0>
        {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	3320      	adds	r3, #32
 8002aea:	443b      	add	r3, r7
 8002aec:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002af0:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002af4:	3301      	adds	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	3320      	adds	r3, #32
 8002afe:	443b      	add	r3, r7
 8002b00:	f823 2c14 	strh.w	r2, [r3, #-20]
        }
            
        xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	3320      	adds	r3, #32
 8002b0a:	443b      	add	r3, r7
 8002b0c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <ts_get_state+0x220>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1a:	4299      	cmp	r1, r3
 8002b1c:	d90d      	bls.n	8002b3a <ts_get_state+0x126>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	3320      	adds	r3, #32
 8002b24:	443b      	add	r3, r7
 8002b26:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002b2a:	4942      	ldr	r1, [pc, #264]	; (8002c34 <ts_get_state+0x220>)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	e00c      	b.n	8002b54 <ts_get_state+0x140>
 8002b3a:	4a3e      	ldr	r2, [pc, #248]	; (8002c34 <ts_get_state+0x220>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	3320      	adds	r3, #32
 8002b4a:	443b      	add	r3, r7
 8002b4c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	82fb      	strh	r3, [r7, #22]
        yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	3320      	adds	r3, #32
 8002b5c:	443b      	add	r3, r7
 8002b5e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <ts_get_state+0x224>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	4299      	cmp	r1, r3
 8002b6e:	d90d      	bls.n	8002b8c <ts_get_state+0x178>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	3320      	adds	r3, #32
 8002b76:	443b      	add	r3, r7
 8002b78:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002b7c:	492e      	ldr	r1, [pc, #184]	; (8002c38 <ts_get_state+0x224>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	e00c      	b.n	8002ba6 <ts_get_state+0x192>
 8002b8c:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <ts_get_state+0x224>)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	3320      	adds	r3, #32
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	82bb      	strh	r3, [r7, #20]

        if ((xDiff + yDiff) > 5)
 8002ba8:	8afa      	ldrh	r2, [r7, #22]
 8002baa:	8abb      	ldrh	r3, [r7, #20]
 8002bac:	4413      	add	r3, r2
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	dd15      	ble.n	8002bde <ts_get_state+0x1ca>
        {
        _x[index] = Raw_x[index];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	3320      	adds	r3, #32
 8002bb8:	443b      	add	r3, r7
 8002bba:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <ts_get_state+0x220>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	3320      	adds	r3, #32
 8002bce:	443b      	add	r3, r7
 8002bd0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <ts_get_state+0x224>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }


        ts_state->touchX[index] = _x[index];
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <ts_get_state+0x220>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	b299      	uxth	r1, r3
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	805a      	strh	r2, [r3, #2]
        ts_state->touchY[index] = _y[index];
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <ts_get_state+0x224>)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	b299      	uxth	r1, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	460a      	mov	r2, r1
 8002c08:	80da      	strh	r2, [r3, #6]
    for(index=0; index < ts_state->touchDetected; index++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	f4ff af15 	bcc.w	8002a48 <ts_get_state+0x34>

    } /* of for(index=0; index < ts_state->touchDetected; index++) */
    } /* end of if(ts_state->touchDetected != 0) */

    return (ts_status);
 8002c1e:	7efb      	ldrb	r3, [r7, #27]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3724      	adds	r7, #36	; 0x24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	20000268 	.word	0x20000268
 8002c2c:	2000026d 	.word	0x2000026d
 8002c30:	2000026c 	.word	0x2000026c
 8002c34:	2000027c 	.word	0x2000027c
 8002c38:	20000284 	.word	0x20000284

08002c3c <TS_IO_Init>:

/*********************************************************************************************
 * ft6x06 override
 */
void TS_IO_Init(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
    // MX_I2C1_Init();
    // HAL_GPIO_WritePin(GPIOB, TS_RST_Pin, GPIO_PIN_SET);
    return;
 8002c40:	bf00      	nop
}
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <TS_IO_Write>:

void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
 8002c56:	460b      	mov	r3, r1
 8002c58:	71bb      	strb	r3, [r7, #6]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Write(&hi2c1,
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	b299      	uxth	r1, r3
 8002c66:	79bb      	ldrb	r3, [r7, #6]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	1d7b      	adds	r3, r7, #5
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	4807      	ldr	r0, [pc, #28]	; (8002c98 <TS_IO_Write+0x4c>)
 8002c7a:	f002 fe1b 	bl	80058b4 <HAL_I2C_Mem_Write>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]
                            &Value,
                            1,
                            100);

    /* Check the communication status */
    if(status != HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <TS_IO_Write+0x44>
    {
        /* Execute user timeout callback */
        i2c1_error(Addr);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe ffa4 	bl	8001bd8 <i2c1_error>
    }
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000164 	.word	0x20000164

08002c9c <TS_IO_Read>:

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	71fb      	strb	r3, [r7, #7]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
    uint8_t Value = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Read(&hi2c1,
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	b299      	uxth	r1, r3
 8002cb8:	79bb      	ldrb	r3, [r7, #6]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc0:	9302      	str	r3, [sp, #8]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	f107 030e 	add.w	r3, r7, #14
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <TS_IO_Read+0x54>)
 8002cd0:	f002 feea 	bl	8005aa8 <HAL_I2C_Mem_Read>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
                            &Value,
                            1,
                            1000);

    /* Check the communication status */
    if(status != HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <TS_IO_Read+0x4a>
    {
        /* Execute user timeout callback */
        i2c1_error(Addr);
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe ff79 	bl	8001bd8 <i2c1_error>
    }
    return Value;
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000164 	.word	0x20000164

08002cf4 <TS_IO_ReadMultiple>:

uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	603a      	str	r2, [r7, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
 8002d02:	460b      	mov	r3, r1
 8002d04:	71bb      	strb	r3, [r7, #6]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Read(&hi2c1,
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	b299      	uxth	r1, r3
 8002d12:	79bb      	ldrb	r3, [r7, #6]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1a:	9302      	str	r3, [sp, #8]
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2301      	movs	r3, #1
 8002d26:	4809      	ldr	r0, [pc, #36]	; (8002d4c <TS_IO_ReadMultiple+0x58>)
 8002d28:	f002 febe 	bl	8005aa8 <HAL_I2C_Mem_Read>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
                        Buffer,
                        Length,
                        1000);

    /* Check the communication status */
    if(status != HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <TS_IO_ReadMultiple+0x4a>
    {
        /* I2C error occured */
        i2c1_error(Addr);
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe ff4d 	bl	8001bd8 <i2c1_error>
    }
    return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	b29b      	uxth	r3, r3
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000164 	.word	0x20000164

08002d50 <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4804      	ldr	r0, [pc, #16]	; (8002d78 <_write+0x28>)
 8002d68:	f006 fc8c 	bl	8009684 <HAL_UART_Transmit>
  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000490 	.word	0x20000490

08002d7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <MX_USART3_UART_Init+0x64>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db2:	480a      	ldr	r0, [pc, #40]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002db4:	f006 fc19 	bl	80095ea <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dbe:	f7ff fa59 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_USART3_UART_Init+0x68>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <MX_USART3_UART_Init+0x6c>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4802      	ldr	r0, [pc, #8]	; (8002ddc <MX_USART3_UART_Init+0x60>)
 8002dd4:	f006 fce8 	bl	80097a8 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000490 	.word	0x20000490
 8002de0:	40004800 	.word	0x40004800
 8002de4:	2000038c 	.word	0x2000038c
 8002de8:	2000028c 	.word	0x2000028c

08002dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_UART_MspInit+0x94>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d134      	bne.n	8002e78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <HAL_UART_MspInit+0x9c>)
 8002e64:	f002 f8e0 	bl	8005028 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2027      	movs	r0, #39	; 0x27
 8002e6e:	f000 fa76 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e72:	2027      	movs	r0, #39	; 0x27
 8002e74:	f000 fa8f 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40004800 	.word	0x40004800
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400

08002e8c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <HAL_UART_RxCpltCallback+0xec>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d167      	bne.n	8002f6e <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	2b0a      	cmp	r3, #10
 8002eac:	d007      	beq.n	8002ebe <HAL_UART_RxCpltCallback+0x32>
 8002eae:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002eb8:	5c9b      	ldrb	r3, [r3, r2]
 8002eba:	2b0d      	cmp	r3, #13
 8002ebc:	d111      	bne.n	8002ee2 <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_UART_RxCpltCallback+0xf8>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 8002ed8:	4929      	ldr	r1, [pc, #164]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002eda:	482b      	ldr	r0, [pc, #172]	; (8002f88 <HAL_UART_RxCpltCallback+0xfc>)
 8002edc:	f007 fdda 	bl	800aa94 <strcpy>
 8002ee0:	e03a      	b.n	8002f58 <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d11a      	bne.n	8002f28 <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	2203      	movs	r2, #3
 8002f06:	4921      	ldr	r1, [pc, #132]	; (8002f8c <HAL_UART_RxCpltCallback+0x100>)
 8002f08:	4821      	ldr	r0, [pc, #132]	; (8002f90 <HAL_UART_RxCpltCallback+0x104>)
 8002f0a:	f006 fbbb 	bl	8009684 <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	425a      	negs	r2, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	bf58      	it	pl
 8002f1e:	4253      	negpl	r3, r2
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	e017      	b.n	8002f58 <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002f32:	18d1      	adds	r1, r2, r3
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4815      	ldr	r0, [pc, #84]	; (8002f90 <HAL_UART_RxCpltCallback+0x104>)
 8002f3c:	f006 fba2 	bl	8009684 <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	425a      	negs	r2, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	bf58      	it	pl
 8002f50:	4253      	negpl	r3, r2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f56:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_UART_RxCpltCallback+0xf0>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_UART_RxCpltCallback+0xf4>)
 8002f62:	4413      	add	r3, r2
 8002f64:	2201      	movs	r2, #1
 8002f66:	4619      	mov	r1, r3
 8002f68:	4809      	ldr	r0, [pc, #36]	; (8002f90 <HAL_UART_RxCpltCallback+0x104>)
 8002f6a:	f006 fc1d 	bl	80097a8 <HAL_UART_Receive_IT>
    } 
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	2000038c 	.word	0x2000038c
 8002f80:	2000028c 	.word	0x2000028c
 8002f84:	2000038e 	.word	0x2000038e
 8002f88:	20000390 	.word	0x20000390
 8002f8c:	0800bf70 	.word	0x0800bf70
 8002f90:	20000490 	.word	0x20000490

08002f94 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  if (cmd_ready)
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <uart_check_cmd_recv+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <uart_check_cmd_recv+0x20>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <uart_check_cmd_recv+0x24>)
 8002faa:	f7fd fdbb 	bl	8000b24 <cli_process>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000038e 	.word	0x2000038e
 8002fb8:	20000390 	.word	0x20000390

08002fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd8:	4c0b      	ldr	r4, [pc, #44]	; (8003008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fe6:	f000 f813 	bl	8003010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fea:	f007 fc99 	bl	800a920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fee:	f7ff f895 	bl	800211c <main>
  bx  lr    
 8002ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ff4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003000:	080a2218 	.word	0x080a2218
  ldr r2, =_sbss
 8003004:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003008:	20000508 	.word	0x20000508

0800300c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC_IRQHandler>
	...

08003010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <SystemInit+0x20>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <SystemInit+0x20>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_Init+0x40>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_Init+0x40>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_Init+0x40>)
 800304a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_Init+0x40>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305c:	2003      	movs	r0, #3
 800305e:	f000 f973 	bl	8003348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003062:	2000      	movs	r0, #0
 8003064:	f000 f808 	bl	8003078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003068:	f7ff fb02 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00

08003078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x54>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x58>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f999 	bl	80033ce <HAL_SYSTICK_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00e      	b.n	80030c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d80a      	bhi.n	80030c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f000 f953 	bl	800335e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_InitTick+0x5c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	2000002c 	.word	0x2000002c
 80030d0:	20000034 	.word	0x20000034
 80030d4:	20000030 	.word	0x20000030

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000034 	.word	0x20000034
 80030fc:	200004d4 	.word	0x200004d4

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	200004d4 	.word	0x200004d4

08003118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d005      	beq.n	800313e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_Delay+0x44>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800313e:	bf00      	nop
 8003140:	f7ff ffde 	bl	8003100 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d8f7      	bhi.n	8003140 <HAL_Delay+0x28>
  {
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000034 	.word	0x20000034

08003160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800317c:	4013      	ands	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800318c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003192:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	60d3      	str	r3, [r2, #12]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	f003 0307 	and.w	r3, r3, #7
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	db0b      	blt.n	80031ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4907      	ldr	r1, [pc, #28]	; (80031fc <__NVIC_EnableIRQ+0x38>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2001      	movs	r0, #1
 80031e6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db12      	blt.n	8003238 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	490a      	ldr	r1, [pc, #40]	; (8003244 <__NVIC_DisableIRQ+0x44>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	3320      	adds	r3, #32
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800322c:	f3bf 8f4f 	dsb	sy
}
 8003230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003232:	f3bf 8f6f 	isb	sy
}
 8003236:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000e100 	.word	0xe000e100

08003248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	2b00      	cmp	r3, #0
 800325a:	db0a      	blt.n	8003272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	490c      	ldr	r1, [pc, #48]	; (8003294 <__NVIC_SetPriority+0x4c>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	440b      	add	r3, r1
 800326c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003270:	e00a      	b.n	8003288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4908      	ldr	r1, [pc, #32]	; (8003298 <__NVIC_SetPriority+0x50>)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	3b04      	subs	r3, #4
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	440b      	add	r3, r1
 8003286:	761a      	strb	r2, [r3, #24]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f1c3 0307 	rsb	r3, r3, #7
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf28      	it	cs
 80032ba:	2304      	movcs	r3, #4
 80032bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d902      	bls.n	80032cc <NVIC_EncodePriority+0x30>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3b03      	subs	r3, #3
 80032ca:	e000      	b.n	80032ce <NVIC_EncodePriority+0x32>
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e4:	f04f 31ff 	mov.w	r1, #4294967295
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	4313      	orrs	r3, r2
         );
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003314:	d301      	bcc.n	800331a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003316:	2301      	movs	r3, #1
 8003318:	e00f      	b.n	800333a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <SysTick_Config+0x40>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003322:	210f      	movs	r1, #15
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f7ff ff8e 	bl	8003248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <SysTick_Config+0x40>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <SysTick_Config+0x40>)
 8003334:	2207      	movs	r2, #7
 8003336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000e010 	.word	0xe000e010

08003348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ff05 	bl	8003160 <__NVIC_SetPriorityGrouping>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff1a 	bl	80031a8 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff8e 	bl	800329c <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5d 	bl	8003248 <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff0d 	bl	80031c4 <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff1d 	bl	8003200 <__NVIC_DisableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff94 	bl	8003304 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7ff fe84 	bl	8003100 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e052      	b.n	80034be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0216 	bic.w	r2, r2, #22
 8003426:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003436:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_DMA_Abort+0x62>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0208 	bic.w	r2, r2, #8
 8003456:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003468:	e013      	b.n	8003492 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346a:	f7ff fe49 	bl	8003100 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b05      	cmp	r3, #5
 8003476:	d90c      	bls.n	8003492 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2203      	movs	r2, #3
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e015      	b.n	80034be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e4      	bne.n	800346a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e00c      	b.n	80034fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2205      	movs	r2, #5
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003518:	b2db      	uxtb	r3, r3
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e03b      	b.n	80035b0 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fd fbb7 	bl	8000cc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	f023 0107 	bic.w	r1, r3, #7
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68d1      	ldr	r1, [r2, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA2D_Start+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e018      	b.n	8003606 <HAL_DMA2D_Start+0x4e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f988 	bl	8003904 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d056      	beq.n	80036d8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800362a:	f7ff fd69 	bl	8003100 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003630:	e04b      	b.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003640:	2b00      	cmp	r3, #0
 8003642:	d023      	beq.n	800368c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0a5      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d01a      	beq.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003694:	f7ff fd34 	bl	8003100 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <HAL_DMA2D_PollForTransfer+0x9c>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e086      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ac      	beq.n	8003632 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d061      	beq.n	80037be <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fa:	f7ff fd01 	bl	8003100 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003700:	e056      	b.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02e      	beq.n	8003772 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	f043 0204 	orr.w	r2, r3, #4
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f043 0202 	orr.w	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2229      	movs	r2, #41	; 0x29
 800375c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e032      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d01a      	beq.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7ff fcc1 	bl	8003100 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <HAL_DMA2D_PollForTransfer+0x182>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e013      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0a1      	beq.n	8003702 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2212      	movs	r2, #18
 80037c4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_DMA2D_ConfigLayer+0x20>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e079      	b.n	80038f4 <HAL_DMA2D_ConfigLayer+0x114>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	3318      	adds	r3, #24
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_DMA2D_ConfigLayer+0x120>)
 800382c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b0a      	cmp	r3, #10
 8003834:	d003      	beq.n	800383e <HAL_DMA2D_ConfigLayer+0x5e>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b09      	cmp	r3, #9
 800383c:	d107      	bne.n	800384e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e005      	b.n	800385a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d120      	bne.n	80038a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	ea02 0103 	and.w	r1, r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	430a      	orrs	r2, r1
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b0a      	cmp	r3, #10
 8003888:	d003      	beq.n	8003892 <HAL_DMA2D_ConfigLayer+0xb2>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b09      	cmp	r3, #9
 8003890:	d127      	bne.n	80038e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
 80038a0:	e01f      	b.n	80038e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	ea02 0103 	and.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b0a      	cmp	r3, #10
 80038ca:	d003      	beq.n	80038d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d106      	bne.n	80038e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80038e0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	ff03000f 	.word	0xff03000f

08003904 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003904:	b480      	push	{r7}
 8003906:	b08b      	sub	sp, #44	; 0x2c
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	041a      	lsls	r2, r3, #16
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393c:	d174      	bne.n	8003a28 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003944:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800394c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003954:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	431a      	orrs	r2, r3
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	4313      	orrs	r3, r2
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	e053      	b.n	8003a1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d106      	bne.n	800398c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4313      	orrs	r3, r2
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e048      	b.n	8003a1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d111      	bne.n	80039b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	0cdb      	lsrs	r3, r3, #19
 8003998:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	0a9b      	lsrs	r3, r3, #10
 800399e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08db      	lsrs	r3, r3, #3
 80039a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	02db      	lsls	r3, r3, #11
 80039ae:	4313      	orrs	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	e032      	b.n	8003a1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d117      	bne.n	80039f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	0fdb      	lsrs	r3, r3, #31
 80039c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	0cdb      	lsrs	r3, r3, #19
 80039ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	029b      	lsls	r3, r3, #10
 80039e0:	431a      	orrs	r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	03db      	lsls	r3, r3, #15
 80039e6:	4313      	orrs	r3, r2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	e016      	b.n	8003a1e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	0f1b      	lsrs	r3, r3, #28
 80039f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	0b1b      	lsrs	r3, r3, #12
 8003a00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	011a      	lsls	r2, r3, #4
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	431a      	orrs	r2, r3
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	4313      	orrs	r3, r2
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003a26:	e003      	b.n	8003a30 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	372c      	adds	r7, #44	; 0x2c
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	019a      	lsls	r2, r3, #6
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	431a      	orrs	r2, r3
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7c:	f7ff fb40 	bl	8003100 <HAL_GetTick>
 8003a80:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003a82:	e009      	b.n	8003a98 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003a84:	f7ff fb3c 	bl	8003100 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a92:	d901      	bls.n	8003a98 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e015      	b.n	8003ac4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ee      	beq.n	8003a84 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	019a      	lsls	r2, r3, #6
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	ea42 0103 	orr.w	r1, r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e10b      	b.n	8003cf8 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7c5b      	ldrb	r3, [r3, #17]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fa00 	bl	8000ef0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b0a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1e:	f7ff faef 	bl	8003100 <HAL_GetTick>
 8003b22:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b24:	e009      	b.n	8003b3a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b26:	f7ff faeb 	bl	8003100 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d901      	bls.n	8003b3a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0de      	b.n	8003cf8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ed      	beq.n	8003b26 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003b5a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003b5e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003b76:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003b7e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f7ff fab0 	bl	8003118 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb8:	f7ff faa2 	bl	8003100 <HAL_GetTick>
 8003bbc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003bbe:	e009      	b.n	8003bd4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003bc0:	f7ff fa9e 	bl	8003100 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bce:	d901      	bls.n	8003bd4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e091      	b.n	8003cf8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0206 	orr.w	r2, r2, #6
 8003bf4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0203 	bic.w	r2, r2, #3
 8003c08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0203 	bic.w	r2, r2, #3
 8003c36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_DSI_Init+0x1b4>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	e000      	b.n	8003c82 <HAL_DSI_Init+0x1b6>
 8003c80:	2301      	movs	r3, #1
 8003c82:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_DSI_Init+0x234>)
 8003c88:	fb03 f202 	mul.w	r2, r3, r2
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	409a      	lsls	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003cb8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	003d0900 	.word	0x003d0900

08003d04 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7c1b      	ldrb	r3, [r3, #16]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e0ab      	b.n	8003e72 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003d54:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003d58:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003d76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0202 	orr.w	r2, r2, #2
 8003db2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 020c 	orr.w	r2, r2, #12
 8003dd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0210 	orr.w	r2, r2, #16
 8003dee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0220 	orr.w	r2, r2, #32
 8003e0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003e66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00f      	beq.n	8003eb6 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8ad 	bl	8004010 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00f      	beq.n	8003ee6 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f89f 	bl	8004024 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 808c 	beq.w	8004008 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ef8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f10:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f043 0210 	orr.w	r2, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f818 	bl	8004038 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7c1b      	ldrb	r3, [r3, #16]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_DSI_SetGenericVCID+0x16>
 800405e:	2302      	movs	r3, #2
 8004060:	e016      	b.n	8004090 <HAL_DSI_SetGenericVCID+0x44>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0203 	bic.w	r2, r2, #3
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7c1b      	ldrb	r3, [r3, #16]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_DSI_ConfigVideoMode+0x16>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e1f6      	b.n	80044a0 <HAL_DSI_ConfigVideoMode+0x404>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0203 	bic.w	r2, r2, #3
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800410c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004110:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004132:	f023 031f 	bic.w	r3, r3, #31
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004158:	f023 031f 	bic.w	r3, r3, #31
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0203 	bic.w	r2, r2, #3
 800417e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0207 	bic.w	r2, r2, #7
 80041a0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6959      	ldr	r1, [r3, #20]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 020f 	bic.w	r2, r2, #15
 80041ce:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6919      	ldr	r1, [r3, #16]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020e 	bic.w	r2, r2, #14
 80041f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	005a      	lsls	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d110      	bne.n	8004238 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004224:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6919      	ldr	r1, [r3, #16]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800426c:	f023 030f 	bic.w	r3, r3, #15
 8004270:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004296:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042b8:	f023 0303 	bic.w	r3, r3, #3
 80042bc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004304:	f023 0303 	bic.w	r3, r3, #3
 8004308:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800432a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800432e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004372:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004396:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7c1b      	ldrb	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DSI_ConfigFlowControl+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e016      	b.n	80044f0 <HAL_DSI_ConfigFlowControl+0x44>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 021f 	bic.w	r2, r2, #31
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7c1b      	ldrb	r3, [r3, #16]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_DSI_ConfigPhyTimer+0x16>
 800450e:	2302      	movs	r3, #2
 8004510:	e058      	b.n	80045c4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4293      	cmp	r3, r2
 8004522:	bf38      	it	cc
 8004524:	4613      	movcc	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004538:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	041a      	lsls	r2, r3, #16
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7c1b      	ldrb	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e0b4      	b.n	8004750 <HAL_DSI_ConfigHostTimeouts+0x180>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045fa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b292      	uxth	r2, r2
 800461c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	041a      	lsls	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80046da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7c1b      	ldrb	r3, [r3, #16]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_DSI_Start+0x14>
 800476c:	2302      	movs	r3, #2
 800476e:	e02b      	b.n	80047c8 <HAL_DSI_Start+0x6c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0208 	orr.w	r2, r2, #8
 80047ac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7c1b      	ldrb	r3, [r3, #16]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_DSI_Stop+0x14>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e02b      	b.n	8004840 <HAL_DSI_Stop+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0208 	bic.w	r2, r2, #8
 8004824:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	7c1b      	ldrb	r3, [r3, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_DSI_ShortWrite+0x1a>
 8004862:	2302      	movs	r3, #2
 8004864:	e010      	b.n	8004888 <HAL_DSI_ShortWrite+0x3c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff f8f9 	bl	8003a6e <DSI_ShortWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	741a      	strb	r2, [r3, #16]

  return status;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	7c1b      	ldrb	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_DSI_LongWrite+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e084      	b.n	80049b8 <HAL_DSI_LongWrite+0x128>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80048b4:	f7fe fc24 	bl	8003100 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80048ba:	e00c      	b.n	80048d6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048bc:	f7fe fc20 	bl	8003100 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ca:	d904      	bls.n	80048d6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e070      	b.n	80049b8 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0eb      	beq.n	80048bc <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	bf28      	it	cs
 80048ee:	2303      	movcs	r3, #3
 80048f0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e00f      	b.n	8004918 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	4413      	add	r3, r2
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	3301      	adds	r3, #1
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	4313      	orrs	r3, r2
 8004910:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	3301      	adds	r3, #1
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d3eb      	bcc.n	80048f8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004938:	e028      	b.n	800498c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf28      	it	cs
 8004940:	2304      	movcs	r3, #4
 8004942:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	e00e      	b.n	800496c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	4313      	orrs	r3, r2
 8004964:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	3301      	adds	r3, #1
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	429a      	cmp	r2, r3
 8004972:	d3ec      	bcc.n	800494e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1d3      	bne.n	800493a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800499a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	f7ff f846 	bl	8003a3c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7c1b      	ldrb	r3, [r3, #16]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e01b      	b.n	8004a0e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80049ec:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	065a      	lsls	r2, r3, #25
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_FLASH_Program+0xa0>)
 8004a30:	7e1b      	ldrb	r3, [r3, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_FLASH_Program+0x1e>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e03b      	b.n	8004ab2 <HAL_FLASH_Program+0x96>
 8004a3a:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_FLASH_Program+0xa0>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a44:	f000 f870 	bl	8004b28 <FLASH_WaitForLastOperation>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d12b      	bne.n	8004aaa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004a58:	783b      	ldrb	r3, [r7, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68b8      	ldr	r0, [r7, #8]
 8004a5e:	f000 f91b 	bl	8004c98 <FLASH_Program_Byte>
 8004a62:	e016      	b.n	8004a92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004a6a:	883b      	ldrh	r3, [r7, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	f000 f8ee 	bl	8004c50 <FLASH_Program_HalfWord>
 8004a74:	e00d      	b.n	8004a92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d105      	bne.n	8004a88 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68b8      	ldr	r0, [r7, #8]
 8004a82:	f000 f8c3 	bl	8004c0c <FLASH_Program_Word>
 8004a86:	e004      	b.n	8004a92 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8c:	68b8      	ldr	r0, [r7, #8]
 8004a8e:	f000 f88b 	bl	8004ba8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a96:	f000 f847 	bl	8004b28 <FLASH_WaitForLastOperation>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_FLASH_Program+0xa4>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_FLASH_Program+0xa4>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004aaa:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_FLASH_Program+0xa0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200004d8 	.word	0x200004d8
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_FLASH_Unlock+0x38>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da0b      	bge.n	8004aee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_FLASH_Unlock+0x38>)
 8004ad8:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_FLASH_Unlock+0x3c>)
 8004ada:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <HAL_FLASH_Unlock+0x38>)
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <HAL_FLASH_Unlock+0x40>)
 8004ae0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_FLASH_Unlock+0x38>)
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da01      	bge.n	8004aee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004aee:	79fb      	ldrb	r3, [r7, #7]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40023c00 	.word	0x40023c00
 8004b00:	45670123 	.word	0x45670123
 8004b04:	cdef89ab 	.word	0xcdef89ab

08004b08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_FLASH_Lock+0x1c>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <HAL_FLASH_Lock+0x1c>)
 8004b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <FLASH_WaitForLastOperation+0x78>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b3a:	f7fe fae1 	bl	8003100 <HAL_GetTick>
 8004b3e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b40:	e010      	b.n	8004b64 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d00c      	beq.n	8004b64 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <FLASH_WaitForLastOperation+0x38>
 8004b50:	f7fe fad6 	bl	8003100 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d201      	bcs.n	8004b64 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e019      	b.n	8004b98 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <FLASH_WaitForLastOperation+0x7c>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e8      	bne.n	8004b42 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <FLASH_WaitForLastOperation+0x7c>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <FLASH_WaitForLastOperation+0x7c>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <FLASH_WaitForLastOperation+0x7c>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b8e:	f000 f8a5 	bl	8004cdc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
  
}  
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200004d8 	.word	0x200004d8
 8004ba4:	40023c00 	.word	0x40023c00

08004ba8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <FLASH_Program_DoubleWord+0x60>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004bde:	f3bf 8f6f 	isb	sy
}
 8004be2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	000a      	movs	r2, r1
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	3104      	adds	r1, #4
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40023c00 	.word	0x40023c00

08004c0c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4a06      	ldr	r2, [pc, #24]	; (8004c4c <FLASH_Program_Word+0x40>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	4a06      	ldr	r2, [pc, #24]	; (8004c94 <FLASH_Program_HalfWord+0x44>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	801a      	strh	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023c00 	.word	0x40023c00

08004c98 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <FLASH_Program_Byte+0x40>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	701a      	strb	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00

08004cdc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ce0:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004cec:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f043 0310 	orr.w	r3, r3, #16
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004cf6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f043 0308 	orr.w	r3, r3, #8
 8004d12:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d14:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d16:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d18:	2220      	movs	r2, #32
 8004d1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d1c:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004d34:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004d46:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f043 0302 	orr.w	r3, r3, #2
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d50:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004d58:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d76:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f043 0320 	orr.w	r3, r3, #32
 8004d8c:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <FLASH_SetErrorCode+0xc8>)
 8004d8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <FLASH_SetErrorCode+0xc4>)
 8004d92:	2202      	movs	r2, #2
 8004d94:	60da      	str	r2, [r3, #12]
  }
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40023c00 	.word	0x40023c00
 8004da4:	200004d8 	.word	0x200004d8

08004da8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004dba:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_FLASHEx_Erase+0xdc>)
 8004dbc:	7e1b      	ldrb	r3, [r3, #24]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_FLASHEx_Erase+0x1e>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e05a      	b.n	8004e7c <HAL_FLASHEx_Erase+0xd4>
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_FLASHEx_Erase+0xdc>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004dcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dd0:	f7ff feaa 	bl	8004b28 <FLASH_WaitForLastOperation>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d14a      	bne.n	8004e74 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d117      	bne.n	8004e1e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f000 f846 	bl	8004e8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e04:	f7ff fe90 	bl	8004b28 <FLASH_WaitForLastOperation>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_FLASHEx_Erase+0xe0>)
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <HAL_FLASHEx_Erase+0xe0>)
 8004e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	6113      	str	r3, [r2, #16]
 8004e1c:	e028      	b.n	8004e70 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	e01c      	b.n	8004e60 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f000 f866 	bl	8004f00 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e38:	f7ff fe76 	bl	8004b28 <FLASH_WaitForLastOperation>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_FLASHEx_Erase+0xe0>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_FLASHEx_Erase+0xe0>)
 8004e46:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004e4a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	601a      	str	r2, [r3, #0]
          break;
 8004e58:	e00a      	b.n	8004e70 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d3da      	bcc.n	8004e26 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004e70:	f000 f894 	bl	8004f9c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <HAL_FLASHEx_Erase+0xdc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	761a      	strb	r2, [r3, #24]

  return status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200004d8 	.word	0x200004d8
 8004e88:	40023c00 	.word	0x40023c00

08004e8c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	6039      	str	r1, [r7, #0]
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <FLASH_MassErase+0x70>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <FLASH_MassErase+0x70>)
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d108      	bne.n	8004ebc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <FLASH_MassErase+0x70>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <FLASH_MassErase+0x70>)
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6113      	str	r3, [r2, #16]
 8004eba:	e00f      	b.n	8004edc <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d106      	bne.n	8004ed0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <FLASH_MassErase+0x70>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <FLASH_MassErase+0x70>)
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	6113      	str	r3, [r2, #16]
 8004ece:	e005      	b.n	8004edc <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <FLASH_MassErase+0x70>)
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	4a09      	ldr	r2, [pc, #36]	; (8004efc <FLASH_MassErase+0x70>)
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eda:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004edc:	4b07      	ldr	r3, [pc, #28]	; (8004efc <FLASH_MassErase+0x70>)
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <FLASH_MassErase+0x70>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6113      	str	r3, [r2, #16]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40023c00 	.word	0x40023c00

08004f00 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e010      	b.n	8004f3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d103      	bne.n	8004f2a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e009      	b.n	8004f3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d103      	bne.n	8004f38 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e002      	b.n	8004f3e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b0b      	cmp	r3, #11
 8004f42:	d902      	bls.n	8004f4a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	490f      	ldr	r1, [pc, #60]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4313      	orrs	r3, r2
 8004f78:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <FLASH_Erase_Sector+0x98>)
 8004f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8a:	6113      	str	r3, [r2, #16]
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40023c00 	.word	0x40023c00

08004f9c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a16      	ldr	r2, [pc, #88]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fda:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <FLASH_FlushCaches+0x88>)
 8004ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <FLASH_FlushCaches+0x88>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a07      	ldr	r2, [pc, #28]	; (8005024 <FLASH_FlushCaches+0x88>)
 8005006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <FLASH_FlushCaches+0x88>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <FLASH_FlushCaches+0x88>)
 8005012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005016:	6013      	str	r3, [r2, #0]
  }
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023c00 	.word	0x40023c00

08005028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005028:	b480      	push	{r7}
 800502a:	b089      	sub	sp, #36	; 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e177      	b.n	8005334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4013      	ands	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	f040 8166 	bne.w	800532e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d005      	beq.n	800507a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005076:	2b02      	cmp	r3, #2
 8005078:	d130      	bne.n	80050dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b0:	2201      	movs	r2, #1
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 0201 	and.w	r2, r3, #1
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d017      	beq.n	8005118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d123      	bne.n	800516c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	08da      	lsrs	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3208      	adds	r2, #8
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	220f      	movs	r2, #15
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	08da      	lsrs	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3208      	adds	r2, #8
 8005166:	69b9      	ldr	r1, [r7, #24]
 8005168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	2203      	movs	r2, #3
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0203 	and.w	r2, r3, #3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80c0 	beq.w	800532e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	4b66      	ldr	r3, [pc, #408]	; (800534c <HAL_GPIO_Init+0x324>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	4a65      	ldr	r2, [pc, #404]	; (800534c <HAL_GPIO_Init+0x324>)
 80051b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051bc:	6453      	str	r3, [r2, #68]	; 0x44
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_GPIO_Init+0x324>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ca:	4a61      	ldr	r2, [pc, #388]	; (8005350 <HAL_GPIO_Init+0x328>)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	3302      	adds	r3, #2
 80051d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	220f      	movs	r2, #15
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a58      	ldr	r2, [pc, #352]	; (8005354 <HAL_GPIO_Init+0x32c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d037      	beq.n	8005266 <HAL_GPIO_Init+0x23e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_GPIO_Init+0x330>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d031      	beq.n	8005262 <HAL_GPIO_Init+0x23a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a56      	ldr	r2, [pc, #344]	; (800535c <HAL_GPIO_Init+0x334>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02b      	beq.n	800525e <HAL_GPIO_Init+0x236>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a55      	ldr	r2, [pc, #340]	; (8005360 <HAL_GPIO_Init+0x338>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d025      	beq.n	800525a <HAL_GPIO_Init+0x232>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a54      	ldr	r2, [pc, #336]	; (8005364 <HAL_GPIO_Init+0x33c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <HAL_GPIO_Init+0x22e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_GPIO_Init+0x340>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d019      	beq.n	8005252 <HAL_GPIO_Init+0x22a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a52      	ldr	r2, [pc, #328]	; (800536c <HAL_GPIO_Init+0x344>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_GPIO_Init+0x226>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a51      	ldr	r2, [pc, #324]	; (8005370 <HAL_GPIO_Init+0x348>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00d      	beq.n	800524a <HAL_GPIO_Init+0x222>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a50      	ldr	r2, [pc, #320]	; (8005374 <HAL_GPIO_Init+0x34c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <HAL_GPIO_Init+0x21e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a4f      	ldr	r2, [pc, #316]	; (8005378 <HAL_GPIO_Init+0x350>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <HAL_GPIO_Init+0x21a>
 800523e:	2309      	movs	r3, #9
 8005240:	e012      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005242:	230a      	movs	r3, #10
 8005244:	e010      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005246:	2308      	movs	r3, #8
 8005248:	e00e      	b.n	8005268 <HAL_GPIO_Init+0x240>
 800524a:	2307      	movs	r3, #7
 800524c:	e00c      	b.n	8005268 <HAL_GPIO_Init+0x240>
 800524e:	2306      	movs	r3, #6
 8005250:	e00a      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005252:	2305      	movs	r3, #5
 8005254:	e008      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005256:	2304      	movs	r3, #4
 8005258:	e006      	b.n	8005268 <HAL_GPIO_Init+0x240>
 800525a:	2303      	movs	r3, #3
 800525c:	e004      	b.n	8005268 <HAL_GPIO_Init+0x240>
 800525e:	2302      	movs	r3, #2
 8005260:	e002      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_GPIO_Init+0x240>
 8005266:	2300      	movs	r3, #0
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	f002 0203 	and.w	r2, r2, #3
 800526e:	0092      	lsls	r2, r2, #2
 8005270:	4093      	lsls	r3, r2
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005278:	4935      	ldr	r1, [pc, #212]	; (8005350 <HAL_GPIO_Init+0x328>)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	3302      	adds	r3, #2
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005286:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_GPIO_Init+0x354>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052aa:	4a34      	ldr	r2, [pc, #208]	; (800537c <HAL_GPIO_Init+0x354>)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <HAL_GPIO_Init+0x354>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052d4:	4a29      	ldr	r2, [pc, #164]	; (800537c <HAL_GPIO_Init+0x354>)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052da:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_GPIO_Init+0x354>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052fe:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_GPIO_Init+0x354>)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005304:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_GPIO_Init+0x354>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <HAL_GPIO_Init+0x354>)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	f67f ae84 	bls.w	8005044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	3724      	adds	r7, #36	; 0x24
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800
 8005350:	40013800 	.word	0x40013800
 8005354:	40020000 	.word	0x40020000
 8005358:	40020400 	.word	0x40020400
 800535c:	40020800 	.word	0x40020800
 8005360:	40020c00 	.word	0x40020c00
 8005364:	40021000 	.word	0x40021000
 8005368:	40021400 	.word	0x40021400
 800536c:	40021800 	.word	0x40021800
 8005370:	40021c00 	.word	0x40021c00
 8005374:	40022000 	.word	0x40022000
 8005378:	40022400 	.word	0x40022400
 800537c:	40013c00 	.word	0x40013c00

08005380 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e0d9      	b.n	8005550 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800539c:	2201      	movs	r2, #1
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f040 80c9 	bne.w	800554a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80053b8:	4a6b      	ldr	r2, [pc, #428]	; (8005568 <HAL_GPIO_DeInit+0x1e8>)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	3302      	adds	r3, #2
 80053c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	220f      	movs	r2, #15
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a63      	ldr	r2, [pc, #396]	; (800556c <HAL_GPIO_DeInit+0x1ec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d037      	beq.n	8005452 <HAL_GPIO_DeInit+0xd2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a62      	ldr	r2, [pc, #392]	; (8005570 <HAL_GPIO_DeInit+0x1f0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d031      	beq.n	800544e <HAL_GPIO_DeInit+0xce>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a61      	ldr	r2, [pc, #388]	; (8005574 <HAL_GPIO_DeInit+0x1f4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d02b      	beq.n	800544a <HAL_GPIO_DeInit+0xca>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a60      	ldr	r2, [pc, #384]	; (8005578 <HAL_GPIO_DeInit+0x1f8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d025      	beq.n	8005446 <HAL_GPIO_DeInit+0xc6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a5f      	ldr	r2, [pc, #380]	; (800557c <HAL_GPIO_DeInit+0x1fc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d01f      	beq.n	8005442 <HAL_GPIO_DeInit+0xc2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <HAL_GPIO_DeInit+0x200>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d019      	beq.n	800543e <HAL_GPIO_DeInit+0xbe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a5d      	ldr	r2, [pc, #372]	; (8005584 <HAL_GPIO_DeInit+0x204>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_GPIO_DeInit+0xba>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a5c      	ldr	r2, [pc, #368]	; (8005588 <HAL_GPIO_DeInit+0x208>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00d      	beq.n	8005436 <HAL_GPIO_DeInit+0xb6>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a5b      	ldr	r2, [pc, #364]	; (800558c <HAL_GPIO_DeInit+0x20c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d007      	beq.n	8005432 <HAL_GPIO_DeInit+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_GPIO_DeInit+0x210>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d101      	bne.n	800542e <HAL_GPIO_DeInit+0xae>
 800542a:	2309      	movs	r3, #9
 800542c:	e012      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 800542e:	230a      	movs	r3, #10
 8005430:	e010      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 8005432:	2308      	movs	r3, #8
 8005434:	e00e      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 8005436:	2307      	movs	r3, #7
 8005438:	e00c      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 800543a:	2306      	movs	r3, #6
 800543c:	e00a      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 800543e:	2305      	movs	r3, #5
 8005440:	e008      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 8005442:	2304      	movs	r3, #4
 8005444:	e006      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 8005446:	2303      	movs	r3, #3
 8005448:	e004      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 800544a:	2302      	movs	r3, #2
 800544c:	e002      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_GPIO_DeInit+0xd4>
 8005452:	2300      	movs	r3, #0
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	f002 0203 	and.w	r2, r2, #3
 800545a:	0092      	lsls	r2, r2, #2
 800545c:	4093      	lsls	r3, r2
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	d132      	bne.n	80054ca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005464:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	43db      	mvns	r3, r3
 800546c:	4949      	ldr	r1, [pc, #292]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 800546e:	4013      	ands	r3, r2
 8005470:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005472:	4b48      	ldr	r3, [pc, #288]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	43db      	mvns	r3, r3
 800547a:	4946      	ldr	r1, [pc, #280]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 800547c:	4013      	ands	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005480:	4b44      	ldr	r3, [pc, #272]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	43db      	mvns	r3, r3
 8005488:	4942      	ldr	r1, [pc, #264]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 800548a:	4013      	ands	r3, r2
 800548c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	43db      	mvns	r3, r3
 8005496:	493f      	ldr	r1, [pc, #252]	; (8005594 <HAL_GPIO_DeInit+0x214>)
 8005498:	4013      	ands	r3, r2
 800549a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	220f      	movs	r2, #15
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80054ac:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <HAL_GPIO_DeInit+0x1e8>)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3302      	adds	r3, #2
 80054b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	43da      	mvns	r2, r3
 80054bc:	482a      	ldr	r0, [pc, #168]	; (8005568 <HAL_GPIO_DeInit+0x1e8>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	400a      	ands	r2, r1
 80054c4:	3302      	adds	r3, #2
 80054c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2103      	movs	r1, #3
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	401a      	ands	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	08da      	lsrs	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3208      	adds	r2, #8
 80054e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	220f      	movs	r2, #15
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	08d2      	lsrs	r2, r2, #3
 8005500:	4019      	ands	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2103      	movs	r1, #3
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	2101      	movs	r1, #1
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	401a      	ands	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2103      	movs	r1, #3
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	401a      	ands	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	f67f af22 	bls.w	800539c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40013800 	.word	0x40013800
 800556c:	40020000 	.word	0x40020000
 8005570:	40020400 	.word	0x40020400
 8005574:	40020800 	.word	0x40020800
 8005578:	40020c00 	.word	0x40020c00
 800557c:	40021000 	.word	0x40021000
 8005580:	40021400 	.word	0x40021400
 8005584:	40021800 	.word	0x40021800
 8005588:	40021c00 	.word	0x40021c00
 800558c:	40022000 	.word	0x40022000
 8005590:	40022400 	.word	0x40022400
 8005594:	40013c00 	.word	0x40013c00

08005598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
 80055a4:	4613      	mov	r3, r2
 80055a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055a8:	787b      	ldrb	r3, [r7, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055b4:	e003      	b.n	80055be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	041a      	lsls	r2, r3, #16
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	619a      	str	r2, [r3, #24]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e12b      	b.n	8005836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fa3e 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800562e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005630:	f003 fa3c 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 8005634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a81      	ldr	r2, [pc, #516]	; (8005840 <HAL_I2C_Init+0x274>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d807      	bhi.n	8005650 <HAL_I2C_Init+0x84>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a80      	ldr	r2, [pc, #512]	; (8005844 <HAL_I2C_Init+0x278>)
 8005644:	4293      	cmp	r3, r2
 8005646:	bf94      	ite	ls
 8005648:	2301      	movls	r3, #1
 800564a:	2300      	movhi	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e006      	b.n	800565e <HAL_I2C_Init+0x92>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a7d      	ldr	r2, [pc, #500]	; (8005848 <HAL_I2C_Init+0x27c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	bf94      	ite	ls
 8005658:	2301      	movls	r3, #1
 800565a:	2300      	movhi	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0e7      	b.n	8005836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a78      	ldr	r2, [pc, #480]	; (800584c <HAL_I2C_Init+0x280>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0c9b      	lsrs	r3, r3, #18
 8005670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a6a      	ldr	r2, [pc, #424]	; (8005840 <HAL_I2C_Init+0x274>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d802      	bhi.n	80056a0 <HAL_I2C_Init+0xd4>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	3301      	adds	r3, #1
 800569e:	e009      	b.n	80056b4 <HAL_I2C_Init+0xe8>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	4a69      	ldr	r2, [pc, #420]	; (8005850 <HAL_I2C_Init+0x284>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	3301      	adds	r3, #1
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	495c      	ldr	r1, [pc, #368]	; (8005840 <HAL_I2C_Init+0x274>)
 80056d0:	428b      	cmp	r3, r1
 80056d2:	d819      	bhi.n	8005708 <HAL_I2C_Init+0x13c>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1e59      	subs	r1, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056e8:	400b      	ands	r3, r1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_I2C_Init+0x138>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1e59      	subs	r1, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80056fc:	3301      	adds	r3, #1
 80056fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005702:	e051      	b.n	80057a8 <HAL_I2C_Init+0x1dc>
 8005704:	2304      	movs	r3, #4
 8005706:	e04f      	b.n	80057a8 <HAL_I2C_Init+0x1dc>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d111      	bne.n	8005734 <HAL_I2C_Init+0x168>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1e58      	subs	r0, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	440b      	add	r3, r1
 800571e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005722:	3301      	adds	r3, #1
 8005724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005728:	2b00      	cmp	r3, #0
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e012      	b.n	800575a <HAL_I2C_Init+0x18e>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1e58      	subs	r0, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	0099      	lsls	r1, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	fbb0 f3f3 	udiv	r3, r0, r3
 800574a:	3301      	adds	r3, #1
 800574c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_I2C_Init+0x196>
 800575e:	2301      	movs	r3, #1
 8005760:	e022      	b.n	80057a8 <HAL_I2C_Init+0x1dc>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10e      	bne.n	8005788 <HAL_I2C_Init+0x1bc>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1e58      	subs	r0, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	440b      	add	r3, r1
 8005778:	fbb0 f3f3 	udiv	r3, r0, r3
 800577c:	3301      	adds	r3, #1
 800577e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	e00f      	b.n	80057a8 <HAL_I2C_Init+0x1dc>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1e58      	subs	r0, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	0099      	lsls	r1, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	fbb0 f3f3 	udiv	r3, r0, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	6809      	ldr	r1, [r1, #0]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6911      	ldr	r1, [r2, #16]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	4311      	orrs	r1, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	000186a0 	.word	0x000186a0
 8005844:	001e847f 	.word	0x001e847f
 8005848:	003d08ff 	.word	0x003d08ff
 800584c:	431bde83 	.word	0x431bde83
 8005850:	10624dd3 	.word	0x10624dd3

08005854 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e021      	b.n	80058aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2224      	movs	r2, #36	; 0x24
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc f980 	bl	8001b84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	817b      	strh	r3, [r7, #10]
 80058c6:	460b      	mov	r3, r1
 80058c8:	813b      	strh	r3, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ce:	f7fd fc17 	bl	8003100 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b20      	cmp	r3, #32
 80058de:	f040 80d9 	bne.w	8005a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2319      	movs	r3, #25
 80058e8:	2201      	movs	r2, #1
 80058ea:	496d      	ldr	r1, [pc, #436]	; (8005aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f002 f90d 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0cc      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_I2C_Mem_Write+0x56>
 8005906:	2302      	movs	r3, #2
 8005908:	e0c5      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d007      	beq.n	8005930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2221      	movs	r2, #33	; 0x21
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a4d      	ldr	r2, [pc, #308]	; (8005aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8005970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005972:	88f8      	ldrh	r0, [r7, #6]
 8005974:	893a      	ldrh	r2, [r7, #8]
 8005976:	8979      	ldrh	r1, [r7, #10]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	4603      	mov	r3, r0
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f001 fe9c 	bl	80076c0 <I2C_RequestMemoryWrite>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d052      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e081      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f002 f98e 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d107      	bne.n	80059ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e06b      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d11b      	bne.n	8005a34 <HAL_I2C_Mem_Write+0x180>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1aa      	bne.n	8005992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f002 f97a 	bl	8007d3a <I2C_WaitOnBTFFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e016      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	00100002 	.word	0x00100002
 8005aa4:	ffff0000 	.word	0xffff0000

08005aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	817b      	strh	r3, [r7, #10]
 8005aba:	460b      	mov	r3, r1
 8005abc:	813b      	strh	r3, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ac2:	f7fd fb1d 	bl	8003100 <HAL_GetTick>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	f040 8208 	bne.w	8005ee6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2319      	movs	r3, #25
 8005adc:	2201      	movs	r2, #1
 8005ade:	497b      	ldr	r1, [pc, #492]	; (8005ccc <HAL_I2C_Mem_Read+0x224>)
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f002 f813 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
 8005aee:	e1fb      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_I2C_Mem_Read+0x56>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e1f4      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d007      	beq.n	8005b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2222      	movs	r2, #34	; 0x22
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a5b      	ldr	r2, [pc, #364]	; (8005cd0 <HAL_I2C_Mem_Read+0x228>)
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b66:	88f8      	ldrh	r0, [r7, #6]
 8005b68:	893a      	ldrh	r2, [r7, #8]
 8005b6a:	8979      	ldrh	r1, [r7, #10]
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4603      	mov	r3, r0
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 fe38 	bl	80077ec <I2C_RequestMemoryRead>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1b0      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d113      	bne.n	8005bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e184      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d11b      	bne.n	8005bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e164      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d11b      	bne.n	8005c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	e144      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c4c:	e138      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	f200 80f1 	bhi.w	8005e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d123      	bne.n	8005ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f002 f8db 	bl	8007e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e139      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ca6:	e10b      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d14e      	bne.n	8005d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <HAL_I2C_Mem_Read+0x22c>)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 ff26 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e10e      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
 8005cca:	bf00      	nop
 8005ccc:	00100002 	.word	0x00100002
 8005cd0:	ffff0000 	.word	0xffff0000
 8005cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d4c:	e0b8      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	4966      	ldr	r1, [pc, #408]	; (8005ef0 <HAL_I2C_Mem_Read+0x448>)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f001 fed7 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0bf      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2200      	movs	r2, #0
 8005db2:	494f      	ldr	r1, [pc, #316]	; (8005ef0 <HAL_I2C_Mem_Read+0x448>)
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f001 fea9 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e091      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e38:	e042      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 ffee 	bl	8007e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e04c      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d118      	bne.n	8005ec0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f aec2 	bne.w	8005c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	00010004 	.word	0x00010004

08005ef4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d003      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x38>
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	f040 80c1 	bne.w	80060ae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10d      	bne.n	8005f62 <HAL_I2C_EV_IRQHandler+0x6e>
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f4c:	d003      	beq.n	8005f56 <HAL_I2C_EV_IRQHandler+0x62>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_EV_IRQHandler+0x66>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_I2C_EV_IRQHandler+0x68>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f000 8132 	beq.w	80061c6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x92>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	0a5b      	lsrs	r3, r3, #9
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d006      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 ffd6 	bl	8007f2a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fd83 	bl	8006a8a <I2C_Master_SB>
 8005f84:	e092      	b.n	80060ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	08db      	lsrs	r3, r3, #3
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	0a5b      	lsrs	r3, r3, #9
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fdf9 	bl	8006b96 <I2C_Master_ADD10>
 8005fa4:	e082      	b.n	80060ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <HAL_I2C_EV_IRQHandler+0xd2>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	0a5b      	lsrs	r3, r3, #9
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fe13 	bl	8006bea <I2C_Master_ADDR>
 8005fc4:	e072      	b.n	80060ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d03b      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe0:	f000 80f3 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	0a9b      	lsrs	r3, r3, #10
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9f3 	bl	80063f4 <I2C_MasterTransmit_TXE>
 800600e:	e04d      	b.n	80060ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80d6 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	0a5b      	lsrs	r3, r3, #9
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80cf 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b21      	cmp	r3, #33	; 0x21
 8006030:	d103      	bne.n	800603a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa7a 	bl	800652c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006038:	e0c7      	b.n	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	f040 80c4 	bne.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fae8 	bl	8006618 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006048:	e0bf      	b.n	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006058:	f000 80b7 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	099b      	lsrs	r3, r3, #6
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00f      	beq.n	8006088 <HAL_I2C_EV_IRQHandler+0x194>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	0a9b      	lsrs	r3, r3, #10
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_I2C_EV_IRQHandler+0x194>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	089b      	lsrs	r3, r3, #2
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb5d 	bl	8006740 <I2C_MasterReceive_RXNE>
 8006086:	e011      	b.n	80060ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 809a 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	0a5b      	lsrs	r3, r3, #9
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8093 	beq.w	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fc06 	bl	80068b6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060aa:	e08e      	b.n	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
 80060ac:	e08d      	b.n	80061ca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	e007      	b.n	80060d0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <HAL_I2C_EV_IRQHandler+0x20e>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	0a5b      	lsrs	r3, r3, #9
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 ffc4 	bl	8007088 <I2C_Slave_ADDR>
 8006100:	e066      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_I2C_EV_IRQHandler+0x22e>
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	0a5b      	lsrs	r3, r3, #9
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fffe 	bl	800711c <I2C_Slave_STOPF>
 8006120:	e056      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b21      	cmp	r3, #33	; 0x21
 8006126:	d002      	beq.n	800612e <HAL_I2C_EV_IRQHandler+0x23a>
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b29      	cmp	r3, #41	; 0x29
 800612c:	d125      	bne.n	800617a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	09db      	lsrs	r3, r3, #7
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00f      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0x266>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	0a9b      	lsrs	r3, r3, #10
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0x266>
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	089b      	lsrs	r3, r3, #2
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 feda 	bl	8006f0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006158:	e039      	b.n	80061ce <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d033      	beq.n	80061ce <HAL_I2C_EV_IRQHandler+0x2da>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d02d      	beq.n	80061ce <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 ff07 	bl	8006f86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006178:	e029      	b.n	80061ce <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	099b      	lsrs	r3, r3, #6
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	0a9b      	lsrs	r3, r3, #10
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 ff12 	bl	8006fc8 <I2C_SlaveReceive_RXNE>
 80061a4:	e014      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	089b      	lsrs	r3, r3, #2
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00e      	beq.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 ff40 	bl	8007044 <I2C_SlaveReceive_BTF>
 80061c4:	e004      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b08a      	sub	sp, #40	; 0x28
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <HAL_I2C_ER_IRQHandler+0x4e>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006222:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	0a5b      	lsrs	r3, r3, #9
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x78>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	f043 0302 	orr.w	r3, r3, #2
 8006242:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800624c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	0a9b      	lsrs	r3, r3, #10
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d03f      	beq.n	80062da <HAL_I2C_ER_IRQHandler+0x104>
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d039      	beq.n	80062da <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006266:	7efb      	ldrb	r3, [r7, #27]
 8006268:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626e:	b29b      	uxth	r3, r3
 8006270:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006280:	7ebb      	ldrb	r3, [r7, #26]
 8006282:	2b20      	cmp	r3, #32
 8006284:	d112      	bne.n	80062ac <HAL_I2C_ER_IRQHandler+0xd6>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10f      	bne.n	80062ac <HAL_I2C_ER_IRQHandler+0xd6>
 800628c:	7cfb      	ldrb	r3, [r7, #19]
 800628e:	2b21      	cmp	r3, #33	; 0x21
 8006290:	d008      	beq.n	80062a4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	2b29      	cmp	r3, #41	; 0x29
 8006296:	d005      	beq.n	80062a4 <HAL_I2C_ER_IRQHandler+0xce>
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b28      	cmp	r3, #40	; 0x28
 800629c:	d106      	bne.n	80062ac <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b21      	cmp	r3, #33	; 0x21
 80062a2:	d103      	bne.n	80062ac <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f869 	bl	800737c <I2C_Slave_AF>
 80062aa:	e016      	b.n	80062da <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062b4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062be:	7efb      	ldrb	r3, [r7, #27]
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d002      	beq.n	80062ca <HAL_I2C_ER_IRQHandler+0xf4>
 80062c4:	7efb      	ldrb	r3, [r7, #27]
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d107      	bne.n	80062da <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	0adb      	lsrs	r3, r3, #11
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <HAL_I2C_ER_IRQHandler+0x12e>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	f043 0308 	orr.w	r3, r3, #8
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006302:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 f8a0 	bl	800745c <I2C_ITError>
  }
}
 800631c:	bf00      	nop
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
 8006380:	4613      	mov	r3, r2
 8006382:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006402:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800640a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d150      	bne.n	80064bc <I2C_MasterTransmit_TXE+0xc8>
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b21      	cmp	r3, #33	; 0x21
 800641e:	d14d      	bne.n	80064bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b08      	cmp	r3, #8
 8006424:	d01d      	beq.n	8006462 <I2C_MasterTransmit_TXE+0x6e>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b20      	cmp	r3, #32
 800642a:	d01a      	beq.n	8006462 <I2C_MasterTransmit_TXE+0x6e>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006432:	d016      	beq.n	8006462 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006442:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2211      	movs	r2, #17
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff ff62 	bl	8006324 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006460:	e060      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006470:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006480:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d107      	bne.n	80064ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff7d 	bl	80063a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064aa:	e03b      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff35 	bl	8006324 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064ba:	e033      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b21      	cmp	r3, #33	; 0x21
 80064c0:	d005      	beq.n	80064ce <I2C_MasterTransmit_TXE+0xda>
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d12d      	bne.n	8006524 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b22      	cmp	r3, #34	; 0x22
 80064cc:	d12a      	bne.n	8006524 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d108      	bne.n	80064ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80064e8:	e01c      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d103      	bne.n	80064fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f88e 	bl	8006618 <I2C_MemoryTransmit_TXE_BTF>
}
 80064fc:	e012      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006522:	e7ff      	b.n	8006524 <I2C_MasterTransmit_TXE+0x130>
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b21      	cmp	r3, #33	; 0x21
 8006544:	d164      	bne.n	8006610 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d012      	beq.n	8006576 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006574:	e04c      	b.n	8006610 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d01d      	beq.n	80065b8 <I2C_MasterTransmit_BTF+0x8c>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b20      	cmp	r3, #32
 8006580:	d01a      	beq.n	80065b8 <I2C_MasterTransmit_BTF+0x8c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006588:	d016      	beq.n	80065b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006598:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2211      	movs	r2, #17
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff feb7 	bl	8006324 <HAL_I2C_MasterTxCpltCallback>
}
 80065b6:	e02b      	b.n	8006610 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d107      	bne.n	8006602 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fed2 	bl	80063a4 <HAL_I2C_MemTxCpltCallback>
}
 8006600:	e006      	b.n	8006610 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fe8a 	bl	8006324 <HAL_I2C_MasterTxCpltCallback>
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006626:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11d      	bne.n	800666c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d10b      	bne.n	8006650 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	b2da      	uxtb	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800664e:	e073      	b.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006654:	b29b      	uxth	r3, r3
 8006656:	121b      	asrs	r3, r3, #8
 8006658:	b2da      	uxtb	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
}
 800666a:	e065      	b.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10b      	bne.n	800668c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006678:	b2da      	uxtb	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	651a      	str	r2, [r3, #80]	; 0x50
}
 800668a:	e055      	b.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006690:	2b02      	cmp	r3, #2
 8006692:	d151      	bne.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b22      	cmp	r3, #34	; 0x22
 8006698:	d10d      	bne.n	80066b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066b4:	e040      	b.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d015      	beq.n	80066ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b21      	cmp	r3, #33	; 0x21
 80066c4:	d112      	bne.n	80066ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066ea:	e025      	b.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d120      	bne.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b21      	cmp	r3, #33	; 0x21
 80066fa:	d11d      	bne.n	8006738 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800670a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800671a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fe36 	bl	80063a4 <HAL_I2C_MemTxCpltCallback>
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b22      	cmp	r3, #34	; 0x22
 8006752:	f040 80ac 	bne.w	80068ae <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d921      	bls.n	80067a8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b03      	cmp	r3, #3
 8006792:	f040 808c 	bne.w	80068ae <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80067a6:	e082      	b.n	80068ae <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d075      	beq.n	800689c <I2C_MasterReceive_RXNE+0x15c>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d002      	beq.n	80067bc <I2C_MasterReceive_RXNE+0x7c>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d16f      	bne.n	800689c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fafd 	bl	8007dbc <I2C_WaitOnSTOPRequestThroughIT>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d142      	bne.n	800684e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d10a      	bne.n	8006838 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fdc1 	bl	80063b8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006836:	e03a      	b.n	80068ae <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2212      	movs	r2, #18
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fd76 	bl	8006338 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800684c:	e02f      	b.n	80068ae <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800685c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fd99 	bl	80063cc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800689a:	e008      	b.n	80068ae <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068aa:	605a      	str	r2, [r3, #4]
}
 80068ac:	e7ff      	b.n	80068ae <I2C_MasterReceive_RXNE+0x16e>
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d11b      	bne.n	8006906 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068dc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006904:	e0bd      	b.n	8006a82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b03      	cmp	r3, #3
 800690e:	d129      	bne.n	8006964 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800691e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b04      	cmp	r3, #4
 8006924:	d00a      	beq.n	800693c <I2C_MasterReceive_BTF+0x86>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d007      	beq.n	800693c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691a      	ldr	r2, [r3, #16]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006962:	e08e      	b.n	8006a82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d176      	bne.n	8006a5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d002      	beq.n	800697a <I2C_MasterReceive_BTF+0xc4>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b10      	cmp	r3, #16
 8006978:	d108      	bne.n	800698c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e019      	b.n	80069c0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d002      	beq.n	8006998 <I2C_MasterReceive_BTF+0xe2>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d108      	bne.n	80069aa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e00a      	b.n	80069c0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d007      	beq.n	80069c0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d10a      	bne.n	8006a46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fcba 	bl	80063b8 <HAL_I2C_MemRxCpltCallback>
}
 8006a44:	e01d      	b.n	8006a82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2212      	movs	r2, #18
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fc6f 	bl	8006338 <HAL_I2C_MasterRxCpltCallback>
}
 8006a5a:	e012      	b.n	8006a82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d117      	bne.n	8006ace <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ab6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006ab8:	e067      	b.n	8006b8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	611a      	str	r2, [r3, #16]
}
 8006acc:	e05d      	b.n	8006b8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad6:	d133      	bne.n	8006b40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b21      	cmp	r3, #33	; 0x21
 8006ae2:	d109      	bne.n	8006af8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006af4:	611a      	str	r2, [r3, #16]
 8006af6:	e008      	b.n	8006b0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <I2C_Master_SB+0x92>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d032      	beq.n	8006b8a <I2C_Master_SB+0x100>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d02d      	beq.n	8006b8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3c:	605a      	str	r2, [r3, #4]
}
 8006b3e:	e024      	b.n	8006b8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10e      	bne.n	8006b66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	11db      	asrs	r3, r3, #7
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0306 	and.w	r3, r3, #6
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f063 030f 	orn	r3, r3, #15
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	611a      	str	r2, [r3, #16]
}
 8006b64:	e011      	b.n	8006b8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10d      	bne.n	8006b8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	11db      	asrs	r3, r3, #7
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0306 	and.w	r3, r3, #6
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f063 030e 	orn	r3, r3, #14
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	611a      	str	r2, [r3, #16]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <I2C_Master_ADD10+0x26>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <I2C_Master_ADD10+0x48>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bdc:	605a      	str	r2, [r3, #4]
  }
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b091      	sub	sp, #68	; 0x44
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b22      	cmp	r3, #34	; 0x22
 8006c12:	f040 8169 	bne.w	8006ee8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <I2C_Master_ADDR+0x54>
 8006c1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d10b      	bne.n	8006c3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c26:	2300      	movs	r3, #0
 8006c28:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	633b      	str	r3, [r7, #48]	; 0x30
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	e160      	b.n	8006f00 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d11d      	bne.n	8006c82 <I2C_Master_ADDR+0x98>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c4e:	d118      	bne.n	8006c82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006c80:	e13e      	b.n	8006f00 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d113      	bne.n	8006cb4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e115      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	f040 808a 	bne.w	8006dd4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cc6:	d137      	bne.n	8006d38 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce6:	d113      	bne.n	8006d10 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	e0e7      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d10:	2300      	movs	r3, #0
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	623b      	str	r3, [r7, #32]
 8006d24:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e0d3      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d02e      	beq.n	8006d9c <I2C_Master_ADDR+0x1b2>
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d02b      	beq.n	8006d9c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	2b12      	cmp	r3, #18
 8006d48:	d102      	bne.n	8006d50 <I2C_Master_ADDR+0x166>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d125      	bne.n	8006d9c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d00e      	beq.n	8006d74 <I2C_Master_ADDR+0x18a>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d00b      	beq.n	8006d74 <I2C_Master_ADDR+0x18a>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d008      	beq.n	8006d74 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e007      	b.n	8006d84 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d82:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	e0a1      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006daa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e085      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d14d      	bne.n	8006e7a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d016      	beq.n	8006e12 <I2C_Master_ADDR+0x228>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d013      	beq.n	8006e12 <I2C_Master_ADDR+0x228>
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d010      	beq.n	8006e12 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e007      	b.n	8006e22 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e20:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e30:	d117      	bne.n	8006e62 <I2C_Master_ADDR+0x278>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e38:	d00b      	beq.n	8006e52 <I2C_Master_ADDR+0x268>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d008      	beq.n	8006e52 <I2C_Master_ADDR+0x268>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d005      	beq.n	8006e52 <I2C_Master_ADDR+0x268>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d002      	beq.n	8006e52 <I2C_Master_ADDR+0x268>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d107      	bne.n	8006e62 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	e032      	b.n	8006ee0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e88:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d117      	bne.n	8006eca <I2C_Master_ADDR+0x2e0>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ea0:	d00b      	beq.n	8006eba <I2C_Master_ADDR+0x2d0>
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d008      	beq.n	8006eba <I2C_Master_ADDR+0x2d0>
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d005      	beq.n	8006eba <I2C_Master_ADDR+0x2d0>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d002      	beq.n	8006eba <I2C_Master_ADDR+0x2d0>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d107      	bne.n	8006eca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ec8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006ee6:	e00b      	b.n	8006f00 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	e7ff      	b.n	8006f00 <I2C_Master_ADDR+0x316>
 8006f00:	bf00      	nop
 8006f02:	3744      	adds	r7, #68	; 0x44
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d02b      	beq.n	8006f7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d114      	bne.n	8006f7e <I2C_SlaveTransmit_TXE+0x72>
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b29      	cmp	r3, #41	; 0x29
 8006f58:	d111      	bne.n	8006f7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2221      	movs	r2, #33	; 0x21
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2228      	movs	r2, #40	; 0x28
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff f9e7 	bl	800634c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d011      	beq.n	8006fbc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d02c      	beq.n	800703c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d114      	bne.n	800703c <I2C_SlaveReceive_RXNE+0x74>
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b2a      	cmp	r3, #42	; 0x2a
 8007016:	d111      	bne.n	800703c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007026:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2222      	movs	r2, #34	; 0x22
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2228      	movs	r2, #40	; 0x28
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff f992 	bl	8006360 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d012      	beq.n	800707c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070a2:	2b28      	cmp	r3, #40	; 0x28
 80070a4:	d127      	bne.n	80070f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	089b      	lsrs	r3, r3, #2
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	09db      	lsrs	r3, r3, #7
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	81bb      	strh	r3, [r7, #12]
 80070d8:	e002      	b.n	80070e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80070e8:	89ba      	ldrh	r2, [r7, #12]
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff f940 	bl	8006374 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80070f4:	e00e      	b.n	8007114 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800713a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007168:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007178:	d172      	bne.n	8007260 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b22      	cmp	r3, #34	; 0x22
 800717e:	d002      	beq.n	8007186 <I2C_Slave_STOPF+0x6a>
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b2a      	cmp	r3, #42	; 0x2a
 8007184:	d135      	bne.n	80071f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0204 	orr.w	r2, r3, #4
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc f9a3 	bl	800350a <HAL_DMA_GetState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d049      	beq.n	800725e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	4a69      	ldr	r2, [pc, #420]	; (8007374 <I2C_Slave_STOPF+0x258>)
 80071d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fc f975 	bl	80034c6 <HAL_DMA_Abort_IT>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03d      	beq.n	800725e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071f0:	e035      	b.n	800725e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f043 0204 	orr.w	r2, r3, #4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007224:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	4618      	mov	r0, r3
 800722c:	f7fc f96d 	bl	800350a <HAL_DMA_GetState>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d014      	beq.n	8007260 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	4a4e      	ldr	r2, [pc, #312]	; (8007374 <I2C_Slave_STOPF+0x258>)
 800723c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	4618      	mov	r0, r3
 8007244:	f7fc f93f 	bl	80034c6 <HAL_DMA_Abort_IT>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	e000      	b.n	8007260 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800725e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d03e      	beq.n	80072e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b04      	cmp	r3, #4
 8007276:	d112      	bne.n	800729e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d112      	bne.n	80072d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f043 0204 	orr.w	r2, r3, #4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8b3 	bl	800745c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80072f6:	e039      	b.n	800736c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b2a      	cmp	r3, #42	; 0x2a
 80072fc:	d109      	bne.n	8007312 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2228      	movs	r2, #40	; 0x28
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff f827 	bl	8006360 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b28      	cmp	r3, #40	; 0x28
 800731c:	d111      	bne.n	8007342 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a15      	ldr	r2, [pc, #84]	; (8007378 <I2C_Slave_STOPF+0x25c>)
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff f828 	bl	8006390 <HAL_I2C_ListenCpltCallback>
}
 8007340:	e014      	b.n	800736c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	2b22      	cmp	r3, #34	; 0x22
 8007348:	d002      	beq.n	8007350 <I2C_Slave_STOPF+0x234>
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b22      	cmp	r3, #34	; 0x22
 800734e:	d10d      	bne.n	800736c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fe fffa 	bl	8006360 <HAL_I2C_SlaveRxCpltCallback>
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	080079bd 	.word	0x080079bd
 8007378:	ffff0000 	.word	0xffff0000

0800737c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d002      	beq.n	800739e <I2C_Slave_AF+0x22>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b20      	cmp	r3, #32
 800739c:	d129      	bne.n	80073f2 <I2C_Slave_AF+0x76>
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b28      	cmp	r3, #40	; 0x28
 80073a2:	d126      	bne.n	80073f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <I2C_Slave_AF+0xdc>)
 80073a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe ffd0 	bl	8006390 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80073f0:	e02e      	b.n	8007450 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b21      	cmp	r3, #33	; 0x21
 80073f6:	d126      	bne.n	8007446 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <I2C_Slave_AF+0xdc>)
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2221      	movs	r2, #33	; 0x21
 8007402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007422:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800742c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fe ff84 	bl	800634c <HAL_I2C_SlaveTxCpltCallback>
}
 8007444:	e004      	b.n	8007450 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800744e:	615a      	str	r2, [r3, #20]
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	ffff0000 	.word	0xffff0000

0800745c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007472:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b10      	cmp	r3, #16
 8007478:	d002      	beq.n	8007480 <I2C_ITError+0x24>
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d10a      	bne.n	8007496 <I2C_ITError+0x3a>
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b22      	cmp	r3, #34	; 0x22
 8007484:	d107      	bne.n	8007496 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007494:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800749c:	2b28      	cmp	r3, #40	; 0x28
 800749e:	d107      	bne.n	80074b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2228      	movs	r2, #40	; 0x28
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074ae:	e015      	b.n	80074dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074be:	d00a      	beq.n	80074d6 <I2C_ITError+0x7a>
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	2b60      	cmp	r3, #96	; 0x60
 80074c4:	d007      	beq.n	80074d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ea:	d162      	bne.n	80075b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	d020      	beq.n	800754c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	4a6a      	ldr	r2, [pc, #424]	; (80076b8 <I2C_ITError+0x25c>)
 8007510:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	4618      	mov	r0, r3
 8007518:	f7fb ffd5 	bl	80034c6 <HAL_DMA_Abort_IT>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8089 	beq.w	8007636 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007546:	4610      	mov	r0, r2
 8007548:	4798      	blx	r3
 800754a:	e074      	b.n	8007636 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	4a59      	ldr	r2, [pc, #356]	; (80076b8 <I2C_ITError+0x25c>)
 8007552:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	4618      	mov	r0, r3
 800755a:	f7fb ffb4 	bl	80034c6 <HAL_DMA_Abort_IT>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d068      	beq.n	8007636 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d10b      	bne.n	800758a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	e041      	b.n	8007636 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b60      	cmp	r3, #96	; 0x60
 80075bc:	d125      	bne.n	800760a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d10b      	bne.n	80075f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fe feec 	bl	80063e0 <HAL_I2C_AbortCpltCallback>
 8007608:	e015      	b.n	8007636 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d10b      	bne.n	8007630 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fe fecb 	bl	80063cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10e      	bne.n	8007664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b04      	cmp	r3, #4
 8007686:	d113      	bne.n	80076b0 <I2C_ITError+0x254>
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b28      	cmp	r3, #40	; 0x28
 800768c:	d110      	bne.n	80076b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <I2C_ITError+0x260>)
 8007692:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fe fe70 	bl	8006390 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	080079bd 	.word	0x080079bd
 80076bc:	ffff0000 	.word	0xffff0000

080076c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	817b      	strh	r3, [r7, #10]
 80076d2:	460b      	mov	r3, r1
 80076d4:	813b      	strh	r3, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa08 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007710:	d103      	bne.n	800771a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e05f      	b.n	80077de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800771e:	897b      	ldrh	r3, [r7, #10]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800772c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	6a3a      	ldr	r2, [r7, #32]
 8007732:	492d      	ldr	r1, [pc, #180]	; (80077e8 <I2C_RequestMemoryWrite+0x128>)
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fa40 	bl	8007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e04c      	b.n	80077de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800775a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775c:	6a39      	ldr	r1, [r7, #32]
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 faaa 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00d      	beq.n	8007786 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2b04      	cmp	r3, #4
 8007770:	d107      	bne.n	8007782 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e02b      	b.n	80077de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d105      	bne.n	8007798 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800778c:	893b      	ldrh	r3, [r7, #8]
 800778e:	b2da      	uxtb	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	611a      	str	r2, [r3, #16]
 8007796:	e021      	b.n	80077dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	b29b      	uxth	r3, r3
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a8:	6a39      	ldr	r1, [r7, #32]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fa84 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d107      	bne.n	80077ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e005      	b.n	80077de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077d2:	893b      	ldrh	r3, [r7, #8]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	00010002 	.word	0x00010002

080077ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007814:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007824:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	2200      	movs	r2, #0
 800782e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f96a 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784c:	d103      	bne.n	8007856 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007854:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e0aa      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800785a:	897b      	ldrh	r3, [r7, #10]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007868:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	6a3a      	ldr	r2, [r7, #32]
 800786e:	4952      	ldr	r1, [pc, #328]	; (80079b8 <I2C_RequestMemoryRead+0x1cc>)
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f9a2 	bl	8007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e097      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007898:	6a39      	ldr	r1, [r7, #32]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fa0c 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d107      	bne.n	80078be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e076      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d105      	bne.n	80078d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	611a      	str	r2, [r3, #16]
 80078d2:	e021      	b.n	8007918 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	b29b      	uxth	r3, r3
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e4:	6a39      	ldr	r1, [r7, #32]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f9e6 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00d      	beq.n	800790e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d107      	bne.n	800790a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007908:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e050      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800790e:	893b      	ldrh	r3, [r7, #8]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791a:	6a39      	ldr	r1, [r7, #32]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f9cb 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00d      	beq.n	8007944 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	2b04      	cmp	r3, #4
 800792e:	d107      	bne.n	8007940 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e035      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007952:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2200      	movs	r2, #0
 800795c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f8d3 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00d      	beq.n	8007988 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	d103      	bne.n	8007984 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e013      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007988:	897b      	ldrh	r3, [r7, #10]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	b2da      	uxtb	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	4906      	ldr	r1, [pc, #24]	; (80079b8 <I2C_RequestMemoryRead+0x1cc>)
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f90b 	bl	8007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	00010002 	.word	0x00010002

080079bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079d6:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <I2C_DMAAbort+0x148>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	4a4a      	ldr	r2, [pc, #296]	; (8007b08 <I2C_DMAAbort+0x14c>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0a1a      	lsrs	r2, r3, #8
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a02:	e00a      	b.n	8007a1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d0ea      	beq.n	80079f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2200      	movs	r2, #0
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2200      	movs	r2, #0
 8007a38:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b60      	cmp	r3, #96	; 0x60
 8007a8a:	d10e      	bne.n	8007aaa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f7fe fc9c 	bl	80063e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007aa8:	e027      	b.n	8007afa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aaa:	7cfb      	ldrb	r3, [r7, #19]
 8007aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab0:	2b28      	cmp	r3, #40	; 0x28
 8007ab2:	d117      	bne.n	8007ae4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2228      	movs	r2, #40	; 0x28
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ae2:	e007      	b.n	8007af4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f7fe fc69 	bl	80063cc <HAL_I2C_ErrorCallback>
}
 8007afa:	bf00      	nop
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000002c 	.word	0x2000002c
 8007b08:	14f8b589 	.word	0x14f8b589

08007b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b1c:	e025      	b.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d021      	beq.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b26:	f7fb faeb 	bl	8003100 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d116      	bne.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e023      	b.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10d      	bne.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	43da      	mvns	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf0c      	ite	eq
 8007b86:	2301      	moveq	r3, #1
 8007b88:	2300      	movne	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	e00c      	b.n	8007baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	43da      	mvns	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d0b6      	beq.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bc8:	e051      	b.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd8:	d123      	bne.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0204 	orr.w	r2, r3, #4
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e046      	b.n	8007cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d021      	beq.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2a:	f7fb fa69 	bl	8003100 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d116      	bne.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f043 0220 	orr.w	r2, r3, #32
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e020      	b.n	8007cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10c      	bne.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	43da      	mvns	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bf14      	ite	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	2300      	moveq	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e00b      	b.n	8007caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	43da      	mvns	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d18d      	bne.n	8007bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cc4:	e02d      	b.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f900 	bl	8007ecc <I2C_IsAcknowledgeFailed>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e02d      	b.n	8007d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d021      	beq.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cde:	f7fb fa0f 	bl	8003100 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d116      	bne.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e007      	b.n	8007d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d1ca      	bne.n	8007cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d46:	e02d      	b.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f8bf 	bl	8007ecc <I2C_IsAcknowledgeFailed>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e02d      	b.n	8007db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d021      	beq.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d60:	f7fb f9ce 	bl	8003100 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d116      	bne.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e007      	b.n	8007db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d1ca      	bne.n	8007d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dc8:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	4a13      	ldr	r2, [pc, #76]	; (8007e1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	0a1a      	lsrs	r2, r3, #8
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f043 0220 	orr.w	r2, r3, #32
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e008      	b.n	8007e0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e08:	d0e9      	beq.n	8007dde <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	2000002c 	.word	0x2000002c
 8007e1c:	14f8b589 	.word	0x14f8b589

08007e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e2c:	e042      	b.n	8007eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d119      	bne.n	8007e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0210 	mvn.w	r2, #16
 8007e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e029      	b.n	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7fb f946 	bl	8003100 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d116      	bne.n	8007eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f043 0220 	orr.w	r2, r3, #32
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e007      	b.n	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d1b5      	bne.n	8007e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee2:	d11b      	bne.n	8007f1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	f043 0204 	orr.w	r2, r3, #4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f3a:	d103      	bne.n	8007f44 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f42:	e007      	b.n	8007f54 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f4c:	d102      	bne.n	8007f54 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2208      	movs	r2, #8
 8007f52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e0bf      	b.n	80080f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fa f824 	bl	8001fd4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007fa2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6999      	ldr	r1, [r3, #24]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fb8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6899      	ldr	r1, [r3, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b4a      	ldr	r3, [pc, #296]	; (80080fc <HAL_LTDC_Init+0x19c>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	041b      	lsls	r3, r3, #16
 8007fde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68d9      	ldr	r1, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b3e      	ldr	r3, [pc, #248]	; (80080fc <HAL_LTDC_Init+0x19c>)
 8008002:	400b      	ands	r3, r1
 8008004:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68d9      	ldr	r1, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6919      	ldr	r1, [r3, #16]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b33      	ldr	r3, [pc, #204]	; (80080fc <HAL_LTDC_Init+0x19c>)
 8008030:	400b      	ands	r3, r1
 8008032:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6919      	ldr	r1, [r3, #16]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6959      	ldr	r1, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b27      	ldr	r3, [pc, #156]	; (80080fc <HAL_LTDC_Init+0x19c>)
 800805e:	400b      	ands	r3, r1
 8008060:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6959      	ldr	r1, [r3, #20]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80080a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80080b6:	431a      	orrs	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0206 	orr.w	r2, r2, #6
 80080ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	f000f800 	.word	0xf000f800

08008100 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008116:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d023      	beq.n	800816a <HAL_LTDC_IRQHandler+0x6a>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01e      	beq.n	800816a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0204 	bic.w	r2, r2, #4
 800813a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2204      	movs	r2, #4
 8008142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800814a:	f043 0201 	orr.w	r2, r3, #1
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2204      	movs	r2, #4
 8008158:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7f9 ffb9 	bl	80020dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d023      	beq.n	80081bc <HAL_LTDC_IRQHandler+0xbc>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01e      	beq.n	80081bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0202 	bic.w	r2, r2, #2
 800818c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2202      	movs	r2, #2
 8008194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800819c:	f043 0202 	orr.w	r2, r3, #2
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7f9 ff90 	bl	80020dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01b      	beq.n	80081fe <HAL_LTDC_IRQHandler+0xfe>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d016      	beq.n	80081fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2201      	movs	r2, #1
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f825 	bl	8008248 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01b      	beq.n	8008240 <HAL_LTDC_IRQHandler+0x140>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d016      	beq.n	8008240 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0208 	bic.w	r2, r2, #8
 8008220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2208      	movs	r2, #8
 8008228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f80e 	bl	800825c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008270:	b5b0      	push	{r4, r5, r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_LTDC_ConfigLayer+0x1a>
 8008286:	2302      	movs	r3, #2
 8008288:	e02c      	b.n	80082e4 <HAL_LTDC_ConfigLayer+0x74>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2134      	movs	r1, #52	; 0x34
 80082a0:	fb01 f303 	mul.w	r3, r1, r3
 80082a4:	4413      	add	r3, r2
 80082a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4614      	mov	r4, r2
 80082ae:	461d      	mov	r5, r3
 80082b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f811 	bl	80082ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2201      	movs	r2, #1
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bdb0      	pop	{r4, r5, r7, pc}

080082ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b089      	sub	sp, #36	; 0x24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008308:	4413      	add	r3, r2
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	01db      	lsls	r3, r3, #7
 8008318:	4413      	add	r3, r2
 800831a:	3384      	adds	r3, #132	; 0x84
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	4611      	mov	r1, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	01d2      	lsls	r2, r2, #7
 8008328:	440a      	add	r2, r1
 800832a:	3284      	adds	r2, #132	; 0x84
 800832c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008330:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008342:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008344:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	01db      	lsls	r3, r3, #7
 8008350:	440b      	add	r3, r1
 8008352:	3384      	adds	r3, #132	; 0x84
 8008354:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800835a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800836a:	4413      	add	r3, r2
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	461a      	mov	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	01db      	lsls	r3, r3, #7
 800837a:	4413      	add	r3, r2
 800837c:	3384      	adds	r3, #132	; 0x84
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	4611      	mov	r1, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	01d2      	lsls	r2, r2, #7
 800838a:	440a      	add	r2, r1
 800838c:	3284      	adds	r2, #132	; 0x84
 800838e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008392:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083a2:	4413      	add	r3, r2
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4619      	mov	r1, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	01db      	lsls	r3, r3, #7
 80083b0:	440b      	add	r3, r1
 80083b2:	3384      	adds	r3, #132	; 0x84
 80083b4:	4619      	mov	r1, r3
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	01db      	lsls	r3, r3, #7
 80083c6:	4413      	add	r3, r2
 80083c8:	3384      	adds	r3, #132	; 0x84
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	4611      	mov	r1, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	01d2      	lsls	r2, r2, #7
 80083d6:	440a      	add	r2, r1
 80083d8:	3284      	adds	r2, #132	; 0x84
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	01db      	lsls	r3, r3, #7
 80083ea:	4413      	add	r3, r2
 80083ec:	3384      	adds	r3, #132	; 0x84
 80083ee:	461a      	mov	r2, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008406:	041b      	lsls	r3, r3, #16
 8008408:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	061b      	lsls	r3, r3, #24
 8008410:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	01db      	lsls	r3, r3, #7
 800841c:	4413      	add	r3, r2
 800841e:	3384      	adds	r3, #132	; 0x84
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	01db      	lsls	r3, r3, #7
 800842c:	4413      	add	r3, r2
 800842e:	3384      	adds	r3, #132	; 0x84
 8008430:	461a      	mov	r2, r3
 8008432:	2300      	movs	r3, #0
 8008434:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800843c:	461a      	mov	r2, r3
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	431a      	orrs	r2, r3
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	431a      	orrs	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	01db      	lsls	r3, r3, #7
 8008450:	440b      	add	r3, r1
 8008452:	3384      	adds	r3, #132	; 0x84
 8008454:	4619      	mov	r1, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	01db      	lsls	r3, r3, #7
 8008466:	4413      	add	r3, r2
 8008468:	3384      	adds	r3, #132	; 0x84
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	4611      	mov	r1, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	01d2      	lsls	r2, r2, #7
 8008476:	440a      	add	r2, r1
 8008478:	3284      	adds	r2, #132	; 0x84
 800847a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800847e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	01db      	lsls	r3, r3, #7
 800848a:	4413      	add	r3, r2
 800848c:	3384      	adds	r3, #132	; 0x84
 800848e:	461a      	mov	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	01db      	lsls	r3, r3, #7
 80084a0:	4413      	add	r3, r2
 80084a2:	3384      	adds	r3, #132	; 0x84
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	4611      	mov	r1, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	01d2      	lsls	r2, r2, #7
 80084b0:	440a      	add	r2, r1
 80084b2:	3284      	adds	r2, #132	; 0x84
 80084b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80084b8:	f023 0307 	bic.w	r3, r3, #7
 80084bc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	69da      	ldr	r2, [r3, #28]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	6809      	ldr	r1, [r1, #0]
 80084ca:	4608      	mov	r0, r1
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	01c9      	lsls	r1, r1, #7
 80084d0:	4401      	add	r1, r0
 80084d2:	3184      	adds	r1, #132	; 0x84
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	01db      	lsls	r3, r3, #7
 80084e2:	4413      	add	r3, r2
 80084e4:	3384      	adds	r3, #132	; 0x84
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	01db      	lsls	r3, r3, #7
 80084f2:	4413      	add	r3, r2
 80084f4:	3384      	adds	r3, #132	; 0x84
 80084f6:	461a      	mov	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	01db      	lsls	r3, r3, #7
 8008506:	4413      	add	r3, r2
 8008508:	3384      	adds	r3, #132	; 0x84
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800851a:	2304      	movs	r3, #4
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	e01b      	b.n	8008558 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d102      	bne.n	800852e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008528:	2303      	movs	r3, #3
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e014      	b.n	8008558 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b04      	cmp	r3, #4
 8008534:	d00b      	beq.n	800854e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800853a:	2b02      	cmp	r3, #2
 800853c:	d007      	beq.n	800854e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008542:	2b03      	cmp	r3, #3
 8008544:	d003      	beq.n	800854e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800854a:	2b07      	cmp	r3, #7
 800854c:	d102      	bne.n	8008554 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800854e:	2302      	movs	r3, #2
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e001      	b.n	8008558 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008554:	2301      	movs	r3, #1
 8008556:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	01db      	lsls	r3, r3, #7
 8008562:	4413      	add	r3, r2
 8008564:	3384      	adds	r3, #132	; 0x84
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	4611      	mov	r1, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	01d2      	lsls	r2, r2, #7
 8008572:	440a      	add	r2, r1
 8008574:	3284      	adds	r2, #132	; 0x84
 8008576:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800857a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6859      	ldr	r1, [r3, #4]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	1acb      	subs	r3, r1, r3
 8008592:	69f9      	ldr	r1, [r7, #28]
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	6809      	ldr	r1, [r1, #0]
 800859e:	4608      	mov	r0, r1
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	01c9      	lsls	r1, r1, #7
 80085a4:	4401      	add	r1, r0
 80085a6:	3184      	adds	r1, #132	; 0x84
 80085a8:	4313      	orrs	r3, r2
 80085aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	01db      	lsls	r3, r3, #7
 80085b6:	4413      	add	r3, r2
 80085b8:	3384      	adds	r3, #132	; 0x84
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	6812      	ldr	r2, [r2, #0]
 80085c0:	4611      	mov	r1, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	01d2      	lsls	r2, r2, #7
 80085c6:	440a      	add	r2, r1
 80085c8:	3284      	adds	r2, #132	; 0x84
 80085ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085ce:	f023 0307 	bic.w	r3, r3, #7
 80085d2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	01db      	lsls	r3, r3, #7
 80085de:	4413      	add	r3, r2
 80085e0:	3384      	adds	r3, #132	; 0x84
 80085e2:	461a      	mov	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	4413      	add	r3, r2
 80085f6:	3384      	adds	r3, #132	; 0x84
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	4611      	mov	r1, r2
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	01d2      	lsls	r2, r2, #7
 8008604:	440a      	add	r2, r1
 8008606:	3284      	adds	r2, #132	; 0x84
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	6013      	str	r3, [r2, #0]
}
 800860e:	bf00      	nop
 8008610:	3724      	adds	r7, #36	; 0x24
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4b20      	ldr	r3, [pc, #128]	; (80086ac <HAL_PWREx_EnableOverDrive+0x90>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	4a1f      	ldr	r2, [pc, #124]	; (80086ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008634:	6413      	str	r3, [r2, #64]	; 0x40
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008648:	f7fa fd5a 	bl	8003100 <HAL_GetTick>
 800864c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800864e:	e009      	b.n	8008664 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008650:	f7fa fd56 	bl	8003100 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865e:	d901      	bls.n	8008664 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e01f      	b.n	80086a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008664:	4b13      	ldr	r3, [pc, #76]	; (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800866c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008670:	d1ee      	bne.n	8008650 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008678:	f7fa fd42 	bl	8003100 <HAL_GetTick>
 800867c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800867e:	e009      	b.n	8008694 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008680:	f7fa fd3e 	bl	8003100 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800868e:	d901      	bls.n	8008694 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e007      	b.n	80086a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086a0:	d1ee      	bne.n	8008680 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	420e0040 	.word	0x420e0040
 80086b4:	40007000 	.word	0x40007000
 80086b8:	420e0044 	.word	0x420e0044

080086bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0cc      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086d0:	4b68      	ldr	r3, [pc, #416]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d90c      	bls.n	80086f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086de:	4b65      	ldr	r3, [pc, #404]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e6:	4b63      	ldr	r3, [pc, #396]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0b8      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d020      	beq.n	8008746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008710:	4b59      	ldr	r3, [pc, #356]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4a58      	ldr	r2, [pc, #352]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800871a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008728:	4b53      	ldr	r3, [pc, #332]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4a52      	ldr	r2, [pc, #328]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008734:	4b50      	ldr	r3, [pc, #320]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	494d      	ldr	r1, [pc, #308]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008742:	4313      	orrs	r3, r2
 8008744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d044      	beq.n	80087dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d107      	bne.n	800876a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800875a:	4b47      	ldr	r3, [pc, #284]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d119      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e07f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d003      	beq.n	800877a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008776:	2b03      	cmp	r3, #3
 8008778:	d107      	bne.n	800878a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800877a:	4b3f      	ldr	r3, [pc, #252]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e06f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878a:	4b3b      	ldr	r3, [pc, #236]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e067      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800879a:	4b37      	ldr	r3, [pc, #220]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f023 0203 	bic.w	r2, r3, #3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	4934      	ldr	r1, [pc, #208]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087ac:	f7fa fca8 	bl	8003100 <HAL_GetTick>
 80087b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b2:	e00a      	b.n	80087ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b4:	f7fa fca4 	bl	8003100 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e04f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ca:	4b2b      	ldr	r3, [pc, #172]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 020c 	and.w	r2, r3, #12
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	429a      	cmp	r2, r3
 80087da:	d1eb      	bne.n	80087b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087dc:	4b25      	ldr	r3, [pc, #148]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d20c      	bcs.n	8008804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ea:	4b22      	ldr	r3, [pc, #136]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f2:	4b20      	ldr	r3, [pc, #128]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d001      	beq.n	8008804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e032      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008810:	4b19      	ldr	r3, [pc, #100]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	4916      	ldr	r1, [pc, #88]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800881e:	4313      	orrs	r3, r2
 8008820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	490e      	ldr	r1, [pc, #56]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008842:	f000 f821 	bl	8008888 <HAL_RCC_GetSysClockFreq>
 8008846:	4602      	mov	r2, r0
 8008848:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	490a      	ldr	r1, [pc, #40]	; (800887c <HAL_RCC_ClockConfig+0x1c0>)
 8008854:	5ccb      	ldrb	r3, [r1, r3]
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <HAL_RCC_ClockConfig+0x1c4>)
 800885c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <HAL_RCC_ClockConfig+0x1c8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7fa fc08 	bl	8003078 <HAL_InitTick>

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40023c00 	.word	0x40023c00
 8008878:	40023800 	.word	0x40023800
 800887c:	080a1fa4 	.word	0x080a1fa4
 8008880:	2000002c 	.word	0x2000002c
 8008884:	20000030 	.word	0x20000030

08008888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800888c:	b094      	sub	sp, #80	; 0x50
 800888e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	647b      	str	r3, [r7, #68]	; 0x44
 8008894:	2300      	movs	r3, #0
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008898:	2300      	movs	r3, #0
 800889a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a0:	4b79      	ldr	r3, [pc, #484]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 030c 	and.w	r3, r3, #12
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d00d      	beq.n	80088c8 <HAL_RCC_GetSysClockFreq+0x40>
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	f200 80e1 	bhi.w	8008a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_RCC_GetSysClockFreq+0x34>
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d003      	beq.n	80088c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80088ba:	e0db      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088bc:	4b73      	ldr	r3, [pc, #460]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80088be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80088c0:	e0db      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088c2:	4b73      	ldr	r3, [pc, #460]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80088c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088c6:	e0d8      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088c8:	4b6f      	ldr	r3, [pc, #444]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088d2:	4b6d      	ldr	r3, [pc, #436]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d063      	beq.n	80089a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b6a      	ldr	r3, [pc, #424]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	2200      	movs	r2, #0
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	633b      	str	r3, [r7, #48]	; 0x30
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
 80088f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f04f 0000 	mov.w	r0, #0
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	0159      	lsls	r1, r3, #5
 8008908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800890c:	0150      	lsls	r0, r2, #5
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4621      	mov	r1, r4
 8008914:	1a51      	subs	r1, r2, r1
 8008916:	6139      	str	r1, [r7, #16]
 8008918:	4629      	mov	r1, r5
 800891a:	eb63 0301 	sbc.w	r3, r3, r1
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800892c:	4659      	mov	r1, fp
 800892e:	018b      	lsls	r3, r1, #6
 8008930:	4651      	mov	r1, sl
 8008932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008936:	4651      	mov	r1, sl
 8008938:	018a      	lsls	r2, r1, #6
 800893a:	4651      	mov	r1, sl
 800893c:	ebb2 0801 	subs.w	r8, r2, r1
 8008940:	4659      	mov	r1, fp
 8008942:	eb63 0901 	sbc.w	r9, r3, r1
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800895a:	4690      	mov	r8, r2
 800895c:	4699      	mov	r9, r3
 800895e:	4623      	mov	r3, r4
 8008960:	eb18 0303 	adds.w	r3, r8, r3
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	462b      	mov	r3, r5
 8008968:	eb49 0303 	adc.w	r3, r9, r3
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	f04f 0200 	mov.w	r2, #0
 8008972:	f04f 0300 	mov.w	r3, #0
 8008976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800897a:	4629      	mov	r1, r5
 800897c:	024b      	lsls	r3, r1, #9
 800897e:	4621      	mov	r1, r4
 8008980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008984:	4621      	mov	r1, r4
 8008986:	024a      	lsls	r2, r1, #9
 8008988:	4610      	mov	r0, r2
 800898a:	4619      	mov	r1, r3
 800898c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898e:	2200      	movs	r2, #0
 8008990:	62bb      	str	r3, [r7, #40]	; 0x28
 8008992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008998:	f7f7 fc9a 	bl	80002d0 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4613      	mov	r3, r2
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089a4:	e058      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089a6:	4b38      	ldr	r3, [pc, #224]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	099b      	lsrs	r3, r3, #6
 80089ac:	2200      	movs	r2, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	4611      	mov	r1, r2
 80089b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089b6:	623b      	str	r3, [r7, #32]
 80089b8:	2300      	movs	r3, #0
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f04f 0100 	mov.w	r1, #0
 80089cc:	0159      	lsls	r1, r3, #5
 80089ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089d2:	0150      	lsls	r0, r2, #5
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4641      	mov	r1, r8
 80089da:	ebb2 0a01 	subs.w	sl, r2, r1
 80089de:	4649      	mov	r1, r9
 80089e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	f04f 0300 	mov.w	r3, #0
 80089ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80089f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80089f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80089f8:	ebb2 040a 	subs.w	r4, r2, sl
 80089fc:	eb63 050b 	sbc.w	r5, r3, fp
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	00eb      	lsls	r3, r5, #3
 8008a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a0e:	00e2      	lsls	r2, r4, #3
 8008a10:	4614      	mov	r4, r2
 8008a12:	461d      	mov	r5, r3
 8008a14:	4643      	mov	r3, r8
 8008a16:	18e3      	adds	r3, r4, r3
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	eb45 0303 	adc.w	r3, r5, r3
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a2e:	4629      	mov	r1, r5
 8008a30:	028b      	lsls	r3, r1, #10
 8008a32:	4621      	mov	r1, r4
 8008a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a38:	4621      	mov	r1, r4
 8008a3a:	028a      	lsls	r2, r1, #10
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a42:	2200      	movs	r2, #0
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	61fa      	str	r2, [r7, #28]
 8008a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a4c:	f7f7 fc40 	bl	80002d0 <__aeabi_uldivmod>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4613      	mov	r3, r2
 8008a56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	3301      	adds	r3, #1
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a72:	e002      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3750      	adds	r7, #80	; 0x50
 8008a80:	46bd      	mov	sp, r7
 8008a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a86:	bf00      	nop
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	00f42400 	.word	0x00f42400
 8008a90:	007a1200 	.word	0x007a1200

08008a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	2000002c 	.word	0x2000002c

08008aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ab0:	f7ff fff0 	bl	8008a94 <HAL_RCC_GetHCLKFreq>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	0a9b      	lsrs	r3, r3, #10
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	4903      	ldr	r1, [pc, #12]	; (8008ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ac2:	5ccb      	ldrb	r3, [r1, r3]
 8008ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	080a1fb4 	.word	0x080a1fb4

08008ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ad8:	f7ff ffdc 	bl	8008a94 <HAL_RCC_GetHCLKFreq>
 8008adc:	4602      	mov	r2, r0
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	0b5b      	lsrs	r3, r3, #13
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	4903      	ldr	r1, [pc, #12]	; (8008af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aea:	5ccb      	ldrb	r3, [r1, r3]
 8008aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40023800 	.word	0x40023800
 8008af8:	080a1fb4 	.word	0x080a1fb4

08008afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b24:	4b66      	ldr	r3, [pc, #408]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b32:	4963      	ldr	r1, [pc, #396]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008b46:	4b5e      	ldr	r3, [pc, #376]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	495a      	ldr	r1, [pc, #360]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d075      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b80:	4b50      	ldr	r3, [pc, #320]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b86:	f7fa fabb 	bl	8003100 <HAL_GetTick>
 8008b8a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b8e:	f7fa fab7 	bl	8003100 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e1dc      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ba0:	4b47      	ldr	r3, [pc, #284]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f0      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d009      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	019a      	lsls	r2, r3, #6
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	071b      	lsls	r3, r3, #28
 8008bc4:	493e      	ldr	r1, [pc, #248]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01f      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008bd8:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bde:	0f1b      	lsrs	r3, r3, #28
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	019a      	lsls	r2, r3, #6
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	071b      	lsls	r3, r3, #28
 8008bf8:	4931      	ldr	r1, [pc, #196]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c00:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c06:	f023 021f 	bic.w	r2, r3, #31
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	492b      	ldr	r1, [pc, #172]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	019a      	lsls	r2, r3, #6
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	061b      	lsls	r3, r3, #24
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	071b      	lsls	r3, r3, #28
 8008c38:	4921      	ldr	r1, [pc, #132]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008c40:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c42:	2201      	movs	r2, #1
 8008c44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c46:	f7fa fa5b 	bl	8003100 <HAL_GetTick>
 8008c4a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c4c:	e008      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c4e:	f7fa fa57 	bl	8003100 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e17c      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c60:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f0      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10c      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80ce 	beq.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c9a:	f040 80c8 	bne.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca4:	f7fa fa2c 	bl	8003100 <HAL_GetTick>
 8008ca8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008caa:	e00f      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008cac:	f7fa fa28 	bl	8003100 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d908      	bls.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e14d      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008cbe:	bf00      	nop
 8008cc0:	40023800 	.word	0x40023800
 8008cc4:	42470068 	.word	0x42470068
 8008cc8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ccc:	4ba5      	ldr	r3, [pc, #660]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd8:	d0e8      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d02e      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008ce6:	4b9f      	ldr	r3, [pc, #636]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cec:	0c1b      	lsrs	r3, r3, #16
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008cf8:	4b9a      	ldr	r3, [pc, #616]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfe:	0f1b      	lsrs	r3, r3, #28
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	019a      	lsls	r2, r3, #6
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	3b01      	subs	r3, #1
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	061b      	lsls	r3, r3, #24
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	071b      	lsls	r3, r3, #28
 8008d22:	4990      	ldr	r1, [pc, #576]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008d2a:	4b8e      	ldr	r3, [pc, #568]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	021b      	lsls	r3, r3, #8
 8008d3c:	4989      	ldr	r1, [pc, #548]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d02c      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008d50:	4b84      	ldr	r3, [pc, #528]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d56:	0c1b      	lsrs	r3, r3, #16
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008d62:	4b80      	ldr	r3, [pc, #512]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d68:	0e1b      	lsrs	r3, r3, #24
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	019a      	lsls	r2, r3, #6
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	041b      	lsls	r3, r3, #16
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	061b      	lsls	r3, r3, #24
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	071b      	lsls	r3, r3, #28
 8008d8c:	4975      	ldr	r1, [pc, #468]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d94:	4b73      	ldr	r3, [pc, #460]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da2:	4970      	ldr	r1, [pc, #448]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d024      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dbe:	d11f      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dc0:	4b68      	ldr	r3, [pc, #416]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc6:	0e1b      	lsrs	r3, r3, #24
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008dce:	4b65      	ldr	r3, [pc, #404]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	0f1b      	lsrs	r3, r3, #28
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	019a      	lsls	r2, r3, #6
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	3b01      	subs	r3, #1
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	431a      	orrs	r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	061b      	lsls	r3, r3, #24
 8008df2:	431a      	orrs	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	071b      	lsls	r3, r3, #28
 8008df8:	495a      	ldr	r1, [pc, #360]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e00:	4b59      	ldr	r3, [pc, #356]	; (8008f68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e06:	f7fa f97b 	bl	8003100 <HAL_GetTick>
 8008e0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e0c:	e008      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008e0e:	f7fa f977 	bl	8003100 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e09c      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e20:	4b50      	ldr	r3, [pc, #320]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e2c:	d1ef      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8083 	beq.w	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60bb      	str	r3, [r7, #8]
 8008e40:	4b48      	ldr	r3, [pc, #288]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	4a47      	ldr	r2, [pc, #284]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4c:	4b45      	ldr	r3, [pc, #276]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e58:	4b44      	ldr	r3, [pc, #272]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a43      	ldr	r2, [pc, #268]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e64:	f7fa f94c 	bl	8003100 <HAL_GetTick>
 8008e68:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e6c:	f7fa f948 	bl	8003100 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e06d      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e7e:	4b3b      	ldr	r3, [pc, #236]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f0      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e8a:	4b36      	ldr	r3, [pc, #216]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e92:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d02f      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d028      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ea8:	4b2e      	ldr	r3, [pc, #184]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008eb2:	4b2f      	ldr	r3, [pc, #188]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008eb8:	4b2d      	ldr	r3, [pc, #180]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ebe:	4a29      	ldr	r2, [pc, #164]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ec4:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d114      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ed0:	f7fa f916 	bl	8003100 <HAL_GetTick>
 8008ed4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed6:	e00a      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed8:	f7fa f912 	bl	8003100 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e035      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eee:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0ee      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f06:	d10d      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f1c:	4911      	ldr	r1, [pc, #68]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	608b      	str	r3, [r1, #8]
 8008f22:	e005      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008f24:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	4a0e      	ldr	r2, [pc, #56]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f3c:	4909      	ldr	r1, [pc, #36]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008f56:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800
 8008f68:	42470070 	.word	0x42470070
 8008f6c:	40007000 	.word	0x40007000
 8008f70:	42470e40 	.word	0x42470e40
 8008f74:	424711e0 	.word	0x424711e0

08008f78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e273      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d075      	beq.n	8009082 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f96:	4b88      	ldr	r3, [pc, #544]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 030c 	and.w	r3, r3, #12
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00c      	beq.n	8008fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fa2:	4b85      	ldr	r3, [pc, #532]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008faa:	2b08      	cmp	r3, #8
 8008fac:	d112      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fae:	4b82      	ldr	r3, [pc, #520]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fba:	d10b      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fbc:	4b7e      	ldr	r3, [pc, #504]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d05b      	beq.n	8009080 <HAL_RCC_OscConfig+0x108>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d157      	bne.n	8009080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e24e      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fdc:	d106      	bne.n	8008fec <HAL_RCC_OscConfig+0x74>
 8008fde:	4b76      	ldr	r3, [pc, #472]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a75      	ldr	r2, [pc, #468]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e01d      	b.n	8009028 <HAL_RCC_OscConfig+0xb0>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ff4:	d10c      	bne.n	8009010 <HAL_RCC_OscConfig+0x98>
 8008ff6:	4b70      	ldr	r3, [pc, #448]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a6f      	ldr	r2, [pc, #444]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8008ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	4b6d      	ldr	r3, [pc, #436]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a6c      	ldr	r2, [pc, #432]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	e00b      	b.n	8009028 <HAL_RCC_OscConfig+0xb0>
 8009010:	4b69      	ldr	r3, [pc, #420]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a68      	ldr	r2, [pc, #416]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	4b66      	ldr	r3, [pc, #408]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a65      	ldr	r2, [pc, #404]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d013      	beq.n	8009058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009030:	f7fa f866 	bl	8003100 <HAL_GetTick>
 8009034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009036:	e008      	b.n	800904a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009038:	f7fa f862 	bl	8003100 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b64      	cmp	r3, #100	; 0x64
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e213      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800904a:	4b5b      	ldr	r3, [pc, #364]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0f0      	beq.n	8009038 <HAL_RCC_OscConfig+0xc0>
 8009056:	e014      	b.n	8009082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009058:	f7fa f852 	bl	8003100 <HAL_GetTick>
 800905c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009060:	f7fa f84e 	bl	8003100 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b64      	cmp	r3, #100	; 0x64
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e1ff      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009072:	4b51      	ldr	r3, [pc, #324]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1f0      	bne.n	8009060 <HAL_RCC_OscConfig+0xe8>
 800907e:	e000      	b.n	8009082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d063      	beq.n	8009156 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800908e:	4b4a      	ldr	r3, [pc, #296]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 030c 	and.w	r3, r3, #12
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800909a:	4b47      	ldr	r3, [pc, #284]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d11c      	bne.n	80090e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090a6:	4b44      	ldr	r3, [pc, #272]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d116      	bne.n	80090e0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090b2:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <HAL_RCC_OscConfig+0x152>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d001      	beq.n	80090ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e1d3      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ca:	4b3b      	ldr	r3, [pc, #236]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	4937      	ldr	r1, [pc, #220]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090de:	e03a      	b.n	8009156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d020      	beq.n	800912a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090e8:	4b34      	ldr	r3, [pc, #208]	; (80091bc <HAL_RCC_OscConfig+0x244>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ee:	f7fa f807 	bl	8003100 <HAL_GetTick>
 80090f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090f6:	f7fa f803 	bl	8003100 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e1b4      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009108:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0f0      	beq.n	80090f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009114:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	4925      	ldr	r1, [pc, #148]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 8009124:	4313      	orrs	r3, r2
 8009126:	600b      	str	r3, [r1, #0]
 8009128:	e015      	b.n	8009156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800912a:	4b24      	ldr	r3, [pc, #144]	; (80091bc <HAL_RCC_OscConfig+0x244>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009130:	f7f9 ffe6 	bl	8003100 <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009138:	f7f9 ffe2 	bl	8003100 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e193      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f0      	bne.n	8009138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d036      	beq.n	80091d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d016      	beq.n	8009198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800916a:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <HAL_RCC_OscConfig+0x248>)
 800916c:	2201      	movs	r2, #1
 800916e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009170:	f7f9 ffc6 	bl	8003100 <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009178:	f7f9 ffc2 	bl	8003100 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b02      	cmp	r3, #2
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e173      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800918a:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <HAL_RCC_OscConfig+0x240>)
 800918c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f0      	beq.n	8009178 <HAL_RCC_OscConfig+0x200>
 8009196:	e01b      	b.n	80091d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_RCC_OscConfig+0x248>)
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919e:	f7f9 ffaf 	bl	8003100 <HAL_GetTick>
 80091a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a4:	e00e      	b.n	80091c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091a6:	f7f9 ffab 	bl	8003100 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d907      	bls.n	80091c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e15c      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
 80091b8:	40023800 	.word	0x40023800
 80091bc:	42470000 	.word	0x42470000
 80091c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c4:	4b8a      	ldr	r3, [pc, #552]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80091c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c8:	f003 0302 	and.w	r3, r3, #2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ea      	bne.n	80091a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8097 	beq.w	800930c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091e2:	4b83      	ldr	r3, [pc, #524]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80091e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10f      	bne.n	800920e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ee:	2300      	movs	r3, #0
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	4b7f      	ldr	r3, [pc, #508]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	4a7e      	ldr	r2, [pc, #504]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80091f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091fc:	6413      	str	r3, [r2, #64]	; 0x40
 80091fe:	4b7c      	ldr	r3, [pc, #496]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009206:	60bb      	str	r3, [r7, #8]
 8009208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800920e:	4b79      	ldr	r3, [pc, #484]	; (80093f4 <HAL_RCC_OscConfig+0x47c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	2b00      	cmp	r3, #0
 8009218:	d118      	bne.n	800924c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800921a:	4b76      	ldr	r3, [pc, #472]	; (80093f4 <HAL_RCC_OscConfig+0x47c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a75      	ldr	r2, [pc, #468]	; (80093f4 <HAL_RCC_OscConfig+0x47c>)
 8009220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009226:	f7f9 ff6b 	bl	8003100 <HAL_GetTick>
 800922a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800922e:	f7f9 ff67 	bl	8003100 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e118      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009240:	4b6c      	ldr	r3, [pc, #432]	; (80093f4 <HAL_RCC_OscConfig+0x47c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0f0      	beq.n	800922e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d106      	bne.n	8009262 <HAL_RCC_OscConfig+0x2ea>
 8009254:	4b66      	ldr	r3, [pc, #408]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009258:	4a65      	ldr	r2, [pc, #404]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 800925a:	f043 0301 	orr.w	r3, r3, #1
 800925e:	6713      	str	r3, [r2, #112]	; 0x70
 8009260:	e01c      	b.n	800929c <HAL_RCC_OscConfig+0x324>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b05      	cmp	r3, #5
 8009268:	d10c      	bne.n	8009284 <HAL_RCC_OscConfig+0x30c>
 800926a:	4b61      	ldr	r3, [pc, #388]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	4a60      	ldr	r2, [pc, #384]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009270:	f043 0304 	orr.w	r3, r3, #4
 8009274:	6713      	str	r3, [r2, #112]	; 0x70
 8009276:	4b5e      	ldr	r3, [pc, #376]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927a:	4a5d      	ldr	r2, [pc, #372]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 800927c:	f043 0301 	orr.w	r3, r3, #1
 8009280:	6713      	str	r3, [r2, #112]	; 0x70
 8009282:	e00b      	b.n	800929c <HAL_RCC_OscConfig+0x324>
 8009284:	4b5a      	ldr	r3, [pc, #360]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009288:	4a59      	ldr	r2, [pc, #356]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	6713      	str	r3, [r2, #112]	; 0x70
 8009290:	4b57      	ldr	r3, [pc, #348]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009294:	4a56      	ldr	r2, [pc, #344]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009296:	f023 0304 	bic.w	r3, r3, #4
 800929a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d015      	beq.n	80092d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a4:	f7f9 ff2c 	bl	8003100 <HAL_GetTick>
 80092a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092aa:	e00a      	b.n	80092c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ac:	f7f9 ff28 	bl	8003100 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e0d7      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c2:	4b4b      	ldr	r3, [pc, #300]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0ee      	beq.n	80092ac <HAL_RCC_OscConfig+0x334>
 80092ce:	e014      	b.n	80092fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d0:	f7f9 ff16 	bl	8003100 <HAL_GetTick>
 80092d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092d6:	e00a      	b.n	80092ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092d8:	f7f9 ff12 	bl	8003100 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e0c1      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ee:	4b40      	ldr	r3, [pc, #256]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1ee      	bne.n	80092d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d105      	bne.n	800930c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009300:	4b3b      	ldr	r3, [pc, #236]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	4a3a      	ldr	r2, [pc, #232]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800930a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80ad 	beq.w	8009470 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009316:	4b36      	ldr	r3, [pc, #216]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 030c 	and.w	r3, r3, #12
 800931e:	2b08      	cmp	r3, #8
 8009320:	d060      	beq.n	80093e4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d145      	bne.n	80093b6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932a:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <HAL_RCC_OscConfig+0x480>)
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7f9 fee6 	bl	8003100 <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009338:	f7f9 fee2 	bl	8003100 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e093      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934a:	4b29      	ldr	r3, [pc, #164]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	019b      	lsls	r3, r3, #6
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	3b01      	subs	r3, #1
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	061b      	lsls	r3, r3, #24
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	071b      	lsls	r3, r3, #28
 8009382:	491b      	ldr	r1, [pc, #108]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 8009384:	4313      	orrs	r3, r2
 8009386:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009388:	4b1b      	ldr	r3, [pc, #108]	; (80093f8 <HAL_RCC_OscConfig+0x480>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800938e:	f7f9 feb7 	bl	8003100 <HAL_GetTick>
 8009392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009394:	e008      	b.n	80093a8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009396:	f7f9 feb3 	bl	8003100 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e064      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a8:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0f0      	beq.n	8009396 <HAL_RCC_OscConfig+0x41e>
 80093b4:	e05c      	b.n	8009470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <HAL_RCC_OscConfig+0x480>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093bc:	f7f9 fea0 	bl	8003100 <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093c2:	e008      	b.n	80093d6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093c4:	f7f9 fe9c 	bl	8003100 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d901      	bls.n	80093d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e04d      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <HAL_RCC_OscConfig+0x478>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f0      	bne.n	80093c4 <HAL_RCC_OscConfig+0x44c>
 80093e2:	e045      	b.n	8009470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d107      	bne.n	80093fc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e040      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
 80093f0:	40023800 	.word	0x40023800
 80093f4:	40007000 	.word	0x40007000
 80093f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093fc:	4b1f      	ldr	r3, [pc, #124]	; (800947c <HAL_RCC_OscConfig+0x504>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d030      	beq.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009414:	429a      	cmp	r2, r3
 8009416:	d129      	bne.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009422:	429a      	cmp	r2, r3
 8009424:	d122      	bne.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800942c:	4013      	ands	r3, r2
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009434:	4293      	cmp	r3, r2
 8009436:	d119      	bne.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	085b      	lsrs	r3, r3, #1
 8009444:	3b01      	subs	r3, #1
 8009446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009448:	429a      	cmp	r2, r3
 800944a:	d10f      	bne.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d107      	bne.n	800946c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009468:	429a      	cmp	r2, r3
 800946a:	d001      	beq.n	8009470 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40023800 	.word	0x40023800

08009480 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e025      	b.n	80094e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7f7 ff19 	bl	80012e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	4619      	mov	r1, r3
 80094c0:	4610      	mov	r0, r2
 80094c2:	f001 f909 	bl	800a6d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	f001 f95e 	bl	800a792 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d10a      	bne.n	8009514 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f80c 	bl	800951c <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695a      	ldr	r2, [r3, #20]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	615a      	str	r2, [r3, #20]
  }
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009542:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d101      	bne.n	800954e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800954a:	2302      	movs	r3, #2
 800954c:	e021      	b.n	8009592 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d002      	beq.n	800955a <HAL_SDRAM_SendCommand+0x2a>
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	2b05      	cmp	r3, #5
 8009558:	d118      	bne.n	800958c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	4618      	mov	r0, r3
 800956c:	f001 f97a 	bl	800a864 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d104      	bne.n	8009582 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2205      	movs	r2, #5
 800957c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009580:	e006      	b.n	8009590 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800958a:	e001      	b.n	8009590 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d101      	bne.n	80095b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80095b0:	2302      	movs	r3, #2
 80095b2:	e016      	b.n	80095e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10f      	bne.n	80095e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 f985 	bl	800a8de <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	e000      	b.n	80095e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e03f      	b.n	800967c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7f9 fbeb 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2224      	movs	r2, #36	; 0x24
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800962c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fdde 	bl	800a1f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009642:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009652:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009662:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	4613      	mov	r3, r2
 8009692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	d17c      	bne.n	800979e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <HAL_UART_Transmit+0x2c>
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e075      	b.n	80097a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_UART_Transmit+0x3e>
 80096be:	2302      	movs	r3, #2
 80096c0:	e06e      	b.n	80097a0 <HAL_UART_Transmit+0x11c>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2221      	movs	r2, #33	; 0x21
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096d8:	f7f9 fd12 	bl	8003100 <HAL_GetTick>
 80096dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	88fa      	ldrh	r2, [r7, #6]
 80096e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	88fa      	ldrh	r2, [r7, #6]
 80096e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f2:	d108      	bne.n	8009706 <HAL_UART_Transmit+0x82>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	61bb      	str	r3, [r7, #24]
 8009704:	e003      	b.n	800970e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009716:	e02a      	b.n	800976e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2200      	movs	r2, #0
 8009720:	2180      	movs	r1, #128	; 0x80
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fb1e 	bl	8009d64 <UART_WaitOnFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e036      	b.n	80097a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009746:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	3302      	adds	r3, #2
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	e007      	b.n	8009760 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	3301      	adds	r3, #1
 800975e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1cf      	bne.n	8009718 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2200      	movs	r2, #0
 8009780:	2140      	movs	r1, #64	; 0x40
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 faee 	bl	8009d64 <UART_WaitOnFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e006      	b.n	80097a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	e000      	b.n	80097a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800979e:	2302      	movs	r3, #2
  }
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d11d      	bne.n	80097fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <HAL_UART_Receive_IT+0x26>
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e016      	b.n	8009800 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_UART_Receive_IT+0x38>
 80097dc:	2302      	movs	r3, #2
 80097de:	e00f      	b.n	8009800 <HAL_UART_Receive_IT+0x58>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	461a      	mov	r2, r3
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 fb23 	bl	8009e40 <UART_Start_Receive_IT>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e000      	b.n	8009800 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80097fe:	2302      	movs	r3, #2
  }
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b0ba      	sub	sp, #232	; 0xe8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10f      	bne.n	800986e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800984e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <HAL_UART_IRQHandler+0x66>
 800985a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fc07 	bl	800a07a <UART_Receive_IT>
      return;
 800986c:	e256      	b.n	8009d1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800986e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80de 	beq.w	8009a34 <HAL_UART_IRQHandler+0x22c>
 8009878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009888:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 80d1 	beq.w	8009a34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <HAL_UART_IRQHandler+0xae>
 800989e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	f043 0201 	orr.w	r2, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <HAL_UART_IRQHandler+0xd2>
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f043 0202 	orr.w	r2, r3, #2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <HAL_UART_IRQHandler+0xf6>
 80098e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	f043 0204 	orr.w	r2, r3, #4
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009902:	f003 0308 	and.w	r3, r3, #8
 8009906:	2b00      	cmp	r3, #0
 8009908:	d011      	beq.n	800992e <HAL_UART_IRQHandler+0x126>
 800990a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	f043 0208 	orr.w	r2, r3, #8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 81ed 	beq.w	8009d12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <HAL_UART_IRQHandler+0x14e>
 8009944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fb92 	bl	800a07a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009960:	2b40      	cmp	r3, #64	; 0x40
 8009962:	bf0c      	ite	eq
 8009964:	2301      	moveq	r3, #1
 8009966:	2300      	movne	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	f003 0308 	and.w	r3, r3, #8
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <HAL_UART_IRQHandler+0x17a>
 800997a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800997e:	2b00      	cmp	r3, #0
 8009980:	d04f      	beq.n	8009a22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa9a 	bl	8009ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b40      	cmp	r3, #64	; 0x40
 8009994:	d141      	bne.n	8009a1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3314      	adds	r3, #20
 800999c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3314      	adds	r3, #20
 80099be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1d9      	bne.n	8009996 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d013      	beq.n	8009a12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	4a7d      	ldr	r2, [pc, #500]	; (8009be4 <HAL_UART_IRQHandler+0x3dc>)
 80099f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f9 fd65 	bl	80034c6 <HAL_DMA_Abort_IT>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a10:	e00e      	b.n	8009a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f990 	bl	8009d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a18:	e00a      	b.n	8009a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f98c 	bl	8009d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a20:	e006      	b.n	8009a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f988 	bl	8009d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a2e:	e170      	b.n	8009d12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a30:	bf00      	nop
    return;
 8009a32:	e16e      	b.n	8009d12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	f040 814a 	bne.w	8009cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8143 	beq.w	8009cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 813c 	beq.w	8009cd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60bb      	str	r3, [r7, #8]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	f040 80b4 	bne.w	8009be8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 8140 	beq.w	8009d16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	f080 8139 	bcs.w	8009d16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab6:	f000 8088 	beq.w	8009bca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1d9      	bne.n	8009aba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b18:	f023 0301 	bic.w	r3, r3, #1
 8009b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3314      	adds	r3, #20
 8009b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e1      	bne.n	8009b06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3314      	adds	r3, #20
 8009b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3314      	adds	r3, #20
 8009b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e3      	bne.n	8009b42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9a:	f023 0310 	bic.w	r3, r3, #16
 8009b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	330c      	adds	r3, #12
 8009ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bac:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e3      	bne.n	8009b88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f9 fc0e 	bl	80033e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f8b6 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009be0:	e099      	b.n	8009d16 <HAL_UART_IRQHandler+0x50e>
 8009be2:	bf00      	nop
 8009be4:	08009f83 	.word	0x08009f83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 808b 	beq.w	8009d1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 8086 	beq.w	8009d1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c32:	647a      	str	r2, [r7, #68]	; 0x44
 8009c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e3      	bne.n	8009c0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	623b      	str	r3, [r7, #32]
   return(result);
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e3      	bne.n	8009c46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	330c      	adds	r3, #12
 8009c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 0310 	bic.w	r3, r3, #16
 8009ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009cb0:	61fa      	str	r2, [r7, #28]
 8009cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	69b9      	ldr	r1, [r7, #24]
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e3      	bne.n	8009c8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f83e 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cd0:	e023      	b.n	8009d1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x4ea>
 8009cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f95d 	bl	8009faa <UART_Transmit_IT>
    return;
 8009cf0:	e014      	b.n	8009d1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <HAL_UART_IRQHandler+0x514>
 8009cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d008      	beq.n	8009d1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f99d 	bl	800a04a <UART_EndTransmit_IT>
    return;
 8009d10:	e004      	b.n	8009d1c <HAL_UART_IRQHandler+0x514>
    return;
 8009d12:	bf00      	nop
 8009d14:	e002      	b.n	8009d1c <HAL_UART_IRQHandler+0x514>
      return;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_UART_IRQHandler+0x514>
      return;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	37e8      	adds	r7, #232	; 0xe8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop

08009d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b090      	sub	sp, #64	; 0x40
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	4613      	mov	r3, r2
 8009d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d74:	e050      	b.n	8009e18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7c:	d04c      	beq.n	8009e18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d84:	f7f9 f9bc 	bl	8003100 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d241      	bcs.n	8009e18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	330c      	adds	r3, #12
 8009d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	330c      	adds	r3, #12
 8009db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009db4:	637a      	str	r2, [r7, #52]	; 0x34
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e5      	bne.n	8009d94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3314      	adds	r3, #20
 8009dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	e853 3f00 	ldrex	r3, [r3]
 8009dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f023 0301 	bic.w	r3, r3, #1
 8009dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3314      	adds	r3, #20
 8009de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de8:	623a      	str	r2, [r7, #32]
 8009dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	69f9      	ldr	r1, [r7, #28]
 8009dee:	6a3a      	ldr	r2, [r7, #32]
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e5      	bne.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e00f      	b.n	8009e38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	4013      	ands	r3, r2
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	bf0c      	ite	eq
 8009e28:	2301      	moveq	r3, #1
 8009e2a:	2300      	movne	r3, #0
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d09f      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3740      	adds	r7, #64	; 0x40
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	88fa      	ldrh	r2, [r7, #6]
 8009e58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2222      	movs	r2, #34	; 0x22
 8009e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d007      	beq.n	8009e8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695a      	ldr	r2, [r3, #20]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0220 	orr.w	r2, r2, #32
 8009eac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b095      	sub	sp, #84	; 0x54
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ee4:	643a      	str	r2, [r7, #64]	; 0x40
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3314      	adds	r3, #20
 8009efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	f023 0301 	bic.w	r3, r3, #1
 8009f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3314      	adds	r3, #20
 8009f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f20:	e841 2300 	strex	r3, r2, [r1]
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e5      	bne.n	8009ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d119      	bne.n	8009f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	330c      	adds	r3, #12
 8009f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f023 0310 	bic.w	r3, r3, #16
 8009f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	330c      	adds	r3, #12
 8009f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f54:	61ba      	str	r2, [r7, #24]
 8009f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6979      	ldr	r1, [r7, #20]
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	613b      	str	r3, [r7, #16]
   return(result);
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f76:	bf00      	nop
 8009f78:	3754      	adds	r7, #84	; 0x54
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7ff fecb 	bl	8009d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b21      	cmp	r3, #33	; 0x21
 8009fbc:	d13e      	bne.n	800a03c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc6:	d114      	bne.n	8009ff2 <UART_Transmit_IT+0x48>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d110      	bne.n	8009ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	1c9a      	adds	r2, r3, #2
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	621a      	str	r2, [r3, #32]
 8009ff0:	e008      	b.n	800a004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	1c59      	adds	r1, r3, #1
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6211      	str	r1, [r2, #32]
 8009ffc:	781a      	ldrb	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a008:	b29b      	uxth	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	4619      	mov	r1, r3
 800a012:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10f      	bne.n	800a038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e000      	b.n	800a03e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a03c:	2302      	movs	r3, #2
  }
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2220      	movs	r2, #32
 800a066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fe5a 	bl	8009d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08c      	sub	sp, #48	; 0x30
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b22      	cmp	r3, #34	; 0x22
 800a08c:	f040 80ab 	bne.w	800a1e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d117      	bne.n	800a0ca <UART_Receive_IT+0x50>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d113      	bne.n	800a0ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	1c9a      	adds	r2, r3, #2
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	629a      	str	r2, [r3, #40]	; 0x28
 800a0c8:	e026      	b.n	800a118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0dc:	d007      	beq.n	800a0ee <UART_Receive_IT+0x74>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <UART_Receive_IT+0x82>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	e008      	b.n	800a10e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	b29b      	uxth	r3, r3
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4619      	mov	r1, r3
 800a126:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d15a      	bne.n	800a1e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 0220 	bic.w	r2, r2, #32
 800a13a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a14a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	695a      	ldr	r2, [r3, #20]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0201 	bic.w	r2, r2, #1
 800a15a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d135      	bne.n	800a1d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	330c      	adds	r3, #12
 800a178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	613b      	str	r3, [r7, #16]
   return(result);
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f023 0310 	bic.w	r3, r3, #16
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	330c      	adds	r3, #12
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	623a      	str	r2, [r7, #32]
 800a194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	69f9      	ldr	r1, [r7, #28]
 800a198:	6a3a      	ldr	r2, [r7, #32]
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e5      	bne.n	800a172 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0310 	and.w	r3, r3, #16
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d10a      	bne.n	800a1ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fdbb 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
 800a1d6:	e002      	b.n	800a1de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7f8 fe57 	bl	8002e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e002      	b.n	800a1e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e000      	b.n	800a1e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a1e6:	2302      	movs	r3, #2
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f4:	b0c0      	sub	sp, #256	; 0x100
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20c:	68d9      	ldr	r1, [r3, #12]
 800a20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	ea40 0301 	orr.w	r3, r0, r1
 800a218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	431a      	orrs	r2, r3
 800a228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	431a      	orrs	r2, r3
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	4313      	orrs	r3, r2
 800a238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a248:	f021 010c 	bic.w	r1, r1, #12
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a256:	430b      	orrs	r3, r1
 800a258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26a:	6999      	ldr	r1, [r3, #24]
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	ea40 0301 	orr.w	r3, r0, r1
 800a276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b8f      	ldr	r3, [pc, #572]	; (800a4bc <UART_SetConfig+0x2cc>)
 800a280:	429a      	cmp	r2, r3
 800a282:	d005      	beq.n	800a290 <UART_SetConfig+0xa0>
 800a284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	4b8d      	ldr	r3, [pc, #564]	; (800a4c0 <UART_SetConfig+0x2d0>)
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d104      	bne.n	800a29a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a290:	f7fe fc20 	bl	8008ad4 <HAL_RCC_GetPCLK2Freq>
 800a294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a298:	e003      	b.n	800a2a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a29a:	f7fe fc07 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 800a29e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ac:	f040 810c 	bne.w	800a4c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	1891      	adds	r1, r2, r2
 800a2c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2ca:	415b      	adcs	r3, r3
 800a2cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	eb12 0801 	adds.w	r8, r2, r1
 800a2d8:	4629      	mov	r1, r5
 800a2da:	eb43 0901 	adc.w	r9, r3, r1
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2f2:	4690      	mov	r8, r2
 800a2f4:	4699      	mov	r9, r3
 800a2f6:	4623      	mov	r3, r4
 800a2f8:	eb18 0303 	adds.w	r3, r8, r3
 800a2fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a300:	462b      	mov	r3, r5
 800a302:	eb49 0303 	adc.w	r3, r9, r3
 800a306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a31a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a31e:	460b      	mov	r3, r1
 800a320:	18db      	adds	r3, r3, r3
 800a322:	653b      	str	r3, [r7, #80]	; 0x50
 800a324:	4613      	mov	r3, r2
 800a326:	eb42 0303 	adc.w	r3, r2, r3
 800a32a:	657b      	str	r3, [r7, #84]	; 0x54
 800a32c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a334:	f7f5 ffcc 	bl	80002d0 <__aeabi_uldivmod>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4b61      	ldr	r3, [pc, #388]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a33e:	fba3 2302 	umull	r2, r3, r3, r2
 800a342:	095b      	lsrs	r3, r3, #5
 800a344:	011c      	lsls	r4, r3, #4
 800a346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a358:	4642      	mov	r2, r8
 800a35a:	464b      	mov	r3, r9
 800a35c:	1891      	adds	r1, r2, r2
 800a35e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a360:	415b      	adcs	r3, r3
 800a362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a368:	4641      	mov	r1, r8
 800a36a:	eb12 0a01 	adds.w	sl, r2, r1
 800a36e:	4649      	mov	r1, r9
 800a370:	eb43 0b01 	adc.w	fp, r3, r1
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	f04f 0300 	mov.w	r3, #0
 800a37c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a388:	4692      	mov	sl, r2
 800a38a:	469b      	mov	fp, r3
 800a38c:	4643      	mov	r3, r8
 800a38e:	eb1a 0303 	adds.w	r3, sl, r3
 800a392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a396:	464b      	mov	r3, r9
 800a398:	eb4b 0303 	adc.w	r3, fp, r3
 800a39c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	18db      	adds	r3, r3, r3
 800a3b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	eb42 0303 	adc.w	r3, r2, r3
 800a3c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3ca:	f7f5 ff81 	bl	80002d0 <__aeabi_uldivmod>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4b3b      	ldr	r3, [pc, #236]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a3d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	2264      	movs	r2, #100	; 0x64
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	1acb      	subs	r3, r1, r3
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3ea:	4b36      	ldr	r3, [pc, #216]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a3ec:	fba3 2302 	umull	r2, r3, r3, r2
 800a3f0:	095b      	lsrs	r3, r3, #5
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3f8:	441c      	add	r4, r3
 800a3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	1891      	adds	r1, r2, r2
 800a412:	63b9      	str	r1, [r7, #56]	; 0x38
 800a414:	415b      	adcs	r3, r3
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a41c:	4641      	mov	r1, r8
 800a41e:	1851      	adds	r1, r2, r1
 800a420:	6339      	str	r1, [r7, #48]	; 0x30
 800a422:	4649      	mov	r1, r9
 800a424:	414b      	adcs	r3, r1
 800a426:	637b      	str	r3, [r7, #52]	; 0x34
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a434:	4659      	mov	r1, fp
 800a436:	00cb      	lsls	r3, r1, #3
 800a438:	4651      	mov	r1, sl
 800a43a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a43e:	4651      	mov	r1, sl
 800a440:	00ca      	lsls	r2, r1, #3
 800a442:	4610      	mov	r0, r2
 800a444:	4619      	mov	r1, r3
 800a446:	4603      	mov	r3, r0
 800a448:	4642      	mov	r2, r8
 800a44a:	189b      	adds	r3, r3, r2
 800a44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a450:	464b      	mov	r3, r9
 800a452:	460a      	mov	r2, r1
 800a454:	eb42 0303 	adc.w	r3, r2, r3
 800a458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a46c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a470:	460b      	mov	r3, r1
 800a472:	18db      	adds	r3, r3, r3
 800a474:	62bb      	str	r3, [r7, #40]	; 0x28
 800a476:	4613      	mov	r3, r2
 800a478:	eb42 0303 	adc.w	r3, r2, r3
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a486:	f7f5 ff23 	bl	80002d0 <__aeabi_uldivmod>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a490:	fba3 1302 	umull	r1, r3, r3, r2
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	2164      	movs	r1, #100	; 0x64
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	3332      	adds	r3, #50	; 0x32
 800a4a2:	4a08      	ldr	r2, [pc, #32]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	095b      	lsrs	r3, r3, #5
 800a4aa:	f003 0207 	and.w	r2, r3, #7
 800a4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4422      	add	r2, r4
 800a4b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4b8:	e105      	b.n	800a6c6 <UART_SetConfig+0x4d6>
 800a4ba:	bf00      	nop
 800a4bc:	40011000 	.word	0x40011000
 800a4c0:	40011400 	.word	0x40011400
 800a4c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4da:	4642      	mov	r2, r8
 800a4dc:	464b      	mov	r3, r9
 800a4de:	1891      	adds	r1, r2, r2
 800a4e0:	6239      	str	r1, [r7, #32]
 800a4e2:	415b      	adcs	r3, r3
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4ea:	4641      	mov	r1, r8
 800a4ec:	1854      	adds	r4, r2, r1
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	eb43 0501 	adc.w	r5, r3, r1
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	00eb      	lsls	r3, r5, #3
 800a4fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a502:	00e2      	lsls	r2, r4, #3
 800a504:	4614      	mov	r4, r2
 800a506:	461d      	mov	r5, r3
 800a508:	4643      	mov	r3, r8
 800a50a:	18e3      	adds	r3, r4, r3
 800a50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a510:	464b      	mov	r3, r9
 800a512:	eb45 0303 	adc.w	r3, r5, r3
 800a516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	f04f 0300 	mov.w	r3, #0
 800a532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a536:	4629      	mov	r1, r5
 800a538:	008b      	lsls	r3, r1, #2
 800a53a:	4621      	mov	r1, r4
 800a53c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a540:	4621      	mov	r1, r4
 800a542:	008a      	lsls	r2, r1, #2
 800a544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a548:	f7f5 fec2 	bl	80002d0 <__aeabi_uldivmod>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4b60      	ldr	r3, [pc, #384]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a552:	fba3 2302 	umull	r2, r3, r3, r2
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	011c      	lsls	r4, r3, #4
 800a55a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a56c:	4642      	mov	r2, r8
 800a56e:	464b      	mov	r3, r9
 800a570:	1891      	adds	r1, r2, r2
 800a572:	61b9      	str	r1, [r7, #24]
 800a574:	415b      	adcs	r3, r3
 800a576:	61fb      	str	r3, [r7, #28]
 800a578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a57c:	4641      	mov	r1, r8
 800a57e:	1851      	adds	r1, r2, r1
 800a580:	6139      	str	r1, [r7, #16]
 800a582:	4649      	mov	r1, r9
 800a584:	414b      	adcs	r3, r1
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a594:	4659      	mov	r1, fp
 800a596:	00cb      	lsls	r3, r1, #3
 800a598:	4651      	mov	r1, sl
 800a59a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a59e:	4651      	mov	r1, sl
 800a5a0:	00ca      	lsls	r2, r1, #3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	189b      	adds	r3, r3, r2
 800a5ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	eb42 0303 	adc.w	r3, r2, r3
 800a5b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5c8:	f04f 0200 	mov.w	r2, #0
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	008b      	lsls	r3, r1, #2
 800a5d8:	4641      	mov	r1, r8
 800a5da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5de:	4641      	mov	r1, r8
 800a5e0:	008a      	lsls	r2, r1, #2
 800a5e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5e6:	f7f5 fe73 	bl	80002d0 <__aeabi_uldivmod>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4b39      	ldr	r3, [pc, #228]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a5f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	2164      	movs	r1, #100	; 0x64
 800a5f8:	fb01 f303 	mul.w	r3, r1, r3
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	3332      	adds	r3, #50	; 0x32
 800a602:	4a34      	ldr	r2, [pc, #208]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a604:	fba2 2303 	umull	r2, r3, r2, r3
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a60e:	441c      	add	r4, r3
 800a610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a614:	2200      	movs	r2, #0
 800a616:	673b      	str	r3, [r7, #112]	; 0x70
 800a618:	677a      	str	r2, [r7, #116]	; 0x74
 800a61a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	1891      	adds	r1, r2, r2
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	415b      	adcs	r3, r3
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a62e:	4641      	mov	r1, r8
 800a630:	1851      	adds	r1, r2, r1
 800a632:	6039      	str	r1, [r7, #0]
 800a634:	4649      	mov	r1, r9
 800a636:	414b      	adcs	r3, r1
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a646:	4659      	mov	r1, fp
 800a648:	00cb      	lsls	r3, r1, #3
 800a64a:	4651      	mov	r1, sl
 800a64c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a650:	4651      	mov	r1, sl
 800a652:	00ca      	lsls	r2, r1, #3
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	4603      	mov	r3, r0
 800a65a:	4642      	mov	r2, r8
 800a65c:	189b      	adds	r3, r3, r2
 800a65e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a660:	464b      	mov	r3, r9
 800a662:	460a      	mov	r2, r1
 800a664:	eb42 0303 	adc.w	r3, r2, r3
 800a668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	663b      	str	r3, [r7, #96]	; 0x60
 800a674:	667a      	str	r2, [r7, #100]	; 0x64
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a682:	4649      	mov	r1, r9
 800a684:	008b      	lsls	r3, r1, #2
 800a686:	4641      	mov	r1, r8
 800a688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a68c:	4641      	mov	r1, r8
 800a68e:	008a      	lsls	r2, r1, #2
 800a690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a694:	f7f5 fe1c 	bl	80002d0 <__aeabi_uldivmod>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a69e:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a2:	095b      	lsrs	r3, r3, #5
 800a6a4:	2164      	movs	r1, #100	; 0x64
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	3332      	adds	r3, #50	; 0x32
 800a6b0:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	f003 020f 	and.w	r2, r3, #15
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4422      	add	r2, r4
 800a6c4:	609a      	str	r2, [r3, #8]
}
 800a6c6:	bf00      	nop
 800a6c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6d2:	bf00      	nop
 800a6d4:	51eb851f 	.word	0x51eb851f

0800a6d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d123      	bne.n	800a732 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a6f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	6851      	ldr	r1, [r2, #4]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	6892      	ldr	r2, [r2, #8]
 800a6fe:	4311      	orrs	r1, r2
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	68d2      	ldr	r2, [r2, #12]
 800a704:	4311      	orrs	r1, r2
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	6912      	ldr	r2, [r2, #16]
 800a70a:	4311      	orrs	r1, r2
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	6952      	ldr	r2, [r2, #20]
 800a710:	4311      	orrs	r1, r2
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	6992      	ldr	r2, [r2, #24]
 800a716:	4311      	orrs	r1, r2
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	69d2      	ldr	r2, [r2, #28]
 800a71c:	4311      	orrs	r1, r2
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	6a12      	ldr	r2, [r2, #32]
 800a722:	4311      	orrs	r1, r2
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a728:	430a      	orrs	r2, r1
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	e028      	b.n	800a784 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	69d9      	ldr	r1, [r3, #28]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	4319      	orrs	r1, r3
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	430b      	orrs	r3, r1
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	6851      	ldr	r1, [r2, #4]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6892      	ldr	r2, [r2, #8]
 800a764:	4311      	orrs	r1, r2
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	68d2      	ldr	r2, [r2, #12]
 800a76a:	4311      	orrs	r1, r2
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	6912      	ldr	r2, [r2, #16]
 800a770:	4311      	orrs	r1, r2
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	6952      	ldr	r2, [r2, #20]
 800a776:	4311      	orrs	r1, r2
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	6992      	ldr	r2, [r2, #24]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a792:	b480      	push	{r7}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d128      	bne.n	800a7f6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	1e59      	subs	r1, r3, #1
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	4319      	orrs	r1, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	021b      	lsls	r3, r3, #8
 800a7c4:	4319      	orrs	r1, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	031b      	lsls	r3, r3, #12
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	4319      	orrs	r1, r3
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	051b      	lsls	r3, r3, #20
 800a7e2:	4319      	orrs	r1, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	061b      	lsls	r3, r3, #24
 800a7ec:	430b      	orrs	r3, r1
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	609a      	str	r2, [r3, #8]
 800a7f4:	e02f      	b.n	800a856 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	68d2      	ldr	r2, [r2, #12]
 800a806:	3a01      	subs	r2, #1
 800a808:	0311      	lsls	r1, r2, #12
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	6952      	ldr	r2, [r2, #20]
 800a80e:	3a01      	subs	r2, #1
 800a810:	0512      	lsls	r2, r2, #20
 800a812:	430a      	orrs	r2, r1
 800a814:	431a      	orrs	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	1e59      	subs	r1, r3, #1
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	4319      	orrs	r1, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	3b01      	subs	r3, #1
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	4319      	orrs	r1, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	3b01      	subs	r3, #1
 800a842:	041b      	lsls	r3, r3, #16
 800a844:	4319      	orrs	r1, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	061b      	lsls	r3, r3, #24
 800a84e:	430b      	orrs	r3, r1
 800a850:	431a      	orrs	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	0d9b      	lsrs	r3, r3, #22
 800a87a:	059b      	lsls	r3, r3, #22
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	6811      	ldr	r1, [r2, #0]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	6852      	ldr	r2, [r2, #4]
 800a884:	4311      	orrs	r1, r2
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	6892      	ldr	r2, [r2, #8]
 800a88a:	3a01      	subs	r2, #1
 800a88c:	0152      	lsls	r2, r2, #5
 800a88e:	4311      	orrs	r1, r2
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	68d2      	ldr	r2, [r2, #12]
 800a894:	0252      	lsls	r2, r2, #9
 800a896:	430a      	orrs	r2, r1
 800a898:	431a      	orrs	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a89e:	f7f8 fc2f 	bl	8003100 <HAL_GetTick>
 800a8a2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a8a4:	e010      	b.n	800a8c8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d00c      	beq.n	800a8c8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <FMC_SDRAM_SendCommand+0x60>
 800a8b4:	f7f8 fc24 	bl	8003100 <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d201      	bcs.n	800a8c8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e006      	b.n	800a8d6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	d0e8      	beq.n	800a8a6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a8f0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	0052      	lsls	r2, r2, #1
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <atoi>:
 800a90c:	220a      	movs	r2, #10
 800a90e:	2100      	movs	r1, #0
 800a910:	f000 b9a6 	b.w	800ac60 <strtol>

0800a914 <__errno>:
 800a914:	4b01      	ldr	r3, [pc, #4]	; (800a91c <__errno+0x8>)
 800a916:	6818      	ldr	r0, [r3, #0]
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	20000038 	.word	0x20000038

0800a920 <__libc_init_array>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4d0d      	ldr	r5, [pc, #52]	; (800a958 <__libc_init_array+0x38>)
 800a924:	4c0d      	ldr	r4, [pc, #52]	; (800a95c <__libc_init_array+0x3c>)
 800a926:	1b64      	subs	r4, r4, r5
 800a928:	10a4      	asrs	r4, r4, #2
 800a92a:	2600      	movs	r6, #0
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	d109      	bne.n	800a944 <__libc_init_array+0x24>
 800a930:	4d0b      	ldr	r5, [pc, #44]	; (800a960 <__libc_init_array+0x40>)
 800a932:	4c0c      	ldr	r4, [pc, #48]	; (800a964 <__libc_init_array+0x44>)
 800a934:	f001 f998 	bl	800bc68 <_init>
 800a938:	1b64      	subs	r4, r4, r5
 800a93a:	10a4      	asrs	r4, r4, #2
 800a93c:	2600      	movs	r6, #0
 800a93e:	42a6      	cmp	r6, r4
 800a940:	d105      	bne.n	800a94e <__libc_init_array+0x2e>
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	f855 3b04 	ldr.w	r3, [r5], #4
 800a948:	4798      	blx	r3
 800a94a:	3601      	adds	r6, #1
 800a94c:	e7ee      	b.n	800a92c <__libc_init_array+0xc>
 800a94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a952:	4798      	blx	r3
 800a954:	3601      	adds	r6, #1
 800a956:	e7f2      	b.n	800a93e <__libc_init_array+0x1e>
 800a958:	080a2210 	.word	0x080a2210
 800a95c:	080a2210 	.word	0x080a2210
 800a960:	080a2210 	.word	0x080a2210
 800a964:	080a2214 	.word	0x080a2214

0800a968 <memset>:
 800a968:	4402      	add	r2, r0
 800a96a:	4603      	mov	r3, r0
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d100      	bne.n	800a972 <memset+0xa>
 800a970:	4770      	bx	lr
 800a972:	f803 1b01 	strb.w	r1, [r3], #1
 800a976:	e7f9      	b.n	800a96c <memset+0x4>

0800a978 <iprintf>:
 800a978:	b40f      	push	{r0, r1, r2, r3}
 800a97a:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <iprintf+0x2c>)
 800a97c:	b513      	push	{r0, r1, r4, lr}
 800a97e:	681c      	ldr	r4, [r3, #0]
 800a980:	b124      	cbz	r4, 800a98c <iprintf+0x14>
 800a982:	69a3      	ldr	r3, [r4, #24]
 800a984:	b913      	cbnz	r3, 800a98c <iprintf+0x14>
 800a986:	4620      	mov	r0, r4
 800a988:	f000 fb6c 	bl	800b064 <__sinit>
 800a98c:	ab05      	add	r3, sp, #20
 800a98e:	9a04      	ldr	r2, [sp, #16]
 800a990:	68a1      	ldr	r1, [r4, #8]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fd8f 	bl	800b4b8 <_vfiprintf_r>
 800a99a:	b002      	add	sp, #8
 800a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a0:	b004      	add	sp, #16
 800a9a2:	4770      	bx	lr
 800a9a4:	20000038 	.word	0x20000038

0800a9a8 <_puts_r>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	460e      	mov	r6, r1
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	b118      	cbz	r0, 800a9b8 <_puts_r+0x10>
 800a9b0:	6983      	ldr	r3, [r0, #24]
 800a9b2:	b90b      	cbnz	r3, 800a9b8 <_puts_r+0x10>
 800a9b4:	f000 fb56 	bl	800b064 <__sinit>
 800a9b8:	69ab      	ldr	r3, [r5, #24]
 800a9ba:	68ac      	ldr	r4, [r5, #8]
 800a9bc:	b913      	cbnz	r3, 800a9c4 <_puts_r+0x1c>
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 fb50 	bl	800b064 <__sinit>
 800a9c4:	4b2c      	ldr	r3, [pc, #176]	; (800aa78 <_puts_r+0xd0>)
 800a9c6:	429c      	cmp	r4, r3
 800a9c8:	d120      	bne.n	800aa0c <_puts_r+0x64>
 800a9ca:	686c      	ldr	r4, [r5, #4]
 800a9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ce:	07db      	lsls	r3, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_puts_r+0x36>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	0598      	lsls	r0, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_puts_r+0x36>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9da:	f000 fbf3 	bl	800b1c4 <__retarget_lock_acquire_recursive>
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	0719      	lsls	r1, r3, #28
 800a9e2:	d51d      	bpl.n	800aa20 <_puts_r+0x78>
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	b1db      	cbz	r3, 800aa20 <_puts_r+0x78>
 800a9e8:	3e01      	subs	r6, #1
 800a9ea:	68a3      	ldr	r3, [r4, #8]
 800a9ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	60a3      	str	r3, [r4, #8]
 800a9f4:	bb39      	cbnz	r1, 800aa46 <_puts_r+0x9e>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	da38      	bge.n	800aa6c <_puts_r+0xc4>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	210a      	movs	r1, #10
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f000 f938 	bl	800ac74 <__swbuf_r>
 800aa04:	3001      	adds	r0, #1
 800aa06:	d011      	beq.n	800aa2c <_puts_r+0x84>
 800aa08:	250a      	movs	r5, #10
 800aa0a:	e011      	b.n	800aa30 <_puts_r+0x88>
 800aa0c:	4b1b      	ldr	r3, [pc, #108]	; (800aa7c <_puts_r+0xd4>)
 800aa0e:	429c      	cmp	r4, r3
 800aa10:	d101      	bne.n	800aa16 <_puts_r+0x6e>
 800aa12:	68ac      	ldr	r4, [r5, #8]
 800aa14:	e7da      	b.n	800a9cc <_puts_r+0x24>
 800aa16:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <_puts_r+0xd8>)
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	bf08      	it	eq
 800aa1c:	68ec      	ldreq	r4, [r5, #12]
 800aa1e:	e7d5      	b.n	800a9cc <_puts_r+0x24>
 800aa20:	4621      	mov	r1, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 f978 	bl	800ad18 <__swsetup_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0dd      	beq.n	800a9e8 <_puts_r+0x40>
 800aa2c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa32:	07da      	lsls	r2, r3, #31
 800aa34:	d405      	bmi.n	800aa42 <_puts_r+0x9a>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	059b      	lsls	r3, r3, #22
 800aa3a:	d402      	bmi.n	800aa42 <_puts_r+0x9a>
 800aa3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa3e:	f000 fbc2 	bl	800b1c6 <__retarget_lock_release_recursive>
 800aa42:	4628      	mov	r0, r5
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	da04      	bge.n	800aa54 <_puts_r+0xac>
 800aa4a:	69a2      	ldr	r2, [r4, #24]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	dc06      	bgt.n	800aa5e <_puts_r+0xb6>
 800aa50:	290a      	cmp	r1, #10
 800aa52:	d004      	beq.n	800aa5e <_puts_r+0xb6>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	6022      	str	r2, [r4, #0]
 800aa5a:	7019      	strb	r1, [r3, #0]
 800aa5c:	e7c5      	b.n	800a9ea <_puts_r+0x42>
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f000 f907 	bl	800ac74 <__swbuf_r>
 800aa66:	3001      	adds	r0, #1
 800aa68:	d1bf      	bne.n	800a9ea <_puts_r+0x42>
 800aa6a:	e7df      	b.n	800aa2c <_puts_r+0x84>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	250a      	movs	r5, #10
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	6022      	str	r2, [r4, #0]
 800aa74:	701d      	strb	r5, [r3, #0]
 800aa76:	e7db      	b.n	800aa30 <_puts_r+0x88>
 800aa78:	080a2194 	.word	0x080a2194
 800aa7c:	080a21b4 	.word	0x080a21b4
 800aa80:	080a2174 	.word	0x080a2174

0800aa84 <puts>:
 800aa84:	4b02      	ldr	r3, [pc, #8]	; (800aa90 <puts+0xc>)
 800aa86:	4601      	mov	r1, r0
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f7ff bf8d 	b.w	800a9a8 <_puts_r>
 800aa8e:	bf00      	nop
 800aa90:	20000038 	.word	0x20000038

0800aa94 <strcpy>:
 800aa94:	4603      	mov	r3, r0
 800aa96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa9a:	f803 2b01 	strb.w	r2, [r3], #1
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d1f9      	bne.n	800aa96 <strcpy+0x2>
 800aaa2:	4770      	bx	lr

0800aaa4 <strtok>:
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <strtok+0x5c>)
 800aaa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaa8:	681e      	ldr	r6, [r3, #0]
 800aaaa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800aaac:	4605      	mov	r5, r0
 800aaae:	b9fc      	cbnz	r4, 800aaf0 <strtok+0x4c>
 800aab0:	2050      	movs	r0, #80	; 0x50
 800aab2:	9101      	str	r1, [sp, #4]
 800aab4:	f000 fbee 	bl	800b294 <malloc>
 800aab8:	9901      	ldr	r1, [sp, #4]
 800aaba:	65b0      	str	r0, [r6, #88]	; 0x58
 800aabc:	4602      	mov	r2, r0
 800aabe:	b920      	cbnz	r0, 800aaca <strtok+0x26>
 800aac0:	4b10      	ldr	r3, [pc, #64]	; (800ab04 <strtok+0x60>)
 800aac2:	4811      	ldr	r0, [pc, #68]	; (800ab08 <strtok+0x64>)
 800aac4:	2157      	movs	r1, #87	; 0x57
 800aac6:	f000 f995 	bl	800adf4 <__assert_func>
 800aaca:	e9c0 4400 	strd	r4, r4, [r0]
 800aace:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aad2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aad6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aada:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aade:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aae2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aae6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aaea:	6184      	str	r4, [r0, #24]
 800aaec:	7704      	strb	r4, [r0, #28]
 800aaee:	6244      	str	r4, [r0, #36]	; 0x24
 800aaf0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	b002      	add	sp, #8
 800aaf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aafc:	f000 b806 	b.w	800ab0c <__strtok_r>
 800ab00:	20000038 	.word	0x20000038
 800ab04:	080a1fc0 	.word	0x080a1fc0
 800ab08:	080a1fd7 	.word	0x080a1fd7

0800ab0c <__strtok_r>:
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	b908      	cbnz	r0, 800ab14 <__strtok_r+0x8>
 800ab10:	6810      	ldr	r0, [r2, #0]
 800ab12:	b188      	cbz	r0, 800ab38 <__strtok_r+0x2c>
 800ab14:	4604      	mov	r4, r0
 800ab16:	4620      	mov	r0, r4
 800ab18:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab22:	b91e      	cbnz	r6, 800ab2c <__strtok_r+0x20>
 800ab24:	b965      	cbnz	r5, 800ab40 <__strtok_r+0x34>
 800ab26:	6015      	str	r5, [r2, #0]
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e005      	b.n	800ab38 <__strtok_r+0x2c>
 800ab2c:	42b5      	cmp	r5, r6
 800ab2e:	d1f6      	bne.n	800ab1e <__strtok_r+0x12>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1f0      	bne.n	800ab16 <__strtok_r+0xa>
 800ab34:	6014      	str	r4, [r2, #0]
 800ab36:	7003      	strb	r3, [r0, #0]
 800ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3a:	461c      	mov	r4, r3
 800ab3c:	e00c      	b.n	800ab58 <__strtok_r+0x4c>
 800ab3e:	b915      	cbnz	r5, 800ab46 <__strtok_r+0x3a>
 800ab40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab44:	460e      	mov	r6, r1
 800ab46:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ab4a:	42ab      	cmp	r3, r5
 800ab4c:	d1f7      	bne.n	800ab3e <__strtok_r+0x32>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0f3      	beq.n	800ab3a <__strtok_r+0x2e>
 800ab52:	2300      	movs	r3, #0
 800ab54:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ab58:	6014      	str	r4, [r2, #0]
 800ab5a:	e7ed      	b.n	800ab38 <__strtok_r+0x2c>

0800ab5c <_strtol_l.constprop.0>:
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab62:	d001      	beq.n	800ab68 <_strtol_l.constprop.0+0xc>
 800ab64:	2b24      	cmp	r3, #36	; 0x24
 800ab66:	d906      	bls.n	800ab76 <_strtol_l.constprop.0+0x1a>
 800ab68:	f7ff fed4 	bl	800a914 <__errno>
 800ab6c:	2316      	movs	r3, #22
 800ab6e:	6003      	str	r3, [r0, #0]
 800ab70:	2000      	movs	r0, #0
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac5c <_strtol_l.constprop.0+0x100>
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	462e      	mov	r6, r5
 800ab7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab82:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ab86:	f017 0708 	ands.w	r7, r7, #8
 800ab8a:	d1f7      	bne.n	800ab7c <_strtol_l.constprop.0+0x20>
 800ab8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab8e:	d132      	bne.n	800abf6 <_strtol_l.constprop.0+0x9a>
 800ab90:	782c      	ldrb	r4, [r5, #0]
 800ab92:	2701      	movs	r7, #1
 800ab94:	1cb5      	adds	r5, r6, #2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d05b      	beq.n	800ac52 <_strtol_l.constprop.0+0xf6>
 800ab9a:	2b10      	cmp	r3, #16
 800ab9c:	d109      	bne.n	800abb2 <_strtol_l.constprop.0+0x56>
 800ab9e:	2c30      	cmp	r4, #48	; 0x30
 800aba0:	d107      	bne.n	800abb2 <_strtol_l.constprop.0+0x56>
 800aba2:	782c      	ldrb	r4, [r5, #0]
 800aba4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aba8:	2c58      	cmp	r4, #88	; 0x58
 800abaa:	d14d      	bne.n	800ac48 <_strtol_l.constprop.0+0xec>
 800abac:	786c      	ldrb	r4, [r5, #1]
 800abae:	2310      	movs	r3, #16
 800abb0:	3502      	adds	r5, #2
 800abb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abb6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abba:	f04f 0c00 	mov.w	ip, #0
 800abbe:	fbb8 f9f3 	udiv	r9, r8, r3
 800abc2:	4666      	mov	r6, ip
 800abc4:	fb03 8a19 	mls	sl, r3, r9, r8
 800abc8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800abcc:	f1be 0f09 	cmp.w	lr, #9
 800abd0:	d816      	bhi.n	800ac00 <_strtol_l.constprop.0+0xa4>
 800abd2:	4674      	mov	r4, lr
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	dd24      	ble.n	800ac22 <_strtol_l.constprop.0+0xc6>
 800abd8:	f1bc 0f00 	cmp.w	ip, #0
 800abdc:	db1e      	blt.n	800ac1c <_strtol_l.constprop.0+0xc0>
 800abde:	45b1      	cmp	r9, r6
 800abe0:	d31c      	bcc.n	800ac1c <_strtol_l.constprop.0+0xc0>
 800abe2:	d101      	bne.n	800abe8 <_strtol_l.constprop.0+0x8c>
 800abe4:	45a2      	cmp	sl, r4
 800abe6:	db19      	blt.n	800ac1c <_strtol_l.constprop.0+0xc0>
 800abe8:	fb06 4603 	mla	r6, r6, r3, r4
 800abec:	f04f 0c01 	mov.w	ip, #1
 800abf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abf4:	e7e8      	b.n	800abc8 <_strtol_l.constprop.0+0x6c>
 800abf6:	2c2b      	cmp	r4, #43	; 0x2b
 800abf8:	bf04      	itt	eq
 800abfa:	782c      	ldrbeq	r4, [r5, #0]
 800abfc:	1cb5      	addeq	r5, r6, #2
 800abfe:	e7ca      	b.n	800ab96 <_strtol_l.constprop.0+0x3a>
 800ac00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac04:	f1be 0f19 	cmp.w	lr, #25
 800ac08:	d801      	bhi.n	800ac0e <_strtol_l.constprop.0+0xb2>
 800ac0a:	3c37      	subs	r4, #55	; 0x37
 800ac0c:	e7e2      	b.n	800abd4 <_strtol_l.constprop.0+0x78>
 800ac0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac12:	f1be 0f19 	cmp.w	lr, #25
 800ac16:	d804      	bhi.n	800ac22 <_strtol_l.constprop.0+0xc6>
 800ac18:	3c57      	subs	r4, #87	; 0x57
 800ac1a:	e7db      	b.n	800abd4 <_strtol_l.constprop.0+0x78>
 800ac1c:	f04f 3cff 	mov.w	ip, #4294967295
 800ac20:	e7e6      	b.n	800abf0 <_strtol_l.constprop.0+0x94>
 800ac22:	f1bc 0f00 	cmp.w	ip, #0
 800ac26:	da05      	bge.n	800ac34 <_strtol_l.constprop.0+0xd8>
 800ac28:	2322      	movs	r3, #34	; 0x22
 800ac2a:	6003      	str	r3, [r0, #0]
 800ac2c:	4646      	mov	r6, r8
 800ac2e:	b942      	cbnz	r2, 800ac42 <_strtol_l.constprop.0+0xe6>
 800ac30:	4630      	mov	r0, r6
 800ac32:	e79e      	b.n	800ab72 <_strtol_l.constprop.0+0x16>
 800ac34:	b107      	cbz	r7, 800ac38 <_strtol_l.constprop.0+0xdc>
 800ac36:	4276      	negs	r6, r6
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d0f9      	beq.n	800ac30 <_strtol_l.constprop.0+0xd4>
 800ac3c:	f1bc 0f00 	cmp.w	ip, #0
 800ac40:	d000      	beq.n	800ac44 <_strtol_l.constprop.0+0xe8>
 800ac42:	1e69      	subs	r1, r5, #1
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	e7f3      	b.n	800ac30 <_strtol_l.constprop.0+0xd4>
 800ac48:	2430      	movs	r4, #48	; 0x30
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1b1      	bne.n	800abb2 <_strtol_l.constprop.0+0x56>
 800ac4e:	2308      	movs	r3, #8
 800ac50:	e7af      	b.n	800abb2 <_strtol_l.constprop.0+0x56>
 800ac52:	2c30      	cmp	r4, #48	; 0x30
 800ac54:	d0a5      	beq.n	800aba2 <_strtol_l.constprop.0+0x46>
 800ac56:	230a      	movs	r3, #10
 800ac58:	e7ab      	b.n	800abb2 <_strtol_l.constprop.0+0x56>
 800ac5a:	bf00      	nop
 800ac5c:	080a2071 	.word	0x080a2071

0800ac60 <strtol>:
 800ac60:	4613      	mov	r3, r2
 800ac62:	460a      	mov	r2, r1
 800ac64:	4601      	mov	r1, r0
 800ac66:	4802      	ldr	r0, [pc, #8]	; (800ac70 <strtol+0x10>)
 800ac68:	6800      	ldr	r0, [r0, #0]
 800ac6a:	f7ff bf77 	b.w	800ab5c <_strtol_l.constprop.0>
 800ac6e:	bf00      	nop
 800ac70:	20000038 	.word	0x20000038

0800ac74 <__swbuf_r>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	460e      	mov	r6, r1
 800ac78:	4614      	mov	r4, r2
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b118      	cbz	r0, 800ac86 <__swbuf_r+0x12>
 800ac7e:	6983      	ldr	r3, [r0, #24]
 800ac80:	b90b      	cbnz	r3, 800ac86 <__swbuf_r+0x12>
 800ac82:	f000 f9ef 	bl	800b064 <__sinit>
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <__swbuf_r+0x98>)
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d12b      	bne.n	800ace4 <__swbuf_r+0x70>
 800ac8c:	686c      	ldr	r4, [r5, #4]
 800ac8e:	69a3      	ldr	r3, [r4, #24]
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	071a      	lsls	r2, r3, #28
 800ac96:	d52f      	bpl.n	800acf8 <__swbuf_r+0x84>
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b36b      	cbz	r3, 800acf8 <__swbuf_r+0x84>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	1ac0      	subs	r0, r0, r3
 800aca2:	6963      	ldr	r3, [r4, #20]
 800aca4:	b2f6      	uxtb	r6, r6
 800aca6:	4283      	cmp	r3, r0
 800aca8:	4637      	mov	r7, r6
 800acaa:	dc04      	bgt.n	800acb6 <__swbuf_r+0x42>
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 f944 	bl	800af3c <_fflush_r>
 800acb4:	bb30      	cbnz	r0, 800ad04 <__swbuf_r+0x90>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	3b01      	subs	r3, #1
 800acba:	60a3      	str	r3, [r4, #8]
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	6022      	str	r2, [r4, #0]
 800acc2:	701e      	strb	r6, [r3, #0]
 800acc4:	6963      	ldr	r3, [r4, #20]
 800acc6:	3001      	adds	r0, #1
 800acc8:	4283      	cmp	r3, r0
 800acca:	d004      	beq.n	800acd6 <__swbuf_r+0x62>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d506      	bpl.n	800ace0 <__swbuf_r+0x6c>
 800acd2:	2e0a      	cmp	r6, #10
 800acd4:	d104      	bne.n	800ace0 <__swbuf_r+0x6c>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 f92f 	bl	800af3c <_fflush_r>
 800acde:	b988      	cbnz	r0, 800ad04 <__swbuf_r+0x90>
 800ace0:	4638      	mov	r0, r7
 800ace2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace4:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <__swbuf_r+0x9c>)
 800ace6:	429c      	cmp	r4, r3
 800ace8:	d101      	bne.n	800acee <__swbuf_r+0x7a>
 800acea:	68ac      	ldr	r4, [r5, #8]
 800acec:	e7cf      	b.n	800ac8e <__swbuf_r+0x1a>
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <__swbuf_r+0xa0>)
 800acf0:	429c      	cmp	r4, r3
 800acf2:	bf08      	it	eq
 800acf4:	68ec      	ldreq	r4, [r5, #12]
 800acf6:	e7ca      	b.n	800ac8e <__swbuf_r+0x1a>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f80c 	bl	800ad18 <__swsetup_r>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d0cb      	beq.n	800ac9c <__swbuf_r+0x28>
 800ad04:	f04f 37ff 	mov.w	r7, #4294967295
 800ad08:	e7ea      	b.n	800ace0 <__swbuf_r+0x6c>
 800ad0a:	bf00      	nop
 800ad0c:	080a2194 	.word	0x080a2194
 800ad10:	080a21b4 	.word	0x080a21b4
 800ad14:	080a2174 	.word	0x080a2174

0800ad18 <__swsetup_r>:
 800ad18:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <__swsetup_r+0xcc>)
 800ad1a:	b570      	push	{r4, r5, r6, lr}
 800ad1c:	681d      	ldr	r5, [r3, #0]
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	b125      	cbz	r5, 800ad2e <__swsetup_r+0x16>
 800ad24:	69ab      	ldr	r3, [r5, #24]
 800ad26:	b913      	cbnz	r3, 800ad2e <__swsetup_r+0x16>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f99b 	bl	800b064 <__sinit>
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <__swsetup_r+0xd0>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d10f      	bne.n	800ad54 <__swsetup_r+0x3c>
 800ad34:	686c      	ldr	r4, [r5, #4]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad3c:	0719      	lsls	r1, r3, #28
 800ad3e:	d42c      	bmi.n	800ad9a <__swsetup_r+0x82>
 800ad40:	06dd      	lsls	r5, r3, #27
 800ad42:	d411      	bmi.n	800ad68 <__swsetup_r+0x50>
 800ad44:	2309      	movs	r3, #9
 800ad46:	6033      	str	r3, [r6, #0]
 800ad48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad52:	e03e      	b.n	800add2 <__swsetup_r+0xba>
 800ad54:	4b25      	ldr	r3, [pc, #148]	; (800adec <__swsetup_r+0xd4>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d101      	bne.n	800ad5e <__swsetup_r+0x46>
 800ad5a:	68ac      	ldr	r4, [r5, #8]
 800ad5c:	e7eb      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad5e:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <__swsetup_r+0xd8>)
 800ad60:	429c      	cmp	r4, r3
 800ad62:	bf08      	it	eq
 800ad64:	68ec      	ldreq	r4, [r5, #12]
 800ad66:	e7e6      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad68:	0758      	lsls	r0, r3, #29
 800ad6a:	d512      	bpl.n	800ad92 <__swsetup_r+0x7a>
 800ad6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad6e:	b141      	cbz	r1, 800ad82 <__swsetup_r+0x6a>
 800ad70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d002      	beq.n	800ad7e <__swsetup_r+0x66>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 fa93 	bl	800b2a4 <_free_r>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	6363      	str	r3, [r4, #52]	; 0x34
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	f043 0308 	orr.w	r3, r3, #8
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	b94b      	cbnz	r3, 800adb2 <__swsetup_r+0x9a>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ada4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada8:	d003      	beq.n	800adb2 <__swsetup_r+0x9a>
 800adaa:	4621      	mov	r1, r4
 800adac:	4630      	mov	r0, r6
 800adae:	f000 fa31 	bl	800b214 <__smakebuf_r>
 800adb2:	89a0      	ldrh	r0, [r4, #12]
 800adb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adb8:	f010 0301 	ands.w	r3, r0, #1
 800adbc:	d00a      	beq.n	800add4 <__swsetup_r+0xbc>
 800adbe:	2300      	movs	r3, #0
 800adc0:	60a3      	str	r3, [r4, #8]
 800adc2:	6963      	ldr	r3, [r4, #20]
 800adc4:	425b      	negs	r3, r3
 800adc6:	61a3      	str	r3, [r4, #24]
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	b943      	cbnz	r3, 800adde <__swsetup_r+0xc6>
 800adcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800add0:	d1ba      	bne.n	800ad48 <__swsetup_r+0x30>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	0781      	lsls	r1, r0, #30
 800add6:	bf58      	it	pl
 800add8:	6963      	ldrpl	r3, [r4, #20]
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	e7f4      	b.n	800adc8 <__swsetup_r+0xb0>
 800adde:	2000      	movs	r0, #0
 800ade0:	e7f7      	b.n	800add2 <__swsetup_r+0xba>
 800ade2:	bf00      	nop
 800ade4:	20000038 	.word	0x20000038
 800ade8:	080a2194 	.word	0x080a2194
 800adec:	080a21b4 	.word	0x080a21b4
 800adf0:	080a2174 	.word	0x080a2174

0800adf4 <__assert_func>:
 800adf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adf6:	4614      	mov	r4, r2
 800adf8:	461a      	mov	r2, r3
 800adfa:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <__assert_func+0x2c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4605      	mov	r5, r0
 800ae00:	68d8      	ldr	r0, [r3, #12]
 800ae02:	b14c      	cbz	r4, 800ae18 <__assert_func+0x24>
 800ae04:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <__assert_func+0x30>)
 800ae06:	9100      	str	r1, [sp, #0]
 800ae08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae0c:	4906      	ldr	r1, [pc, #24]	; (800ae28 <__assert_func+0x34>)
 800ae0e:	462b      	mov	r3, r5
 800ae10:	f000 f9a6 	bl	800b160 <fiprintf>
 800ae14:	f000 fe7a 	bl	800bb0c <abort>
 800ae18:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <__assert_func+0x38>)
 800ae1a:	461c      	mov	r4, r3
 800ae1c:	e7f3      	b.n	800ae06 <__assert_func+0x12>
 800ae1e:	bf00      	nop
 800ae20:	20000038 	.word	0x20000038
 800ae24:	080a2034 	.word	0x080a2034
 800ae28:	080a2041 	.word	0x080a2041
 800ae2c:	080a206f 	.word	0x080a206f

0800ae30 <__sflush_r>:
 800ae30:	898a      	ldrh	r2, [r1, #12]
 800ae32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	0710      	lsls	r0, r2, #28
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	d458      	bmi.n	800aef0 <__sflush_r+0xc0>
 800ae3e:	684b      	ldr	r3, [r1, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dc05      	bgt.n	800ae50 <__sflush_r+0x20>
 800ae44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	dc02      	bgt.n	800ae50 <__sflush_r+0x20>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	d0f9      	beq.n	800ae4a <__sflush_r+0x1a>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae5c:	682f      	ldr	r7, [r5, #0]
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	d032      	beq.n	800aec8 <__sflush_r+0x98>
 800ae62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	075a      	lsls	r2, r3, #29
 800ae68:	d505      	bpl.n	800ae76 <__sflush_r+0x46>
 800ae6a:	6863      	ldr	r3, [r4, #4]
 800ae6c:	1ac0      	subs	r0, r0, r3
 800ae6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae70:	b10b      	cbz	r3, 800ae76 <__sflush_r+0x46>
 800ae72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae74:	1ac0      	subs	r0, r0, r3
 800ae76:	2300      	movs	r3, #0
 800ae78:	4602      	mov	r2, r0
 800ae7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b0      	blx	r6
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	d106      	bne.n	800ae96 <__sflush_r+0x66>
 800ae88:	6829      	ldr	r1, [r5, #0]
 800ae8a:	291d      	cmp	r1, #29
 800ae8c:	d82c      	bhi.n	800aee8 <__sflush_r+0xb8>
 800ae8e:	4a2a      	ldr	r2, [pc, #168]	; (800af38 <__sflush_r+0x108>)
 800ae90:	40ca      	lsrs	r2, r1
 800ae92:	07d6      	lsls	r6, r2, #31
 800ae94:	d528      	bpl.n	800aee8 <__sflush_r+0xb8>
 800ae96:	2200      	movs	r2, #0
 800ae98:	6062      	str	r2, [r4, #4]
 800ae9a:	04d9      	lsls	r1, r3, #19
 800ae9c:	6922      	ldr	r2, [r4, #16]
 800ae9e:	6022      	str	r2, [r4, #0]
 800aea0:	d504      	bpl.n	800aeac <__sflush_r+0x7c>
 800aea2:	1c42      	adds	r2, r0, #1
 800aea4:	d101      	bne.n	800aeaa <__sflush_r+0x7a>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b903      	cbnz	r3, 800aeac <__sflush_r+0x7c>
 800aeaa:	6560      	str	r0, [r4, #84]	; 0x54
 800aeac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeae:	602f      	str	r7, [r5, #0]
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	d0ca      	beq.n	800ae4a <__sflush_r+0x1a>
 800aeb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	d002      	beq.n	800aec2 <__sflush_r+0x92>
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 f9f1 	bl	800b2a4 <_free_r>
 800aec2:	2000      	movs	r0, #0
 800aec4:	6360      	str	r0, [r4, #52]	; 0x34
 800aec6:	e7c1      	b.n	800ae4c <__sflush_r+0x1c>
 800aec8:	6a21      	ldr	r1, [r4, #32]
 800aeca:	2301      	movs	r3, #1
 800aecc:	4628      	mov	r0, r5
 800aece:	47b0      	blx	r6
 800aed0:	1c41      	adds	r1, r0, #1
 800aed2:	d1c7      	bne.n	800ae64 <__sflush_r+0x34>
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0c4      	beq.n	800ae64 <__sflush_r+0x34>
 800aeda:	2b1d      	cmp	r3, #29
 800aedc:	d001      	beq.n	800aee2 <__sflush_r+0xb2>
 800aede:	2b16      	cmp	r3, #22
 800aee0:	d101      	bne.n	800aee6 <__sflush_r+0xb6>
 800aee2:	602f      	str	r7, [r5, #0]
 800aee4:	e7b1      	b.n	800ae4a <__sflush_r+0x1a>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	e7ad      	b.n	800ae4c <__sflush_r+0x1c>
 800aef0:	690f      	ldr	r7, [r1, #16]
 800aef2:	2f00      	cmp	r7, #0
 800aef4:	d0a9      	beq.n	800ae4a <__sflush_r+0x1a>
 800aef6:	0793      	lsls	r3, r2, #30
 800aef8:	680e      	ldr	r6, [r1, #0]
 800aefa:	bf08      	it	eq
 800aefc:	694b      	ldreq	r3, [r1, #20]
 800aefe:	600f      	str	r7, [r1, #0]
 800af00:	bf18      	it	ne
 800af02:	2300      	movne	r3, #0
 800af04:	eba6 0807 	sub.w	r8, r6, r7
 800af08:	608b      	str	r3, [r1, #8]
 800af0a:	f1b8 0f00 	cmp.w	r8, #0
 800af0e:	dd9c      	ble.n	800ae4a <__sflush_r+0x1a>
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af14:	4643      	mov	r3, r8
 800af16:	463a      	mov	r2, r7
 800af18:	4628      	mov	r0, r5
 800af1a:	47b0      	blx	r6
 800af1c:	2800      	cmp	r0, #0
 800af1e:	dc06      	bgt.n	800af2e <__sflush_r+0xfe>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	e78e      	b.n	800ae4c <__sflush_r+0x1c>
 800af2e:	4407      	add	r7, r0
 800af30:	eba8 0800 	sub.w	r8, r8, r0
 800af34:	e7e9      	b.n	800af0a <__sflush_r+0xda>
 800af36:	bf00      	nop
 800af38:	20400001 	.word	0x20400001

0800af3c <_fflush_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	690b      	ldr	r3, [r1, #16]
 800af40:	4605      	mov	r5, r0
 800af42:	460c      	mov	r4, r1
 800af44:	b913      	cbnz	r3, 800af4c <_fflush_r+0x10>
 800af46:	2500      	movs	r5, #0
 800af48:	4628      	mov	r0, r5
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	b118      	cbz	r0, 800af56 <_fflush_r+0x1a>
 800af4e:	6983      	ldr	r3, [r0, #24]
 800af50:	b90b      	cbnz	r3, 800af56 <_fflush_r+0x1a>
 800af52:	f000 f887 	bl	800b064 <__sinit>
 800af56:	4b14      	ldr	r3, [pc, #80]	; (800afa8 <_fflush_r+0x6c>)
 800af58:	429c      	cmp	r4, r3
 800af5a:	d11b      	bne.n	800af94 <_fflush_r+0x58>
 800af5c:	686c      	ldr	r4, [r5, #4]
 800af5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0ef      	beq.n	800af46 <_fflush_r+0xa>
 800af66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af68:	07d0      	lsls	r0, r2, #31
 800af6a:	d404      	bmi.n	800af76 <_fflush_r+0x3a>
 800af6c:	0599      	lsls	r1, r3, #22
 800af6e:	d402      	bmi.n	800af76 <_fflush_r+0x3a>
 800af70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af72:	f000 f927 	bl	800b1c4 <__retarget_lock_acquire_recursive>
 800af76:	4628      	mov	r0, r5
 800af78:	4621      	mov	r1, r4
 800af7a:	f7ff ff59 	bl	800ae30 <__sflush_r>
 800af7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af80:	07da      	lsls	r2, r3, #31
 800af82:	4605      	mov	r5, r0
 800af84:	d4e0      	bmi.n	800af48 <_fflush_r+0xc>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	059b      	lsls	r3, r3, #22
 800af8a:	d4dd      	bmi.n	800af48 <_fflush_r+0xc>
 800af8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8e:	f000 f91a 	bl	800b1c6 <__retarget_lock_release_recursive>
 800af92:	e7d9      	b.n	800af48 <_fflush_r+0xc>
 800af94:	4b05      	ldr	r3, [pc, #20]	; (800afac <_fflush_r+0x70>)
 800af96:	429c      	cmp	r4, r3
 800af98:	d101      	bne.n	800af9e <_fflush_r+0x62>
 800af9a:	68ac      	ldr	r4, [r5, #8]
 800af9c:	e7df      	b.n	800af5e <_fflush_r+0x22>
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <_fflush_r+0x74>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	bf08      	it	eq
 800afa4:	68ec      	ldreq	r4, [r5, #12]
 800afa6:	e7da      	b.n	800af5e <_fflush_r+0x22>
 800afa8:	080a2194 	.word	0x080a2194
 800afac:	080a21b4 	.word	0x080a21b4
 800afb0:	080a2174 	.word	0x080a2174

0800afb4 <std>:
 800afb4:	2300      	movs	r3, #0
 800afb6:	b510      	push	{r4, lr}
 800afb8:	4604      	mov	r4, r0
 800afba:	e9c0 3300 	strd	r3, r3, [r0]
 800afbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afc2:	6083      	str	r3, [r0, #8]
 800afc4:	8181      	strh	r1, [r0, #12]
 800afc6:	6643      	str	r3, [r0, #100]	; 0x64
 800afc8:	81c2      	strh	r2, [r0, #14]
 800afca:	6183      	str	r3, [r0, #24]
 800afcc:	4619      	mov	r1, r3
 800afce:	2208      	movs	r2, #8
 800afd0:	305c      	adds	r0, #92	; 0x5c
 800afd2:	f7ff fcc9 	bl	800a968 <memset>
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <std+0x38>)
 800afd8:	6263      	str	r3, [r4, #36]	; 0x24
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <std+0x3c>)
 800afdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800afde:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <std+0x40>)
 800afe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <std+0x44>)
 800afe4:	6224      	str	r4, [r4, #32]
 800afe6:	6323      	str	r3, [r4, #48]	; 0x30
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	bf00      	nop
 800afec:	0800ba61 	.word	0x0800ba61
 800aff0:	0800ba83 	.word	0x0800ba83
 800aff4:	0800babb 	.word	0x0800babb
 800aff8:	0800badf 	.word	0x0800badf

0800affc <_cleanup_r>:
 800affc:	4901      	ldr	r1, [pc, #4]	; (800b004 <_cleanup_r+0x8>)
 800affe:	f000 b8c1 	b.w	800b184 <_fwalk_reent>
 800b002:	bf00      	nop
 800b004:	0800af3d 	.word	0x0800af3d

0800b008 <__sfmoreglue>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	2268      	movs	r2, #104	; 0x68
 800b00c:	1e4d      	subs	r5, r1, #1
 800b00e:	4355      	muls	r5, r2
 800b010:	460e      	mov	r6, r1
 800b012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b016:	f000 f9b1 	bl	800b37c <_malloc_r>
 800b01a:	4604      	mov	r4, r0
 800b01c:	b140      	cbz	r0, 800b030 <__sfmoreglue+0x28>
 800b01e:	2100      	movs	r1, #0
 800b020:	e9c0 1600 	strd	r1, r6, [r0]
 800b024:	300c      	adds	r0, #12
 800b026:	60a0      	str	r0, [r4, #8]
 800b028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b02c:	f7ff fc9c 	bl	800a968 <memset>
 800b030:	4620      	mov	r0, r4
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <__sfp_lock_acquire>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__sfp_lock_acquire+0x8>)
 800b036:	f000 b8c5 	b.w	800b1c4 <__retarget_lock_acquire_recursive>
 800b03a:	bf00      	nop
 800b03c:	200004f9 	.word	0x200004f9

0800b040 <__sfp_lock_release>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__sfp_lock_release+0x8>)
 800b042:	f000 b8c0 	b.w	800b1c6 <__retarget_lock_release_recursive>
 800b046:	bf00      	nop
 800b048:	200004f9 	.word	0x200004f9

0800b04c <__sinit_lock_acquire>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__sinit_lock_acquire+0x8>)
 800b04e:	f000 b8b9 	b.w	800b1c4 <__retarget_lock_acquire_recursive>
 800b052:	bf00      	nop
 800b054:	200004fa 	.word	0x200004fa

0800b058 <__sinit_lock_release>:
 800b058:	4801      	ldr	r0, [pc, #4]	; (800b060 <__sinit_lock_release+0x8>)
 800b05a:	f000 b8b4 	b.w	800b1c6 <__retarget_lock_release_recursive>
 800b05e:	bf00      	nop
 800b060:	200004fa 	.word	0x200004fa

0800b064 <__sinit>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4604      	mov	r4, r0
 800b068:	f7ff fff0 	bl	800b04c <__sinit_lock_acquire>
 800b06c:	69a3      	ldr	r3, [r4, #24]
 800b06e:	b11b      	cbz	r3, 800b078 <__sinit+0x14>
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b074:	f7ff bff0 	b.w	800b058 <__sinit_lock_release>
 800b078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b07c:	6523      	str	r3, [r4, #80]	; 0x50
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <__sinit+0x68>)
 800b080:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <__sinit+0x6c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	62a2      	str	r2, [r4, #40]	; 0x28
 800b086:	42a3      	cmp	r3, r4
 800b088:	bf04      	itt	eq
 800b08a:	2301      	moveq	r3, #1
 800b08c:	61a3      	streq	r3, [r4, #24]
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 f820 	bl	800b0d4 <__sfp>
 800b094:	6060      	str	r0, [r4, #4]
 800b096:	4620      	mov	r0, r4
 800b098:	f000 f81c 	bl	800b0d4 <__sfp>
 800b09c:	60a0      	str	r0, [r4, #8]
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f818 	bl	800b0d4 <__sfp>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60e0      	str	r0, [r4, #12]
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	6860      	ldr	r0, [r4, #4]
 800b0ac:	f7ff ff82 	bl	800afb4 <std>
 800b0b0:	68a0      	ldr	r0, [r4, #8]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	2109      	movs	r1, #9
 800b0b6:	f7ff ff7d 	bl	800afb4 <std>
 800b0ba:	68e0      	ldr	r0, [r4, #12]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	2112      	movs	r1, #18
 800b0c0:	f7ff ff78 	bl	800afb4 <std>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	61a3      	str	r3, [r4, #24]
 800b0c8:	e7d2      	b.n	800b070 <__sinit+0xc>
 800b0ca:	bf00      	nop
 800b0cc:	080a1fbc 	.word	0x080a1fbc
 800b0d0:	0800affd 	.word	0x0800affd

0800b0d4 <__sfp>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	f7ff ffac 	bl	800b034 <__sfp_lock_acquire>
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <__sfp+0x84>)
 800b0de:	681e      	ldr	r6, [r3, #0]
 800b0e0:	69b3      	ldr	r3, [r6, #24]
 800b0e2:	b913      	cbnz	r3, 800b0ea <__sfp+0x16>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ffbd 	bl	800b064 <__sinit>
 800b0ea:	3648      	adds	r6, #72	; 0x48
 800b0ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	d503      	bpl.n	800b0fc <__sfp+0x28>
 800b0f4:	6833      	ldr	r3, [r6, #0]
 800b0f6:	b30b      	cbz	r3, 800b13c <__sfp+0x68>
 800b0f8:	6836      	ldr	r6, [r6, #0]
 800b0fa:	e7f7      	b.n	800b0ec <__sfp+0x18>
 800b0fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b100:	b9d5      	cbnz	r5, 800b138 <__sfp+0x64>
 800b102:	4b16      	ldr	r3, [pc, #88]	; (800b15c <__sfp+0x88>)
 800b104:	60e3      	str	r3, [r4, #12]
 800b106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b10a:	6665      	str	r5, [r4, #100]	; 0x64
 800b10c:	f000 f859 	bl	800b1c2 <__retarget_lock_init_recursive>
 800b110:	f7ff ff96 	bl	800b040 <__sfp_lock_release>
 800b114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b11c:	6025      	str	r5, [r4, #0]
 800b11e:	61a5      	str	r5, [r4, #24]
 800b120:	2208      	movs	r2, #8
 800b122:	4629      	mov	r1, r5
 800b124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b128:	f7ff fc1e 	bl	800a968 <memset>
 800b12c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b134:	4620      	mov	r0, r4
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	3468      	adds	r4, #104	; 0x68
 800b13a:	e7d9      	b.n	800b0f0 <__sfp+0x1c>
 800b13c:	2104      	movs	r1, #4
 800b13e:	4638      	mov	r0, r7
 800b140:	f7ff ff62 	bl	800b008 <__sfmoreglue>
 800b144:	4604      	mov	r4, r0
 800b146:	6030      	str	r0, [r6, #0]
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1d5      	bne.n	800b0f8 <__sfp+0x24>
 800b14c:	f7ff ff78 	bl	800b040 <__sfp_lock_release>
 800b150:	230c      	movs	r3, #12
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	e7ee      	b.n	800b134 <__sfp+0x60>
 800b156:	bf00      	nop
 800b158:	080a1fbc 	.word	0x080a1fbc
 800b15c:	ffff0001 	.word	0xffff0001

0800b160 <fiprintf>:
 800b160:	b40e      	push	{r1, r2, r3}
 800b162:	b503      	push	{r0, r1, lr}
 800b164:	4601      	mov	r1, r0
 800b166:	ab03      	add	r3, sp, #12
 800b168:	4805      	ldr	r0, [pc, #20]	; (800b180 <fiprintf+0x20>)
 800b16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16e:	6800      	ldr	r0, [r0, #0]
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	f000 f9a1 	bl	800b4b8 <_vfiprintf_r>
 800b176:	b002      	add	sp, #8
 800b178:	f85d eb04 	ldr.w	lr, [sp], #4
 800b17c:	b003      	add	sp, #12
 800b17e:	4770      	bx	lr
 800b180:	20000038 	.word	0x20000038

0800b184 <_fwalk_reent>:
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b188:	4606      	mov	r6, r0
 800b18a:	4688      	mov	r8, r1
 800b18c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b190:	2700      	movs	r7, #0
 800b192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b196:	f1b9 0901 	subs.w	r9, r9, #1
 800b19a:	d505      	bpl.n	800b1a8 <_fwalk_reent+0x24>
 800b19c:	6824      	ldr	r4, [r4, #0]
 800b19e:	2c00      	cmp	r4, #0
 800b1a0:	d1f7      	bne.n	800b192 <_fwalk_reent+0xe>
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a8:	89ab      	ldrh	r3, [r5, #12]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d907      	bls.n	800b1be <_fwalk_reent+0x3a>
 800b1ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	d003      	beq.n	800b1be <_fwalk_reent+0x3a>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	47c0      	blx	r8
 800b1bc:	4307      	orrs	r7, r0
 800b1be:	3568      	adds	r5, #104	; 0x68
 800b1c0:	e7e9      	b.n	800b196 <_fwalk_reent+0x12>

0800b1c2 <__retarget_lock_init_recursive>:
 800b1c2:	4770      	bx	lr

0800b1c4 <__retarget_lock_acquire_recursive>:
 800b1c4:	4770      	bx	lr

0800b1c6 <__retarget_lock_release_recursive>:
 800b1c6:	4770      	bx	lr

0800b1c8 <__swhatbuf_r>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	460e      	mov	r6, r1
 800b1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	b096      	sub	sp, #88	; 0x58
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	461d      	mov	r5, r3
 800b1d8:	da08      	bge.n	800b1ec <__swhatbuf_r+0x24>
 800b1da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	602a      	str	r2, [r5, #0]
 800b1e2:	061a      	lsls	r2, r3, #24
 800b1e4:	d410      	bmi.n	800b208 <__swhatbuf_r+0x40>
 800b1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ea:	e00e      	b.n	800b20a <__swhatbuf_r+0x42>
 800b1ec:	466a      	mov	r2, sp
 800b1ee:	f000 fca5 	bl	800bb3c <_fstat_r>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	dbf1      	blt.n	800b1da <__swhatbuf_r+0x12>
 800b1f6:	9a01      	ldr	r2, [sp, #4]
 800b1f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b200:	425a      	negs	r2, r3
 800b202:	415a      	adcs	r2, r3
 800b204:	602a      	str	r2, [r5, #0]
 800b206:	e7ee      	b.n	800b1e6 <__swhatbuf_r+0x1e>
 800b208:	2340      	movs	r3, #64	; 0x40
 800b20a:	2000      	movs	r0, #0
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	b016      	add	sp, #88	; 0x58
 800b210:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b214 <__smakebuf_r>:
 800b214:	898b      	ldrh	r3, [r1, #12]
 800b216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b218:	079d      	lsls	r5, r3, #30
 800b21a:	4606      	mov	r6, r0
 800b21c:	460c      	mov	r4, r1
 800b21e:	d507      	bpl.n	800b230 <__smakebuf_r+0x1c>
 800b220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	2301      	movs	r3, #1
 800b22a:	6163      	str	r3, [r4, #20]
 800b22c:	b002      	add	sp, #8
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	ab01      	add	r3, sp, #4
 800b232:	466a      	mov	r2, sp
 800b234:	f7ff ffc8 	bl	800b1c8 <__swhatbuf_r>
 800b238:	9900      	ldr	r1, [sp, #0]
 800b23a:	4605      	mov	r5, r0
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f89d 	bl	800b37c <_malloc_r>
 800b242:	b948      	cbnz	r0, 800b258 <__smakebuf_r+0x44>
 800b244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b248:	059a      	lsls	r2, r3, #22
 800b24a:	d4ef      	bmi.n	800b22c <__smakebuf_r+0x18>
 800b24c:	f023 0303 	bic.w	r3, r3, #3
 800b250:	f043 0302 	orr.w	r3, r3, #2
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	e7e3      	b.n	800b220 <__smakebuf_r+0xc>
 800b258:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <__smakebuf_r+0x7c>)
 800b25a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	6020      	str	r0, [r4, #0]
 800b260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	6163      	str	r3, [r4, #20]
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	6120      	str	r0, [r4, #16]
 800b26e:	b15b      	cbz	r3, 800b288 <__smakebuf_r+0x74>
 800b270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b274:	4630      	mov	r0, r6
 800b276:	f000 fc73 	bl	800bb60 <_isatty_r>
 800b27a:	b128      	cbz	r0, 800b288 <__smakebuf_r+0x74>
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	89a0      	ldrh	r0, [r4, #12]
 800b28a:	4305      	orrs	r5, r0
 800b28c:	81a5      	strh	r5, [r4, #12]
 800b28e:	e7cd      	b.n	800b22c <__smakebuf_r+0x18>
 800b290:	0800affd 	.word	0x0800affd

0800b294 <malloc>:
 800b294:	4b02      	ldr	r3, [pc, #8]	; (800b2a0 <malloc+0xc>)
 800b296:	4601      	mov	r1, r0
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	f000 b86f 	b.w	800b37c <_malloc_r>
 800b29e:	bf00      	nop
 800b2a0:	20000038 	.word	0x20000038

0800b2a4 <_free_r>:
 800b2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	d044      	beq.n	800b334 <_free_r+0x90>
 800b2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ae:	9001      	str	r0, [sp, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b2b6:	bfb8      	it	lt
 800b2b8:	18e4      	addlt	r4, r4, r3
 800b2ba:	f000 fc73 	bl	800bba4 <__malloc_lock>
 800b2be:	4a1e      	ldr	r2, [pc, #120]	; (800b338 <_free_r+0x94>)
 800b2c0:	9801      	ldr	r0, [sp, #4]
 800b2c2:	6813      	ldr	r3, [r2, #0]
 800b2c4:	b933      	cbnz	r3, 800b2d4 <_free_r+0x30>
 800b2c6:	6063      	str	r3, [r4, #4]
 800b2c8:	6014      	str	r4, [r2, #0]
 800b2ca:	b003      	add	sp, #12
 800b2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2d0:	f000 bc6e 	b.w	800bbb0 <__malloc_unlock>
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	d908      	bls.n	800b2ea <_free_r+0x46>
 800b2d8:	6825      	ldr	r5, [r4, #0]
 800b2da:	1961      	adds	r1, r4, r5
 800b2dc:	428b      	cmp	r3, r1
 800b2de:	bf01      	itttt	eq
 800b2e0:	6819      	ldreq	r1, [r3, #0]
 800b2e2:	685b      	ldreq	r3, [r3, #4]
 800b2e4:	1949      	addeq	r1, r1, r5
 800b2e6:	6021      	streq	r1, [r4, #0]
 800b2e8:	e7ed      	b.n	800b2c6 <_free_r+0x22>
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	b10b      	cbz	r3, 800b2f4 <_free_r+0x50>
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	d9fa      	bls.n	800b2ea <_free_r+0x46>
 800b2f4:	6811      	ldr	r1, [r2, #0]
 800b2f6:	1855      	adds	r5, r2, r1
 800b2f8:	42a5      	cmp	r5, r4
 800b2fa:	d10b      	bne.n	800b314 <_free_r+0x70>
 800b2fc:	6824      	ldr	r4, [r4, #0]
 800b2fe:	4421      	add	r1, r4
 800b300:	1854      	adds	r4, r2, r1
 800b302:	42a3      	cmp	r3, r4
 800b304:	6011      	str	r1, [r2, #0]
 800b306:	d1e0      	bne.n	800b2ca <_free_r+0x26>
 800b308:	681c      	ldr	r4, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	6053      	str	r3, [r2, #4]
 800b30e:	4421      	add	r1, r4
 800b310:	6011      	str	r1, [r2, #0]
 800b312:	e7da      	b.n	800b2ca <_free_r+0x26>
 800b314:	d902      	bls.n	800b31c <_free_r+0x78>
 800b316:	230c      	movs	r3, #12
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	e7d6      	b.n	800b2ca <_free_r+0x26>
 800b31c:	6825      	ldr	r5, [r4, #0]
 800b31e:	1961      	adds	r1, r4, r5
 800b320:	428b      	cmp	r3, r1
 800b322:	bf04      	itt	eq
 800b324:	6819      	ldreq	r1, [r3, #0]
 800b326:	685b      	ldreq	r3, [r3, #4]
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	bf04      	itt	eq
 800b32c:	1949      	addeq	r1, r1, r5
 800b32e:	6021      	streq	r1, [r4, #0]
 800b330:	6054      	str	r4, [r2, #4]
 800b332:	e7ca      	b.n	800b2ca <_free_r+0x26>
 800b334:	b003      	add	sp, #12
 800b336:	bd30      	pop	{r4, r5, pc}
 800b338:	200004fc 	.word	0x200004fc

0800b33c <sbrk_aligned>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	4e0e      	ldr	r6, [pc, #56]	; (800b378 <sbrk_aligned+0x3c>)
 800b340:	460c      	mov	r4, r1
 800b342:	6831      	ldr	r1, [r6, #0]
 800b344:	4605      	mov	r5, r0
 800b346:	b911      	cbnz	r1, 800b34e <sbrk_aligned+0x12>
 800b348:	f000 fb7a 	bl	800ba40 <_sbrk_r>
 800b34c:	6030      	str	r0, [r6, #0]
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f000 fb75 	bl	800ba40 <_sbrk_r>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	d00a      	beq.n	800b370 <sbrk_aligned+0x34>
 800b35a:	1cc4      	adds	r4, r0, #3
 800b35c:	f024 0403 	bic.w	r4, r4, #3
 800b360:	42a0      	cmp	r0, r4
 800b362:	d007      	beq.n	800b374 <sbrk_aligned+0x38>
 800b364:	1a21      	subs	r1, r4, r0
 800b366:	4628      	mov	r0, r5
 800b368:	f000 fb6a 	bl	800ba40 <_sbrk_r>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d101      	bne.n	800b374 <sbrk_aligned+0x38>
 800b370:	f04f 34ff 	mov.w	r4, #4294967295
 800b374:	4620      	mov	r0, r4
 800b376:	bd70      	pop	{r4, r5, r6, pc}
 800b378:	20000500 	.word	0x20000500

0800b37c <_malloc_r>:
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	1ccd      	adds	r5, r1, #3
 800b382:	f025 0503 	bic.w	r5, r5, #3
 800b386:	3508      	adds	r5, #8
 800b388:	2d0c      	cmp	r5, #12
 800b38a:	bf38      	it	cc
 800b38c:	250c      	movcc	r5, #12
 800b38e:	2d00      	cmp	r5, #0
 800b390:	4607      	mov	r7, r0
 800b392:	db01      	blt.n	800b398 <_malloc_r+0x1c>
 800b394:	42a9      	cmp	r1, r5
 800b396:	d905      	bls.n	800b3a4 <_malloc_r+0x28>
 800b398:	230c      	movs	r3, #12
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	2600      	movs	r6, #0
 800b39e:	4630      	mov	r0, r6
 800b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a4:	4e2e      	ldr	r6, [pc, #184]	; (800b460 <_malloc_r+0xe4>)
 800b3a6:	f000 fbfd 	bl	800bba4 <__malloc_lock>
 800b3aa:	6833      	ldr	r3, [r6, #0]
 800b3ac:	461c      	mov	r4, r3
 800b3ae:	bb34      	cbnz	r4, 800b3fe <_malloc_r+0x82>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	f7ff ffc2 	bl	800b33c <sbrk_aligned>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	d14d      	bne.n	800b45a <_malloc_r+0xde>
 800b3be:	6834      	ldr	r4, [r6, #0]
 800b3c0:	4626      	mov	r6, r4
 800b3c2:	2e00      	cmp	r6, #0
 800b3c4:	d140      	bne.n	800b448 <_malloc_r+0xcc>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	eb04 0803 	add.w	r8, r4, r3
 800b3d0:	f000 fb36 	bl	800ba40 <_sbrk_r>
 800b3d4:	4580      	cmp	r8, r0
 800b3d6:	d13a      	bne.n	800b44e <_malloc_r+0xd2>
 800b3d8:	6821      	ldr	r1, [r4, #0]
 800b3da:	3503      	adds	r5, #3
 800b3dc:	1a6d      	subs	r5, r5, r1
 800b3de:	f025 0503 	bic.w	r5, r5, #3
 800b3e2:	3508      	adds	r5, #8
 800b3e4:	2d0c      	cmp	r5, #12
 800b3e6:	bf38      	it	cc
 800b3e8:	250c      	movcc	r5, #12
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff ffa5 	bl	800b33c <sbrk_aligned>
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d02b      	beq.n	800b44e <_malloc_r+0xd2>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	442b      	add	r3, r5
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	e00e      	b.n	800b41c <_malloc_r+0xa0>
 800b3fe:	6822      	ldr	r2, [r4, #0]
 800b400:	1b52      	subs	r2, r2, r5
 800b402:	d41e      	bmi.n	800b442 <_malloc_r+0xc6>
 800b404:	2a0b      	cmp	r2, #11
 800b406:	d916      	bls.n	800b436 <_malloc_r+0xba>
 800b408:	1961      	adds	r1, r4, r5
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	6025      	str	r5, [r4, #0]
 800b40e:	bf18      	it	ne
 800b410:	6059      	strne	r1, [r3, #4]
 800b412:	6863      	ldr	r3, [r4, #4]
 800b414:	bf08      	it	eq
 800b416:	6031      	streq	r1, [r6, #0]
 800b418:	5162      	str	r2, [r4, r5]
 800b41a:	604b      	str	r3, [r1, #4]
 800b41c:	4638      	mov	r0, r7
 800b41e:	f104 060b 	add.w	r6, r4, #11
 800b422:	f000 fbc5 	bl	800bbb0 <__malloc_unlock>
 800b426:	f026 0607 	bic.w	r6, r6, #7
 800b42a:	1d23      	adds	r3, r4, #4
 800b42c:	1af2      	subs	r2, r6, r3
 800b42e:	d0b6      	beq.n	800b39e <_malloc_r+0x22>
 800b430:	1b9b      	subs	r3, r3, r6
 800b432:	50a3      	str	r3, [r4, r2]
 800b434:	e7b3      	b.n	800b39e <_malloc_r+0x22>
 800b436:	6862      	ldr	r2, [r4, #4]
 800b438:	42a3      	cmp	r3, r4
 800b43a:	bf0c      	ite	eq
 800b43c:	6032      	streq	r2, [r6, #0]
 800b43e:	605a      	strne	r2, [r3, #4]
 800b440:	e7ec      	b.n	800b41c <_malloc_r+0xa0>
 800b442:	4623      	mov	r3, r4
 800b444:	6864      	ldr	r4, [r4, #4]
 800b446:	e7b2      	b.n	800b3ae <_malloc_r+0x32>
 800b448:	4634      	mov	r4, r6
 800b44a:	6876      	ldr	r6, [r6, #4]
 800b44c:	e7b9      	b.n	800b3c2 <_malloc_r+0x46>
 800b44e:	230c      	movs	r3, #12
 800b450:	603b      	str	r3, [r7, #0]
 800b452:	4638      	mov	r0, r7
 800b454:	f000 fbac 	bl	800bbb0 <__malloc_unlock>
 800b458:	e7a1      	b.n	800b39e <_malloc_r+0x22>
 800b45a:	6025      	str	r5, [r4, #0]
 800b45c:	e7de      	b.n	800b41c <_malloc_r+0xa0>
 800b45e:	bf00      	nop
 800b460:	200004fc 	.word	0x200004fc

0800b464 <__sfputc_r>:
 800b464:	6893      	ldr	r3, [r2, #8]
 800b466:	3b01      	subs	r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	b410      	push	{r4}
 800b46c:	6093      	str	r3, [r2, #8]
 800b46e:	da08      	bge.n	800b482 <__sfputc_r+0x1e>
 800b470:	6994      	ldr	r4, [r2, #24]
 800b472:	42a3      	cmp	r3, r4
 800b474:	db01      	blt.n	800b47a <__sfputc_r+0x16>
 800b476:	290a      	cmp	r1, #10
 800b478:	d103      	bne.n	800b482 <__sfputc_r+0x1e>
 800b47a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b47e:	f7ff bbf9 	b.w	800ac74 <__swbuf_r>
 800b482:	6813      	ldr	r3, [r2, #0]
 800b484:	1c58      	adds	r0, r3, #1
 800b486:	6010      	str	r0, [r2, #0]
 800b488:	7019      	strb	r1, [r3, #0]
 800b48a:	4608      	mov	r0, r1
 800b48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <__sfputs_r>:
 800b492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	4614      	mov	r4, r2
 800b49a:	18d5      	adds	r5, r2, r3
 800b49c:	42ac      	cmp	r4, r5
 800b49e:	d101      	bne.n	800b4a4 <__sfputs_r+0x12>
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e007      	b.n	800b4b4 <__sfputs_r+0x22>
 800b4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a8:	463a      	mov	r2, r7
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ffda 	bl	800b464 <__sfputc_r>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d1f3      	bne.n	800b49c <__sfputs_r+0xa>
 800b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4b8 <_vfiprintf_r>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	460d      	mov	r5, r1
 800b4be:	b09d      	sub	sp, #116	; 0x74
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	4698      	mov	r8, r3
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	b118      	cbz	r0, 800b4d0 <_vfiprintf_r+0x18>
 800b4c8:	6983      	ldr	r3, [r0, #24]
 800b4ca:	b90b      	cbnz	r3, 800b4d0 <_vfiprintf_r+0x18>
 800b4cc:	f7ff fdca 	bl	800b064 <__sinit>
 800b4d0:	4b89      	ldr	r3, [pc, #548]	; (800b6f8 <_vfiprintf_r+0x240>)
 800b4d2:	429d      	cmp	r5, r3
 800b4d4:	d11b      	bne.n	800b50e <_vfiprintf_r+0x56>
 800b4d6:	6875      	ldr	r5, [r6, #4]
 800b4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4da:	07d9      	lsls	r1, r3, #31
 800b4dc:	d405      	bmi.n	800b4ea <_vfiprintf_r+0x32>
 800b4de:	89ab      	ldrh	r3, [r5, #12]
 800b4e0:	059a      	lsls	r2, r3, #22
 800b4e2:	d402      	bmi.n	800b4ea <_vfiprintf_r+0x32>
 800b4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4e6:	f7ff fe6d 	bl	800b1c4 <__retarget_lock_acquire_recursive>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	071b      	lsls	r3, r3, #28
 800b4ee:	d501      	bpl.n	800b4f4 <_vfiprintf_r+0x3c>
 800b4f0:	692b      	ldr	r3, [r5, #16]
 800b4f2:	b9eb      	cbnz	r3, 800b530 <_vfiprintf_r+0x78>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7ff fc0e 	bl	800ad18 <__swsetup_r>
 800b4fc:	b1c0      	cbz	r0, 800b530 <_vfiprintf_r+0x78>
 800b4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b500:	07dc      	lsls	r4, r3, #31
 800b502:	d50e      	bpl.n	800b522 <_vfiprintf_r+0x6a>
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	b01d      	add	sp, #116	; 0x74
 800b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50e:	4b7b      	ldr	r3, [pc, #492]	; (800b6fc <_vfiprintf_r+0x244>)
 800b510:	429d      	cmp	r5, r3
 800b512:	d101      	bne.n	800b518 <_vfiprintf_r+0x60>
 800b514:	68b5      	ldr	r5, [r6, #8]
 800b516:	e7df      	b.n	800b4d8 <_vfiprintf_r+0x20>
 800b518:	4b79      	ldr	r3, [pc, #484]	; (800b700 <_vfiprintf_r+0x248>)
 800b51a:	429d      	cmp	r5, r3
 800b51c:	bf08      	it	eq
 800b51e:	68f5      	ldreq	r5, [r6, #12]
 800b520:	e7da      	b.n	800b4d8 <_vfiprintf_r+0x20>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	0598      	lsls	r0, r3, #22
 800b526:	d4ed      	bmi.n	800b504 <_vfiprintf_r+0x4c>
 800b528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b52a:	f7ff fe4c 	bl	800b1c6 <__retarget_lock_release_recursive>
 800b52e:	e7e9      	b.n	800b504 <_vfiprintf_r+0x4c>
 800b530:	2300      	movs	r3, #0
 800b532:	9309      	str	r3, [sp, #36]	; 0x24
 800b534:	2320      	movs	r3, #32
 800b536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b53a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b53e:	2330      	movs	r3, #48	; 0x30
 800b540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b704 <_vfiprintf_r+0x24c>
 800b544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b548:	f04f 0901 	mov.w	r9, #1
 800b54c:	4623      	mov	r3, r4
 800b54e:	469a      	mov	sl, r3
 800b550:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b554:	b10a      	cbz	r2, 800b55a <_vfiprintf_r+0xa2>
 800b556:	2a25      	cmp	r2, #37	; 0x25
 800b558:	d1f9      	bne.n	800b54e <_vfiprintf_r+0x96>
 800b55a:	ebba 0b04 	subs.w	fp, sl, r4
 800b55e:	d00b      	beq.n	800b578 <_vfiprintf_r+0xc0>
 800b560:	465b      	mov	r3, fp
 800b562:	4622      	mov	r2, r4
 800b564:	4629      	mov	r1, r5
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ff93 	bl	800b492 <__sfputs_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	f000 80aa 	beq.w	800b6c6 <_vfiprintf_r+0x20e>
 800b572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b574:	445a      	add	r2, fp
 800b576:	9209      	str	r2, [sp, #36]	; 0x24
 800b578:	f89a 3000 	ldrb.w	r3, [sl]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 80a2 	beq.w	800b6c6 <_vfiprintf_r+0x20e>
 800b582:	2300      	movs	r3, #0
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b58c:	f10a 0a01 	add.w	sl, sl, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b598:	931a      	str	r3, [sp, #104]	; 0x68
 800b59a:	4654      	mov	r4, sl
 800b59c:	2205      	movs	r2, #5
 800b59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a2:	4858      	ldr	r0, [pc, #352]	; (800b704 <_vfiprintf_r+0x24c>)
 800b5a4:	f7f4 fe44 	bl	8000230 <memchr>
 800b5a8:	9a04      	ldr	r2, [sp, #16]
 800b5aa:	b9d8      	cbnz	r0, 800b5e4 <_vfiprintf_r+0x12c>
 800b5ac:	06d1      	lsls	r1, r2, #27
 800b5ae:	bf44      	itt	mi
 800b5b0:	2320      	movmi	r3, #32
 800b5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b6:	0713      	lsls	r3, r2, #28
 800b5b8:	bf44      	itt	mi
 800b5ba:	232b      	movmi	r3, #43	; 0x2b
 800b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5c6:	d015      	beq.n	800b5f4 <_vfiprintf_r+0x13c>
 800b5c8:	9a07      	ldr	r2, [sp, #28]
 800b5ca:	4654      	mov	r4, sl
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f04f 0c0a 	mov.w	ip, #10
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d8:	3b30      	subs	r3, #48	; 0x30
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d94e      	bls.n	800b67c <_vfiprintf_r+0x1c4>
 800b5de:	b1b0      	cbz	r0, 800b60e <_vfiprintf_r+0x156>
 800b5e0:	9207      	str	r2, [sp, #28]
 800b5e2:	e014      	b.n	800b60e <_vfiprintf_r+0x156>
 800b5e4:	eba0 0308 	sub.w	r3, r0, r8
 800b5e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	9304      	str	r3, [sp, #16]
 800b5f0:	46a2      	mov	sl, r4
 800b5f2:	e7d2      	b.n	800b59a <_vfiprintf_r+0xe2>
 800b5f4:	9b03      	ldr	r3, [sp, #12]
 800b5f6:	1d19      	adds	r1, r3, #4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	9103      	str	r1, [sp, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bfbb      	ittet	lt
 800b600:	425b      	neglt	r3, r3
 800b602:	f042 0202 	orrlt.w	r2, r2, #2
 800b606:	9307      	strge	r3, [sp, #28]
 800b608:	9307      	strlt	r3, [sp, #28]
 800b60a:	bfb8      	it	lt
 800b60c:	9204      	strlt	r2, [sp, #16]
 800b60e:	7823      	ldrb	r3, [r4, #0]
 800b610:	2b2e      	cmp	r3, #46	; 0x2e
 800b612:	d10c      	bne.n	800b62e <_vfiprintf_r+0x176>
 800b614:	7863      	ldrb	r3, [r4, #1]
 800b616:	2b2a      	cmp	r3, #42	; 0x2a
 800b618:	d135      	bne.n	800b686 <_vfiprintf_r+0x1ce>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	1d1a      	adds	r2, r3, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	9203      	str	r2, [sp, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	bfb8      	it	lt
 800b626:	f04f 33ff 	movlt.w	r3, #4294967295
 800b62a:	3402      	adds	r4, #2
 800b62c:	9305      	str	r3, [sp, #20]
 800b62e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b714 <_vfiprintf_r+0x25c>
 800b632:	7821      	ldrb	r1, [r4, #0]
 800b634:	2203      	movs	r2, #3
 800b636:	4650      	mov	r0, sl
 800b638:	f7f4 fdfa 	bl	8000230 <memchr>
 800b63c:	b140      	cbz	r0, 800b650 <_vfiprintf_r+0x198>
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	eba0 000a 	sub.w	r0, r0, sl
 800b644:	fa03 f000 	lsl.w	r0, r3, r0
 800b648:	9b04      	ldr	r3, [sp, #16]
 800b64a:	4303      	orrs	r3, r0
 800b64c:	3401      	adds	r4, #1
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b654:	482c      	ldr	r0, [pc, #176]	; (800b708 <_vfiprintf_r+0x250>)
 800b656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b65a:	2206      	movs	r2, #6
 800b65c:	f7f4 fde8 	bl	8000230 <memchr>
 800b660:	2800      	cmp	r0, #0
 800b662:	d03f      	beq.n	800b6e4 <_vfiprintf_r+0x22c>
 800b664:	4b29      	ldr	r3, [pc, #164]	; (800b70c <_vfiprintf_r+0x254>)
 800b666:	bb1b      	cbnz	r3, 800b6b0 <_vfiprintf_r+0x1f8>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	3307      	adds	r3, #7
 800b66c:	f023 0307 	bic.w	r3, r3, #7
 800b670:	3308      	adds	r3, #8
 800b672:	9303      	str	r3, [sp, #12]
 800b674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b676:	443b      	add	r3, r7
 800b678:	9309      	str	r3, [sp, #36]	; 0x24
 800b67a:	e767      	b.n	800b54c <_vfiprintf_r+0x94>
 800b67c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b680:	460c      	mov	r4, r1
 800b682:	2001      	movs	r0, #1
 800b684:	e7a5      	b.n	800b5d2 <_vfiprintf_r+0x11a>
 800b686:	2300      	movs	r3, #0
 800b688:	3401      	adds	r4, #1
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	4619      	mov	r1, r3
 800b68e:	f04f 0c0a 	mov.w	ip, #10
 800b692:	4620      	mov	r0, r4
 800b694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b698:	3a30      	subs	r2, #48	; 0x30
 800b69a:	2a09      	cmp	r2, #9
 800b69c:	d903      	bls.n	800b6a6 <_vfiprintf_r+0x1ee>
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0c5      	beq.n	800b62e <_vfiprintf_r+0x176>
 800b6a2:	9105      	str	r1, [sp, #20]
 800b6a4:	e7c3      	b.n	800b62e <_vfiprintf_r+0x176>
 800b6a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e7f0      	b.n	800b692 <_vfiprintf_r+0x1da>
 800b6b0:	ab03      	add	r3, sp, #12
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	4b16      	ldr	r3, [pc, #88]	; (800b710 <_vfiprintf_r+0x258>)
 800b6b8:	a904      	add	r1, sp, #16
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f3af 8000 	nop.w
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	1c78      	adds	r0, r7, #1
 800b6c4:	d1d6      	bne.n	800b674 <_vfiprintf_r+0x1bc>
 800b6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c8:	07d9      	lsls	r1, r3, #31
 800b6ca:	d405      	bmi.n	800b6d8 <_vfiprintf_r+0x220>
 800b6cc:	89ab      	ldrh	r3, [r5, #12]
 800b6ce:	059a      	lsls	r2, r3, #22
 800b6d0:	d402      	bmi.n	800b6d8 <_vfiprintf_r+0x220>
 800b6d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6d4:	f7ff fd77 	bl	800b1c6 <__retarget_lock_release_recursive>
 800b6d8:	89ab      	ldrh	r3, [r5, #12]
 800b6da:	065b      	lsls	r3, r3, #25
 800b6dc:	f53f af12 	bmi.w	800b504 <_vfiprintf_r+0x4c>
 800b6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6e2:	e711      	b.n	800b508 <_vfiprintf_r+0x50>
 800b6e4:	ab03      	add	r3, sp, #12
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	462a      	mov	r2, r5
 800b6ea:	4b09      	ldr	r3, [pc, #36]	; (800b710 <_vfiprintf_r+0x258>)
 800b6ec:	a904      	add	r1, sp, #16
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 f880 	bl	800b7f4 <_printf_i>
 800b6f4:	e7e4      	b.n	800b6c0 <_vfiprintf_r+0x208>
 800b6f6:	bf00      	nop
 800b6f8:	080a2194 	.word	0x080a2194
 800b6fc:	080a21b4 	.word	0x080a21b4
 800b700:	080a2174 	.word	0x080a2174
 800b704:	080a21d4 	.word	0x080a21d4
 800b708:	080a21de 	.word	0x080a21de
 800b70c:	00000000 	.word	0x00000000
 800b710:	0800b493 	.word	0x0800b493
 800b714:	080a21da 	.word	0x080a21da

0800b718 <_printf_common>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	4616      	mov	r6, r2
 800b71e:	4699      	mov	r9, r3
 800b720:	688a      	ldr	r2, [r1, #8]
 800b722:	690b      	ldr	r3, [r1, #16]
 800b724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b728:	4293      	cmp	r3, r2
 800b72a:	bfb8      	it	lt
 800b72c:	4613      	movlt	r3, r2
 800b72e:	6033      	str	r3, [r6, #0]
 800b730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b734:	4607      	mov	r7, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b10a      	cbz	r2, 800b73e <_printf_common+0x26>
 800b73a:	3301      	adds	r3, #1
 800b73c:	6033      	str	r3, [r6, #0]
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	0699      	lsls	r1, r3, #26
 800b742:	bf42      	ittt	mi
 800b744:	6833      	ldrmi	r3, [r6, #0]
 800b746:	3302      	addmi	r3, #2
 800b748:	6033      	strmi	r3, [r6, #0]
 800b74a:	6825      	ldr	r5, [r4, #0]
 800b74c:	f015 0506 	ands.w	r5, r5, #6
 800b750:	d106      	bne.n	800b760 <_printf_common+0x48>
 800b752:	f104 0a19 	add.w	sl, r4, #25
 800b756:	68e3      	ldr	r3, [r4, #12]
 800b758:	6832      	ldr	r2, [r6, #0]
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	42ab      	cmp	r3, r5
 800b75e:	dc26      	bgt.n	800b7ae <_printf_common+0x96>
 800b760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b764:	1e13      	subs	r3, r2, #0
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	bf18      	it	ne
 800b76a:	2301      	movne	r3, #1
 800b76c:	0692      	lsls	r2, r2, #26
 800b76e:	d42b      	bmi.n	800b7c8 <_printf_common+0xb0>
 800b770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b774:	4649      	mov	r1, r9
 800b776:	4638      	mov	r0, r7
 800b778:	47c0      	blx	r8
 800b77a:	3001      	adds	r0, #1
 800b77c:	d01e      	beq.n	800b7bc <_printf_common+0xa4>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	68e5      	ldr	r5, [r4, #12]
 800b782:	6832      	ldr	r2, [r6, #0]
 800b784:	f003 0306 	and.w	r3, r3, #6
 800b788:	2b04      	cmp	r3, #4
 800b78a:	bf08      	it	eq
 800b78c:	1aad      	subeq	r5, r5, r2
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	bf0c      	ite	eq
 800b794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b798:	2500      	movne	r5, #0
 800b79a:	4293      	cmp	r3, r2
 800b79c:	bfc4      	itt	gt
 800b79e:	1a9b      	subgt	r3, r3, r2
 800b7a0:	18ed      	addgt	r5, r5, r3
 800b7a2:	2600      	movs	r6, #0
 800b7a4:	341a      	adds	r4, #26
 800b7a6:	42b5      	cmp	r5, r6
 800b7a8:	d11a      	bne.n	800b7e0 <_printf_common+0xc8>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e008      	b.n	800b7c0 <_printf_common+0xa8>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4652      	mov	r2, sl
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	47c0      	blx	r8
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d103      	bne.n	800b7c4 <_printf_common+0xac>
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	3501      	adds	r5, #1
 800b7c6:	e7c6      	b.n	800b756 <_printf_common+0x3e>
 800b7c8:	18e1      	adds	r1, r4, r3
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	2030      	movs	r0, #48	; 0x30
 800b7ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7d2:	4422      	add	r2, r4
 800b7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7dc:	3302      	adds	r3, #2
 800b7de:	e7c7      	b.n	800b770 <_printf_common+0x58>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	47c0      	blx	r8
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d0e6      	beq.n	800b7bc <_printf_common+0xa4>
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	e7d9      	b.n	800b7a6 <_printf_common+0x8e>
	...

0800b7f4 <_printf_i>:
 800b7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f8:	7e0f      	ldrb	r7, [r1, #24]
 800b7fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7fc:	2f78      	cmp	r7, #120	; 0x78
 800b7fe:	4691      	mov	r9, r2
 800b800:	4680      	mov	r8, r0
 800b802:	460c      	mov	r4, r1
 800b804:	469a      	mov	sl, r3
 800b806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b80a:	d807      	bhi.n	800b81c <_printf_i+0x28>
 800b80c:	2f62      	cmp	r7, #98	; 0x62
 800b80e:	d80a      	bhi.n	800b826 <_printf_i+0x32>
 800b810:	2f00      	cmp	r7, #0
 800b812:	f000 80d8 	beq.w	800b9c6 <_printf_i+0x1d2>
 800b816:	2f58      	cmp	r7, #88	; 0x58
 800b818:	f000 80a3 	beq.w	800b962 <_printf_i+0x16e>
 800b81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b824:	e03a      	b.n	800b89c <_printf_i+0xa8>
 800b826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b82a:	2b15      	cmp	r3, #21
 800b82c:	d8f6      	bhi.n	800b81c <_printf_i+0x28>
 800b82e:	a101      	add	r1, pc, #4	; (adr r1, 800b834 <_printf_i+0x40>)
 800b830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b834:	0800b88d 	.word	0x0800b88d
 800b838:	0800b8a1 	.word	0x0800b8a1
 800b83c:	0800b81d 	.word	0x0800b81d
 800b840:	0800b81d 	.word	0x0800b81d
 800b844:	0800b81d 	.word	0x0800b81d
 800b848:	0800b81d 	.word	0x0800b81d
 800b84c:	0800b8a1 	.word	0x0800b8a1
 800b850:	0800b81d 	.word	0x0800b81d
 800b854:	0800b81d 	.word	0x0800b81d
 800b858:	0800b81d 	.word	0x0800b81d
 800b85c:	0800b81d 	.word	0x0800b81d
 800b860:	0800b9ad 	.word	0x0800b9ad
 800b864:	0800b8d1 	.word	0x0800b8d1
 800b868:	0800b98f 	.word	0x0800b98f
 800b86c:	0800b81d 	.word	0x0800b81d
 800b870:	0800b81d 	.word	0x0800b81d
 800b874:	0800b9cf 	.word	0x0800b9cf
 800b878:	0800b81d 	.word	0x0800b81d
 800b87c:	0800b8d1 	.word	0x0800b8d1
 800b880:	0800b81d 	.word	0x0800b81d
 800b884:	0800b81d 	.word	0x0800b81d
 800b888:	0800b997 	.word	0x0800b997
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	1d1a      	adds	r2, r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	602a      	str	r2, [r5, #0]
 800b894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b89c:	2301      	movs	r3, #1
 800b89e:	e0a3      	b.n	800b9e8 <_printf_i+0x1f4>
 800b8a0:	6820      	ldr	r0, [r4, #0]
 800b8a2:	6829      	ldr	r1, [r5, #0]
 800b8a4:	0606      	lsls	r6, r0, #24
 800b8a6:	f101 0304 	add.w	r3, r1, #4
 800b8aa:	d50a      	bpl.n	800b8c2 <_printf_i+0xce>
 800b8ac:	680e      	ldr	r6, [r1, #0]
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	2e00      	cmp	r6, #0
 800b8b2:	da03      	bge.n	800b8bc <_printf_i+0xc8>
 800b8b4:	232d      	movs	r3, #45	; 0x2d
 800b8b6:	4276      	negs	r6, r6
 800b8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8bc:	485e      	ldr	r0, [pc, #376]	; (800ba38 <_printf_i+0x244>)
 800b8be:	230a      	movs	r3, #10
 800b8c0:	e019      	b.n	800b8f6 <_printf_i+0x102>
 800b8c2:	680e      	ldr	r6, [r1, #0]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8ca:	bf18      	it	ne
 800b8cc:	b236      	sxthne	r6, r6
 800b8ce:	e7ef      	b.n	800b8b0 <_printf_i+0xbc>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	6820      	ldr	r0, [r4, #0]
 800b8d4:	1d19      	adds	r1, r3, #4
 800b8d6:	6029      	str	r1, [r5, #0]
 800b8d8:	0601      	lsls	r1, r0, #24
 800b8da:	d501      	bpl.n	800b8e0 <_printf_i+0xec>
 800b8dc:	681e      	ldr	r6, [r3, #0]
 800b8de:	e002      	b.n	800b8e6 <_printf_i+0xf2>
 800b8e0:	0646      	lsls	r6, r0, #25
 800b8e2:	d5fb      	bpl.n	800b8dc <_printf_i+0xe8>
 800b8e4:	881e      	ldrh	r6, [r3, #0]
 800b8e6:	4854      	ldr	r0, [pc, #336]	; (800ba38 <_printf_i+0x244>)
 800b8e8:	2f6f      	cmp	r7, #111	; 0x6f
 800b8ea:	bf0c      	ite	eq
 800b8ec:	2308      	moveq	r3, #8
 800b8ee:	230a      	movne	r3, #10
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8f6:	6865      	ldr	r5, [r4, #4]
 800b8f8:	60a5      	str	r5, [r4, #8]
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	bfa2      	ittt	ge
 800b8fe:	6821      	ldrge	r1, [r4, #0]
 800b900:	f021 0104 	bicge.w	r1, r1, #4
 800b904:	6021      	strge	r1, [r4, #0]
 800b906:	b90e      	cbnz	r6, 800b90c <_printf_i+0x118>
 800b908:	2d00      	cmp	r5, #0
 800b90a:	d04d      	beq.n	800b9a8 <_printf_i+0x1b4>
 800b90c:	4615      	mov	r5, r2
 800b90e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b912:	fb03 6711 	mls	r7, r3, r1, r6
 800b916:	5dc7      	ldrb	r7, [r0, r7]
 800b918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b91c:	4637      	mov	r7, r6
 800b91e:	42bb      	cmp	r3, r7
 800b920:	460e      	mov	r6, r1
 800b922:	d9f4      	bls.n	800b90e <_printf_i+0x11a>
 800b924:	2b08      	cmp	r3, #8
 800b926:	d10b      	bne.n	800b940 <_printf_i+0x14c>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	07de      	lsls	r6, r3, #31
 800b92c:	d508      	bpl.n	800b940 <_printf_i+0x14c>
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	6861      	ldr	r1, [r4, #4]
 800b932:	4299      	cmp	r1, r3
 800b934:	bfde      	ittt	le
 800b936:	2330      	movle	r3, #48	; 0x30
 800b938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b93c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b940:	1b52      	subs	r2, r2, r5
 800b942:	6122      	str	r2, [r4, #16]
 800b944:	f8cd a000 	str.w	sl, [sp]
 800b948:	464b      	mov	r3, r9
 800b94a:	aa03      	add	r2, sp, #12
 800b94c:	4621      	mov	r1, r4
 800b94e:	4640      	mov	r0, r8
 800b950:	f7ff fee2 	bl	800b718 <_printf_common>
 800b954:	3001      	adds	r0, #1
 800b956:	d14c      	bne.n	800b9f2 <_printf_i+0x1fe>
 800b958:	f04f 30ff 	mov.w	r0, #4294967295
 800b95c:	b004      	add	sp, #16
 800b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b962:	4835      	ldr	r0, [pc, #212]	; (800ba38 <_printf_i+0x244>)
 800b964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b968:	6829      	ldr	r1, [r5, #0]
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b970:	6029      	str	r1, [r5, #0]
 800b972:	061d      	lsls	r5, r3, #24
 800b974:	d514      	bpl.n	800b9a0 <_printf_i+0x1ac>
 800b976:	07df      	lsls	r7, r3, #31
 800b978:	bf44      	itt	mi
 800b97a:	f043 0320 	orrmi.w	r3, r3, #32
 800b97e:	6023      	strmi	r3, [r4, #0]
 800b980:	b91e      	cbnz	r6, 800b98a <_printf_i+0x196>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	f023 0320 	bic.w	r3, r3, #32
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	2310      	movs	r3, #16
 800b98c:	e7b0      	b.n	800b8f0 <_printf_i+0xfc>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f043 0320 	orr.w	r3, r3, #32
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	2378      	movs	r3, #120	; 0x78
 800b998:	4828      	ldr	r0, [pc, #160]	; (800ba3c <_printf_i+0x248>)
 800b99a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b99e:	e7e3      	b.n	800b968 <_printf_i+0x174>
 800b9a0:	0659      	lsls	r1, r3, #25
 800b9a2:	bf48      	it	mi
 800b9a4:	b2b6      	uxthmi	r6, r6
 800b9a6:	e7e6      	b.n	800b976 <_printf_i+0x182>
 800b9a8:	4615      	mov	r5, r2
 800b9aa:	e7bb      	b.n	800b924 <_printf_i+0x130>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	6826      	ldr	r6, [r4, #0]
 800b9b0:	6961      	ldr	r1, [r4, #20]
 800b9b2:	1d18      	adds	r0, r3, #4
 800b9b4:	6028      	str	r0, [r5, #0]
 800b9b6:	0635      	lsls	r5, r6, #24
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	d501      	bpl.n	800b9c0 <_printf_i+0x1cc>
 800b9bc:	6019      	str	r1, [r3, #0]
 800b9be:	e002      	b.n	800b9c6 <_printf_i+0x1d2>
 800b9c0:	0670      	lsls	r0, r6, #25
 800b9c2:	d5fb      	bpl.n	800b9bc <_printf_i+0x1c8>
 800b9c4:	8019      	strh	r1, [r3, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	4615      	mov	r5, r2
 800b9cc:	e7ba      	b.n	800b944 <_printf_i+0x150>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	1d1a      	adds	r2, r3, #4
 800b9d2:	602a      	str	r2, [r5, #0]
 800b9d4:	681d      	ldr	r5, [r3, #0]
 800b9d6:	6862      	ldr	r2, [r4, #4]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f7f4 fc28 	bl	8000230 <memchr>
 800b9e0:	b108      	cbz	r0, 800b9e6 <_printf_i+0x1f2>
 800b9e2:	1b40      	subs	r0, r0, r5
 800b9e4:	6060      	str	r0, [r4, #4]
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f0:	e7a8      	b.n	800b944 <_printf_i+0x150>
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	47d0      	blx	sl
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d0ab      	beq.n	800b958 <_printf_i+0x164>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	079b      	lsls	r3, r3, #30
 800ba04:	d413      	bmi.n	800ba2e <_printf_i+0x23a>
 800ba06:	68e0      	ldr	r0, [r4, #12]
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	bfb8      	it	lt
 800ba0e:	4618      	movlt	r0, r3
 800ba10:	e7a4      	b.n	800b95c <_printf_i+0x168>
 800ba12:	2301      	movs	r3, #1
 800ba14:	4632      	mov	r2, r6
 800ba16:	4649      	mov	r1, r9
 800ba18:	4640      	mov	r0, r8
 800ba1a:	47d0      	blx	sl
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d09b      	beq.n	800b958 <_printf_i+0x164>
 800ba20:	3501      	adds	r5, #1
 800ba22:	68e3      	ldr	r3, [r4, #12]
 800ba24:	9903      	ldr	r1, [sp, #12]
 800ba26:	1a5b      	subs	r3, r3, r1
 800ba28:	42ab      	cmp	r3, r5
 800ba2a:	dcf2      	bgt.n	800ba12 <_printf_i+0x21e>
 800ba2c:	e7eb      	b.n	800ba06 <_printf_i+0x212>
 800ba2e:	2500      	movs	r5, #0
 800ba30:	f104 0619 	add.w	r6, r4, #25
 800ba34:	e7f5      	b.n	800ba22 <_printf_i+0x22e>
 800ba36:	bf00      	nop
 800ba38:	080a21e5 	.word	0x080a21e5
 800ba3c:	080a21f6 	.word	0x080a21f6

0800ba40 <_sbrk_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_sbrk_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f6 ff1c 	bl	8002888 <_sbrk>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_sbrk_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_sbrk_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20000504 	.word	0x20000504

0800ba60 <__sread>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	460c      	mov	r4, r1
 800ba64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba68:	f000 f8a8 	bl	800bbbc <_read_r>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	bfab      	itete	ge
 800ba70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba72:	89a3      	ldrhlt	r3, [r4, #12]
 800ba74:	181b      	addge	r3, r3, r0
 800ba76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba7a:	bfac      	ite	ge
 800ba7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba7e:	81a3      	strhlt	r3, [r4, #12]
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <__swrite>:
 800ba82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba86:	461f      	mov	r7, r3
 800ba88:	898b      	ldrh	r3, [r1, #12]
 800ba8a:	05db      	lsls	r3, r3, #23
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4616      	mov	r6, r2
 800ba92:	d505      	bpl.n	800baa0 <__swrite+0x1e>
 800ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba98:	2302      	movs	r3, #2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f000 f870 	bl	800bb80 <_lseek_r>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	4628      	mov	r0, r5
 800bab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab6:	f000 b817 	b.w	800bae8 <_write_r>

0800baba <__sseek>:
 800baba:	b510      	push	{r4, lr}
 800babc:	460c      	mov	r4, r1
 800babe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac2:	f000 f85d 	bl	800bb80 <_lseek_r>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	bf15      	itete	ne
 800bacc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bad6:	81a3      	strheq	r3, [r4, #12]
 800bad8:	bf18      	it	ne
 800bada:	81a3      	strhne	r3, [r4, #12]
 800badc:	bd10      	pop	{r4, pc}

0800bade <__sclose>:
 800bade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae2:	f000 b81b 	b.w	800bb1c <_close_r>
	...

0800bae8 <_write_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	; (800bb08 <_write_r+0x20>)
 800baec:	4604      	mov	r4, r0
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f7f7 f92a 	bl	8002d50 <_write>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_write_r+0x1e>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_write_r+0x1e>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20000504 	.word	0x20000504

0800bb0c <abort>:
 800bb0c:	b508      	push	{r3, lr}
 800bb0e:	2006      	movs	r0, #6
 800bb10:	f000 f88e 	bl	800bc30 <raise>
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f6 fe5b 	bl	80027d0 <_exit>
	...

0800bb1c <_close_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d06      	ldr	r5, [pc, #24]	; (800bb38 <_close_r+0x1c>)
 800bb20:	2300      	movs	r3, #0
 800bb22:	4604      	mov	r4, r0
 800bb24:	4608      	mov	r0, r1
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	f7f6 fe79 	bl	800281e <_close>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d102      	bne.n	800bb36 <_close_r+0x1a>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	b103      	cbz	r3, 800bb36 <_close_r+0x1a>
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	20000504 	.word	0x20000504

0800bb3c <_fstat_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4d07      	ldr	r5, [pc, #28]	; (800bb5c <_fstat_r+0x20>)
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	4611      	mov	r1, r2
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	f7f6 fe74 	bl	8002836 <_fstat>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	d102      	bne.n	800bb58 <_fstat_r+0x1c>
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	b103      	cbz	r3, 800bb58 <_fstat_r+0x1c>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000504 	.word	0x20000504

0800bb60 <_isatty_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	; (800bb7c <_isatty_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f6 fe73 	bl	8002856 <_isatty>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_isatty_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_isatty_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20000504 	.word	0x20000504

0800bb80 <_lseek_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d07      	ldr	r5, [pc, #28]	; (800bba0 <_lseek_r+0x20>)
 800bb84:	4604      	mov	r4, r0
 800bb86:	4608      	mov	r0, r1
 800bb88:	4611      	mov	r1, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	602a      	str	r2, [r5, #0]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	f7f6 fe6c 	bl	800286c <_lseek>
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	d102      	bne.n	800bb9e <_lseek_r+0x1e>
 800bb98:	682b      	ldr	r3, [r5, #0]
 800bb9a:	b103      	cbz	r3, 800bb9e <_lseek_r+0x1e>
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}
 800bba0:	20000504 	.word	0x20000504

0800bba4 <__malloc_lock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__malloc_lock+0x8>)
 800bba6:	f7ff bb0d 	b.w	800b1c4 <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	200004f8 	.word	0x200004f8

0800bbb0 <__malloc_unlock>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	; (800bbb8 <__malloc_unlock+0x8>)
 800bbb2:	f7ff bb08 	b.w	800b1c6 <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	200004f8 	.word	0x200004f8

0800bbbc <_read_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d07      	ldr	r5, [pc, #28]	; (800bbdc <_read_r+0x20>)
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f6 fe0a 	bl	80027e4 <_read>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_read_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_read_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	20000504 	.word	0x20000504

0800bbe0 <_raise_r>:
 800bbe0:	291f      	cmp	r1, #31
 800bbe2:	b538      	push	{r3, r4, r5, lr}
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	d904      	bls.n	800bbf4 <_raise_r+0x14>
 800bbea:	2316      	movs	r3, #22
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbf6:	b112      	cbz	r2, 800bbfe <_raise_r+0x1e>
 800bbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <_raise_r+0x32>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 f830 	bl	800bc64 <_getpid_r>
 800bc04:	462a      	mov	r2, r5
 800bc06:	4601      	mov	r1, r0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc0e:	f000 b817 	b.w	800bc40 <_kill_r>
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d00a      	beq.n	800bc2c <_raise_r+0x4c>
 800bc16:	1c59      	adds	r1, r3, #1
 800bc18:	d103      	bne.n	800bc22 <_raise_r+0x42>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7e7      	b.n	800bbf2 <_raise_r+0x12>
 800bc22:	2400      	movs	r4, #0
 800bc24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc28:	4628      	mov	r0, r5
 800bc2a:	4798      	blx	r3
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e7e0      	b.n	800bbf2 <_raise_r+0x12>

0800bc30 <raise>:
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <raise+0xc>)
 800bc32:	4601      	mov	r1, r0
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f7ff bfd3 	b.w	800bbe0 <_raise_r>
 800bc3a:	bf00      	nop
 800bc3c:	20000038 	.word	0x20000038

0800bc40 <_kill_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_kill_r+0x20>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	f7f6 fdaf 	bl	80027b0 <_kill>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d102      	bne.n	800bc5c <_kill_r+0x1c>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	b103      	cbz	r3, 800bc5c <_kill_r+0x1c>
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	bf00      	nop
 800bc60:	20000504 	.word	0x20000504

0800bc64 <_getpid_r>:
 800bc64:	f7f6 bd9c 	b.w	80027a0 <_getpid>

0800bc68 <_init>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr

0800bc74 <_fini>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr
