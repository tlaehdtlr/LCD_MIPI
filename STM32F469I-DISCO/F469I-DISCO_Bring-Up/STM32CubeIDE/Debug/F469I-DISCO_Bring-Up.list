
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000027c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a83f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fee  00000000  00000000  0002a8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002d198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a4c0  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d31a  00000000  00000000  00057e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1171  00000000  00000000  00065152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001562c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c38  00000000  00000000  00156314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080049f0 	.word	0x080049f0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080049f0 	.word	0x080049f0

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <led_control>:
        (void *)0, (void *)0, (void *)0
    }
};

static void led_control(uint8_t argc, void **argv)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	613b      	str	r3, [r7, #16]
    char *arg1 = argv[0 + strlen(command)];
 80005e6:	6938      	ldr	r0, [r7, #16]
 80005e8:	f7ff fe14 	bl	8000214 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	60fb      	str	r3, [r7, #12]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80005f8:	6938      	ldr	r0, [r7, #16]
 80005fa:	f7ff fe0b 	bl	8000214 <strlen>
 80005fe:	4604      	mov	r4, r0
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f7ff fe07 	bl	8000214 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4423      	add	r3, r4
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60bb      	str	r3, [r7, #8]

    if (argc == 1)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d136      	bne.n	8000688 <led_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e027      	b.n	8000670 <led_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000620:	493f      	ldr	r1, [pc, #252]	; (8000720 <led_control+0x14c>)
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6939      	ldr	r1, [r7, #16]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fde4 	bl	8000200 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d115      	bne.n	800066a <led_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <led_control+0x14c>)
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	4834      	ldr	r0, [pc, #208]	; (8000720 <led_control+0x14c>)
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4403      	add	r3, r0
 800065c:	3308      	adds	r3, #8
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <led_control+0x150>)
 8000664:	f003 f8d8 	bl	8003818 <iprintf>
                return;
 8000668:	e056      	b.n	8000718 <led_control+0x144>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	492b      	ldr	r1, [pc, #172]	; (8000720 <led_control+0x14c>)
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	3304      	adds	r3, #4
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1cc      	bne.n	8000620 <led_control+0x4c>
 8000686:	e044      	b.n	8000712 <led_control+0x13e>
            }
        }
    }
    else if (argc == 3)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d141      	bne.n	8000712 <led_control+0x13e>
    {
        if (strcmp(arg1, "on") == 0)
 800068e:	4926      	ldr	r1, [pc, #152]	; (8000728 <led_control+0x154>)
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff fdb5 	bl	8000200 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d119      	bne.n	80006d0 <led_control+0xfc>
        {
            if (strcmp(arg2, "1") == 0)
 800069c:	4923      	ldr	r1, [pc, #140]	; (800072c <led_control+0x158>)
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f7ff fdae 	bl	8000200 <strcmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <led_control+0xe2>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4820      	ldr	r0, [pc, #128]	; (8000730 <led_control+0x15c>)
 80006b0:	f001 fafa 	bl	8001ca8 <HAL_GPIO_WritePin>
                return;
 80006b4:	e030      	b.n	8000718 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80006b6:	491f      	ldr	r1, [pc, #124]	; (8000734 <led_control+0x160>)
 80006b8:	68b8      	ldr	r0, [r7, #8]
 80006ba:	f7ff fda1 	bl	8000200 <strcmp>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d126      	bne.n	8000712 <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2110      	movs	r1, #16
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <led_control+0x164>)
 80006ca:	f001 faed 	bl	8001ca8 <HAL_GPIO_WritePin>
                return;
 80006ce:	e023      	b.n	8000718 <led_control+0x144>
            }
        }
        else if (strcmp(arg1, "off") == 0)
 80006d0:	491a      	ldr	r1, [pc, #104]	; (800073c <led_control+0x168>)
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff fd94 	bl	8000200 <strcmp>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d119      	bne.n	8000712 <led_control+0x13e>
        {
            if (strcmp(arg2, "1") == 0)
 80006de:	4913      	ldr	r1, [pc, #76]	; (800072c <led_control+0x158>)
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fd8d 	bl	8000200 <strcmp>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d105      	bne.n	80006f8 <led_control+0x124>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	480f      	ldr	r0, [pc, #60]	; (8000730 <led_control+0x15c>)
 80006f2:	f001 fad9 	bl	8001ca8 <HAL_GPIO_WritePin>
                return;
 80006f6:	e00f      	b.n	8000718 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80006f8:	490e      	ldr	r1, [pc, #56]	; (8000734 <led_control+0x160>)
 80006fa:	68b8      	ldr	r0, [r7, #8]
 80006fc:	f7ff fd80 	bl	8000200 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d105      	bne.n	8000712 <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2110      	movs	r1, #16
 800070a:	480b      	ldr	r0, [pc, #44]	; (8000738 <led_control+0x164>)
 800070c:	f001 facc 	bl	8001ca8 <HAL_GPIO_WritePin>
                return;
 8000710:	e002      	b.n	8000718 <led_control+0x144>
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <led_control+0x16c>)
 8000714:	f003 f906 	bl	8003924 <puts>
    
}
 8000718:	371c      	adds	r7, #28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	bf00      	nop
 8000720:	08004b14 	.word	0x08004b14
 8000724:	08004a58 	.word	0x08004a58
 8000728:	08004a68 	.word	0x08004a68
 800072c:	08004a6c 	.word	0x08004a6c
 8000730:	40021800 	.word	0x40021800
 8000734:	08004a70 	.word	0x08004a70
 8000738:	40020c00 	.word	0x40020c00
 800073c:	08004a74 	.word	0x08004a74
 8000740:	08004a78 	.word	0x08004a78

08000744 <help_func>:

static void help_func(uint8_t argc, void **argv)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d129      	bne.n	80007aa <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <help_func+0x6c>)
 8000758:	f003 f8e4 	bl	8003924 <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e017      	b.n	8000792 <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000762:	4914      	ldr	r1, [pc, #80]	; (80007b4 <help_func+0x70>)
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <help_func+0x70>)
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4613      	mov	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4403      	add	r3, r0
 8000780:	3308      	adds	r3, #8
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <help_func+0x74>)
 8000788:	f003 f846 	bl	8003818 <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <help_func+0x70>)
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	3304      	adds	r3, #4
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1dc      	bne.n	8000762 <help_func+0x1e>
        }
        return;
 80007a8:	bf00      	nop
    }
}
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08004a94 	.word	0x08004a94
 80007b4:	08004b14 	.word	0x08004b14
 80007b8:	08004a58 	.word	0x08004a58

080007bc <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    int i = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e011      	b.n	80007f2 <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 80007ce:	4912      	ldr	r1, [pc, #72]	; (8000818 <shell_get_command_index+0x5c>)
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fd0d 	bl	8000200 <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4909      	ldr	r1, [pc, #36]	; (8000818 <shell_get_command_index+0x5c>)
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	3304      	adds	r3, #4
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1e2      	bne.n	80007ce <shell_get_command_index+0x12>
 8000808:	e000      	b.n	800080c <shell_get_command_index+0x50>
        {
            break;
 800080a:	bf00      	nop
        }
    }

    return i;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08004b14 	.word	0x08004b14

0800081c <cli_process>:

void cli_process(char* cmd)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000822:	af00      	add	r7, sp, #0
 8000824:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000828:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800082c:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 800082e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000832:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000836:	4618      	mov	r0, r3
 8000838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083c:	461a      	mov	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 ffe2 	bl	8003808 <memset>
    int i = 0, idx = 0, argc = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 8000856:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800085a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800085e:	4939      	ldr	r1, [pc, #228]	; (8000944 <cli_process+0x128>)
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	f003 f86f 	bl	8003944 <strtok>
 8000866:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 800086a:	e02c      	b.n	80008c6 <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000872:	e014      	b.n	800089e <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000874:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000878:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800087c:	1c59      	adds	r1, r3, #1
 800087e:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000882:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000886:	4411      	add	r1, r2
 8000888:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800088c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000894:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000898:	3301      	adds	r3, #1
 800089a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800089e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80008a2:	f7ff fcb7 	bl	8000214 <strlen>
 80008a6:	4602      	mov	r2, r0
 80008a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8e1      	bhi.n	8000874 <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 80008b0:	4924      	ldr	r1, [pc, #144]	; (8000944 <cli_process+0x128>)
 80008b2:	2000      	movs	r0, #0
 80008b4:	f003 f846 	bl	8003944 <strtok>
 80008b8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 80008bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80008c0:	3301      	adds	r3, #1
 80008c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 80008c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1ce      	bne.n	800086c <cli_process+0x50>
    }

    command = argv[0];
 80008ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80008d2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 80008dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d027      	beq.n	8000934 <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 80008e4:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80008e8:	f7ff ff68 	bl	80007bc <shell_get_command_index>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 80008f2:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 80008f6:	4914      	ldr	r1, [pc, #80]	; (8000948 <cli_process+0x12c>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	3304      	adds	r3, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <cli_process+0x130>)
 800090c:	f003 f80a 	bl	8003924 <puts>
 8000910:	e013      	b.n	800093a <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 8000912:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000916:	490c      	ldr	r1, [pc, #48]	; (8000948 <cli_process+0x12c>)
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	f107 0108 	add.w	r1, r7, #8
 8000930:	4610      	mov	r0, r2
 8000932:	4798      	blx	r3
    }

    printf("\r\n");
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <cli_process+0x134>)
 8000936:	f002 fff5 	bl	8003924 <puts>
 800093a:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08004ab0 	.word	0x08004ab0
 8000948:	08004b14 	.word	0x08004b14
 800094c:	08004ab4 	.word	0x08004ab4
 8000950:	08004acc 	.word	0x08004acc

08000954 <MX_GPIO_Init>:
     PE12   ------> FMC_D9_DA9
     PE15   ------> FMC_D12_DA12
     PE13   ------> FMC_D10_DA10
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b090      	sub	sp, #64	; 0x40
 8000958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
 800096e:	4bad      	ldr	r3, [pc, #692]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4aac      	ldr	r2, [pc, #688]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4baa      	ldr	r3, [pc, #680]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
 8000984:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
 800098a:	4ba6      	ldr	r3, [pc, #664]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4aa5      	ldr	r2, [pc, #660]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4ba3      	ldr	r3, [pc, #652]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
 80009a6:	4b9f      	ldr	r3, [pc, #636]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a9e      	ldr	r2, [pc, #632]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b9c      	ldr	r3, [pc, #624]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	4b98      	ldr	r3, [pc, #608]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a97      	ldr	r2, [pc, #604]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b95      	ldr	r3, [pc, #596]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	4b91      	ldr	r3, [pc, #580]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a90      	ldr	r2, [pc, #576]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b8e      	ldr	r3, [pc, #568]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4b8a      	ldr	r3, [pc, #552]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a89      	ldr	r2, [pc, #548]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b87      	ldr	r3, [pc, #540]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b83      	ldr	r3, [pc, #524]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a82      	ldr	r2, [pc, #520]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b80      	ldr	r3, [pc, #512]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b7c      	ldr	r3, [pc, #496]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a7b      	ldr	r2, [pc, #492]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b79      	ldr	r3, [pc, #484]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b75      	ldr	r3, [pc, #468]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a74      	ldr	r2, [pc, #464]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b72      	ldr	r3, [pc, #456]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a6d      	ldr	r2, [pc, #436]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b6b      	ldr	r3, [pc, #428]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a66      	ldr	r2, [pc, #408]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b64      	ldr	r3, [pc, #400]	; (8000c24 <MX_GPIO_Init+0x2d0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210c      	movs	r1, #12
 8000aa2:	4861      	ldr	r0, [pc, #388]	; (8000c28 <MX_GPIO_Init+0x2d4>)
 8000aa4:	f001 f900 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2130      	movs	r1, #48	; 0x30
 8000aac:	485f      	ldr	r0, [pc, #380]	; (8000c2c <MX_GPIO_Init+0x2d8>)
 8000aae:	f001 f8fb 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	485e      	ldr	r0, [pc, #376]	; (8000c30 <MX_GPIO_Init+0x2dc>)
 8000ab8:	f001 f8f6 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	485c      	ldr	r0, [pc, #368]	; (8000c34 <MX_GPIO_Init+0x2e0>)
 8000ac2:	f001 f8f1 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	485b      	ldr	r0, [pc, #364]	; (8000c38 <MX_GPIO_Init+0x2e4>)
 8000acc:	f001 f8ec 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4859      	ldr	r0, [pc, #356]	; (8000c3c <MX_GPIO_Init+0x2e8>)
 8000ad6:	f001 f8e7 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8000ada:	2330      	movs	r3, #48	; 0x30
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000aea:	2306      	movs	r3, #6
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af2:	4619      	mov	r1, r3
 8000af4:	484c      	ldr	r0, [pc, #304]	; (8000c28 <MX_GPIO_Init+0x2d4>)
 8000af6:	f000 ff2b 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000afa:	230c      	movs	r3, #12
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4845      	ldr	r0, [pc, #276]	; (8000c28 <MX_GPIO_Init+0x2d4>)
 8000b12:	f000 ff1d 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8000b16:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b30:	4619      	mov	r1, r3
 8000b32:	4840      	ldr	r0, [pc, #256]	; (8000c34 <MX_GPIO_Init+0x2e0>)
 8000b34:	f000 ff0c 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8000b38:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b52:	4619      	mov	r1, r3
 8000b54:	4834      	ldr	r0, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x2d4>)
 8000b56:	f000 fefb 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4830      	ldr	r0, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x2e4>)
 8000b78:	f000 feea 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4828      	ldr	r0, [pc, #160]	; (8000c38 <MX_GPIO_Init+0x2e4>)
 8000b98:	f000 feda 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8000b9c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_GPIO_Init+0x2ec>)
 8000bba:	f000 fec9 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4819      	ldr	r0, [pc, #100]	; (8000c38 <MX_GPIO_Init+0x2e4>)
 8000bd4:	f000 febc 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000be8:	230a      	movs	r3, #10
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_GPIO_Init+0x2e4>)
 8000bf4:	f000 feac 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8000bf8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_GPIO_Init+0x2e0>)
 8000c16:	f000 fe9b 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e010      	b.n	8000c44 <MX_GPIO_Init+0x2f0>
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40022800 	.word	0x40022800
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020800 	.word	0x40020800
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	48a5      	ldr	r0, [pc, #660]	; (8000ef0 <MX_GPIO_Init+0x59c>)
 8000c5a:	f000 fe79 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8000c5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c70:	230c      	movs	r3, #12
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	489d      	ldr	r0, [pc, #628]	; (8000ef0 <MX_GPIO_Init+0x59c>)
 8000c7c:	f000 fe68 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8000c80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c92:	230a      	movs	r3, #10
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4895      	ldr	r0, [pc, #596]	; (8000ef4 <MX_GPIO_Init+0x5a0>)
 8000c9e:	f000 fe57 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin
                           PIPin PIPin PIPin PIPin
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000ca2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x5a4>)
 8000cc0:	f000 fe46 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000cc4:	2330      	movs	r3, #48	; 0x30
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cc8:	2311      	movs	r3, #17
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <MX_GPIO_Init+0x59c>)
 8000cdc:	f000 fe38 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000ce0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	487f      	ldr	r0, [pc, #508]	; (8000efc <MX_GPIO_Init+0x5a8>)
 8000cfe:	f000 fe27 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000d02:	2308      	movs	r3, #8
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d06:	2311      	movs	r3, #17
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4879      	ldr	r0, [pc, #484]	; (8000f00 <MX_GPIO_Init+0x5ac>)
 8000d1a:	f000 fe19 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	486d      	ldr	r0, [pc, #436]	; (8000ef0 <MX_GPIO_Init+0x59c>)
 8000d3a:	f000 fe09 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000d3e:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d50:	230c      	movs	r3, #12
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	486a      	ldr	r0, [pc, #424]	; (8000f04 <MX_GPIO_Init+0x5b0>)
 8000d5c:	f000 fdf8 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	485f      	ldr	r0, [pc, #380]	; (8000ef4 <MX_GPIO_Init+0x5a0>)
 8000d76:	f000 fdeb 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000d7a:	2330      	movs	r3, #48	; 0x30
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	2312      	movs	r3, #18
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	485b      	ldr	r0, [pc, #364]	; (8000f04 <MX_GPIO_Init+0x5b0>)
 8000d96:	f000 fddb 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000daa:	2306      	movs	r3, #6
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4854      	ldr	r0, [pc, #336]	; (8000f08 <MX_GPIO_Init+0x5b4>)
 8000db6:	f000 fdcb 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dbe:	2311      	movs	r3, #17
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	484d      	ldr	r0, [pc, #308]	; (8000f08 <MX_GPIO_Init+0x5b4>)
 8000dd2:	f000 fdbd 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8000dd6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000de8:	2309      	movs	r3, #9
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	4842      	ldr	r0, [pc, #264]	; (8000efc <MX_GPIO_Init+0x5a8>)
 8000df4:	f000 fdac 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8000df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4839      	ldr	r0, [pc, #228]	; (8000efc <MX_GPIO_Init+0x5a8>)
 8000e16:	f000 fd9b 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4835      	ldr	r0, [pc, #212]	; (8000f0c <MX_GPIO_Init+0x5b8>)
 8000e36:	f000 fd8b 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MX_GPIO_Init+0x5bc>)
 8000e52:	f000 fd7d 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <MX_GPIO_Init+0x59c>)
 8000e74:	f000 fd6c 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <MX_GPIO_Init+0x5b4>)
 8000e8c:	f000 fd60 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e90:	2320      	movs	r3, #32
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <MX_GPIO_Init+0x5c0>)
 8000ea6:	f000 fd53 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000eba:	230d      	movs	r3, #13
 8000ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_GPIO_Init+0x5c0>)
 8000ec6:	f000 fd43 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_GPIO_Init+0x5a0>)
 8000ee2:	f000 fd35 	bl	8001950 <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3740      	adds	r7, #64	; 0x40
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40022800 	.word	0x40022800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40022400 	.word	0x40022400

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fb02 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f810 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff fd16 	bl	8000954 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f28:	f000 f9a0 	bl	800126c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 8000f2c:	4903      	ldr	r1, [pc, #12]	; (8000f3c <main+0x24>)
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <main+0x28>)
 8000f30:	f002 fc72 	bl	8003818 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 8000f34:	f000 faa6 	bl	8001484 <uart_check_cmd_recv>
 8000f38:	e7fc      	b.n	8000f34 <main+0x1c>
 8000f3a:	bf00      	nop
 8000f3c:	08004ad0 	.word	0x08004ad0
 8000f40:	08004ad8 	.word	0x08004ad8

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fc58 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <SystemClock_Config+0xdc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <SystemClock_Config+0xdc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemClock_Config+0xdc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <SystemClock_Config+0xe0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a25      	ldr	r2, [pc, #148]	; (8001024 <SystemClock_Config+0xe0>)
 8000f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <SystemClock_Config+0xe0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fb8:	23b4      	movs	r3, #180	; 0xb4
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 f8f5 	bl	80021bc <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd8:	f000 f826 	bl	8001028 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fdc:	f000 fe7e 	bl	8001cdc <HAL_PWREx_EnableOverDrive>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fe6:	f000 f81f 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2105      	movs	r1, #5
 8001008:	4618      	mov	r0, r3
 800100a:	f000 feb7 	bl	8001d7c <HAL_RCC_ClockConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001014:	f000 f808 	bl	8001028 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3750      	adds	r7, #80	; 0x50
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 fa7a 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <USART3_IRQHandler+0x10>)
 80010de:	f001 fc01 	bl	80028e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000294 	.word	0x20000294

080010ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001106:	f002 fb55 	bl	80037b4 <__errno>
 800110a:	4603      	mov	r3, r0
 800110c:	2216      	movs	r2, #22
 800110e:	601a      	str	r2, [r3, #0]
	return -1;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_exit>:

void _exit (int status)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe7 	bl	80010fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800112e:	e7fe      	b.n	800112e <_exit+0x12>

08001130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00a      	b.n	8001158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001142:	f3af 8000 	nop.w
 8001146:	4601      	mov	r1, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf0      	blt.n	8001142 <_read+0x12>
	}

return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:
	}
	return len;
}

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001192:	605a      	str	r2, [r3, #4]
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_isatty>:

int _isatty(int file)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f002 fad6 	bl	80037b4 <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20050000 	.word	0x20050000
 8001234:	00000400 	.word	0x00000400
 8001238:	2000008c 	.word	0x2000008c
 800123c:	200002f0 	.word	0x200002f0

08001240 <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	b29a      	uxth	r2, r3
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <_write+0x28>)
 8001258:	f001 fa81 	bl	800275e <HAL_UART_Transmit>
  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000294 	.word	0x20000294

0800126c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MX_USART3_UART_Init+0x64>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART3_UART_Init+0x60>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_USART3_UART_Init+0x60>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART3_UART_Init+0x60>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <MX_USART3_UART_Init+0x60>)
 80012a4:	f001 fa0e 	bl	80026c4 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f7ff febb 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART3_UART_Init+0x68>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_USART3_UART_Init+0x6c>)
 80012bc:	4413      	add	r3, r2
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <MX_USART3_UART_Init+0x60>)
 80012c4:	f001 fadd 	bl	8002882 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000294 	.word	0x20000294
 80012d0:	40004800 	.word	0x40004800
 80012d4:	20000190 	.word	0x20000190
 80012d8:	20000090 	.word	0x20000090

080012dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_UART_MspInit+0x94>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d134      	bne.n	8001368 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_UART_MspInit+0x98>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_UART_MspInit+0x98>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x98>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_UART_MspInit+0x98>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_UART_MspInit+0x98>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_UART_MspInit+0x98>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001336:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001348:	2307      	movs	r3, #7
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <HAL_UART_MspInit+0x9c>)
 8001354:	f000 fafc 	bl	8001950 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2027      	movs	r0, #39	; 0x27
 800135e:	f000 fa2e 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001362:	2027      	movs	r0, #39	; 0x27
 8001364:	f000 fa47 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40004800 	.word	0x40004800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a37      	ldr	r2, [pc, #220]	; (8001468 <HAL_UART_RxCpltCallback+0xec>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d167      	bne.n	800145e <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 8001398:	5c9b      	ldrb	r3, [r3, r2]
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d007      	beq.n	80013ae <HAL_UART_RxCpltCallback+0x32>
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	2b0d      	cmp	r3, #13
 80013ac:	d111      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_UART_RxCpltCallback+0xf8>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 80013c8:	4929      	ldr	r1, [pc, #164]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <HAL_UART_RxCpltCallback+0xfc>)
 80013cc:	f002 fab2 	bl	8003934 <strcpy>
 80013d0:	e03a      	b.n	8001448 <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 80013dc:	5c9b      	ldrb	r3, [r3, r2]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11a      	bne.n	8001418 <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	2203      	movs	r2, #3
 80013f6:	4921      	ldr	r1, [pc, #132]	; (800147c <HAL_UART_RxCpltCallback+0x100>)
 80013f8:	4821      	ldr	r0, [pc, #132]	; (8001480 <HAL_UART_RxCpltCallback+0x104>)
 80013fa:	f001 f9b0 	bl	800275e <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	425a      	negs	r2, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	bf58      	it	pl
 800140e:	4253      	negpl	r3, r2
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	e017      	b.n	8001448 <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 8001422:	18d1      	adds	r1, r2, r3
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2201      	movs	r2, #1
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <HAL_UART_RxCpltCallback+0x104>)
 800142c:	f001 f997 	bl	800275e <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3301      	adds	r3, #1
 8001438:	425a      	negs	r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	bf58      	it	pl
 8001440:	4253      	negpl	r3, r2
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 8001446:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_UART_RxCpltCallback+0xf0>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_UART_RxCpltCallback+0xf4>)
 8001452:	4413      	add	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <HAL_UART_RxCpltCallback+0x104>)
 800145a:	f001 fa12 	bl	8002882 <HAL_UART_Receive_IT>
    } 
  }
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004800 	.word	0x40004800
 800146c:	20000190 	.word	0x20000190
 8001470:	20000090 	.word	0x20000090
 8001474:	20000192 	.word	0x20000192
 8001478:	20000194 	.word	0x20000194
 800147c:	08004b10 	.word	0x08004b10
 8001480:	20000294 	.word	0x20000294

08001484 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  if (cmd_ready)
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <uart_check_cmd_recv+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <uart_check_cmd_recv+0x20>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <uart_check_cmd_recv+0x24>)
 800149a:	f7ff f9bf 	bl	800081c <cli_process>
  }
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000192 	.word	0x20000192
 80014a8:	20000194 	.word	0x20000194

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c8:	4c0b      	ldr	r4, [pc, #44]	; (80014f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d6:	f000 f813 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014da:	f002 f971 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff fd1b 	bl	8000f18 <main>
  bx  lr    
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f0:	08004ca8 	.word	0x08004ca8
  ldr r2, =_sbss
 80014f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014f8:	200002ec 	.word	0x200002ec

080014fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC_IRQHandler>
	...

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f92b 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fd6c 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f943 	bl	8001812 <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f90b 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	200002d8 	.word	0x200002d8

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200002d8 	.word	0x200002d8

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff feda 	bl	80015f0 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d008      	beq.n	800185c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e052      	b.n	8001902 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0216 	bic.w	r2, r2, #22
 800186a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_DMA_Abort+0x62>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ac:	e013      	b.n	80018d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ae:	f7ff fe9f 	bl	80015f0 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d90c      	bls.n	80018d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e015      	b.n	8001902 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e4      	bne.n	80018ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d004      	beq.n	8001928 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e00c      	b.n	8001942 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2205      	movs	r2, #5
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e177      	b.n	8001c5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8166 	bne.w	8001c56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80c0 	beq.w	8001c56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a65      	ldr	r2, [pc, #404]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a61      	ldr	r2, [pc, #388]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_GPIO_Init+0x32c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d037      	beq.n	8001b8e <HAL_GPIO_Init+0x23e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_GPIO_Init+0x330>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d031      	beq.n	8001b8a <HAL_GPIO_Init+0x23a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02b      	beq.n	8001b86 <HAL_GPIO_Init+0x236>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <HAL_GPIO_Init+0x338>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d025      	beq.n	8001b82 <HAL_GPIO_Init+0x232>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <HAL_GPIO_Init+0x33c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01f      	beq.n	8001b7e <HAL_GPIO_Init+0x22e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a53      	ldr	r2, [pc, #332]	; (8001c90 <HAL_GPIO_Init+0x340>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_GPIO_Init+0x22a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_GPIO_Init+0x344>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x348>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x222>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_GPIO_Init+0x34c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x21e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x350>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x21a>
 8001b66:	2309      	movs	r3, #9
 8001b68:	e012      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	e010      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e00e      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b72:	2307      	movs	r3, #7
 8001b74:	e00c      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b76:	2306      	movs	r3, #6
 8001b78:	e00a      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	e008      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b82:	2303      	movs	r3, #3
 8001b84:	e004      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba0:	4935      	ldr	r1, [pc, #212]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd2:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	f67f ae84 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800
 8001c98:	40021c00 	.word	0x40021c00
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40022400 	.word	0x40022400
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x90>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x90>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x90>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d08:	f7ff fc72 	bl	80015f0 <HAL_GetTick>
 8001d0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d0e:	e009      	b.n	8001d24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d10:	f7ff fc6e 	bl	80015f0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d1e:	d901      	bls.n	8001d24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e01f      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d1ee      	bne.n	8001d10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff fc5a 	bl	80015f0 <HAL_GetTick>
 8001d3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d3e:	e009      	b.n	8001d54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d40:	f7ff fc56 	bl	80015f0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d4e:	d901      	bls.n	8001d54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e007      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d60:	d1ee      	bne.n	8001d40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	420e0040 	.word	0x420e0040
 8001d74:	40007000 	.word	0x40007000
 8001d78:	420e0044 	.word	0x420e0044

08001d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0cc      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d90c      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d044      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d119      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e067      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4934      	ldr	r1, [pc, #208]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff fbc0 	bl	80015f0 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff fbbc 	bl	80015f0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e04f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d20c      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fb20 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	08004b38 	.word	0x08004b38
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f4c:	b094      	sub	sp, #80	; 0x50
 8001f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	647b      	str	r3, [r7, #68]	; 0x44
 8001f54:	2300      	movs	r3, #0
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f58:	2300      	movs	r3, #0
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d00d      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x40>
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	f200 80e1 	bhi.w	8002134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7a:	e0db      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f80:	e0db      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f82:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f86:	e0d8      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f88:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fba:	4622      	mov	r2, r4
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fcc:	0150      	lsls	r0, r2, #5
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	1a51      	subs	r1, r2, r1
 8001fd6:	6139      	str	r1, [r7, #16]
 8001fd8:	4629      	mov	r1, r5
 8001fda:	eb63 0301 	sbc.w	r3, r3, r1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fec:	4659      	mov	r1, fp
 8001fee:	018b      	lsls	r3, r1, #6
 8001ff0:	4651      	mov	r1, sl
 8001ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	018a      	lsls	r2, r1, #6
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8002000:	4659      	mov	r1, fp
 8002002:	eb63 0901 	sbc.w	r9, r3, r1
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800201a:	4690      	mov	r8, r2
 800201c:	4699      	mov	r9, r3
 800201e:	4623      	mov	r3, r4
 8002020:	eb18 0303 	adds.w	r3, r8, r3
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	462b      	mov	r3, r5
 8002028:	eb49 0303 	adc.w	r3, r9, r3
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800203a:	4629      	mov	r1, r5
 800203c:	024b      	lsls	r3, r1, #9
 800203e:	4621      	mov	r1, r4
 8002040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002044:	4621      	mov	r1, r4
 8002046:	024a      	lsls	r2, r1, #9
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	2200      	movs	r2, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
 8002052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002058:	f7fe f93a 	bl	80002d0 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002064:	e058      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	2200      	movs	r2, #0
 800206e:	4618      	mov	r0, r3
 8002070:	4611      	mov	r1, r2
 8002072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
 800207c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002080:	4642      	mov	r2, r8
 8002082:	464b      	mov	r3, r9
 8002084:	f04f 0000 	mov.w	r0, #0
 8002088:	f04f 0100 	mov.w	r1, #0
 800208c:	0159      	lsls	r1, r3, #5
 800208e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002092:	0150      	lsls	r0, r2, #5
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4641      	mov	r1, r8
 800209a:	ebb2 0a01 	subs.w	sl, r2, r1
 800209e:	4649      	mov	r1, r9
 80020a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020b8:	ebb2 040a 	subs.w	r4, r2, sl
 80020bc:	eb63 050b 	sbc.w	r5, r3, fp
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	00eb      	lsls	r3, r5, #3
 80020ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020ce:	00e2      	lsls	r2, r4, #3
 80020d0:	4614      	mov	r4, r2
 80020d2:	461d      	mov	r5, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	18e3      	adds	r3, r4, r3
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	464b      	mov	r3, r9
 80020dc:	eb45 0303 	adc.w	r3, r5, r3
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ee:	4629      	mov	r1, r5
 80020f0:	028b      	lsls	r3, r1, #10
 80020f2:	4621      	mov	r1, r4
 80020f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f8:	4621      	mov	r1, r4
 80020fa:	028a      	lsls	r2, r1, #10
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002102:	2200      	movs	r2, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	61fa      	str	r2, [r7, #28]
 8002108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800210c:	f7fe f8e0 	bl	80002d0 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_GetSysClockFreq+0x200>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002132:	e002      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetSysClockFreq+0x204>)
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800213c:	4618      	mov	r0, r3
 800213e:	3750      	adds	r7, #80	; 0x50
 8002140:	46bd      	mov	sp, r7
 8002142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	00f42400 	.word	0x00f42400
 8002150:	007a1200 	.word	0x007a1200

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002170:	f7ff fff0 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	08004b48 	.word	0x08004b48

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002198:	f7ff ffdc 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0b5b      	lsrs	r3, r3, #13
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	08004b48 	.word	0x08004b48

080021bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e273      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e24e      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a75      	ldr	r2, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6f      	ldr	r2, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b69      	ldr	r3, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a68      	ldr	r2, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f9bc 	bl	80015f0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f9b8 	bl	80015f0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e213      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f9a8 	bl	80015f0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f9a4 	bl	80015f0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1ff      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b44      	ldr	r3, [pc, #272]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1d3      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4937      	ldr	r1, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff f95d 	bl	80015f0 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff f959 	bl	80015f0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1b4      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f93c 	bl	80015f0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff f938 	bl	80015f0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e193      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff f91c 	bl	80015f0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff f918 	bl	80015f0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e173      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
 80023da:	e01b      	b.n	8002414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff f905 	bl	80015f0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00e      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff f901 	bl	80015f0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d907      	bls.n	8002408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e15c      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ea      	bne.n	80023ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8097 	beq.w	8002550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b83      	ldr	r3, [pc, #524]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a7e      	ldr	r2, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b79      	ldr	r3, [pc, #484]	; (8002638 <HAL_RCC_OscConfig+0x47c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x47c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x47c>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff f8c1 	bl	80015f0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff f8bd 	bl	80015f0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e118      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x47c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ea>
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x30c>
 80024ae:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a60      	ldr	r2, [pc, #384]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ba:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024c8:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a59      	ldr	r2, [pc, #356]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff f882 	bl	80015f0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7ff f87e 	bl	80015f0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0d7      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ee      	beq.n	80024f0 <HAL_RCC_OscConfig+0x334>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7ff f86c 	bl	80015f0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7ff f868 	bl	80015f0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0c1      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80ad 	beq.w	80026b4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255a:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d060      	beq.n	8002628 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d145      	bne.n	80025fa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x480>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff f83c 	bl	80015f0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f838 	bl	80015f0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e093      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	071b      	lsls	r3, r3, #28
 80025c6:	491b      	ldr	r1, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x480>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7ff f80d 	bl	80015f0 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff f809 	bl	80015f0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e064      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x41e>
 80025f8:	e05c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_OscConfig+0x480>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fff6 	bl	80015f0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fff2 	bl	80015f0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04d      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x44c>
 8002626:	e045      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e040      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000
 800263c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d030      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d129      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d122      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002670:	4013      	ands	r3, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002678:	4293      	cmp	r3, r2
 800267a:	d119      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d10f      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03f      	b.n	8002756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fdf6 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fddf 	bl	80032cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800271c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800272c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800273c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	af02      	add	r7, sp, #8
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d17c      	bne.n	8002878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Transmit+0x2c>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e075      	b.n	800287a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_UART_Transmit+0x3e>
 8002798:	2302      	movs	r3, #2
 800279a:	e06e      	b.n	800287a <HAL_UART_Transmit+0x11c>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	; 0x21
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe ff1d 	bl	80015f0 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Transmit+0x82>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027f0:	e02a      	b.n	8002848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fb1f 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e036      	b.n	800287a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3302      	adds	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e007      	b.n	800283a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1cf      	bne.n	80027f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	; 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 faef 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e006      	b.n	800287a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	4613      	mov	r3, r2
 800288e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d11d      	bne.n	80028d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Receive_IT+0x26>
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e016      	b.n	80028da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Receive_IT+0x38>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e00f      	b.n	80028da <HAL_UART_Receive_IT+0x58>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fb24 	bl	8002f1c <UART_Start_Receive_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e000      	b.n	80028da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0ba      	sub	sp, #232	; 0xe8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_UART_IRQHandler+0x66>
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fc07 	bl	8003156 <UART_Receive_IT>
      return;
 8002948:	e256      	b.n	8002df8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800294a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80de 	beq.w	8002b10 <HAL_UART_IRQHandler+0x22c>
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002964:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80d1 	beq.w	8002b10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_UART_IRQHandler+0xae>
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_UART_IRQHandler+0xd2>
 800299e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f043 0202 	orr.w	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_UART_IRQHandler+0xf6>
 80029c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d011      	beq.n	8002a0a <HAL_UART_IRQHandler+0x126>
 80029e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0208 	orr.w	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 81ed 	beq.w	8002dee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_UART_IRQHandler+0x14e>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fb92 	bl	8003156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_UART_IRQHandler+0x17a>
 8002a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d04f      	beq.n	8002afe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa9a 	bl	8002f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d141      	bne.n	8002af6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1d9      	bne.n	8002a72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d013      	beq.n	8002aee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	4a7d      	ldr	r2, [pc, #500]	; (8002cc0 <HAL_UART_IRQHandler+0x3dc>)
 8002acc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe ff19 	bl	800190a <HAL_DMA_Abort_IT>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	e00e      	b.n	8002b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f990 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	e00a      	b.n	8002b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f98c 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	e006      	b.n	8002b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f988 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b0a:	e170      	b.n	8002dee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	bf00      	nop
    return;
 8002b0e:	e16e      	b.n	8002dee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 814a 	bne.w	8002dae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8143 	beq.w	8002dae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 813c 	beq.w	8002dae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	f040 80b4 	bne.w	8002cc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8140 	beq.w	8002df2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	f080 8139 	bcs.w	8002df2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b92:	f000 8088 	beq.w	8002ca6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1d9      	bne.n	8002b96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e3      	bne.n	8002c1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c76:	f023 0310 	bic.w	r3, r3, #16
 8002c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c88:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e3      	bne.n	8002c64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fdc2 	bl	800182a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8b6 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cbc:	e099      	b.n	8002df2 <HAL_UART_IRQHandler+0x50e>
 8002cbe:	bf00      	nop
 8002cc0:	0800305f 	.word	0x0800305f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 808b 	beq.w	8002df6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8086 	beq.w	8002df6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d0e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e3      	bne.n	8002cea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	623b      	str	r3, [r7, #32]
   return(result);
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d46:	633a      	str	r2, [r7, #48]	; 0x30
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e3      	bne.n	8002d22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	330c      	adds	r3, #12
 8002d88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d8c:	61fa      	str	r2, [r7, #28]
 8002d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	617b      	str	r3, [r7, #20]
   return(result);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e3      	bne.n	8002d68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f83e 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dac:	e023      	b.n	8002df6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_UART_IRQHandler+0x4ea>
 8002dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f95d 	bl	8003086 <UART_Transmit_IT>
    return;
 8002dcc:	e014      	b.n	8002df8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <HAL_UART_IRQHandler+0x514>
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f99d 	bl	8003126 <UART_EndTransmit_IT>
    return;
 8002dec:	e004      	b.n	8002df8 <HAL_UART_IRQHandler+0x514>
    return;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <HAL_UART_IRQHandler+0x514>
      return;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <HAL_UART_IRQHandler+0x514>
      return;
 8002df6:	bf00      	nop
  }
}
 8002df8:	37e8      	adds	r7, #232	; 0xe8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop

08002e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b090      	sub	sp, #64	; 0x40
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e050      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d04c      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e60:	f7fe fbc6 	bl	80015f0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d241      	bcs.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e90:	637a      	str	r2, [r7, #52]	; 0x34
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec4:	623a      	str	r2, [r7, #32]
 8002ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d09f      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3740      	adds	r7, #64	; 0x40
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2222      	movs	r2, #34	; 0x22
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b095      	sub	sp, #84	; 0x54
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc0:	643a      	str	r2, [r7, #64]	; 0x40
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e5      	bne.n	8002fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2b01      	cmp	r3, #1
 800300e:	d119      	bne.n	8003044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f023 0310 	bic.w	r3, r3, #16
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003030:	61ba      	str	r2, [r7, #24]
 8003032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6979      	ldr	r1, [r7, #20]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	613b      	str	r3, [r7, #16]
   return(result);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e5      	bne.n	8003010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003052:	bf00      	nop
 8003054:	3754      	adds	r7, #84	; 0x54
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fecb 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b21      	cmp	r3, #33	; 0x21
 8003098:	d13e      	bne.n	8003118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d114      	bne.n	80030ce <UART_Transmit_IT+0x48>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d110      	bne.n	80030ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	621a      	str	r2, [r3, #32]
 80030cc:	e008      	b.n	80030e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	1c59      	adds	r1, r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6211      	str	r1, [r2, #32]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10f      	bne.n	8003114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fe5a 	bl	8002e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b08c      	sub	sp, #48	; 0x30
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b22      	cmp	r3, #34	; 0x22
 8003168:	f040 80ab 	bne.w	80032c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003174:	d117      	bne.n	80031a6 <UART_Receive_IT+0x50>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003194:	b29a      	uxth	r2, r3
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	1c9a      	adds	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
 80031a4:	e026      	b.n	80031f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d007      	beq.n	80031ca <UART_Receive_IT+0x74>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <UART_Receive_IT+0x82>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e008      	b.n	80031ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4619      	mov	r1, r3
 8003202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003204:	2b00      	cmp	r3, #0
 8003206:	d15a      	bne.n	80032be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0220 	bic.w	r2, r2, #32
 8003216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	d135      	bne.n	80032b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	613b      	str	r3, [r7, #16]
   return(result);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f023 0310 	bic.w	r3, r3, #16
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	623a      	str	r2, [r7, #32]
 8003270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	69f9      	ldr	r1, [r7, #28]
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	61bb      	str	r3, [r7, #24]
   return(result);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e5      	bne.n	800324e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d10a      	bne.n	80032a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fdbb 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
 80032b2:	e002      	b.n	80032ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7fe f861 	bl	800137c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e002      	b.n	80032c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3730      	adds	r7, #48	; 0x30
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b0c0      	sub	sp, #256	; 0x100
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	ea40 0301 	orr.w	r3, r0, r1
 80032f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003324:	f021 010c 	bic.w	r1, r1, #12
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003332:	430b      	orrs	r3, r1
 8003334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	6999      	ldr	r1, [r3, #24]
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	ea40 0301 	orr.w	r3, r0, r1
 8003352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <UART_SetConfig+0x2cc>)
 800335c:	429a      	cmp	r2, r3
 800335e:	d005      	beq.n	800336c <UART_SetConfig+0xa0>
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <UART_SetConfig+0x2d0>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d104      	bne.n	8003376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe ff12 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003370:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003374:	e003      	b.n	800337e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003376:	f7fe fef9 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 800337a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003388:	f040 810c 	bne.w	80035a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800338c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003390:	2200      	movs	r2, #0
 8003392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003396:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800339a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800339e:	4622      	mov	r2, r4
 80033a0:	462b      	mov	r3, r5
 80033a2:	1891      	adds	r1, r2, r2
 80033a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80033a6:	415b      	adcs	r3, r3
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ae:	4621      	mov	r1, r4
 80033b0:	eb12 0801 	adds.w	r8, r2, r1
 80033b4:	4629      	mov	r1, r5
 80033b6:	eb43 0901 	adc.w	r9, r3, r1
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ce:	4690      	mov	r8, r2
 80033d0:	4699      	mov	r9, r3
 80033d2:	4623      	mov	r3, r4
 80033d4:	eb18 0303 	adds.w	r3, r8, r3
 80033d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033dc:	462b      	mov	r3, r5
 80033de:	eb49 0303 	adc.w	r3, r9, r3
 80033e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033fa:	460b      	mov	r3, r1
 80033fc:	18db      	adds	r3, r3, r3
 80033fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003400:	4613      	mov	r3, r2
 8003402:	eb42 0303 	adc.w	r3, r2, r3
 8003406:	657b      	str	r3, [r7, #84]	; 0x54
 8003408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800340c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003410:	f7fc ff5e 	bl	80002d0 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <UART_SetConfig+0x2d4>)
 800341a:	fba3 2302 	umull	r2, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	011c      	lsls	r4, r3, #4
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800342c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	64b9      	str	r1, [r7, #72]	; 0x48
 800343c:	415b      	adcs	r3, r3
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003444:	4641      	mov	r1, r8
 8003446:	eb12 0a01 	adds.w	sl, r2, r1
 800344a:	4649      	mov	r1, r9
 800344c:	eb43 0b01 	adc.w	fp, r3, r1
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800345c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003464:	4692      	mov	sl, r2
 8003466:	469b      	mov	fp, r3
 8003468:	4643      	mov	r3, r8
 800346a:	eb1a 0303 	adds.w	r3, sl, r3
 800346e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003472:	464b      	mov	r3, r9
 8003474:	eb4b 0303 	adc.w	r3, fp, r3
 8003478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003488:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800348c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003490:	460b      	mov	r3, r1
 8003492:	18db      	adds	r3, r3, r3
 8003494:	643b      	str	r3, [r7, #64]	; 0x40
 8003496:	4613      	mov	r3, r2
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
 800349e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034a6:	f7fc ff13 	bl	80002d0 <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <UART_SetConfig+0x2d4>)
 80034b2:	fba3 2301 	umull	r2, r3, r3, r1
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2264      	movs	r2, #100	; 0x64
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	1acb      	subs	r3, r1, r3
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034c6:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <UART_SetConfig+0x2d4>)
 80034c8:	fba3 2302 	umull	r2, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d4:	441c      	add	r4, r3
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	1891      	adds	r1, r2, r2
 80034ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80034f0:	415b      	adcs	r3, r3
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034f8:	4641      	mov	r1, r8
 80034fa:	1851      	adds	r1, r2, r1
 80034fc:	6339      	str	r1, [r7, #48]	; 0x30
 80034fe:	4649      	mov	r1, r9
 8003500:	414b      	adcs	r3, r1
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003510:	4659      	mov	r1, fp
 8003512:	00cb      	lsls	r3, r1, #3
 8003514:	4651      	mov	r1, sl
 8003516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351a:	4651      	mov	r1, sl
 800351c:	00ca      	lsls	r2, r1, #3
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	4603      	mov	r3, r0
 8003524:	4642      	mov	r2, r8
 8003526:	189b      	adds	r3, r3, r2
 8003528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800352c:	464b      	mov	r3, r9
 800352e:	460a      	mov	r2, r1
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800354c:	460b      	mov	r3, r1
 800354e:	18db      	adds	r3, r3, r3
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	4613      	mov	r3, r2
 8003554:	eb42 0303 	adc.w	r3, r2, r3
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800355a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800355e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003562:	f7fc feb5 	bl	80002d0 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <UART_SetConfig+0x2d4>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <UART_SetConfig+0x2d4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0207 	and.w	r2, r3, #7
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4422      	add	r2, r4
 8003592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003594:	e105      	b.n	80037a2 <UART_SetConfig+0x4d6>
 8003596:	bf00      	nop
 8003598:	40011000 	.word	0x40011000
 800359c:	40011400 	.word	0x40011400
 80035a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035b6:	4642      	mov	r2, r8
 80035b8:	464b      	mov	r3, r9
 80035ba:	1891      	adds	r1, r2, r2
 80035bc:	6239      	str	r1, [r7, #32]
 80035be:	415b      	adcs	r3, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035c6:	4641      	mov	r1, r8
 80035c8:	1854      	adds	r4, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb43 0501 	adc.w	r5, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	00eb      	lsls	r3, r5, #3
 80035da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035de:	00e2      	lsls	r2, r4, #3
 80035e0:	4614      	mov	r4, r2
 80035e2:	461d      	mov	r5, r3
 80035e4:	4643      	mov	r3, r8
 80035e6:	18e3      	adds	r3, r4, r3
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035ec:	464b      	mov	r3, r9
 80035ee:	eb45 0303 	adc.w	r3, r5, r3
 80035f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003612:	4629      	mov	r1, r5
 8003614:	008b      	lsls	r3, r1, #2
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800361c:	4621      	mov	r1, r4
 800361e:	008a      	lsls	r2, r1, #2
 8003620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003624:	f7fc fe54 	bl	80002d0 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <UART_SetConfig+0x4e4>)
 800362e:	fba3 2302 	umull	r2, r3, r3, r2
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	011c      	lsls	r4, r3, #4
 8003636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	1891      	adds	r1, r2, r2
 800364e:	61b9      	str	r1, [r7, #24]
 8003650:	415b      	adcs	r3, r3
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003658:	4641      	mov	r1, r8
 800365a:	1851      	adds	r1, r2, r1
 800365c:	6139      	str	r1, [r7, #16]
 800365e:	4649      	mov	r1, r9
 8003660:	414b      	adcs	r3, r1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003670:	4659      	mov	r1, fp
 8003672:	00cb      	lsls	r3, r1, #3
 8003674:	4651      	mov	r1, sl
 8003676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367a:	4651      	mov	r1, sl
 800367c:	00ca      	lsls	r2, r1, #3
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	4603      	mov	r3, r0
 8003684:	4642      	mov	r2, r8
 8003686:	189b      	adds	r3, r3, r2
 8003688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800368c:	464b      	mov	r3, r9
 800368e:	460a      	mov	r2, r1
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80036a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036b0:	4649      	mov	r1, r9
 80036b2:	008b      	lsls	r3, r1, #2
 80036b4:	4641      	mov	r1, r8
 80036b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ba:	4641      	mov	r1, r8
 80036bc:	008a      	lsls	r2, r1, #2
 80036be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036c2:	f7fc fe05 	bl	80002d0 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <UART_SetConfig+0x4e4>)
 80036cc:	fba3 1302 	umull	r1, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	2164      	movs	r1, #100	; 0x64
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	3332      	adds	r3, #50	; 0x32
 80036de:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <UART_SetConfig+0x4e4>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ea:	441c      	add	r4, r3
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f0:	2200      	movs	r2, #0
 80036f2:	673b      	str	r3, [r7, #112]	; 0x70
 80036f4:	677a      	str	r2, [r7, #116]	; 0x74
 80036f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036fa:	4642      	mov	r2, r8
 80036fc:	464b      	mov	r3, r9
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	415b      	adcs	r3, r3
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370a:	4641      	mov	r1, r8
 800370c:	1851      	adds	r1, r2, r1
 800370e:	6039      	str	r1, [r7, #0]
 8003710:	4649      	mov	r1, r9
 8003712:	414b      	adcs	r3, r1
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003722:	4659      	mov	r1, fp
 8003724:	00cb      	lsls	r3, r1, #3
 8003726:	4651      	mov	r1, sl
 8003728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372c:	4651      	mov	r1, sl
 800372e:	00ca      	lsls	r2, r1, #3
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	4603      	mov	r3, r0
 8003736:	4642      	mov	r2, r8
 8003738:	189b      	adds	r3, r3, r2
 800373a:	66bb      	str	r3, [r7, #104]	; 0x68
 800373c:	464b      	mov	r3, r9
 800373e:	460a      	mov	r2, r1
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	663b      	str	r3, [r7, #96]	; 0x60
 8003750:	667a      	str	r2, [r7, #100]	; 0x64
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800375e:	4649      	mov	r1, r9
 8003760:	008b      	lsls	r3, r1, #2
 8003762:	4641      	mov	r1, r8
 8003764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003768:	4641      	mov	r1, r8
 800376a:	008a      	lsls	r2, r1, #2
 800376c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003770:	f7fc fdae 	bl	80002d0 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <UART_SetConfig+0x4e4>)
 800377a:	fba3 1302 	umull	r1, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2164      	movs	r1, #100	; 0x64
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	3332      	adds	r3, #50	; 0x32
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <UART_SetConfig+0x4e4>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4422      	add	r2, r4
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	bf00      	nop
 80037a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	51eb851f 	.word	0x51eb851f

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f001 f90c 	bl	80049f0 <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	08004ca0 	.word	0x08004ca0
 80037fc:	08004ca0 	.word	0x08004ca0
 8003800:	08004ca0 	.word	0x08004ca0
 8003804:	08004ca4 	.word	0x08004ca4

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <iprintf>:
 8003818:	b40f      	push	{r0, r1, r2, r3}
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <iprintf+0x2c>)
 800381c:	b513      	push	{r0, r1, r4, lr}
 800381e:	681c      	ldr	r4, [r3, #0]
 8003820:	b124      	cbz	r4, 800382c <iprintf+0x14>
 8003822:	69a3      	ldr	r3, [r4, #24]
 8003824:	b913      	cbnz	r3, 800382c <iprintf+0x14>
 8003826:	4620      	mov	r0, r4
 8003828:	f000 fae0 	bl	8003dec <__sinit>
 800382c:	ab05      	add	r3, sp, #20
 800382e:	9a04      	ldr	r2, [sp, #16]
 8003830:	68a1      	ldr	r1, [r4, #8]
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	4620      	mov	r0, r4
 8003836:	f000 fd03 	bl	8004240 <_vfiprintf_r>
 800383a:	b002      	add	sp, #8
 800383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003840:	b004      	add	sp, #16
 8003842:	4770      	bx	lr
 8003844:	2000000c 	.word	0x2000000c

08003848 <_puts_r>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	460e      	mov	r6, r1
 800384c:	4605      	mov	r5, r0
 800384e:	b118      	cbz	r0, 8003858 <_puts_r+0x10>
 8003850:	6983      	ldr	r3, [r0, #24]
 8003852:	b90b      	cbnz	r3, 8003858 <_puts_r+0x10>
 8003854:	f000 faca 	bl	8003dec <__sinit>
 8003858:	69ab      	ldr	r3, [r5, #24]
 800385a:	68ac      	ldr	r4, [r5, #8]
 800385c:	b913      	cbnz	r3, 8003864 <_puts_r+0x1c>
 800385e:	4628      	mov	r0, r5
 8003860:	f000 fac4 	bl	8003dec <__sinit>
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <_puts_r+0xd0>)
 8003866:	429c      	cmp	r4, r3
 8003868:	d120      	bne.n	80038ac <_puts_r+0x64>
 800386a:	686c      	ldr	r4, [r5, #4]
 800386c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800386e:	07db      	lsls	r3, r3, #31
 8003870:	d405      	bmi.n	800387e <_puts_r+0x36>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	0598      	lsls	r0, r3, #22
 8003876:	d402      	bmi.n	800387e <_puts_r+0x36>
 8003878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800387a:	f000 fb67 	bl	8003f4c <__retarget_lock_acquire_recursive>
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	0719      	lsls	r1, r3, #28
 8003882:	d51d      	bpl.n	80038c0 <_puts_r+0x78>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	b1db      	cbz	r3, 80038c0 <_puts_r+0x78>
 8003888:	3e01      	subs	r6, #1
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003890:	3b01      	subs	r3, #1
 8003892:	60a3      	str	r3, [r4, #8]
 8003894:	bb39      	cbnz	r1, 80038e6 <_puts_r+0x9e>
 8003896:	2b00      	cmp	r3, #0
 8003898:	da38      	bge.n	800390c <_puts_r+0xc4>
 800389a:	4622      	mov	r2, r4
 800389c:	210a      	movs	r1, #10
 800389e:	4628      	mov	r0, r5
 80038a0:	f000 f8ac 	bl	80039fc <__swbuf_r>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d011      	beq.n	80038cc <_puts_r+0x84>
 80038a8:	250a      	movs	r5, #10
 80038aa:	e011      	b.n	80038d0 <_puts_r+0x88>
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <_puts_r+0xd4>)
 80038ae:	429c      	cmp	r4, r3
 80038b0:	d101      	bne.n	80038b6 <_puts_r+0x6e>
 80038b2:	68ac      	ldr	r4, [r5, #8]
 80038b4:	e7da      	b.n	800386c <_puts_r+0x24>
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <_puts_r+0xd8>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	bf08      	it	eq
 80038bc:	68ec      	ldreq	r4, [r5, #12]
 80038be:	e7d5      	b.n	800386c <_puts_r+0x24>
 80038c0:	4621      	mov	r1, r4
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f8ec 	bl	8003aa0 <__swsetup_r>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d0dd      	beq.n	8003888 <_puts_r+0x40>
 80038cc:	f04f 35ff 	mov.w	r5, #4294967295
 80038d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038d2:	07da      	lsls	r2, r3, #31
 80038d4:	d405      	bmi.n	80038e2 <_puts_r+0x9a>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	059b      	lsls	r3, r3, #22
 80038da:	d402      	bmi.n	80038e2 <_puts_r+0x9a>
 80038dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038de:	f000 fb36 	bl	8003f4e <__retarget_lock_release_recursive>
 80038e2:	4628      	mov	r0, r5
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	da04      	bge.n	80038f4 <_puts_r+0xac>
 80038ea:	69a2      	ldr	r2, [r4, #24]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dc06      	bgt.n	80038fe <_puts_r+0xb6>
 80038f0:	290a      	cmp	r1, #10
 80038f2:	d004      	beq.n	80038fe <_puts_r+0xb6>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	6022      	str	r2, [r4, #0]
 80038fa:	7019      	strb	r1, [r3, #0]
 80038fc:	e7c5      	b.n	800388a <_puts_r+0x42>
 80038fe:	4622      	mov	r2, r4
 8003900:	4628      	mov	r0, r5
 8003902:	f000 f87b 	bl	80039fc <__swbuf_r>
 8003906:	3001      	adds	r0, #1
 8003908:	d1bf      	bne.n	800388a <_puts_r+0x42>
 800390a:	e7df      	b.n	80038cc <_puts_r+0x84>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	250a      	movs	r5, #10
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	6022      	str	r2, [r4, #0]
 8003914:	701d      	strb	r5, [r3, #0]
 8003916:	e7db      	b.n	80038d0 <_puts_r+0x88>
 8003918:	08004c24 	.word	0x08004c24
 800391c:	08004c44 	.word	0x08004c44
 8003920:	08004c04 	.word	0x08004c04

08003924 <puts>:
 8003924:	4b02      	ldr	r3, [pc, #8]	; (8003930 <puts+0xc>)
 8003926:	4601      	mov	r1, r0
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	f7ff bf8d 	b.w	8003848 <_puts_r>
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <strcpy>:
 8003934:	4603      	mov	r3, r0
 8003936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800393a:	f803 2b01 	strb.w	r2, [r3], #1
 800393e:	2a00      	cmp	r2, #0
 8003940:	d1f9      	bne.n	8003936 <strcpy+0x2>
 8003942:	4770      	bx	lr

08003944 <strtok>:
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <strtok+0x5c>)
 8003946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800394c:	4605      	mov	r5, r0
 800394e:	b9fc      	cbnz	r4, 8003990 <strtok+0x4c>
 8003950:	2050      	movs	r0, #80	; 0x50
 8003952:	9101      	str	r1, [sp, #4]
 8003954:	f000 fb62 	bl	800401c <malloc>
 8003958:	9901      	ldr	r1, [sp, #4]
 800395a:	65b0      	str	r0, [r6, #88]	; 0x58
 800395c:	4602      	mov	r2, r0
 800395e:	b920      	cbnz	r0, 800396a <strtok+0x26>
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <strtok+0x60>)
 8003962:	4811      	ldr	r0, [pc, #68]	; (80039a8 <strtok+0x64>)
 8003964:	2157      	movs	r1, #87	; 0x57
 8003966:	f000 f909 	bl	8003b7c <__assert_func>
 800396a:	e9c0 4400 	strd	r4, r4, [r0]
 800396e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003972:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003976:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800397a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800397e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003982:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003986:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800398a:	6184      	str	r4, [r0, #24]
 800398c:	7704      	strb	r4, [r0, #28]
 800398e:	6244      	str	r4, [r0, #36]	; 0x24
 8003990:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003992:	2301      	movs	r3, #1
 8003994:	4628      	mov	r0, r5
 8003996:	b002      	add	sp, #8
 8003998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800399c:	f000 b806 	b.w	80039ac <__strtok_r>
 80039a0:	2000000c 	.word	0x2000000c
 80039a4:	08004b54 	.word	0x08004b54
 80039a8:	08004b6b 	.word	0x08004b6b

080039ac <__strtok_r>:
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	b908      	cbnz	r0, 80039b4 <__strtok_r+0x8>
 80039b0:	6810      	ldr	r0, [r2, #0]
 80039b2:	b188      	cbz	r0, 80039d8 <__strtok_r+0x2c>
 80039b4:	4604      	mov	r4, r0
 80039b6:	4620      	mov	r0, r4
 80039b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80039bc:	460f      	mov	r7, r1
 80039be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80039c2:	b91e      	cbnz	r6, 80039cc <__strtok_r+0x20>
 80039c4:	b965      	cbnz	r5, 80039e0 <__strtok_r+0x34>
 80039c6:	6015      	str	r5, [r2, #0]
 80039c8:	4628      	mov	r0, r5
 80039ca:	e005      	b.n	80039d8 <__strtok_r+0x2c>
 80039cc:	42b5      	cmp	r5, r6
 80039ce:	d1f6      	bne.n	80039be <__strtok_r+0x12>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <__strtok_r+0xa>
 80039d4:	6014      	str	r4, [r2, #0]
 80039d6:	7003      	strb	r3, [r0, #0]
 80039d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039da:	461c      	mov	r4, r3
 80039dc:	e00c      	b.n	80039f8 <__strtok_r+0x4c>
 80039de:	b915      	cbnz	r5, 80039e6 <__strtok_r+0x3a>
 80039e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80039e4:	460e      	mov	r6, r1
 80039e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80039ea:	42ab      	cmp	r3, r5
 80039ec:	d1f7      	bne.n	80039de <__strtok_r+0x32>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f3      	beq.n	80039da <__strtok_r+0x2e>
 80039f2:	2300      	movs	r3, #0
 80039f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80039f8:	6014      	str	r4, [r2, #0]
 80039fa:	e7ed      	b.n	80039d8 <__strtok_r+0x2c>

080039fc <__swbuf_r>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	460e      	mov	r6, r1
 8003a00:	4614      	mov	r4, r2
 8003a02:	4605      	mov	r5, r0
 8003a04:	b118      	cbz	r0, 8003a0e <__swbuf_r+0x12>
 8003a06:	6983      	ldr	r3, [r0, #24]
 8003a08:	b90b      	cbnz	r3, 8003a0e <__swbuf_r+0x12>
 8003a0a:	f000 f9ef 	bl	8003dec <__sinit>
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <__swbuf_r+0x98>)
 8003a10:	429c      	cmp	r4, r3
 8003a12:	d12b      	bne.n	8003a6c <__swbuf_r+0x70>
 8003a14:	686c      	ldr	r4, [r5, #4]
 8003a16:	69a3      	ldr	r3, [r4, #24]
 8003a18:	60a3      	str	r3, [r4, #8]
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	071a      	lsls	r2, r3, #28
 8003a1e:	d52f      	bpl.n	8003a80 <__swbuf_r+0x84>
 8003a20:	6923      	ldr	r3, [r4, #16]
 8003a22:	b36b      	cbz	r3, 8003a80 <__swbuf_r+0x84>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	1ac0      	subs	r0, r0, r3
 8003a2a:	6963      	ldr	r3, [r4, #20]
 8003a2c:	b2f6      	uxtb	r6, r6
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	4637      	mov	r7, r6
 8003a32:	dc04      	bgt.n	8003a3e <__swbuf_r+0x42>
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f944 	bl	8003cc4 <_fflush_r>
 8003a3c:	bb30      	cbnz	r0, 8003a8c <__swbuf_r+0x90>
 8003a3e:	68a3      	ldr	r3, [r4, #8]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60a3      	str	r3, [r4, #8]
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	6022      	str	r2, [r4, #0]
 8003a4a:	701e      	strb	r6, [r3, #0]
 8003a4c:	6963      	ldr	r3, [r4, #20]
 8003a4e:	3001      	adds	r0, #1
 8003a50:	4283      	cmp	r3, r0
 8003a52:	d004      	beq.n	8003a5e <__swbuf_r+0x62>
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	d506      	bpl.n	8003a68 <__swbuf_r+0x6c>
 8003a5a:	2e0a      	cmp	r6, #10
 8003a5c:	d104      	bne.n	8003a68 <__swbuf_r+0x6c>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 f92f 	bl	8003cc4 <_fflush_r>
 8003a66:	b988      	cbnz	r0, 8003a8c <__swbuf_r+0x90>
 8003a68:	4638      	mov	r0, r7
 8003a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <__swbuf_r+0x9c>)
 8003a6e:	429c      	cmp	r4, r3
 8003a70:	d101      	bne.n	8003a76 <__swbuf_r+0x7a>
 8003a72:	68ac      	ldr	r4, [r5, #8]
 8003a74:	e7cf      	b.n	8003a16 <__swbuf_r+0x1a>
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <__swbuf_r+0xa0>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	bf08      	it	eq
 8003a7c:	68ec      	ldreq	r4, [r5, #12]
 8003a7e:	e7ca      	b.n	8003a16 <__swbuf_r+0x1a>
 8003a80:	4621      	mov	r1, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f80c 	bl	8003aa0 <__swsetup_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d0cb      	beq.n	8003a24 <__swbuf_r+0x28>
 8003a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a90:	e7ea      	b.n	8003a68 <__swbuf_r+0x6c>
 8003a92:	bf00      	nop
 8003a94:	08004c24 	.word	0x08004c24
 8003a98:	08004c44 	.word	0x08004c44
 8003a9c:	08004c04 	.word	0x08004c04

08003aa0 <__swsetup_r>:
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <__swsetup_r+0xcc>)
 8003aa2:	b570      	push	{r4, r5, r6, lr}
 8003aa4:	681d      	ldr	r5, [r3, #0]
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	b125      	cbz	r5, 8003ab6 <__swsetup_r+0x16>
 8003aac:	69ab      	ldr	r3, [r5, #24]
 8003aae:	b913      	cbnz	r3, 8003ab6 <__swsetup_r+0x16>
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f99b 	bl	8003dec <__sinit>
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <__swsetup_r+0xd0>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d10f      	bne.n	8003adc <__swsetup_r+0x3c>
 8003abc:	686c      	ldr	r4, [r5, #4]
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ac4:	0719      	lsls	r1, r3, #28
 8003ac6:	d42c      	bmi.n	8003b22 <__swsetup_r+0x82>
 8003ac8:	06dd      	lsls	r5, r3, #27
 8003aca:	d411      	bmi.n	8003af0 <__swsetup_r+0x50>
 8003acc:	2309      	movs	r3, #9
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ada:	e03e      	b.n	8003b5a <__swsetup_r+0xba>
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <__swsetup_r+0xd4>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d101      	bne.n	8003ae6 <__swsetup_r+0x46>
 8003ae2:	68ac      	ldr	r4, [r5, #8]
 8003ae4:	e7eb      	b.n	8003abe <__swsetup_r+0x1e>
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <__swsetup_r+0xd8>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	bf08      	it	eq
 8003aec:	68ec      	ldreq	r4, [r5, #12]
 8003aee:	e7e6      	b.n	8003abe <__swsetup_r+0x1e>
 8003af0:	0758      	lsls	r0, r3, #29
 8003af2:	d512      	bpl.n	8003b1a <__swsetup_r+0x7a>
 8003af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af6:	b141      	cbz	r1, 8003b0a <__swsetup_r+0x6a>
 8003af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d002      	beq.n	8003b06 <__swsetup_r+0x66>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 fa93 	bl	800402c <_free_r>
 8003b06:	2300      	movs	r3, #0
 8003b08:	6363      	str	r3, [r4, #52]	; 0x34
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	2300      	movs	r3, #0
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	b94b      	cbnz	r3, 8003b3a <__swsetup_r+0x9a>
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b30:	d003      	beq.n	8003b3a <__swsetup_r+0x9a>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 fa31 	bl	8003f9c <__smakebuf_r>
 8003b3a:	89a0      	ldrh	r0, [r4, #12]
 8003b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b40:	f010 0301 	ands.w	r3, r0, #1
 8003b44:	d00a      	beq.n	8003b5c <__swsetup_r+0xbc>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	61a3      	str	r3, [r4, #24]
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	b943      	cbnz	r3, 8003b66 <__swsetup_r+0xc6>
 8003b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b58:	d1ba      	bne.n	8003ad0 <__swsetup_r+0x30>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	0781      	lsls	r1, r0, #30
 8003b5e:	bf58      	it	pl
 8003b60:	6963      	ldrpl	r3, [r4, #20]
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	e7f4      	b.n	8003b50 <__swsetup_r+0xb0>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e7f7      	b.n	8003b5a <__swsetup_r+0xba>
 8003b6a:	bf00      	nop
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	08004c24 	.word	0x08004c24
 8003b74:	08004c44 	.word	0x08004c44
 8003b78:	08004c04 	.word	0x08004c04

08003b7c <__assert_func>:
 8003b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b7e:	4614      	mov	r4, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <__assert_func+0x2c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4605      	mov	r5, r0
 8003b88:	68d8      	ldr	r0, [r3, #12]
 8003b8a:	b14c      	cbz	r4, 8003ba0 <__assert_func+0x24>
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <__assert_func+0x30>)
 8003b8e:	9100      	str	r1, [sp, #0]
 8003b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b94:	4906      	ldr	r1, [pc, #24]	; (8003bb0 <__assert_func+0x34>)
 8003b96:	462b      	mov	r3, r5
 8003b98:	f000 f9a6 	bl	8003ee8 <fiprintf>
 8003b9c:	f000 fe7a 	bl	8004894 <abort>
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <__assert_func+0x38>)
 8003ba2:	461c      	mov	r4, r3
 8003ba4:	e7f3      	b.n	8003b8e <__assert_func+0x12>
 8003ba6:	bf00      	nop
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	08004bc8 	.word	0x08004bc8
 8003bb0:	08004bd5 	.word	0x08004bd5
 8003bb4:	08004c03 	.word	0x08004c03

08003bb8 <__sflush_r>:
 8003bb8:	898a      	ldrh	r2, [r1, #12]
 8003bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	0710      	lsls	r0, r2, #28
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	d458      	bmi.n	8003c78 <__sflush_r+0xc0>
 8003bc6:	684b      	ldr	r3, [r1, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dc05      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dc02      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	d0f9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003be4:	682f      	ldr	r7, [r5, #0]
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	d032      	beq.n	8003c50 <__sflush_r+0x98>
 8003bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	075a      	lsls	r2, r3, #29
 8003bf0:	d505      	bpl.n	8003bfe <__sflush_r+0x46>
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bf8:	b10b      	cbz	r3, 8003bfe <__sflush_r+0x46>
 8003bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bfc:	1ac0      	subs	r0, r0, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4602      	mov	r2, r0
 8003c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c04:	6a21      	ldr	r1, [r4, #32]
 8003c06:	4628      	mov	r0, r5
 8003c08:	47b0      	blx	r6
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	89a3      	ldrh	r3, [r4, #12]
 8003c0e:	d106      	bne.n	8003c1e <__sflush_r+0x66>
 8003c10:	6829      	ldr	r1, [r5, #0]
 8003c12:	291d      	cmp	r1, #29
 8003c14:	d82c      	bhi.n	8003c70 <__sflush_r+0xb8>
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <__sflush_r+0x108>)
 8003c18:	40ca      	lsrs	r2, r1
 8003c1a:	07d6      	lsls	r6, r2, #31
 8003c1c:	d528      	bpl.n	8003c70 <__sflush_r+0xb8>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6062      	str	r2, [r4, #4]
 8003c22:	04d9      	lsls	r1, r3, #19
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	d504      	bpl.n	8003c34 <__sflush_r+0x7c>
 8003c2a:	1c42      	adds	r2, r0, #1
 8003c2c:	d101      	bne.n	8003c32 <__sflush_r+0x7a>
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	b903      	cbnz	r3, 8003c34 <__sflush_r+0x7c>
 8003c32:	6560      	str	r0, [r4, #84]	; 0x54
 8003c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c36:	602f      	str	r7, [r5, #0]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d0ca      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c40:	4299      	cmp	r1, r3
 8003c42:	d002      	beq.n	8003c4a <__sflush_r+0x92>
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f9f1 	bl	800402c <_free_r>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c4e:	e7c1      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c50:	6a21      	ldr	r1, [r4, #32]
 8003c52:	2301      	movs	r3, #1
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b0      	blx	r6
 8003c58:	1c41      	adds	r1, r0, #1
 8003c5a:	d1c7      	bne.n	8003bec <__sflush_r+0x34>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0c4      	beq.n	8003bec <__sflush_r+0x34>
 8003c62:	2b1d      	cmp	r3, #29
 8003c64:	d001      	beq.n	8003c6a <__sflush_r+0xb2>
 8003c66:	2b16      	cmp	r3, #22
 8003c68:	d101      	bne.n	8003c6e <__sflush_r+0xb6>
 8003c6a:	602f      	str	r7, [r5, #0]
 8003c6c:	e7b1      	b.n	8003bd2 <__sflush_r+0x1a>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e7ad      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c78:	690f      	ldr	r7, [r1, #16]
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d0a9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c7e:	0793      	lsls	r3, r2, #30
 8003c80:	680e      	ldr	r6, [r1, #0]
 8003c82:	bf08      	it	eq
 8003c84:	694b      	ldreq	r3, [r1, #20]
 8003c86:	600f      	str	r7, [r1, #0]
 8003c88:	bf18      	it	ne
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	eba6 0807 	sub.w	r8, r6, r7
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	dd9c      	ble.n	8003bd2 <__sflush_r+0x1a>
 8003c98:	6a21      	ldr	r1, [r4, #32]
 8003c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c9c:	4643      	mov	r3, r8
 8003c9e:	463a      	mov	r2, r7
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	dc06      	bgt.n	8003cb6 <__sflush_r+0xfe>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e78e      	b.n	8003bd4 <__sflush_r+0x1c>
 8003cb6:	4407      	add	r7, r0
 8003cb8:	eba8 0800 	sub.w	r8, r8, r0
 8003cbc:	e7e9      	b.n	8003c92 <__sflush_r+0xda>
 8003cbe:	bf00      	nop
 8003cc0:	20400001 	.word	0x20400001

08003cc4 <_fflush_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b913      	cbnz	r3, 8003cd4 <_fflush_r+0x10>
 8003cce:	2500      	movs	r5, #0
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	b118      	cbz	r0, 8003cde <_fflush_r+0x1a>
 8003cd6:	6983      	ldr	r3, [r0, #24]
 8003cd8:	b90b      	cbnz	r3, 8003cde <_fflush_r+0x1a>
 8003cda:	f000 f887 	bl	8003dec <__sinit>
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <_fflush_r+0x6c>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d11b      	bne.n	8003d1c <_fflush_r+0x58>
 8003ce4:	686c      	ldr	r4, [r5, #4]
 8003ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ef      	beq.n	8003cce <_fflush_r+0xa>
 8003cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cf0:	07d0      	lsls	r0, r2, #31
 8003cf2:	d404      	bmi.n	8003cfe <_fflush_r+0x3a>
 8003cf4:	0599      	lsls	r1, r3, #22
 8003cf6:	d402      	bmi.n	8003cfe <_fflush_r+0x3a>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfa:	f000 f927 	bl	8003f4c <__retarget_lock_acquire_recursive>
 8003cfe:	4628      	mov	r0, r5
 8003d00:	4621      	mov	r1, r4
 8003d02:	f7ff ff59 	bl	8003bb8 <__sflush_r>
 8003d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d08:	07da      	lsls	r2, r3, #31
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	d4e0      	bmi.n	8003cd0 <_fflush_r+0xc>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	d4dd      	bmi.n	8003cd0 <_fflush_r+0xc>
 8003d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d16:	f000 f91a 	bl	8003f4e <__retarget_lock_release_recursive>
 8003d1a:	e7d9      	b.n	8003cd0 <_fflush_r+0xc>
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <_fflush_r+0x70>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d101      	bne.n	8003d26 <_fflush_r+0x62>
 8003d22:	68ac      	ldr	r4, [r5, #8]
 8003d24:	e7df      	b.n	8003ce6 <_fflush_r+0x22>
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <_fflush_r+0x74>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	bf08      	it	eq
 8003d2c:	68ec      	ldreq	r4, [r5, #12]
 8003d2e:	e7da      	b.n	8003ce6 <_fflush_r+0x22>
 8003d30:	08004c24 	.word	0x08004c24
 8003d34:	08004c44 	.word	0x08004c44
 8003d38:	08004c04 	.word	0x08004c04

08003d3c <std>:
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	4604      	mov	r4, r0
 8003d42:	e9c0 3300 	strd	r3, r3, [r0]
 8003d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d4a:	6083      	str	r3, [r0, #8]
 8003d4c:	8181      	strh	r1, [r0, #12]
 8003d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d50:	81c2      	strh	r2, [r0, #14]
 8003d52:	6183      	str	r3, [r0, #24]
 8003d54:	4619      	mov	r1, r3
 8003d56:	2208      	movs	r2, #8
 8003d58:	305c      	adds	r0, #92	; 0x5c
 8003d5a:	f7ff fd55 	bl	8003808 <memset>
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <std+0x38>)
 8003d60:	6263      	str	r3, [r4, #36]	; 0x24
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <std+0x3c>)
 8003d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x40>)
 8003d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x44>)
 8003d6c:	6224      	str	r4, [r4, #32]
 8003d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	bf00      	nop
 8003d74:	080047e9 	.word	0x080047e9
 8003d78:	0800480b 	.word	0x0800480b
 8003d7c:	08004843 	.word	0x08004843
 8003d80:	08004867 	.word	0x08004867

08003d84 <_cleanup_r>:
 8003d84:	4901      	ldr	r1, [pc, #4]	; (8003d8c <_cleanup_r+0x8>)
 8003d86:	f000 b8c1 	b.w	8003f0c <_fwalk_reent>
 8003d8a:	bf00      	nop
 8003d8c:	08003cc5 	.word	0x08003cc5

08003d90 <__sfmoreglue>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	2268      	movs	r2, #104	; 0x68
 8003d94:	1e4d      	subs	r5, r1, #1
 8003d96:	4355      	muls	r5, r2
 8003d98:	460e      	mov	r6, r1
 8003d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d9e:	f000 f9b1 	bl	8004104 <_malloc_r>
 8003da2:	4604      	mov	r4, r0
 8003da4:	b140      	cbz	r0, 8003db8 <__sfmoreglue+0x28>
 8003da6:	2100      	movs	r1, #0
 8003da8:	e9c0 1600 	strd	r1, r6, [r0]
 8003dac:	300c      	adds	r0, #12
 8003dae:	60a0      	str	r0, [r4, #8]
 8003db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003db4:	f7ff fd28 	bl	8003808 <memset>
 8003db8:	4620      	mov	r0, r4
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <__sfp_lock_acquire>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	; (8003dc4 <__sfp_lock_acquire+0x8>)
 8003dbe:	f000 b8c5 	b.w	8003f4c <__retarget_lock_acquire_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	200002dd 	.word	0x200002dd

08003dc8 <__sfp_lock_release>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__sfp_lock_release+0x8>)
 8003dca:	f000 b8c0 	b.w	8003f4e <__retarget_lock_release_recursive>
 8003dce:	bf00      	nop
 8003dd0:	200002dd 	.word	0x200002dd

08003dd4 <__sinit_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sinit_lock_acquire+0x8>)
 8003dd6:	f000 b8b9 	b.w	8003f4c <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	200002de 	.word	0x200002de

08003de0 <__sinit_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__sinit_lock_release+0x8>)
 8003de2:	f000 b8b4 	b.w	8003f4e <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	200002de 	.word	0x200002de

08003dec <__sinit>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	f7ff fff0 	bl	8003dd4 <__sinit_lock_acquire>
 8003df4:	69a3      	ldr	r3, [r4, #24]
 8003df6:	b11b      	cbz	r3, 8003e00 <__sinit+0x14>
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f7ff bff0 	b.w	8003de0 <__sinit_lock_release>
 8003e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e04:	6523      	str	r3, [r4, #80]	; 0x50
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <__sinit+0x68>)
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <__sinit+0x6c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	bf04      	itt	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	61a3      	streq	r3, [r4, #24]
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 f820 	bl	8003e5c <__sfp>
 8003e1c:	6060      	str	r0, [r4, #4]
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f000 f81c 	bl	8003e5c <__sfp>
 8003e24:	60a0      	str	r0, [r4, #8]
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 f818 	bl	8003e5c <__sfp>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	60e0      	str	r0, [r4, #12]
 8003e30:	2104      	movs	r1, #4
 8003e32:	6860      	ldr	r0, [r4, #4]
 8003e34:	f7ff ff82 	bl	8003d3c <std>
 8003e38:	68a0      	ldr	r0, [r4, #8]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2109      	movs	r1, #9
 8003e3e:	f7ff ff7d 	bl	8003d3c <std>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	2112      	movs	r1, #18
 8003e48:	f7ff ff78 	bl	8003d3c <std>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	61a3      	str	r3, [r4, #24]
 8003e50:	e7d2      	b.n	8003df8 <__sinit+0xc>
 8003e52:	bf00      	nop
 8003e54:	08004b50 	.word	0x08004b50
 8003e58:	08003d85 	.word	0x08003d85

08003e5c <__sfp>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	4607      	mov	r7, r0
 8003e60:	f7ff ffac 	bl	8003dbc <__sfp_lock_acquire>
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <__sfp+0x84>)
 8003e66:	681e      	ldr	r6, [r3, #0]
 8003e68:	69b3      	ldr	r3, [r6, #24]
 8003e6a:	b913      	cbnz	r3, 8003e72 <__sfp+0x16>
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbd 	bl	8003dec <__sinit>
 8003e72:	3648      	adds	r6, #72	; 0x48
 8003e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	d503      	bpl.n	8003e84 <__sfp+0x28>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	b30b      	cbz	r3, 8003ec4 <__sfp+0x68>
 8003e80:	6836      	ldr	r6, [r6, #0]
 8003e82:	e7f7      	b.n	8003e74 <__sfp+0x18>
 8003e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e88:	b9d5      	cbnz	r5, 8003ec0 <__sfp+0x64>
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <__sfp+0x88>)
 8003e8c:	60e3      	str	r3, [r4, #12]
 8003e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e92:	6665      	str	r5, [r4, #100]	; 0x64
 8003e94:	f000 f859 	bl	8003f4a <__retarget_lock_init_recursive>
 8003e98:	f7ff ff96 	bl	8003dc8 <__sfp_lock_release>
 8003e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ea4:	6025      	str	r5, [r4, #0]
 8003ea6:	61a5      	str	r5, [r4, #24]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003eb0:	f7ff fcaa 	bl	8003808 <memset>
 8003eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec0:	3468      	adds	r4, #104	; 0x68
 8003ec2:	e7d9      	b.n	8003e78 <__sfp+0x1c>
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f7ff ff62 	bl	8003d90 <__sfmoreglue>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	6030      	str	r0, [r6, #0]
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d1d5      	bne.n	8003e80 <__sfp+0x24>
 8003ed4:	f7ff ff78 	bl	8003dc8 <__sfp_lock_release>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	e7ee      	b.n	8003ebc <__sfp+0x60>
 8003ede:	bf00      	nop
 8003ee0:	08004b50 	.word	0x08004b50
 8003ee4:	ffff0001 	.word	0xffff0001

08003ee8 <fiprintf>:
 8003ee8:	b40e      	push	{r1, r2, r3}
 8003eea:	b503      	push	{r0, r1, lr}
 8003eec:	4601      	mov	r1, r0
 8003eee:	ab03      	add	r3, sp, #12
 8003ef0:	4805      	ldr	r0, [pc, #20]	; (8003f08 <fiprintf+0x20>)
 8003ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef6:	6800      	ldr	r0, [r0, #0]
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	f000 f9a1 	bl	8004240 <_vfiprintf_r>
 8003efe:	b002      	add	sp, #8
 8003f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f04:	b003      	add	sp, #12
 8003f06:	4770      	bx	lr
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <_fwalk_reent>:
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	4606      	mov	r6, r0
 8003f12:	4688      	mov	r8, r1
 8003f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f18:	2700      	movs	r7, #0
 8003f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f22:	d505      	bpl.n	8003f30 <_fwalk_reent+0x24>
 8003f24:	6824      	ldr	r4, [r4, #0]
 8003f26:	2c00      	cmp	r4, #0
 8003f28:	d1f7      	bne.n	8003f1a <_fwalk_reent+0xe>
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f30:	89ab      	ldrh	r3, [r5, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d907      	bls.n	8003f46 <_fwalk_reent+0x3a>
 8003f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	d003      	beq.n	8003f46 <_fwalk_reent+0x3a>
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4630      	mov	r0, r6
 8003f42:	47c0      	blx	r8
 8003f44:	4307      	orrs	r7, r0
 8003f46:	3568      	adds	r5, #104	; 0x68
 8003f48:	e7e9      	b.n	8003f1e <_fwalk_reent+0x12>

08003f4a <__retarget_lock_init_recursive>:
 8003f4a:	4770      	bx	lr

08003f4c <__retarget_lock_acquire_recursive>:
 8003f4c:	4770      	bx	lr

08003f4e <__retarget_lock_release_recursive>:
 8003f4e:	4770      	bx	lr

08003f50 <__swhatbuf_r>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	460e      	mov	r6, r1
 8003f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	b096      	sub	sp, #88	; 0x58
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	da08      	bge.n	8003f74 <__swhatbuf_r+0x24>
 8003f62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	061a      	lsls	r2, r3, #24
 8003f6c:	d410      	bmi.n	8003f90 <__swhatbuf_r+0x40>
 8003f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f72:	e00e      	b.n	8003f92 <__swhatbuf_r+0x42>
 8003f74:	466a      	mov	r2, sp
 8003f76:	f000 fca5 	bl	80048c4 <_fstat_r>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	dbf1      	blt.n	8003f62 <__swhatbuf_r+0x12>
 8003f7e:	9a01      	ldr	r2, [sp, #4]
 8003f80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f88:	425a      	negs	r2, r3
 8003f8a:	415a      	adcs	r2, r3
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	e7ee      	b.n	8003f6e <__swhatbuf_r+0x1e>
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	2000      	movs	r0, #0
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	b016      	add	sp, #88	; 0x58
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f9c <__smakebuf_r>:
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fa0:	079d      	lsls	r5, r3, #30
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	d507      	bpl.n	8003fb8 <__smakebuf_r+0x1c>
 8003fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	ab01      	add	r3, sp, #4
 8003fba:	466a      	mov	r2, sp
 8003fbc:	f7ff ffc8 	bl	8003f50 <__swhatbuf_r>
 8003fc0:	9900      	ldr	r1, [sp, #0]
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f89d 	bl	8004104 <_malloc_r>
 8003fca:	b948      	cbnz	r0, 8003fe0 <__smakebuf_r+0x44>
 8003fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd0:	059a      	lsls	r2, r3, #22
 8003fd2:	d4ef      	bmi.n	8003fb4 <__smakebuf_r+0x18>
 8003fd4:	f023 0303 	bic.w	r3, r3, #3
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e7e3      	b.n	8003fa8 <__smakebuf_r+0xc>
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <__smakebuf_r+0x7c>)
 8003fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	9b00      	ldr	r3, [sp, #0]
 8003ff0:	6163      	str	r3, [r4, #20]
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	6120      	str	r0, [r4, #16]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x74>
 8003ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 fc73 	bl	80048e8 <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x74>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a0      	ldrh	r0, [r4, #12]
 8004012:	4305      	orrs	r5, r0
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cd      	b.n	8003fb4 <__smakebuf_r+0x18>
 8004018:	08003d85 	.word	0x08003d85

0800401c <malloc>:
 800401c:	4b02      	ldr	r3, [pc, #8]	; (8004028 <malloc+0xc>)
 800401e:	4601      	mov	r1, r0
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f000 b86f 	b.w	8004104 <_malloc_r>
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <_free_r>:
 800402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800402e:	2900      	cmp	r1, #0
 8004030:	d044      	beq.n	80040bc <_free_r+0x90>
 8004032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004036:	9001      	str	r0, [sp, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f1a1 0404 	sub.w	r4, r1, #4
 800403e:	bfb8      	it	lt
 8004040:	18e4      	addlt	r4, r4, r3
 8004042:	f000 fc73 	bl	800492c <__malloc_lock>
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <_free_r+0x94>)
 8004048:	9801      	ldr	r0, [sp, #4]
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	b933      	cbnz	r3, 800405c <_free_r+0x30>
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	6014      	str	r4, [r2, #0]
 8004052:	b003      	add	sp, #12
 8004054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004058:	f000 bc6e 	b.w	8004938 <__malloc_unlock>
 800405c:	42a3      	cmp	r3, r4
 800405e:	d908      	bls.n	8004072 <_free_r+0x46>
 8004060:	6825      	ldr	r5, [r4, #0]
 8004062:	1961      	adds	r1, r4, r5
 8004064:	428b      	cmp	r3, r1
 8004066:	bf01      	itttt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	1949      	addeq	r1, r1, r5
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	e7ed      	b.n	800404e <_free_r+0x22>
 8004072:	461a      	mov	r2, r3
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	b10b      	cbz	r3, 800407c <_free_r+0x50>
 8004078:	42a3      	cmp	r3, r4
 800407a:	d9fa      	bls.n	8004072 <_free_r+0x46>
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	1855      	adds	r5, r2, r1
 8004080:	42a5      	cmp	r5, r4
 8004082:	d10b      	bne.n	800409c <_free_r+0x70>
 8004084:	6824      	ldr	r4, [r4, #0]
 8004086:	4421      	add	r1, r4
 8004088:	1854      	adds	r4, r2, r1
 800408a:	42a3      	cmp	r3, r4
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	d1e0      	bne.n	8004052 <_free_r+0x26>
 8004090:	681c      	ldr	r4, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6053      	str	r3, [r2, #4]
 8004096:	4421      	add	r1, r4
 8004098:	6011      	str	r1, [r2, #0]
 800409a:	e7da      	b.n	8004052 <_free_r+0x26>
 800409c:	d902      	bls.n	80040a4 <_free_r+0x78>
 800409e:	230c      	movs	r3, #12
 80040a0:	6003      	str	r3, [r0, #0]
 80040a2:	e7d6      	b.n	8004052 <_free_r+0x26>
 80040a4:	6825      	ldr	r5, [r4, #0]
 80040a6:	1961      	adds	r1, r4, r5
 80040a8:	428b      	cmp	r3, r1
 80040aa:	bf04      	itt	eq
 80040ac:	6819      	ldreq	r1, [r3, #0]
 80040ae:	685b      	ldreq	r3, [r3, #4]
 80040b0:	6063      	str	r3, [r4, #4]
 80040b2:	bf04      	itt	eq
 80040b4:	1949      	addeq	r1, r1, r5
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	6054      	str	r4, [r2, #4]
 80040ba:	e7ca      	b.n	8004052 <_free_r+0x26>
 80040bc:	b003      	add	sp, #12
 80040be:	bd30      	pop	{r4, r5, pc}
 80040c0:	200002e0 	.word	0x200002e0

080040c4 <sbrk_aligned>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0e      	ldr	r6, [pc, #56]	; (8004100 <sbrk_aligned+0x3c>)
 80040c8:	460c      	mov	r4, r1
 80040ca:	6831      	ldr	r1, [r6, #0]
 80040cc:	4605      	mov	r5, r0
 80040ce:	b911      	cbnz	r1, 80040d6 <sbrk_aligned+0x12>
 80040d0:	f000 fb7a 	bl	80047c8 <_sbrk_r>
 80040d4:	6030      	str	r0, [r6, #0]
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 fb75 	bl	80047c8 <_sbrk_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d00a      	beq.n	80040f8 <sbrk_aligned+0x34>
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d007      	beq.n	80040fc <sbrk_aligned+0x38>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 fb6a 	bl	80047c8 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d101      	bne.n	80040fc <sbrk_aligned+0x38>
 80040f8:	f04f 34ff 	mov.w	r4, #4294967295
 80040fc:	4620      	mov	r0, r4
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	200002e4 	.word	0x200002e4

08004104 <_malloc_r>:
 8004104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004108:	1ccd      	adds	r5, r1, #3
 800410a:	f025 0503 	bic.w	r5, r5, #3
 800410e:	3508      	adds	r5, #8
 8004110:	2d0c      	cmp	r5, #12
 8004112:	bf38      	it	cc
 8004114:	250c      	movcc	r5, #12
 8004116:	2d00      	cmp	r5, #0
 8004118:	4607      	mov	r7, r0
 800411a:	db01      	blt.n	8004120 <_malloc_r+0x1c>
 800411c:	42a9      	cmp	r1, r5
 800411e:	d905      	bls.n	800412c <_malloc_r+0x28>
 8004120:	230c      	movs	r3, #12
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	2600      	movs	r6, #0
 8004126:	4630      	mov	r0, r6
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800412c:	4e2e      	ldr	r6, [pc, #184]	; (80041e8 <_malloc_r+0xe4>)
 800412e:	f000 fbfd 	bl	800492c <__malloc_lock>
 8004132:	6833      	ldr	r3, [r6, #0]
 8004134:	461c      	mov	r4, r3
 8004136:	bb34      	cbnz	r4, 8004186 <_malloc_r+0x82>
 8004138:	4629      	mov	r1, r5
 800413a:	4638      	mov	r0, r7
 800413c:	f7ff ffc2 	bl	80040c4 <sbrk_aligned>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	4604      	mov	r4, r0
 8004144:	d14d      	bne.n	80041e2 <_malloc_r+0xde>
 8004146:	6834      	ldr	r4, [r6, #0]
 8004148:	4626      	mov	r6, r4
 800414a:	2e00      	cmp	r6, #0
 800414c:	d140      	bne.n	80041d0 <_malloc_r+0xcc>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	4631      	mov	r1, r6
 8004152:	4638      	mov	r0, r7
 8004154:	eb04 0803 	add.w	r8, r4, r3
 8004158:	f000 fb36 	bl	80047c8 <_sbrk_r>
 800415c:	4580      	cmp	r8, r0
 800415e:	d13a      	bne.n	80041d6 <_malloc_r+0xd2>
 8004160:	6821      	ldr	r1, [r4, #0]
 8004162:	3503      	adds	r5, #3
 8004164:	1a6d      	subs	r5, r5, r1
 8004166:	f025 0503 	bic.w	r5, r5, #3
 800416a:	3508      	adds	r5, #8
 800416c:	2d0c      	cmp	r5, #12
 800416e:	bf38      	it	cc
 8004170:	250c      	movcc	r5, #12
 8004172:	4629      	mov	r1, r5
 8004174:	4638      	mov	r0, r7
 8004176:	f7ff ffa5 	bl	80040c4 <sbrk_aligned>
 800417a:	3001      	adds	r0, #1
 800417c:	d02b      	beq.n	80041d6 <_malloc_r+0xd2>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	442b      	add	r3, r5
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	e00e      	b.n	80041a4 <_malloc_r+0xa0>
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	1b52      	subs	r2, r2, r5
 800418a:	d41e      	bmi.n	80041ca <_malloc_r+0xc6>
 800418c:	2a0b      	cmp	r2, #11
 800418e:	d916      	bls.n	80041be <_malloc_r+0xba>
 8004190:	1961      	adds	r1, r4, r5
 8004192:	42a3      	cmp	r3, r4
 8004194:	6025      	str	r5, [r4, #0]
 8004196:	bf18      	it	ne
 8004198:	6059      	strne	r1, [r3, #4]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	bf08      	it	eq
 800419e:	6031      	streq	r1, [r6, #0]
 80041a0:	5162      	str	r2, [r4, r5]
 80041a2:	604b      	str	r3, [r1, #4]
 80041a4:	4638      	mov	r0, r7
 80041a6:	f104 060b 	add.w	r6, r4, #11
 80041aa:	f000 fbc5 	bl	8004938 <__malloc_unlock>
 80041ae:	f026 0607 	bic.w	r6, r6, #7
 80041b2:	1d23      	adds	r3, r4, #4
 80041b4:	1af2      	subs	r2, r6, r3
 80041b6:	d0b6      	beq.n	8004126 <_malloc_r+0x22>
 80041b8:	1b9b      	subs	r3, r3, r6
 80041ba:	50a3      	str	r3, [r4, r2]
 80041bc:	e7b3      	b.n	8004126 <_malloc_r+0x22>
 80041be:	6862      	ldr	r2, [r4, #4]
 80041c0:	42a3      	cmp	r3, r4
 80041c2:	bf0c      	ite	eq
 80041c4:	6032      	streq	r2, [r6, #0]
 80041c6:	605a      	strne	r2, [r3, #4]
 80041c8:	e7ec      	b.n	80041a4 <_malloc_r+0xa0>
 80041ca:	4623      	mov	r3, r4
 80041cc:	6864      	ldr	r4, [r4, #4]
 80041ce:	e7b2      	b.n	8004136 <_malloc_r+0x32>
 80041d0:	4634      	mov	r4, r6
 80041d2:	6876      	ldr	r6, [r6, #4]
 80041d4:	e7b9      	b.n	800414a <_malloc_r+0x46>
 80041d6:	230c      	movs	r3, #12
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4638      	mov	r0, r7
 80041dc:	f000 fbac 	bl	8004938 <__malloc_unlock>
 80041e0:	e7a1      	b.n	8004126 <_malloc_r+0x22>
 80041e2:	6025      	str	r5, [r4, #0]
 80041e4:	e7de      	b.n	80041a4 <_malloc_r+0xa0>
 80041e6:	bf00      	nop
 80041e8:	200002e0 	.word	0x200002e0

080041ec <__sfputc_r>:
 80041ec:	6893      	ldr	r3, [r2, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	b410      	push	{r4}
 80041f4:	6093      	str	r3, [r2, #8]
 80041f6:	da08      	bge.n	800420a <__sfputc_r+0x1e>
 80041f8:	6994      	ldr	r4, [r2, #24]
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	db01      	blt.n	8004202 <__sfputc_r+0x16>
 80041fe:	290a      	cmp	r1, #10
 8004200:	d103      	bne.n	800420a <__sfputc_r+0x1e>
 8004202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004206:	f7ff bbf9 	b.w	80039fc <__swbuf_r>
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	1c58      	adds	r0, r3, #1
 800420e:	6010      	str	r0, [r2, #0]
 8004210:	7019      	strb	r1, [r3, #0]
 8004212:	4608      	mov	r0, r1
 8004214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004218:	4770      	bx	lr

0800421a <__sfputs_r>:
 800421a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421c:	4606      	mov	r6, r0
 800421e:	460f      	mov	r7, r1
 8004220:	4614      	mov	r4, r2
 8004222:	18d5      	adds	r5, r2, r3
 8004224:	42ac      	cmp	r4, r5
 8004226:	d101      	bne.n	800422c <__sfputs_r+0x12>
 8004228:	2000      	movs	r0, #0
 800422a:	e007      	b.n	800423c <__sfputs_r+0x22>
 800422c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004230:	463a      	mov	r2, r7
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff ffda 	bl	80041ec <__sfputc_r>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d1f3      	bne.n	8004224 <__sfputs_r+0xa>
 800423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004240 <_vfiprintf_r>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	460d      	mov	r5, r1
 8004246:	b09d      	sub	sp, #116	; 0x74
 8004248:	4614      	mov	r4, r2
 800424a:	4698      	mov	r8, r3
 800424c:	4606      	mov	r6, r0
 800424e:	b118      	cbz	r0, 8004258 <_vfiprintf_r+0x18>
 8004250:	6983      	ldr	r3, [r0, #24]
 8004252:	b90b      	cbnz	r3, 8004258 <_vfiprintf_r+0x18>
 8004254:	f7ff fdca 	bl	8003dec <__sinit>
 8004258:	4b89      	ldr	r3, [pc, #548]	; (8004480 <_vfiprintf_r+0x240>)
 800425a:	429d      	cmp	r5, r3
 800425c:	d11b      	bne.n	8004296 <_vfiprintf_r+0x56>
 800425e:	6875      	ldr	r5, [r6, #4]
 8004260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004262:	07d9      	lsls	r1, r3, #31
 8004264:	d405      	bmi.n	8004272 <_vfiprintf_r+0x32>
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	059a      	lsls	r2, r3, #22
 800426a:	d402      	bmi.n	8004272 <_vfiprintf_r+0x32>
 800426c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800426e:	f7ff fe6d 	bl	8003f4c <__retarget_lock_acquire_recursive>
 8004272:	89ab      	ldrh	r3, [r5, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	d501      	bpl.n	800427c <_vfiprintf_r+0x3c>
 8004278:	692b      	ldr	r3, [r5, #16]
 800427a:	b9eb      	cbnz	r3, 80042b8 <_vfiprintf_r+0x78>
 800427c:	4629      	mov	r1, r5
 800427e:	4630      	mov	r0, r6
 8004280:	f7ff fc0e 	bl	8003aa0 <__swsetup_r>
 8004284:	b1c0      	cbz	r0, 80042b8 <_vfiprintf_r+0x78>
 8004286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004288:	07dc      	lsls	r4, r3, #31
 800428a:	d50e      	bpl.n	80042aa <_vfiprintf_r+0x6a>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b01d      	add	sp, #116	; 0x74
 8004292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004296:	4b7b      	ldr	r3, [pc, #492]	; (8004484 <_vfiprintf_r+0x244>)
 8004298:	429d      	cmp	r5, r3
 800429a:	d101      	bne.n	80042a0 <_vfiprintf_r+0x60>
 800429c:	68b5      	ldr	r5, [r6, #8]
 800429e:	e7df      	b.n	8004260 <_vfiprintf_r+0x20>
 80042a0:	4b79      	ldr	r3, [pc, #484]	; (8004488 <_vfiprintf_r+0x248>)
 80042a2:	429d      	cmp	r5, r3
 80042a4:	bf08      	it	eq
 80042a6:	68f5      	ldreq	r5, [r6, #12]
 80042a8:	e7da      	b.n	8004260 <_vfiprintf_r+0x20>
 80042aa:	89ab      	ldrh	r3, [r5, #12]
 80042ac:	0598      	lsls	r0, r3, #22
 80042ae:	d4ed      	bmi.n	800428c <_vfiprintf_r+0x4c>
 80042b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042b2:	f7ff fe4c 	bl	8003f4e <__retarget_lock_release_recursive>
 80042b6:	e7e9      	b.n	800428c <_vfiprintf_r+0x4c>
 80042b8:	2300      	movs	r3, #0
 80042ba:	9309      	str	r3, [sp, #36]	; 0x24
 80042bc:	2320      	movs	r3, #32
 80042be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042c6:	2330      	movs	r3, #48	; 0x30
 80042c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800448c <_vfiprintf_r+0x24c>
 80042cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042d0:	f04f 0901 	mov.w	r9, #1
 80042d4:	4623      	mov	r3, r4
 80042d6:	469a      	mov	sl, r3
 80042d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042dc:	b10a      	cbz	r2, 80042e2 <_vfiprintf_r+0xa2>
 80042de:	2a25      	cmp	r2, #37	; 0x25
 80042e0:	d1f9      	bne.n	80042d6 <_vfiprintf_r+0x96>
 80042e2:	ebba 0b04 	subs.w	fp, sl, r4
 80042e6:	d00b      	beq.n	8004300 <_vfiprintf_r+0xc0>
 80042e8:	465b      	mov	r3, fp
 80042ea:	4622      	mov	r2, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	4630      	mov	r0, r6
 80042f0:	f7ff ff93 	bl	800421a <__sfputs_r>
 80042f4:	3001      	adds	r0, #1
 80042f6:	f000 80aa 	beq.w	800444e <_vfiprintf_r+0x20e>
 80042fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042fc:	445a      	add	r2, fp
 80042fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004300:	f89a 3000 	ldrb.w	r3, [sl]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80a2 	beq.w	800444e <_vfiprintf_r+0x20e>
 800430a:	2300      	movs	r3, #0
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004314:	f10a 0a01 	add.w	sl, sl, #1
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	9307      	str	r3, [sp, #28]
 800431c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004320:	931a      	str	r3, [sp, #104]	; 0x68
 8004322:	4654      	mov	r4, sl
 8004324:	2205      	movs	r2, #5
 8004326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432a:	4858      	ldr	r0, [pc, #352]	; (800448c <_vfiprintf_r+0x24c>)
 800432c:	f7fb ff80 	bl	8000230 <memchr>
 8004330:	9a04      	ldr	r2, [sp, #16]
 8004332:	b9d8      	cbnz	r0, 800436c <_vfiprintf_r+0x12c>
 8004334:	06d1      	lsls	r1, r2, #27
 8004336:	bf44      	itt	mi
 8004338:	2320      	movmi	r3, #32
 800433a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800433e:	0713      	lsls	r3, r2, #28
 8004340:	bf44      	itt	mi
 8004342:	232b      	movmi	r3, #43	; 0x2b
 8004344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004348:	f89a 3000 	ldrb.w	r3, [sl]
 800434c:	2b2a      	cmp	r3, #42	; 0x2a
 800434e:	d015      	beq.n	800437c <_vfiprintf_r+0x13c>
 8004350:	9a07      	ldr	r2, [sp, #28]
 8004352:	4654      	mov	r4, sl
 8004354:	2000      	movs	r0, #0
 8004356:	f04f 0c0a 	mov.w	ip, #10
 800435a:	4621      	mov	r1, r4
 800435c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004360:	3b30      	subs	r3, #48	; 0x30
 8004362:	2b09      	cmp	r3, #9
 8004364:	d94e      	bls.n	8004404 <_vfiprintf_r+0x1c4>
 8004366:	b1b0      	cbz	r0, 8004396 <_vfiprintf_r+0x156>
 8004368:	9207      	str	r2, [sp, #28]
 800436a:	e014      	b.n	8004396 <_vfiprintf_r+0x156>
 800436c:	eba0 0308 	sub.w	r3, r0, r8
 8004370:	fa09 f303 	lsl.w	r3, r9, r3
 8004374:	4313      	orrs	r3, r2
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	46a2      	mov	sl, r4
 800437a:	e7d2      	b.n	8004322 <_vfiprintf_r+0xe2>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	1d19      	adds	r1, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	9103      	str	r1, [sp, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bfbb      	ittet	lt
 8004388:	425b      	neglt	r3, r3
 800438a:	f042 0202 	orrlt.w	r2, r2, #2
 800438e:	9307      	strge	r3, [sp, #28]
 8004390:	9307      	strlt	r3, [sp, #28]
 8004392:	bfb8      	it	lt
 8004394:	9204      	strlt	r2, [sp, #16]
 8004396:	7823      	ldrb	r3, [r4, #0]
 8004398:	2b2e      	cmp	r3, #46	; 0x2e
 800439a:	d10c      	bne.n	80043b6 <_vfiprintf_r+0x176>
 800439c:	7863      	ldrb	r3, [r4, #1]
 800439e:	2b2a      	cmp	r3, #42	; 0x2a
 80043a0:	d135      	bne.n	800440e <_vfiprintf_r+0x1ce>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	9203      	str	r2, [sp, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfb8      	it	lt
 80043ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80043b2:	3402      	adds	r4, #2
 80043b4:	9305      	str	r3, [sp, #20]
 80043b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800449c <_vfiprintf_r+0x25c>
 80043ba:	7821      	ldrb	r1, [r4, #0]
 80043bc:	2203      	movs	r2, #3
 80043be:	4650      	mov	r0, sl
 80043c0:	f7fb ff36 	bl	8000230 <memchr>
 80043c4:	b140      	cbz	r0, 80043d8 <_vfiprintf_r+0x198>
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	eba0 000a 	sub.w	r0, r0, sl
 80043cc:	fa03 f000 	lsl.w	r0, r3, r0
 80043d0:	9b04      	ldr	r3, [sp, #16]
 80043d2:	4303      	orrs	r3, r0
 80043d4:	3401      	adds	r4, #1
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043dc:	482c      	ldr	r0, [pc, #176]	; (8004490 <_vfiprintf_r+0x250>)
 80043de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043e2:	2206      	movs	r2, #6
 80043e4:	f7fb ff24 	bl	8000230 <memchr>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d03f      	beq.n	800446c <_vfiprintf_r+0x22c>
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <_vfiprintf_r+0x254>)
 80043ee:	bb1b      	cbnz	r3, 8004438 <_vfiprintf_r+0x1f8>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	3307      	adds	r3, #7
 80043f4:	f023 0307 	bic.w	r3, r3, #7
 80043f8:	3308      	adds	r3, #8
 80043fa:	9303      	str	r3, [sp, #12]
 80043fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fe:	443b      	add	r3, r7
 8004400:	9309      	str	r3, [sp, #36]	; 0x24
 8004402:	e767      	b.n	80042d4 <_vfiprintf_r+0x94>
 8004404:	fb0c 3202 	mla	r2, ip, r2, r3
 8004408:	460c      	mov	r4, r1
 800440a:	2001      	movs	r0, #1
 800440c:	e7a5      	b.n	800435a <_vfiprintf_r+0x11a>
 800440e:	2300      	movs	r3, #0
 8004410:	3401      	adds	r4, #1
 8004412:	9305      	str	r3, [sp, #20]
 8004414:	4619      	mov	r1, r3
 8004416:	f04f 0c0a 	mov.w	ip, #10
 800441a:	4620      	mov	r0, r4
 800441c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004420:	3a30      	subs	r2, #48	; 0x30
 8004422:	2a09      	cmp	r2, #9
 8004424:	d903      	bls.n	800442e <_vfiprintf_r+0x1ee>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0c5      	beq.n	80043b6 <_vfiprintf_r+0x176>
 800442a:	9105      	str	r1, [sp, #20]
 800442c:	e7c3      	b.n	80043b6 <_vfiprintf_r+0x176>
 800442e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004432:	4604      	mov	r4, r0
 8004434:	2301      	movs	r3, #1
 8004436:	e7f0      	b.n	800441a <_vfiprintf_r+0x1da>
 8004438:	ab03      	add	r3, sp, #12
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	462a      	mov	r2, r5
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <_vfiprintf_r+0x258>)
 8004440:	a904      	add	r1, sp, #16
 8004442:	4630      	mov	r0, r6
 8004444:	f3af 8000 	nop.w
 8004448:	4607      	mov	r7, r0
 800444a:	1c78      	adds	r0, r7, #1
 800444c:	d1d6      	bne.n	80043fc <_vfiprintf_r+0x1bc>
 800444e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004450:	07d9      	lsls	r1, r3, #31
 8004452:	d405      	bmi.n	8004460 <_vfiprintf_r+0x220>
 8004454:	89ab      	ldrh	r3, [r5, #12]
 8004456:	059a      	lsls	r2, r3, #22
 8004458:	d402      	bmi.n	8004460 <_vfiprintf_r+0x220>
 800445a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800445c:	f7ff fd77 	bl	8003f4e <__retarget_lock_release_recursive>
 8004460:	89ab      	ldrh	r3, [r5, #12]
 8004462:	065b      	lsls	r3, r3, #25
 8004464:	f53f af12 	bmi.w	800428c <_vfiprintf_r+0x4c>
 8004468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800446a:	e711      	b.n	8004290 <_vfiprintf_r+0x50>
 800446c:	ab03      	add	r3, sp, #12
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	462a      	mov	r2, r5
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <_vfiprintf_r+0x258>)
 8004474:	a904      	add	r1, sp, #16
 8004476:	4630      	mov	r0, r6
 8004478:	f000 f880 	bl	800457c <_printf_i>
 800447c:	e7e4      	b.n	8004448 <_vfiprintf_r+0x208>
 800447e:	bf00      	nop
 8004480:	08004c24 	.word	0x08004c24
 8004484:	08004c44 	.word	0x08004c44
 8004488:	08004c04 	.word	0x08004c04
 800448c:	08004c64 	.word	0x08004c64
 8004490:	08004c6e 	.word	0x08004c6e
 8004494:	00000000 	.word	0x00000000
 8004498:	0800421b 	.word	0x0800421b
 800449c:	08004c6a 	.word	0x08004c6a

080044a0 <_printf_common>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	4616      	mov	r6, r2
 80044a6:	4699      	mov	r9, r3
 80044a8:	688a      	ldr	r2, [r1, #8]
 80044aa:	690b      	ldr	r3, [r1, #16]
 80044ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfb8      	it	lt
 80044b4:	4613      	movlt	r3, r2
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044bc:	4607      	mov	r7, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	b10a      	cbz	r2, 80044c6 <_printf_common+0x26>
 80044c2:	3301      	adds	r3, #1
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	0699      	lsls	r1, r3, #26
 80044ca:	bf42      	ittt	mi
 80044cc:	6833      	ldrmi	r3, [r6, #0]
 80044ce:	3302      	addmi	r3, #2
 80044d0:	6033      	strmi	r3, [r6, #0]
 80044d2:	6825      	ldr	r5, [r4, #0]
 80044d4:	f015 0506 	ands.w	r5, r5, #6
 80044d8:	d106      	bne.n	80044e8 <_printf_common+0x48>
 80044da:	f104 0a19 	add.w	sl, r4, #25
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	6832      	ldr	r2, [r6, #0]
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	dc26      	bgt.n	8004536 <_printf_common+0x96>
 80044e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ec:	1e13      	subs	r3, r2, #0
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	bf18      	it	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	0692      	lsls	r2, r2, #26
 80044f6:	d42b      	bmi.n	8004550 <_printf_common+0xb0>
 80044f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044fc:	4649      	mov	r1, r9
 80044fe:	4638      	mov	r0, r7
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d01e      	beq.n	8004544 <_printf_common+0xa4>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	68e5      	ldr	r5, [r4, #12]
 800450a:	6832      	ldr	r2, [r6, #0]
 800450c:	f003 0306 	and.w	r3, r3, #6
 8004510:	2b04      	cmp	r3, #4
 8004512:	bf08      	it	eq
 8004514:	1aad      	subeq	r5, r5, r2
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	6922      	ldr	r2, [r4, #16]
 800451a:	bf0c      	ite	eq
 800451c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004520:	2500      	movne	r5, #0
 8004522:	4293      	cmp	r3, r2
 8004524:	bfc4      	itt	gt
 8004526:	1a9b      	subgt	r3, r3, r2
 8004528:	18ed      	addgt	r5, r5, r3
 800452a:	2600      	movs	r6, #0
 800452c:	341a      	adds	r4, #26
 800452e:	42b5      	cmp	r5, r6
 8004530:	d11a      	bne.n	8004568 <_printf_common+0xc8>
 8004532:	2000      	movs	r0, #0
 8004534:	e008      	b.n	8004548 <_printf_common+0xa8>
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4649      	mov	r1, r9
 800453c:	4638      	mov	r0, r7
 800453e:	47c0      	blx	r8
 8004540:	3001      	adds	r0, #1
 8004542:	d103      	bne.n	800454c <_printf_common+0xac>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	3501      	adds	r5, #1
 800454e:	e7c6      	b.n	80044de <_printf_common+0x3e>
 8004550:	18e1      	adds	r1, r4, r3
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	2030      	movs	r0, #48	; 0x30
 8004556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800455a:	4422      	add	r2, r4
 800455c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004564:	3302      	adds	r3, #2
 8004566:	e7c7      	b.n	80044f8 <_printf_common+0x58>
 8004568:	2301      	movs	r3, #1
 800456a:	4622      	mov	r2, r4
 800456c:	4649      	mov	r1, r9
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	3001      	adds	r0, #1
 8004574:	d0e6      	beq.n	8004544 <_printf_common+0xa4>
 8004576:	3601      	adds	r6, #1
 8004578:	e7d9      	b.n	800452e <_printf_common+0x8e>
	...

0800457c <_printf_i>:
 800457c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	7e0f      	ldrb	r7, [r1, #24]
 8004582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004584:	2f78      	cmp	r7, #120	; 0x78
 8004586:	4691      	mov	r9, r2
 8004588:	4680      	mov	r8, r0
 800458a:	460c      	mov	r4, r1
 800458c:	469a      	mov	sl, r3
 800458e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004592:	d807      	bhi.n	80045a4 <_printf_i+0x28>
 8004594:	2f62      	cmp	r7, #98	; 0x62
 8004596:	d80a      	bhi.n	80045ae <_printf_i+0x32>
 8004598:	2f00      	cmp	r7, #0
 800459a:	f000 80d8 	beq.w	800474e <_printf_i+0x1d2>
 800459e:	2f58      	cmp	r7, #88	; 0x58
 80045a0:	f000 80a3 	beq.w	80046ea <_printf_i+0x16e>
 80045a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045ac:	e03a      	b.n	8004624 <_printf_i+0xa8>
 80045ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045b2:	2b15      	cmp	r3, #21
 80045b4:	d8f6      	bhi.n	80045a4 <_printf_i+0x28>
 80045b6:	a101      	add	r1, pc, #4	; (adr r1, 80045bc <_printf_i+0x40>)
 80045b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004629 	.word	0x08004629
 80045c4:	080045a5 	.word	0x080045a5
 80045c8:	080045a5 	.word	0x080045a5
 80045cc:	080045a5 	.word	0x080045a5
 80045d0:	080045a5 	.word	0x080045a5
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080045a5 	.word	0x080045a5
 80045dc:	080045a5 	.word	0x080045a5
 80045e0:	080045a5 	.word	0x080045a5
 80045e4:	080045a5 	.word	0x080045a5
 80045e8:	08004735 	.word	0x08004735
 80045ec:	08004659 	.word	0x08004659
 80045f0:	08004717 	.word	0x08004717
 80045f4:	080045a5 	.word	0x080045a5
 80045f8:	080045a5 	.word	0x080045a5
 80045fc:	08004757 	.word	0x08004757
 8004600:	080045a5 	.word	0x080045a5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045a5 	.word	0x080045a5
 800460c:	080045a5 	.word	0x080045a5
 8004610:	0800471f 	.word	0x0800471f
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	602a      	str	r2, [r5, #0]
 800461c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004624:	2301      	movs	r3, #1
 8004626:	e0a3      	b.n	8004770 <_printf_i+0x1f4>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	6829      	ldr	r1, [r5, #0]
 800462c:	0606      	lsls	r6, r0, #24
 800462e:	f101 0304 	add.w	r3, r1, #4
 8004632:	d50a      	bpl.n	800464a <_printf_i+0xce>
 8004634:	680e      	ldr	r6, [r1, #0]
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	2e00      	cmp	r6, #0
 800463a:	da03      	bge.n	8004644 <_printf_i+0xc8>
 800463c:	232d      	movs	r3, #45	; 0x2d
 800463e:	4276      	negs	r6, r6
 8004640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004644:	485e      	ldr	r0, [pc, #376]	; (80047c0 <_printf_i+0x244>)
 8004646:	230a      	movs	r3, #10
 8004648:	e019      	b.n	800467e <_printf_i+0x102>
 800464a:	680e      	ldr	r6, [r1, #0]
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004652:	bf18      	it	ne
 8004654:	b236      	sxthne	r6, r6
 8004656:	e7ef      	b.n	8004638 <_printf_i+0xbc>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	6029      	str	r1, [r5, #0]
 8004660:	0601      	lsls	r1, r0, #24
 8004662:	d501      	bpl.n	8004668 <_printf_i+0xec>
 8004664:	681e      	ldr	r6, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0xf2>
 8004668:	0646      	lsls	r6, r0, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0xe8>
 800466c:	881e      	ldrh	r6, [r3, #0]
 800466e:	4854      	ldr	r0, [pc, #336]	; (80047c0 <_printf_i+0x244>)
 8004670:	2f6f      	cmp	r7, #111	; 0x6f
 8004672:	bf0c      	ite	eq
 8004674:	2308      	moveq	r3, #8
 8004676:	230a      	movne	r3, #10
 8004678:	2100      	movs	r1, #0
 800467a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800467e:	6865      	ldr	r5, [r4, #4]
 8004680:	60a5      	str	r5, [r4, #8]
 8004682:	2d00      	cmp	r5, #0
 8004684:	bfa2      	ittt	ge
 8004686:	6821      	ldrge	r1, [r4, #0]
 8004688:	f021 0104 	bicge.w	r1, r1, #4
 800468c:	6021      	strge	r1, [r4, #0]
 800468e:	b90e      	cbnz	r6, 8004694 <_printf_i+0x118>
 8004690:	2d00      	cmp	r5, #0
 8004692:	d04d      	beq.n	8004730 <_printf_i+0x1b4>
 8004694:	4615      	mov	r5, r2
 8004696:	fbb6 f1f3 	udiv	r1, r6, r3
 800469a:	fb03 6711 	mls	r7, r3, r1, r6
 800469e:	5dc7      	ldrb	r7, [r0, r7]
 80046a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046a4:	4637      	mov	r7, r6
 80046a6:	42bb      	cmp	r3, r7
 80046a8:	460e      	mov	r6, r1
 80046aa:	d9f4      	bls.n	8004696 <_printf_i+0x11a>
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d10b      	bne.n	80046c8 <_printf_i+0x14c>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	07de      	lsls	r6, r3, #31
 80046b4:	d508      	bpl.n	80046c8 <_printf_i+0x14c>
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	6861      	ldr	r1, [r4, #4]
 80046ba:	4299      	cmp	r1, r3
 80046bc:	bfde      	ittt	le
 80046be:	2330      	movle	r3, #48	; 0x30
 80046c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046c8:	1b52      	subs	r2, r2, r5
 80046ca:	6122      	str	r2, [r4, #16]
 80046cc:	f8cd a000 	str.w	sl, [sp]
 80046d0:	464b      	mov	r3, r9
 80046d2:	aa03      	add	r2, sp, #12
 80046d4:	4621      	mov	r1, r4
 80046d6:	4640      	mov	r0, r8
 80046d8:	f7ff fee2 	bl	80044a0 <_printf_common>
 80046dc:	3001      	adds	r0, #1
 80046de:	d14c      	bne.n	800477a <_printf_i+0x1fe>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	b004      	add	sp, #16
 80046e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ea:	4835      	ldr	r0, [pc, #212]	; (80047c0 <_printf_i+0x244>)
 80046ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046f0:	6829      	ldr	r1, [r5, #0]
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046f8:	6029      	str	r1, [r5, #0]
 80046fa:	061d      	lsls	r5, r3, #24
 80046fc:	d514      	bpl.n	8004728 <_printf_i+0x1ac>
 80046fe:	07df      	lsls	r7, r3, #31
 8004700:	bf44      	itt	mi
 8004702:	f043 0320 	orrmi.w	r3, r3, #32
 8004706:	6023      	strmi	r3, [r4, #0]
 8004708:	b91e      	cbnz	r6, 8004712 <_printf_i+0x196>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f023 0320 	bic.w	r3, r3, #32
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	2310      	movs	r3, #16
 8004714:	e7b0      	b.n	8004678 <_printf_i+0xfc>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	f043 0320 	orr.w	r3, r3, #32
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	2378      	movs	r3, #120	; 0x78
 8004720:	4828      	ldr	r0, [pc, #160]	; (80047c4 <_printf_i+0x248>)
 8004722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004726:	e7e3      	b.n	80046f0 <_printf_i+0x174>
 8004728:	0659      	lsls	r1, r3, #25
 800472a:	bf48      	it	mi
 800472c:	b2b6      	uxthmi	r6, r6
 800472e:	e7e6      	b.n	80046fe <_printf_i+0x182>
 8004730:	4615      	mov	r5, r2
 8004732:	e7bb      	b.n	80046ac <_printf_i+0x130>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	6826      	ldr	r6, [r4, #0]
 8004738:	6961      	ldr	r1, [r4, #20]
 800473a:	1d18      	adds	r0, r3, #4
 800473c:	6028      	str	r0, [r5, #0]
 800473e:	0635      	lsls	r5, r6, #24
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	d501      	bpl.n	8004748 <_printf_i+0x1cc>
 8004744:	6019      	str	r1, [r3, #0]
 8004746:	e002      	b.n	800474e <_printf_i+0x1d2>
 8004748:	0670      	lsls	r0, r6, #25
 800474a:	d5fb      	bpl.n	8004744 <_printf_i+0x1c8>
 800474c:	8019      	strh	r1, [r3, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	6123      	str	r3, [r4, #16]
 8004752:	4615      	mov	r5, r2
 8004754:	e7ba      	b.n	80046cc <_printf_i+0x150>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	1d1a      	adds	r2, r3, #4
 800475a:	602a      	str	r2, [r5, #0]
 800475c:	681d      	ldr	r5, [r3, #0]
 800475e:	6862      	ldr	r2, [r4, #4]
 8004760:	2100      	movs	r1, #0
 8004762:	4628      	mov	r0, r5
 8004764:	f7fb fd64 	bl	8000230 <memchr>
 8004768:	b108      	cbz	r0, 800476e <_printf_i+0x1f2>
 800476a:	1b40      	subs	r0, r0, r5
 800476c:	6060      	str	r0, [r4, #4]
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	2300      	movs	r3, #0
 8004774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004778:	e7a8      	b.n	80046cc <_printf_i+0x150>
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	462a      	mov	r2, r5
 800477e:	4649      	mov	r1, r9
 8004780:	4640      	mov	r0, r8
 8004782:	47d0      	blx	sl
 8004784:	3001      	adds	r0, #1
 8004786:	d0ab      	beq.n	80046e0 <_printf_i+0x164>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	079b      	lsls	r3, r3, #30
 800478c:	d413      	bmi.n	80047b6 <_printf_i+0x23a>
 800478e:	68e0      	ldr	r0, [r4, #12]
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	4298      	cmp	r0, r3
 8004794:	bfb8      	it	lt
 8004796:	4618      	movlt	r0, r3
 8004798:	e7a4      	b.n	80046e4 <_printf_i+0x168>
 800479a:	2301      	movs	r3, #1
 800479c:	4632      	mov	r2, r6
 800479e:	4649      	mov	r1, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	47d0      	blx	sl
 80047a4:	3001      	adds	r0, #1
 80047a6:	d09b      	beq.n	80046e0 <_printf_i+0x164>
 80047a8:	3501      	adds	r5, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	9903      	ldr	r1, [sp, #12]
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	42ab      	cmp	r3, r5
 80047b2:	dcf2      	bgt.n	800479a <_printf_i+0x21e>
 80047b4:	e7eb      	b.n	800478e <_printf_i+0x212>
 80047b6:	2500      	movs	r5, #0
 80047b8:	f104 0619 	add.w	r6, r4, #25
 80047bc:	e7f5      	b.n	80047aa <_printf_i+0x22e>
 80047be:	bf00      	nop
 80047c0:	08004c75 	.word	0x08004c75
 80047c4:	08004c86 	.word	0x08004c86

080047c8 <_sbrk_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d06      	ldr	r5, [pc, #24]	; (80047e4 <_sbrk_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fc fcfe 	bl	80011d4 <_sbrk>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_sbrk_r+0x1a>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_sbrk_r+0x1a>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200002e8 	.word	0x200002e8

080047e8 <__sread>:
 80047e8:	b510      	push	{r4, lr}
 80047ea:	460c      	mov	r4, r1
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	f000 f8a8 	bl	8004944 <_read_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	bfab      	itete	ge
 80047f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047fa:	89a3      	ldrhlt	r3, [r4, #12]
 80047fc:	181b      	addge	r3, r3, r0
 80047fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004802:	bfac      	ite	ge
 8004804:	6563      	strge	r3, [r4, #84]	; 0x54
 8004806:	81a3      	strhlt	r3, [r4, #12]
 8004808:	bd10      	pop	{r4, pc}

0800480a <__swrite>:
 800480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480e:	461f      	mov	r7, r3
 8004810:	898b      	ldrh	r3, [r1, #12]
 8004812:	05db      	lsls	r3, r3, #23
 8004814:	4605      	mov	r5, r0
 8004816:	460c      	mov	r4, r1
 8004818:	4616      	mov	r6, r2
 800481a:	d505      	bpl.n	8004828 <__swrite+0x1e>
 800481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004820:	2302      	movs	r3, #2
 8004822:	2200      	movs	r2, #0
 8004824:	f000 f870 	bl	8004908 <_lseek_r>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	4632      	mov	r2, r6
 8004836:	463b      	mov	r3, r7
 8004838:	4628      	mov	r0, r5
 800483a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483e:	f000 b817 	b.w	8004870 <_write_r>

08004842 <__sseek>:
 8004842:	b510      	push	{r4, lr}
 8004844:	460c      	mov	r4, r1
 8004846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484a:	f000 f85d 	bl	8004908 <_lseek_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	bf15      	itete	ne
 8004854:	6560      	strne	r0, [r4, #84]	; 0x54
 8004856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800485a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800485e:	81a3      	strheq	r3, [r4, #12]
 8004860:	bf18      	it	ne
 8004862:	81a3      	strhne	r3, [r4, #12]
 8004864:	bd10      	pop	{r4, pc}

08004866 <__sclose>:
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 b81b 	b.w	80048a4 <_close_r>
	...

08004870 <_write_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4d07      	ldr	r5, [pc, #28]	; (8004890 <_write_r+0x20>)
 8004874:	4604      	mov	r4, r0
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	2200      	movs	r2, #0
 800487c:	602a      	str	r2, [r5, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f7fc fcde 	bl	8001240 <_write>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_write_r+0x1e>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_write_r+0x1e>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200002e8 	.word	0x200002e8

08004894 <abort>:
 8004894:	b508      	push	{r3, lr}
 8004896:	2006      	movs	r0, #6
 8004898:	f000 f88e 	bl	80049b8 <raise>
 800489c:	2001      	movs	r0, #1
 800489e:	f7fc fc3d 	bl	800111c <_exit>
	...

080048a4 <_close_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_close_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fc5b 	bl	800116a <_close>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_close_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_close_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	200002e8 	.word	0x200002e8

080048c4 <_fstat_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d07      	ldr	r5, [pc, #28]	; (80048e4 <_fstat_r+0x20>)
 80048c8:	2300      	movs	r3, #0
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	f7fc fc56 	bl	8001182 <_fstat>
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	d102      	bne.n	80048e0 <_fstat_r+0x1c>
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	b103      	cbz	r3, 80048e0 <_fstat_r+0x1c>
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	200002e8 	.word	0x200002e8

080048e8 <_isatty_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d06      	ldr	r5, [pc, #24]	; (8004904 <_isatty_r+0x1c>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7fc fc55 	bl	80011a2 <_isatty>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_isatty_r+0x1a>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_isatty_r+0x1a>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	200002e8 	.word	0x200002e8

08004908 <_lseek_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_lseek_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fc4e 	bl	80011b8 <_lseek>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_lseek_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_lseek_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200002e8 	.word	0x200002e8

0800492c <__malloc_lock>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__malloc_lock+0x8>)
 800492e:	f7ff bb0d 	b.w	8003f4c <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	200002dc 	.word	0x200002dc

08004938 <__malloc_unlock>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__malloc_unlock+0x8>)
 800493a:	f7ff bb08 	b.w	8003f4e <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	200002dc 	.word	0x200002dc

08004944 <_read_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4d07      	ldr	r5, [pc, #28]	; (8004964 <_read_r+0x20>)
 8004948:	4604      	mov	r4, r0
 800494a:	4608      	mov	r0, r1
 800494c:	4611      	mov	r1, r2
 800494e:	2200      	movs	r2, #0
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	f7fc fbec 	bl	8001130 <_read>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_read_r+0x1e>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_read_r+0x1e>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200002e8 	.word	0x200002e8

08004968 <_raise_r>:
 8004968:	291f      	cmp	r1, #31
 800496a:	b538      	push	{r3, r4, r5, lr}
 800496c:	4604      	mov	r4, r0
 800496e:	460d      	mov	r5, r1
 8004970:	d904      	bls.n	800497c <_raise_r+0x14>
 8004972:	2316      	movs	r3, #22
 8004974:	6003      	str	r3, [r0, #0]
 8004976:	f04f 30ff 	mov.w	r0, #4294967295
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800497e:	b112      	cbz	r2, 8004986 <_raise_r+0x1e>
 8004980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004984:	b94b      	cbnz	r3, 800499a <_raise_r+0x32>
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f830 	bl	80049ec <_getpid_r>
 800498c:	462a      	mov	r2, r5
 800498e:	4601      	mov	r1, r0
 8004990:	4620      	mov	r0, r4
 8004992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004996:	f000 b817 	b.w	80049c8 <_kill_r>
 800499a:	2b01      	cmp	r3, #1
 800499c:	d00a      	beq.n	80049b4 <_raise_r+0x4c>
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	d103      	bne.n	80049aa <_raise_r+0x42>
 80049a2:	2316      	movs	r3, #22
 80049a4:	6003      	str	r3, [r0, #0]
 80049a6:	2001      	movs	r0, #1
 80049a8:	e7e7      	b.n	800497a <_raise_r+0x12>
 80049aa:	2400      	movs	r4, #0
 80049ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049b0:	4628      	mov	r0, r5
 80049b2:	4798      	blx	r3
 80049b4:	2000      	movs	r0, #0
 80049b6:	e7e0      	b.n	800497a <_raise_r+0x12>

080049b8 <raise>:
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <raise+0xc>)
 80049ba:	4601      	mov	r1, r0
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f7ff bfd3 	b.w	8004968 <_raise_r>
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <_kill_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d07      	ldr	r5, [pc, #28]	; (80049e8 <_kill_r+0x20>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	f7fc fb91 	bl	80010fc <_kill>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	d102      	bne.n	80049e4 <_kill_r+0x1c>
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	b103      	cbz	r3, 80049e4 <_kill_r+0x1c>
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	bd38      	pop	{r3, r4, r5, pc}
 80049e6:	bf00      	nop
 80049e8:	200002e8 	.word	0x200002e8

080049ec <_getpid_r>:
 80049ec:	f7fc bb7e 	b.w	80010ec <_getpid>

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
