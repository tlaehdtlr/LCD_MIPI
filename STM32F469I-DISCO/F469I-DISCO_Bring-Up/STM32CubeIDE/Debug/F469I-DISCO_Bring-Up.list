
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb64  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000965a8  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a22cc  080a22cc  000c00a0  2**0
                  CONTENTS
  4 .ARM          00000008  080a22cc  080a22cc  000b22cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a22d4  080a22d4  000c00a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a22d4  080a22d4  000b22d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a22d8  080a22d8  000b22d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080a22dc  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000c00a0  2**0
                  CONTENTS
 10 .bss          0000046c  200000a0  200000a0  000c00a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  000c00a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000c00a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a57f  00000000  00000000  000c00d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004521  00000000  00000000  000da64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  000deb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001360  00000000  00000000  000e00b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fed8  00000000  00000000  000e1410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020271  00000000  00000000  001112e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010209b  00000000  00000000  00131559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002335f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006158  00000000  00000000  00233644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bd0c 	.word	0x0800bd0c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000a4 	.word	0x200000a4
 80001fc:	0800bd0c 	.word	0x0800bd0c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <lcd_control>:
        (void *)0, (void *)0, (void *)0
    }
};

static void lcd_control(uint8_t argc, void **argv)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	623b      	str	r3, [r7, #32]
    char *arg1 = argv[0 + strlen(command)];
 80005e6:	6a38      	ldr	r0, [r7, #32]
 80005e8:	f7ff fe14 	bl	8000214 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	61fb      	str	r3, [r7, #28]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80005f8:	6a38      	ldr	r0, [r7, #32]
 80005fa:	f7ff fe0b 	bl	8000214 <strlen>
 80005fe:	4604      	mov	r4, r0
 8000600:	69f8      	ldr	r0, [r7, #28]
 8000602:	f7ff fe07 	bl	8000214 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4423      	add	r3, r4
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	61bb      	str	r3, [r7, #24]
    char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];
 8000614:	6a38      	ldr	r0, [r7, #32]
 8000616:	f7ff fdfd 	bl	8000214 <strlen>
 800061a:	4604      	mov	r4, r0
 800061c:	69f8      	ldr	r0, [r7, #28]
 800061e:	f7ff fdf9 	bl	8000214 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	441c      	add	r4, r3
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f7ff fdf4 	bl	8000214 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	4423      	add	r3, r4
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	617b      	str	r3, [r7, #20]
    char *arg4 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2) + strlen(arg3)];
 800063a:	6a38      	ldr	r0, [r7, #32]
 800063c:	f7ff fdea 	bl	8000214 <strlen>
 8000640:	4604      	mov	r4, r0
 8000642:	69f8      	ldr	r0, [r7, #28]
 8000644:	f7ff fde6 	bl	8000214 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	441c      	add	r4, r3
 800064c:	69b8      	ldr	r0, [r7, #24]
 800064e:	f7ff fde1 	bl	8000214 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	441c      	add	r4, r3
 8000656:	6978      	ldr	r0, [r7, #20]
 8000658:	f7ff fddc 	bl	8000214 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	4423      	add	r3, r4
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	613b      	str	r3, [r7, #16]

    if (argc == 1)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d136      	bne.n	80006de <lcd_control+0x10a>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	e027      	b.n	80006c6 <lcd_control+0xf2>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000676:	4989      	ldr	r1, [pc, #548]	; (800089c <lcd_control+0x2c8>)
 8000678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6a39      	ldr	r1, [r7, #32]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdb9 	bl	8000200 <strcmp>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d115      	bne.n	80006c0 <lcd_control+0xec>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000694:	4981      	ldr	r1, [pc, #516]	; (800089c <lcd_control+0x2c8>)
 8000696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	487d      	ldr	r0, [pc, #500]	; (800089c <lcd_control+0x2c8>)
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4403      	add	r3, r0
 80006b2:	3308      	adds	r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4879      	ldr	r0, [pc, #484]	; (80008a0 <lcd_control+0x2cc>)
 80006ba:	f00a f9af 	bl	800aa1c <iprintf>
                return;
 80006be:	e0e9      	b.n	8000894 <lcd_control+0x2c0>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	3301      	adds	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	4975      	ldr	r1, [pc, #468]	; (800089c <lcd_control+0x2c8>)
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	3304      	adds	r3, #4
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1cc      	bne.n	8000676 <lcd_control+0xa2>
 80006dc:	e0d7      	b.n	800088e <lcd_control+0x2ba>
            }
        }
    }
    else if (argc == 2)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d120      	bne.n	8000726 <lcd_control+0x152>
    {
        if (strcmp(arg1, "err") == 0)
 80006e4:	496f      	ldr	r1, [pc, #444]	; (80008a4 <lcd_control+0x2d0>)
 80006e6:	69f8      	ldr	r0, [r7, #28]
 80006e8:	f7ff fd8a 	bl	8000200 <strcmp>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <lcd_control+0x124>
        {
            ltdc_get_err();
 80006f2:	f001 fd4f 	bl	8002194 <ltdc_get_err>
            return ;
 80006f6:	e0cd      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "start") == 0)
 80006f8:	496b      	ldr	r1, [pc, #428]	; (80008a8 <lcd_control+0x2d4>)
 80006fa:	69f8      	ldr	r0, [r7, #28]
 80006fc:	f7ff fd80 	bl	8000200 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d103      	bne.n	800070e <lcd_control+0x13a>
        {
            dsi_start(true);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc6c 	bl	8000fe4 <dsi_start>
            return ;
 800070c:	e0c2      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "stop") == 0)
 800070e:	4967      	ldr	r1, [pc, #412]	; (80008ac <lcd_control+0x2d8>)
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	f7ff fd75 	bl	8000200 <strcmp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	f040 80b8 	bne.w	800088e <lcd_control+0x2ba>
        {
            dsi_start(false);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fc60 	bl	8000fe4 <dsi_start>
            return ;
 8000724:	e0b6      	b.n	8000894 <lcd_control+0x2c0>
        }

    }
    else if (argc == 3)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d121      	bne.n	8000770 <lcd_control+0x19c>
    {
        if (strcmp(arg1, "layer") == 0)
 800072c:	4960      	ldr	r1, [pc, #384]	; (80008b0 <lcd_control+0x2dc>)
 800072e:	69f8      	ldr	r0, [r7, #28]
 8000730:	f7ff fd66 	bl	8000200 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 80a9 	bne.w	800088e <lcd_control+0x2ba>
        {
            if (strcmp(arg2, "int") == 0)
 800073c:	495d      	ldr	r1, [pc, #372]	; (80008b4 <lcd_control+0x2e0>)
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f7ff fd5e 	bl	8000200 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <lcd_control+0x180>
            {
                ltdc_change_layer(0, LAYER0_ADDRESS);
 800074a:	495b      	ldr	r1, [pc, #364]	; (80008b8 <lcd_control+0x2e4>)
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fcd5 	bl	80020fc <ltdc_change_layer>
                return;
 8000752:	e09f      	b.n	8000894 <lcd_control+0x2c0>
            }
            else if (strcmp(arg2, "ext") == 0)
 8000754:	4959      	ldr	r1, [pc, #356]	; (80008bc <lcd_control+0x2e8>)
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f7ff fd52 	bl	8000200 <strcmp>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 8095 	bne.w	800088e <lcd_control+0x2ba>
            {
                ltdc_change_layer(0, SDRAM_ADDRESS);
 8000764:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000768:	2000      	movs	r0, #0
 800076a:	f001 fcc7 	bl	80020fc <ltdc_change_layer>
                return;
 800076e:	e091      	b.n	8000894 <lcd_control+0x2c0>
            }
        }

    }
    else if (argc == 5)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b05      	cmp	r3, #5
 8000774:	f040 808b 	bne.w	800088e <lcd_control+0x2ba>
    {
        if (strcmp(arg1, "ch") == 0)
 8000778:	4951      	ldr	r1, [pc, #324]	; (80008c0 <lcd_control+0x2ec>)
 800077a:	69f8      	ldr	r0, [r7, #28]
 800077c:	f7ff fd40 	bl	8000200 <strcmp>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	f040 8083 	bne.w	800088e <lcd_control+0x2ba>
        {
            uint8_t sector = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
            if (strcmp(arg2, "int") == 0)
 800078c:	4949      	ldr	r1, [pc, #292]	; (80008b4 <lcd_control+0x2e0>)
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f7ff fd36 	bl	8000200 <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d140      	bne.n	800081c <lcd_control+0x248>
            {
                sector = atoi(arg3) - 1;
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f00a f908 	bl	800a9b0 <atoi>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b01      	subs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
                if (sector <= 1)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d86f      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 80007ae:	4945      	ldr	r1, [pc, #276]	; (80008c4 <lcd_control+0x2f0>)
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	f7ff fd25 	bl	8000200 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10a      	bne.n	80007d2 <lcd_control+0x1fe>
                    {
                        lcd_control_change_flash(LCD_COLOR_RED, sector);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	483f      	ldr	r0, [pc, #252]	; (80008c8 <lcd_control+0x2f4>)
 80007cc:	f001 fb20 	bl	8001e10 <lcd_control_change_flash>
                        return ;
 80007d0:	e060      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 80007d2:	493e      	ldr	r1, [pc, #248]	; (80008cc <lcd_control+0x2f8>)
 80007d4:	6938      	ldr	r0, [r7, #16]
 80007d6:	f7ff fd13 	bl	8000200 <strcmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <lcd_control+0x224>
                    {
                        lcd_control_change_flash(LCD_COLOR_GREEN, sector);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80007f2:	f001 fb0d 	bl	8001e10 <lcd_control_change_flash>
                        return ;
 80007f6:	e04d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 80007f8:	4935      	ldr	r1, [pc, #212]	; (80008d0 <lcd_control+0x2fc>)
 80007fa:	6938      	ldr	r0, [r7, #16]
 80007fc:	f7ff fd00 	bl	8000200 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d143      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_flash(LCD_COLOR_BLUE, sector);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	; (80008d4 <lcd_control+0x300>)
 8000816:	f001 fafb 	bl	8001e10 <lcd_control_change_flash>
                        return ;
 800081a:	e03b      	b.n	8000894 <lcd_control+0x2c0>
                    }
                }
            }
            else if (strcmp(arg2, "ext") == 0)
 800081c:	4927      	ldr	r1, [pc, #156]	; (80008bc <lcd_control+0x2e8>)
 800081e:	69b8      	ldr	r0, [r7, #24]
 8000820:	f7ff fcee 	bl	8000200 <strcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d131      	bne.n	800088e <lcd_control+0x2ba>
            {
                sector = atoi(arg3) - 1;
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f00a f8c0 	bl	800a9b0 <atoi>
 8000830:	4603      	mov	r3, r0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
                if (sector <= 3)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d827      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 800083e:	4921      	ldr	r1, [pc, #132]	; (80008c4 <lcd_control+0x2f0>)
 8000840:	6938      	ldr	r0, [r7, #16]
 8000842:	f7ff fcdd 	bl	8000200 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <lcd_control+0x284>
                    {
                        lcd_control_change_sdram(LCD_COLOR_RED, sector);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4619      	mov	r1, r3
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <lcd_control+0x2f4>)
 8000852:	f001 faad 	bl	8001db0 <lcd_control_change_sdram>
                        return ;
 8000856:	e01d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 8000858:	491c      	ldr	r1, [pc, #112]	; (80008cc <lcd_control+0x2f8>)
 800085a:	6938      	ldr	r0, [r7, #16]
 800085c:	f7ff fcd0 	bl	8000200 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d106      	bne.n	8000874 <lcd_control+0x2a0>
                    {
                        lcd_control_change_sdram(LCD_COLOR_GREEN, sector);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800086e:	f001 fa9f 	bl	8001db0 <lcd_control_change_sdram>
                        return ;
 8000872:	e00f      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 8000874:	4916      	ldr	r1, [pc, #88]	; (80008d0 <lcd_control+0x2fc>)
 8000876:	6938      	ldr	r0, [r7, #16]
 8000878:	f7ff fcc2 	bl	8000200 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_sdram(LCD_COLOR_BLUE, sector);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <lcd_control+0x300>)
 8000888:	f001 fa92 	bl	8001db0 <lcd_control_change_sdram>
                        return ;
 800088c:	e002      	b.n	8000894 <lcd_control+0x2c0>
                }
                
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <lcd_control+0x304>)
 8000890:	f00a f94a 	bl	800ab28 <puts>
}
 8000894:	372c      	adds	r7, #44	; 0x2c
 8000896:	46bd      	mov	sp, r7
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	bf00      	nop
 800089c:	0800c018 	.word	0x0800c018
 80008a0:	0800be30 	.word	0x0800be30
 80008a4:	0800be40 	.word	0x0800be40
 80008a8:	0800be44 	.word	0x0800be44
 80008ac:	0800be4c 	.word	0x0800be4c
 80008b0:	0800be54 	.word	0x0800be54
 80008b4:	0800be5c 	.word	0x0800be5c
 80008b8:	08020000 	.word	0x08020000
 80008bc:	0800be60 	.word	0x0800be60
 80008c0:	0800be64 	.word	0x0800be64
 80008c4:	0800be68 	.word	0x0800be68
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	0800be6c 	.word	0x0800be6c
 80008d0:	0800be70 	.word	0x0800be70
 80008d4:	ff0000ff 	.word	0xff0000ff
 80008d8:	0800be74 	.word	0x0800be74

080008dc <led_control>:

static void led_control(uint8_t argc, void **argv)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	613b      	str	r3, [r7, #16]
    char *arg1 = argv[0 + strlen(command)];
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f7ff fc90 	bl	8000214 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 8000900:	6938      	ldr	r0, [r7, #16]
 8000902:	f7ff fc87 	bl	8000214 <strlen>
 8000906:	4604      	mov	r4, r0
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff fc83 	bl	8000214 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	4423      	add	r3, r4
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60bb      	str	r3, [r7, #8]

    if (argc == 1)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d136      	bne.n	8000990 <led_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e027      	b.n	8000978 <led_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000928:	493f      	ldr	r1, [pc, #252]	; (8000a28 <led_control+0x14c>)
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc60 	bl	8000200 <strcmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d115      	bne.n	8000972 <led_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000946:	4938      	ldr	r1, [pc, #224]	; (8000a28 <led_control+0x14c>)
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <led_control+0x14c>)
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4403      	add	r3, r0
 8000964:	3308      	adds	r3, #8
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4830      	ldr	r0, [pc, #192]	; (8000a2c <led_control+0x150>)
 800096c:	f00a f856 	bl	800aa1c <iprintf>
                return;
 8000970:	e056      	b.n	8000a20 <led_control+0x144>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	492b      	ldr	r1, [pc, #172]	; (8000a28 <led_control+0x14c>)
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1cc      	bne.n	8000928 <led_control+0x4c>
 800098e:	e044      	b.n	8000a1a <led_control+0x13e>
            }
        }
    }
    else if (argc == 3)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d141      	bne.n	8000a1a <led_control+0x13e>
    {
        if (strcmp(arg1, "on") == 0)
 8000996:	4926      	ldr	r1, [pc, #152]	; (8000a30 <led_control+0x154>)
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fc31 	bl	8000200 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d119      	bne.n	80009d8 <led_control+0xfc>
        {
            if (strcmp(arg2, "1") == 0)
 80009a4:	4923      	ldr	r1, [pc, #140]	; (8000a34 <led_control+0x158>)
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff fc2a 	bl	8000200 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <led_control+0xe2>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <led_control+0x15c>)
 80009b8:	f004 fe40 	bl	800563c <HAL_GPIO_WritePin>
                return;
 80009bc:	e030      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80009be:	491f      	ldr	r1, [pc, #124]	; (8000a3c <led_control+0x160>)
 80009c0:	68b8      	ldr	r0, [r7, #8]
 80009c2:	f7ff fc1d 	bl	8000200 <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d126      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <led_control+0x164>)
 80009d2:	f004 fe33 	bl	800563c <HAL_GPIO_WritePin>
                return;
 80009d6:	e023      	b.n	8000a20 <led_control+0x144>
            }
        }
        else if (strcmp(arg1, "off") == 0)
 80009d8:	491a      	ldr	r1, [pc, #104]	; (8000a44 <led_control+0x168>)
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fc10 	bl	8000200 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d119      	bne.n	8000a1a <led_control+0x13e>
        {
            if (strcmp(arg2, "1") == 0)
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <led_control+0x158>)
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff fc09 	bl	8000200 <strcmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <led_control+0x124>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <led_control+0x15c>)
 80009fa:	f004 fe1f 	bl	800563c <HAL_GPIO_WritePin>
                return;
 80009fe:	e00f      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 8000a00:	490e      	ldr	r1, [pc, #56]	; (8000a3c <led_control+0x160>)
 8000a02:	68b8      	ldr	r0, [r7, #8]
 8000a04:	f7ff fbfc 	bl	8000200 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <led_control+0x164>)
 8000a14:	f004 fe12 	bl	800563c <HAL_GPIO_WritePin>
                return;
 8000a18:	e002      	b.n	8000a20 <led_control+0x144>
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <led_control+0x16c>)
 8000a1c:	f00a f884 	bl	800ab28 <puts>
    
}
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	0800c018 	.word	0x0800c018
 8000a2c:	0800be30 	.word	0x0800be30
 8000a30:	0800be90 	.word	0x0800be90
 8000a34:	0800be94 	.word	0x0800be94
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	0800be98 	.word	0x0800be98
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	0800be9c 	.word	0x0800be9c
 8000a48:	0800be74 	.word	0x0800be74

08000a4c <help_func>:

static void help_func(uint8_t argc, void **argv)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d129      	bne.n	8000ab2 <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <help_func+0x6c>)
 8000a60:	f00a f862 	bl	800ab28 <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e017      	b.n	8000a9a <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000a6a:	4914      	ldr	r1, [pc, #80]	; (8000abc <help_func+0x70>)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <help_func+0x70>)
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4403      	add	r3, r0
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <help_func+0x74>)
 8000a90:	f009 ffc4 	bl	800aa1c <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <help_func+0x70>)
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1dc      	bne.n	8000a6a <help_func+0x1e>
        }
        return;
 8000ab0:	bf00      	nop
    }
}
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800bea0 	.word	0x0800bea0
 8000abc:	0800c018 	.word	0x0800c018
 8000ac0:	0800be30 	.word	0x0800be30

08000ac4 <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e011      	b.n	8000afa <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 8000ad6:	4912      	ldr	r1, [pc, #72]	; (8000b20 <shell_get_command_index+0x5c>)
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fb89 	bl	8000200 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00e      	beq.n	8000b12 <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <shell_get_command_index+0x5c>)
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	3304      	adds	r3, #4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e2      	bne.n	8000ad6 <shell_get_command_index+0x12>
 8000b10:	e000      	b.n	8000b14 <shell_get_command_index+0x50>
        {
            break;
 8000b12:	bf00      	nop
        }
    }

    return i;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	0800c018 	.word	0x0800c018

08000b24 <cli_process>:

void cli_process(char* cmd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b30:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b34:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 8000b36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b3a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	461a      	mov	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f009 ff60 	bl	800aa0c <memset>
    int i = 0, idx = 0, argc = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 8000b5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b66:	4939      	ldr	r1, [pc, #228]	; (8000c4c <cli_process+0x128>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f009 ffed 	bl	800ab48 <strtok>
 8000b6e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 8000b72:	e02c      	b.n	8000bce <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b7a:	e014      	b.n	8000ba6 <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000b7c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000b80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b84:	1c59      	adds	r1, r3, #1
 8000b86:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000b8a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000b8e:	4411      	add	r1, r2
 8000b90:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000b94:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000b9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ba6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000baa:	f7ff fb33 	bl	8000214 <strlen>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8e1      	bhi.n	8000b7c <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 8000bb8:	4924      	ldr	r1, [pc, #144]	; (8000c4c <cli_process+0x128>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f009 ffc4 	bl	800ab48 <strtok>
 8000bc0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 8000bc4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 8000bce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ce      	bne.n	8000b74 <cli_process+0x50>
    }

    command = argv[0];
 8000bd6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000bda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 8000be4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d027      	beq.n	8000c3c <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 8000bec:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000bf0:	f7ff ff68 	bl	8000ac4 <shell_get_command_index>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 8000bfa:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <cli_process+0x12c>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <cli_process+0x130>)
 8000c14:	f009 ff88 	bl	800ab28 <puts>
 8000c18:	e013      	b.n	8000c42 <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 8000c1a:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <cli_process+0x12c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
    }

    printf("\r\n");
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <cli_process+0x134>)
 8000c3e:	f009 ff73 	bl	800ab28 <puts>
 8000c42:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800bebc 	.word	0x0800bebc
 8000c50:	0800c018 	.word	0x0800c018
 8000c54:	0800bec0 	.word	0x0800bec0
 8000c58:	0800bed8 	.word	0x0800bed8

08000c5c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_DMA2D_Init+0x60>)
 8000c64:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000c92:	f002 fc9a 	bl	80035ca <HAL_DMA2D_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c9c:	f001 fb34 	bl	8002308 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_DMA2D_Init+0x5c>)
 8000ca4:	f002 fdee 	bl	8003884 <HAL_DMA2D_ConfigLayer>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000cae:	f001 fb2b 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	4002b000 	.word	0x4002b000

08000cc0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_DMA2D_MspInit+0x3c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_DMA2D_MspInit+0x40>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	4002b000 	.word	0x4002b000
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ae      	sub	sp, #184	; 0xb8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d1a:	2224      	movs	r2, #36	; 0x24
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 fe74 	bl	800aa0c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	226c      	movs	r2, #108	; 0x6c
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f009 fe65 	bl	800aa0c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000d42:	4b69      	ldr	r3, [pc, #420]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d44:	4a69      	ldr	r2, [pc, #420]	; (8000eec <MX_DSIHOST_DSI_Init+0x1e8>)
 8000d46:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d48:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000d4e:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000d5a:	237d      	movs	r3, #125	; 0x7d
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d70:	4619      	mov	r1, r3
 8000d72:	485d      	ldr	r0, [pc, #372]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d74:	f002 fefc 	bl	8003b70 <HAL_DSI_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000d7e:	f001 fac3 	bl	8002308 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000db8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	484a      	ldr	r0, [pc, #296]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000dc0:	f003 fc58 	bl	8004674 <HAL_DSI_ConfigHostTimeouts>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000dca:	f001 fa9d 	bl	8002308 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000dce:	2323      	movs	r3, #35	; 0x23
 8000dd0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000dd2:	2323      	movs	r3, #35	; 0x23
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 35;
 8000dd6:	2323      	movs	r3, #35	; 0x23
 8000dd8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 35;
 8000dda:	2323      	movs	r3, #35	; 0x23
 8000ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 10;
 8000de4:	230a      	movs	r3, #10
 8000de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000dea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dee:	4619      	mov	r1, r3
 8000df0:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000df2:	f003 fbd5 	bl	80045a0 <HAL_DSI_ConfigPhyTimer>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000dfc:	f001 fa84 	bl	8002308 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000e00:	2104      	movs	r1, #4
 8000e02:	4839      	ldr	r0, [pc, #228]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e04:	f003 fba4 	bl	8004550 <HAL_DSI_ConfigFlowControl>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8000e0e:	f001 fa7b 	bl	8002308 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000e12:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e18:	f003 fe24 	bl	8004a64 <HAL_DSI_SetLowPowerRXFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000e22:	f001 fa71 	bl	8002308 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_GEN) != HAL_OK)
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e2c:	f002 ffbc 	bl	8003da8 <HAL_DSI_ConfigErrorMonitor>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_DSIHOST_DSI_Init+0x136>
  {
    Error_Handler();
 8000e36:	f001 fa67 	bl	8002308 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000e46:	2302      	movs	r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 800;
 8000e4a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e4e:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 68;
 8000e68:	2344      	movs	r3, #68	; 0x44
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1940;
 8000e6c:	f240 7394 	movw	r3, #1940	; 0x794
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 120;
 8000e72:	2378      	movs	r3, #120	; 0x78
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 150;
 8000e76:	2396      	movs	r3, #150	; 0x96
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 150;
 8000e7a:	2396      	movs	r3, #150	; 0x96
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8000e7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ebe:	f003 f93f 	bl	8004140 <HAL_DSI_ConfigVideoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_DSIHOST_DSI_Init+0x1c8>
  {
    Error_Handler();
 8000ec8:	f001 fa1e 	bl	8002308 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ed0:	f003 f90e 	bl	80040f0 <HAL_DSI_SetGenericVCID>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_DSIHOST_DSI_Init+0x1da>
  {
    Error_Handler();
 8000eda:	f001 fa15 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000fc 	.word	0x200000fc
 8000eec:	40016c00 	.word	0x40016c00

08000ef0 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_DSI_MspInit+0x94>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d133      	bne.n	8000f7a <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_DSI_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000f5a:	230d      	movs	r3, #13
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_DSI_MspInit+0x9c>)
 8000f66:	f004 f8b1 	bl	80050cc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	205c      	movs	r0, #92	; 0x5c
 8000f70:	f002 fa47 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000f74:	205c      	movs	r0, #92	; 0x5c
 8000f76:	f002 fa60 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40016c00 	.word	0x40016c00
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40022400 	.word	0x40022400

08000f90 <DSI_IO_WriteCmd>:
  }
}

/* USER CODE BEGIN 1 */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d80d      	bhi.n	8000fbc <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi, (uint32_t) 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	2215      	movs	r2, #21
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <DSI_IO_WriteCmd+0x50>)
 8000fb6:	f003 fc9b 	bl	80048f0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000fba:	e00d      	b.n	8000fd8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	9200      	str	r2, [sp, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2239      	movs	r2, #57	; 0x39
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <DSI_IO_WriteCmd+0x50>)
 8000fd4:	f003 fcae 	bl	8004934 <HAL_DSI_LongWrite>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000fc 	.word	0x200000fc

08000fe4 <dsi_start>:

void dsi_start(bool start)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if(start)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <dsi_start+0x20>
  {
      HAL_DSI_Start(&(hdsi));
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <dsi_start+0x30>)
 8000ff6:	f003 fc03 	bl	8004800 <HAL_DSI_Start>
      ltdc_change_layer(0, LAYER0_ADDRESS);
 8000ffa:	4907      	ldr	r1, [pc, #28]	; (8001018 <dsi_start+0x34>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f001 f87d 	bl	80020fc <ltdc_change_layer>
  }
  else
  {
      HAL_DSI_Stop(&(hdsi));
  }
}
 8001002:	e002      	b.n	800100a <dsi_start+0x26>
      HAL_DSI_Stop(&(hdsi));
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <dsi_start+0x30>)
 8001006:	f003 fc37 	bl	8004878 <HAL_DSI_Stop>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000fc 	.word	0x200000fc
 8001018:	08020000 	.word	0x08020000

0800101c <sdram_init>:


static FMC_SDRAM_CommandTypeDef Command;

static void sdram_init(SDRAM_HandleTypeDef * p_hsdram1)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <sdram_init+0xbc>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <sdram_init+0xbc>)
 8001030:	2210      	movs	r2, #16
 8001032:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <sdram_init+0xbc>)
 8001036:	2201      	movs	r2, #1
 8001038:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <sdram_init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8001040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001044:	4924      	ldr	r1, [pc, #144]	; (80010d8 <sdram_init+0xbc>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f008 fac4 	bl	80095d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f002 f8b5 	bl	80031bc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <sdram_init+0xbc>)
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <sdram_init+0xbc>)
 800105a:	2210      	movs	r2, #16
 800105c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <sdram_init+0xbc>)
 8001060:	2201      	movs	r2, #1
 8001062:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <sdram_init+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 800106a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106e:	491a      	ldr	r1, [pc, #104]	; (80010d8 <sdram_init+0xbc>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f008 faaf 	bl	80095d4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <sdram_init+0xbc>)
 8001078:	2203      	movs	r2, #3
 800107a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <sdram_init+0xbc>)
 800107e:	2210      	movs	r2, #16
 8001080:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <sdram_init+0xbc>)
 8001084:	2208      	movs	r2, #8
 8001086:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <sdram_init+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	4911      	ldr	r1, [pc, #68]	; (80010d8 <sdram_init+0xbc>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f008 fa9d 	bl	80095d4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800109a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800109e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <sdram_init+0xbc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <sdram_init+0xbc>)
 80010a8:	2210      	movs	r2, #16
 80010aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <sdram_init+0xbc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <sdram_init+0xbc>)
 80010b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <sdram_init+0xbc>)
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f008 fa88 	bl	80095d4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(p_hsdram1, REFRESH_COUNT);
 80010c4:	f240 5169 	movw	r1, #1385	; 0x569
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f008 fab8 	bl	800963e <HAL_SDRAM_ProgramRefreshRate>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000118 	.word	0x20000118

080010dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_FMC_Init+0xa0>)
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <MX_FMC_Init+0xa4>)
 80010f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_FMC_Init+0xa0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_FMC_Init+0xa0>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_FMC_Init+0xa0>)
 8001108:	2204      	movs	r2, #4
 800110a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_FMC_Init+0xa0>)
 800110e:	2220      	movs	r2, #32
 8001110:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_FMC_Init+0xa0>)
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_FMC_Init+0xa0>)
 800111a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800111e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_FMC_Init+0xa0>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_FMC_Init+0xa0>)
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_FMC_Init+0xa0>)
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_FMC_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001140:	2307      	movs	r3, #7
 8001142:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001148:	2307      	movs	r3, #7
 800114a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800114c:	2303      	movs	r3, #3
 800114e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_FMC_Init+0xa0>)
 800115e:	f008 f9e1 	bl	8009524 <HAL_SDRAM_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001168:	f001 f8ce 	bl	8002308 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  sdram_init(&hsdram1);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_FMC_Init+0xa0>)
 800116e:	f7ff ff55 	bl	800101c <sdram_init>
  /* USER CODE END FMC_Init 2 */
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000128 	.word	0x20000128
 8001180:	a0000140 	.word	0xa0000140

08001184 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_FMC_MspInit+0x138>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 8089 	bne.w	80012b4 <HAL_FMC_MspInit+0x130>
    return;
  }
  FMC_Initialized = 1;
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_FMC_MspInit+0x138>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	4a43      	ldr	r2, [pc, #268]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_FMC_MspInit+0x13c>)
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80011c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011c8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <HAL_FMC_MspInit+0x140>)
 80011e0:	f003 ff74 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80011e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80011e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4832      	ldr	r0, [pc, #200]	; (80012c8 <HAL_FMC_MspInit+0x144>)
 8001200:	f003 ff64 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001204:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001208:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	482b      	ldr	r0, [pc, #172]	; (80012cc <HAL_FMC_MspInit+0x148>)
 8001220:	f003 ff54 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001224:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001228:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <HAL_FMC_MspInit+0x14c>)
 8001240:	f003 ff44 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001244:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001248:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	481d      	ldr	r0, [pc, #116]	; (80012d4 <HAL_FMC_MspInit+0x150>)
 8001260:	f003 ff34 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001264:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8001268:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <HAL_FMC_MspInit+0x154>)
 8001280:	f003 ff24 	bl	80050cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001294:	230c      	movs	r3, #12
 8001296:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	; (80012dc <HAL_FMC_MspInit+0x158>)
 800129e:	f003 ff15 	bl	80050cc <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2030      	movs	r0, #48	; 0x30
 80012a8:	f002 f8ab 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80012ac:	2030      	movs	r0, #48	; 0x30
 80012ae:	f002 f8c4 	bl	800343a <HAL_NVIC_EnableIRQ>
 80012b2:	e000      	b.n	80012b6 <HAL_FMC_MspInit+0x132>
    return;
 80012b4:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000015c 	.word	0x2000015c
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40020800 	.word	0x40020800

080012e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012e8:	f7ff ff4c 	bl	8001184 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <ft6x06_Init>:
  *         from MCU to FT6xx6 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f90d 	bl	8001520 <ft6x06_GetInstance>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d10e      	bne.n	800132e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f905 	bl	8001520 <ft6x06_GetInstance>
 8001316:	4603      	mov	r3, r0
 8001318:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d806      	bhi.n	800132e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <ft6x06_Init+0x44>)
 8001328:	54d1      	strb	r1, [r2, r3]
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800132a:	f001 fcd9 	bl	8002ce0 <TS_IO_Init>
    }
  }
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000160 	.word	0x20000160

0800133c <ft6x06_Reset>:
  *         @note : Not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6xx6 IC */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <ft6x06_ReadID>:
  *         able to read the FT6xx6 device ID, and verify this is a FT6xx6.
  * @param  DeviceAddr: I2C FT6xx6 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 800135c:	f001 fcc0 	bl	8002ce0 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	21a8      	movs	r1, #168	; 0xa8
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fcea 	bl	8002d40 <TS_IO_Read>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6xx6 */
  ft6x06_TS_Configure(DeviceAddr);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f8bc 	bl	8001502 <ft6x06_TS_Configure>

  /* By default set FT6xx6 IC in Polling mode : no INT generation on FT6xx6 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f88d 	bl	80014ac <ft6x06_TS_DisableIT>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fcc5 	bl	8002d40 <TS_IO_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6xx6 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <ft6x06_TS_DetectTouch+0x50>)
 80013d8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <ft6x06_TS_DetectTouch+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000164 	.word	0x20000164

080013f0 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001404:	789a      	ldrb	r2, [r3, #2]
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	429a      	cmp	r2, r3
 800140c:	d234      	bcs.n	8001478 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <ft6x06_TS_GetXY+0x2c>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800141a:	e005      	b.n	8001428 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 800141c:	2303      	movs	r3, #3
 800141e:	75fb      	strb	r3, [r7, #23]
      break;
 8001420:	e002      	b.n	8001428 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001422:	2309      	movs	r3, #9
 8001424:	75fb      	strb	r3, [r7, #23]
      break;
 8001426:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	f107 0210 	add.w	r2, r7, #16
 8001430:	7df9      	ldrb	r1, [r7, #23]
 8001432:	2304      	movs	r3, #4
 8001434:	f001 fcb0 	bl	8002d98 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21b      	sxth	r3, r3
 800143e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001442:	b21a      	sxth	r2, r3
 8001444:	7c7b      	ldrb	r3, [r7, #17]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29a      	uxth	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001452:	7cbb      	ldrb	r3, [r7, #18]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21b      	sxth	r3, r3
 8001458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800145c:	b21a      	sxth	r2, r3
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <ft6x06_TS_GetXY+0x90>)
 8001476:	709a      	strb	r2, [r3, #2]
  }
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000164 	.word	0x20000164

08001484 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	21a4      	movs	r1, #164	; 0xa4
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fc26 	bl	8002cf0 <TS_IO_Write>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	21a4      	movs	r1, #164	; 0xa4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fc12 	bl	8002cf0 <TS_IO_Write>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6xx6 */
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6xx6 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6xx6 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6xx6 */

  return(status);
 8001510:	68fb      	ldr	r3, [r7, #12]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e00b      	b.n	800154c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <ft6x06_GetInstance+0x40>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	b29b      	uxth	r3, r3
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	429a      	cmp	r2, r3
 8001540:	d101      	bne.n	8001546 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	e006      	b.n	8001554 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d9f0      	bls.n	8001534 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001552:	23ff      	movs	r3, #255	; 0xff
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000160 	.word	0x20000160

08001564 <MX_GPIO_Init>:
     PF9   ------> QUADSPI_BK1_IO1
     PF8   ------> QUADSPI_BK1_IO0
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b090      	sub	sp, #64	; 0x40
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	4bad      	ldr	r3, [pc, #692]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4aac      	ldr	r2, [pc, #688]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4baa      	ldr	r3, [pc, #680]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	4ba6      	ldr	r3, [pc, #664]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4aa5      	ldr	r2, [pc, #660]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4ba3      	ldr	r3, [pc, #652]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	4b9f      	ldr	r3, [pc, #636]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a9e      	ldr	r2, [pc, #632]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b9c      	ldr	r3, [pc, #624]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	4b98      	ldr	r3, [pc, #608]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a97      	ldr	r2, [pc, #604]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b95      	ldr	r3, [pc, #596]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b91      	ldr	r3, [pc, #580]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a90      	ldr	r2, [pc, #576]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b8e      	ldr	r3, [pc, #568]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b8a      	ldr	r3, [pc, #552]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a89      	ldr	r2, [pc, #548]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b87      	ldr	r3, [pc, #540]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a82      	ldr	r2, [pc, #520]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b80      	ldr	r3, [pc, #512]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b79      	ldr	r3, [pc, #484]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b75      	ldr	r3, [pc, #468]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a74      	ldr	r2, [pc, #464]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a6d      	ldr	r2, [pc, #436]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <MX_GPIO_Init+0x2d0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a66      	ldr	r2, [pc, #408]	; (8001834 <MX_GPIO_Init+0x2d0>)
 800169c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <MX_GPIO_Init+0x2d0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	210c      	movs	r1, #12
 80016b2:	4861      	ldr	r0, [pc, #388]	; (8001838 <MX_GPIO_Init+0x2d4>)
 80016b4:	f003 ffc2 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2130      	movs	r1, #48	; 0x30
 80016bc:	485f      	ldr	r0, [pc, #380]	; (800183c <MX_GPIO_Init+0x2d8>)
 80016be:	f003 ffbd 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	485e      	ldr	r0, [pc, #376]	; (8001840 <MX_GPIO_Init+0x2dc>)
 80016c8:	f003 ffb8 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	485c      	ldr	r0, [pc, #368]	; (8001844 <MX_GPIO_Init+0x2e0>)
 80016d2:	f003 ffb3 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	485b      	ldr	r0, [pc, #364]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80016dc:	f003 ffae 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	4859      	ldr	r0, [pc, #356]	; (800184c <MX_GPIO_Init+0x2e8>)
 80016e6:	f003 ffa9 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2108      	movs	r1, #8
 80016ee:	4858      	ldr	r0, [pc, #352]	; (8001850 <MX_GPIO_Init+0x2ec>)
 80016f0:	f003 ffa4 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80016f4:	2330      	movs	r3, #48	; 0x30
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001704:	2306      	movs	r3, #6
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170c:	4619      	mov	r1, r3
 800170e:	484a      	ldr	r0, [pc, #296]	; (8001838 <MX_GPIO_Init+0x2d4>)
 8001710:	f003 fcdc 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001714:	230c      	movs	r3, #12
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4843      	ldr	r0, [pc, #268]	; (8001838 <MX_GPIO_Init+0x2d4>)
 800172c:	f003 fcce 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001730:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001742:	2308      	movs	r3, #8
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	483d      	ldr	r0, [pc, #244]	; (8001844 <MX_GPIO_Init+0x2e0>)
 800174e:	f003 fcbd 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001752:	2308      	movs	r3, #8
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001762:	2306      	movs	r3, #6
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	4619      	mov	r1, r3
 800176c:	4836      	ldr	r0, [pc, #216]	; (8001848 <MX_GPIO_Init+0x2e4>)
 800176e:	f003 fcad 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001772:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001784:	230c      	movs	r3, #12
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	4831      	ldr	r0, [pc, #196]	; (8001854 <MX_GPIO_Init+0x2f0>)
 8001790:	f003 fc9c 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4827      	ldr	r0, [pc, #156]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80017aa:	f003 fc8f 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017be:	230a      	movs	r3, #10
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <MX_GPIO_Init+0x2e4>)
 80017ca:	f003 fc7f 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017de:	2306      	movs	r3, #6
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4814      	ldr	r0, [pc, #80]	; (800183c <MX_GPIO_Init+0x2d8>)
 80017ea:	f003 fc6f 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80017ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001800:	230a      	movs	r3, #10
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_GPIO_Init+0x2ec>)
 800180c:	f003 fc5e 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001810:	2330      	movs	r3, #48	; 0x30
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001814:	2311      	movs	r3, #17
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_GPIO_Init+0x2d8>)
 8001828:	f003 fc50 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800182c:	2308      	movs	r3, #8
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001830:	2311      	movs	r3, #17
 8001832:	e011      	b.n	8001858 <MX_GPIO_Init+0x2f4>
 8001834:	40023800 	.word	0x40023800
 8001838:	40021000 	.word	0x40021000
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40022800 	.word	0x40022800
 8001844:	40021800 	.word	0x40021800
 8001848:	40020400 	.word	0x40020400
 800184c:	40021c00 	.word	0x40021c00
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	4863      	ldr	r0, [pc, #396]	; (80019f8 <MX_GPIO_Init+0x494>)
 800186a:	f003 fc2f 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800186e:	2304      	movs	r3, #4
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800187e:	230c      	movs	r3, #12
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	485c      	ldr	r0, [pc, #368]	; (80019fc <MX_GPIO_Init+0x498>)
 800188a:	f003 fc1f 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4857      	ldr	r0, [pc, #348]	; (8001a00 <MX_GPIO_Init+0x49c>)
 80018a4:	f003 fc12 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80018a8:	2330      	movs	r3, #48	; 0x30
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b8:	2304      	movs	r3, #4
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4850      	ldr	r0, [pc, #320]	; (8001a04 <MX_GPIO_Init+0x4a0>)
 80018c4:	f003 fc02 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80018d8:	2306      	movs	r3, #6
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4849      	ldr	r0, [pc, #292]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 80018e4:	f003 fbf2 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4842      	ldr	r0, [pc, #264]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 8001900:	f003 fbe4 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001904:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001916:	2309      	movs	r3, #9
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	483a      	ldr	r0, [pc, #232]	; (8001a0c <MX_GPIO_Init+0x4a8>)
 8001922:	f003 fbd3 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001938:	230a      	movs	r3, #10
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4832      	ldr	r0, [pc, #200]	; (8001a0c <MX_GPIO_Init+0x4a8>)
 8001944:	f003 fbc2 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001948:	2305      	movs	r3, #5
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	482c      	ldr	r0, [pc, #176]	; (8001a10 <MX_GPIO_Init+0x4ac>)
 8001960:	f003 fbb4 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001976:	2302      	movs	r3, #2
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	481e      	ldr	r0, [pc, #120]	; (80019fc <MX_GPIO_Init+0x498>)
 8001982:	f003 fba3 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001986:	2304      	movs	r3, #4
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <MX_GPIO_Init+0x4a4>)
 800199a:	f003 fb97 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800199e:	2320      	movs	r3, #32
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_GPIO_Init+0x4b0>)
 80019b4:	f003 fb8a 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2302      	movs	r3, #2
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_GPIO_Init+0x4a0>)
 80019d0:	f003 fb7c 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019d4:	2308      	movs	r3, #8
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_GPIO_Init+0x49c>)
 80019ec:	f003 fb6e 	bl	80050cc <HAL_GPIO_Init>

}
 80019f0:	bf00      	nop
 80019f2:	3740      	adds	r7, #64	; 0x40
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40022800 	.word	0x40022800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40021c00 	.word	0x40021c00
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40022400 	.word	0x40022400

08001a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_I2C1_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a56:	f003 fe0b 	bl	8005670 <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 fc52 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000168 	.word	0x20000168
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	00061a80 	.word	0x00061a80

08001a74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_I2C_MspInit+0x104>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d16c      	bne.n	8001b70 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

    /* Perform 10 pulses on SCL to unlock I2C devices if previous I2C transaction aborted.*/
    /* This configuration is needed when using touch screen controller FT6336U */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a9c:	2311      	movs	r3, #17
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct );
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4832      	ldr	r0, [pc, #200]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ab4:	f003 fb0a 	bl	80050cc <HAL_GPIO_Init>
    for(uint8_t count = 10; count > 0; count-- )
 8001ab8:	230a      	movs	r3, #10
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001abe:	e016      	b.n	8001aee <HAL_I2C_MspInit+0x7a>
    {
      HAL_GPIO_WritePin(GPIOB, I2C1_SCL_Pin, GPIO_PIN_SET );
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac6:	482d      	ldr	r0, [pc, #180]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ac8:	f003 fdb8 	bl	800563c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f001 fb75 	bl	80031bc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, I2C1_SCL_Pin, GPIO_PIN_RESET );
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad8:	4828      	ldr	r0, [pc, #160]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001ada:	f003 fdaf 	bl	800563c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f001 fb6c 	bl	80031bc <HAL_Delay>
    for(uint8_t count = 10; count > 0; count-- )
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e4      	bne.n	8001ac0 <HAL_I2C_MspInit+0x4c>
    }
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b24:	2304      	movs	r3, #4
 8001b26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <HAL_I2C_MspInit+0x108>)
 8001b30:	f003 facc 	bl	80050cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_I2C_MspInit+0x10c>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	201f      	movs	r0, #31
 8001b56:	f001 fc54 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b5a:	201f      	movs	r0, #31
 8001b5c:	f001 fc6d 	bl	800343a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2020      	movs	r0, #32
 8001b66:	f001 fc4c 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f001 fc65 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_I2C_MspDeInit+0x48>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d115      	bne.n	8001bc2 <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_I2C_MspDeInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_I2C_MspDeInit+0x4c>)
 8001b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <HAL_I2C_MspDeInit+0x50>)
 8001ba8:	f003 fc3c 	bl	8005424 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb0:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <HAL_I2C_MspDeInit+0x50>)
 8001bb2:	f003 fc37 	bl	8005424 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001bb6:	201f      	movs	r0, #31
 8001bb8:	f001 fc4d 	bl	8003456 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001bbc:	2020      	movs	r0, #32
 8001bbe:	f001 fc4a 	bl	8003456 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <i2c1_error>:

/* USER CODE BEGIN 1 */
void i2c1_error(uint8_t Addr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_DeInit(&hi2c1);
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <i2c1_error+0x1c>)
 8001be4:	f003 fe88 	bl	80058f8 <HAL_I2C_DeInit>

  MX_I2C1_Init();
 8001be8:	f7ff ff16 	bl	8001a18 <MX_I2C1_Init>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000168 	.word	0x20000168

08001bf8 <lcd_change_rect_color>:
    LCD_COLOR_WHITE  ,
};
static const uint32_t * my_image = vieworks_logo;

void lcd_change_rect_color(uint16_t touch_x, uint16_t touch_y)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460a      	mov	r2, r1
 8001c02:	80fb      	strh	r3, [r7, #6]
 8001c04:	4613      	mov	r3, r2
 8001c06:	80bb      	strh	r3, [r7, #4]
    uint8_t rect = 0xff;
 8001c08:	23ff      	movs	r3, #255	; 0xff
 8001c0a:	73fb      	strb	r3, [r7, #15]
    if (touch_x < 400)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c12:	d208      	bcs.n	8001c26 <lcd_change_rect_color+0x2e>
    {
        if (touch_y < 240)
 8001c14:	88bb      	ldrh	r3, [r7, #4]
 8001c16:	2bef      	cmp	r3, #239	; 0xef
 8001c18:	d802      	bhi.n	8001c20 <lcd_change_rect_color+0x28>
        {
            rect = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e00a      	b.n	8001c36 <lcd_change_rect_color+0x3e>
        }
        else
        {
            rect = 2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e007      	b.n	8001c36 <lcd_change_rect_color+0x3e>
        }
    }
    else
    {
        if (touch_y < 240)
 8001c26:	88bb      	ldrh	r3, [r7, #4]
 8001c28:	2bef      	cmp	r3, #239	; 0xef
 8001c2a:	d802      	bhi.n	8001c32 <lcd_change_rect_color+0x3a>
        {
            rect = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e001      	b.n	8001c36 <lcd_change_rect_color+0x3e>
        }
        else
        {
            rect = 3;
 8001c32:	2303      	movs	r3, #3
 8001c34:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rect != 0xff)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2bff      	cmp	r3, #255	; 0xff
 8001c3a:	d01f      	beq.n	8001c7c <lcd_change_rect_color+0x84>
    {
        uint32_t color = LCD_COLOR_BLACK;
 8001c3c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001c40:	60bb      	str	r3, [r7, #8]
        if (++color_rectangles[rect] == COLOR_STEP_MAX)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <lcd_change_rect_color+0x8c>)
 8001c46:	5cd2      	ldrb	r2, [r2, r3]
 8001c48:	3201      	adds	r2, #1
 8001c4a:	b2d1      	uxtb	r1, r2
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <lcd_change_rect_color+0x8c>)
 8001c4e:	54d1      	strb	r1, [r2, r3]
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <lcd_change_rect_color+0x8c>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d104      	bne.n	8001c62 <lcd_change_rect_color+0x6a>
        {
            color_rectangles[rect] = COLOR_STEP_BLACK;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <lcd_change_rect_color+0x8c>)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	54d1      	strb	r1, [r2, r3]
 8001c60:	e007      	b.n	8001c72 <lcd_change_rect_color+0x7a>
        }
        else
        {
            color = colors[color_rectangles[rect]];
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <lcd_change_rect_color+0x8c>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <lcd_change_rect_color+0x90>)
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	60bb      	str	r3, [r7, #8]
        }
        lcd_control_change_sdram(color, rect);
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68b8      	ldr	r0, [r7, #8]
 8001c78:	f000 f89a 	bl	8001db0 <lcd_control_change_sdram>
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000028 	.word	0x20000028
 8001c88:	080a2048 	.word	0x080a2048

08001c8c <lcd_control_draw_rectangle_value>:

void lcd_control_draw_rectangle_value(uint32_t layer_index, void* p_dst, uint32_t x_size, uint32_t y_size, uint32_t off_line, uint32_t value)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001c9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ca0:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = off_line;
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001cae:	4812      	ldr	r0, [pc, #72]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001cb0:	f001 fc8b 	bl	80035ca <HAL_DMA2D_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <lcd_control_draw_rectangle_value+0x32>
  {
    Error_Handler();
 8001cba:	f000 fb25 	bl	8002308 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001cc2:	f001 fddf 	bl	8003884 <HAL_DMA2D_ConfigLayer>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <lcd_control_draw_rectangle_value+0x44>
  {
    Error_Handler();
 8001ccc:	f000 fb1c 	bl	8002308 <Error_Handler>
  }

  if (HAL_DMA2D_Start(&hdma2d, value, (uint32_t)p_dst, x_size, y_size) == HAL_OK)
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001cdc:	f001 fcbe 	bl	800365c <HAL_DMA2D_Start>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <lcd_control_draw_rectangle_value+0x62>
  {
      /* Polling For DMA transfer */  
      HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8001ce6:	2164      	movs	r1, #100	; 0x64
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <lcd_control_draw_rectangle_value+0x6c>)
 8001cea:	f001 fce2 	bl	80036b2 <HAL_DMA2D_PollForTransfer>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200000bc 	.word	0x200000bc

08001cfc <color_write>:

static void color_write(uint8_t sector, uint32_t address, uint32_t color)
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	73fb      	strb	r3, [r7, #15]
    printf("sector %d, address 0x%08lx, color 0x%08lx \r\n", sector, address, color);
 8001d0a:	7bf9      	ldrb	r1, [r7, #15]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4824      	ldr	r0, [pc, #144]	; (8001da4 <color_write+0xa8>)
 8001d12:	f008 fe83 	bl	800aa1c <iprintf>
    HAL_StatusTypeDef status;
    uint32_t error = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    FLASH_EraseInitTypeDef eraseInitStruct;

    HAL_FLASH_Unlock();
 8001d1a:	f002 ff25 	bl	8004b68 <HAL_FLASH_Unlock>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Sector = sector;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbSectors = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &error);
 8001d2e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 f887 	bl	8004e4c <HAL_FLASHEx_Erase>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (status != HAL_OK)
 8001d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <color_write+0x5c>
    {
        printf("[Error] Flash Erase \r\n");
 8001d4c:	4816      	ldr	r0, [pc, #88]	; (8001da8 <color_write+0xac>)
 8001d4e:	f008 feeb 	bl	800ab28 <puts>
        HAL_FLASH_Lock();
 8001d52:	f002 ff2b 	bl	8004bac <HAL_FLASH_Lock>
 8001d56:	e022      	b.n	8001d9e <color_write+0xa2>
        return;
    }

    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5c:	e017      	b.n	8001d8e <color_write+0x92>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, color);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	461c      	mov	r4, r3
 8001d64:	4615      	mov	r5, r2
 8001d66:	4622      	mov	r2, r4
 8001d68:	462b      	mov	r3, r5
 8001d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f002 fea7 	bl	8004ac0 <HAL_FLASH_Program>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (status != HAL_OK)
 8001d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <color_write+0x8c>
        {
            printf("[Error] Flash write \r\n");
 8001d80:	480a      	ldr	r0, [pc, #40]	; (8001dac <color_write+0xb0>)
 8001d82:	f008 fed1 	bl	800ab28 <puts>
            break;
 8001d86:	e008      	b.n	8001d9a <color_write+0x9e>
    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3e1      	bcc.n	8001d5e <color_write+0x62>
        }
    }

    HAL_FLASH_Lock();
 8001d9a:	f002 ff07 	bl	8004bac <HAL_FLASH_Lock>
}
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	0800bedc 	.word	0x0800bedc
 8001da8:	0800bf0c 	.word	0x0800bf0c
 8001dac:	0800bf24 	.word	0x0800bf24

08001db0 <lcd_control_change_sdram>:

void lcd_control_change_sdram(uint32_t color, uint8_t sector)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
    uint32_t address_offset = SDRAM_ADDRESS; // hltdc.LayerCfg[layer_index].FBStartAdress;
 8001dbc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001dc0:	60fb      	str	r3, [r7, #12]
    address_offset += (uint32_t)((800*(480/2)*(sector/2)+(800/2)*(sector%2))*4);
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <lcd_control_change_sdram+0x5c>)
 8001dcc:	fb03 f202 	mul.w	r2, r3, r2
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
            address = address_offset + 800*y + x;
            *(uint32_t *)address = color;
        }
    }
#else
    lcd_control_draw_rectangle_value(0, (uint32_t *)address_offset, 400, 240, 800 - 400, color);
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	23f0      	movs	r3, #240	; 0xf0
 8001df8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ff45 	bl	8001c8c <lcd_control_draw_rectangle_value>
#endif
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	0002ee00 	.word	0x0002ee00

08001e10 <lcd_control_change_flash>:


void lcd_control_change_flash(uint32_t color, bool tmp)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
    if (!tmp) // sector 5~11 (128K*7)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01c      	beq.n	8001e62 <lcd_control_change_flash+0x52>
    {
        uint32_t address_offset = 0x08020000;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <lcd_control_change_flash+0x94>)
 8001e2a:	60fb      	str	r3, [r7, #12]
        uint32_t address = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
        for (int sector=5; sector<7; sector+=1)
 8001e30:	2305      	movs	r3, #5
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	e011      	b.n	8001e5a <lcd_control_change_flash+0x4a>
        {
            address = address_offset + sector*(0x400*128);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	045b      	lsls	r3, r3, #17
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
            color_write(sector+5, address, color);
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3305      	adds	r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff54 	bl	8001cfc <color_write>
        for (int sector=5; sector<7; sector+=1)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	ddea      	ble.n	8001e36 <lcd_control_change_flash+0x26>
        {
            address = address_offset + sector*(0x400*128);
            color_write(sector+17, address, color);
        }
    }
}
 8001e60:	e01b      	b.n	8001e9a <lcd_control_change_flash+0x8a>
        uint32_t address_offset = 0x08120000;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <lcd_control_change_flash+0x98>)
 8001e64:	617b      	str	r3, [r7, #20]
        uint32_t address = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
        for (int sector=0; sector<7; sector+=1)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e011      	b.n	8001e94 <lcd_control_change_flash+0x84>
            address = address_offset + sector*(0x400*128);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	045b      	lsls	r3, r3, #17
 8001e74:	461a      	mov	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4413      	add	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
            color_write(sector+17, address, color);
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3311      	adds	r3, #17
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff37 	bl	8001cfc <color_write>
        for (int sector=0; sector<7; sector+=1)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	ddea      	ble.n	8001e70 <lcd_control_change_flash+0x60>
}
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	08020000 	.word	0x08020000
 8001ea8:	08120000 	.word	0x08120000

08001eac <NT35510_IO_Delay>:

void NT35510_IO_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    HAL_Delay(Delay);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f981 	bl	80031bc <HAL_Delay>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <lcd_reset>:

static void lcd_reset(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <lcd_reset+0x28>)
 8001ece:	f003 fbb5 	bl	800563c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001ed2:	2014      	movs	r0, #20
 8001ed4:	f001 f972 	bl	80031bc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <lcd_reset+0x28>)
 8001ede:	f003 fbad 	bl	800563c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001ee2:	2014      	movs	r0, #20
 8001ee4:	f001 f96a 	bl	80031bc <HAL_Delay>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021c00 	.word	0x40021c00

08001ef0 <lcd_control_init>:

void lcd_control_init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    lcd_reset();
 8001ef4:	f7ff ffe6 	bl	8001ec4 <lcd_reset>
    MX_DSIHOST_DSI_Init();
 8001ef8:	f7fe ff04 	bl	8000d04 <MX_DSIHOST_DSI_Init>
    MX_LTDC_Init();
 8001efc:	f000 f82e 	bl	8001f5c <MX_LTDC_Init>
    dsi_start(true);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff f86f 	bl	8000fe4 <dsi_start>

    NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 fa03 	bl	8002314 <NT35510_Init>

    MX_FMC_Init();
 8001f0e:	f7ff f8e5 	bl	80010dc <MX_FMC_Init>

    // ltdc_change_layer(0, *(uint32_t *)my_image);
    ltdc_change_layer(0, *(uint32_t *)my_image);
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <lcd_control_init+0x68>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f8ee 	bl	80020fc <ltdc_change_layer>
    lcd_control_change_sdram(LCD_COLOR_CYAN, 0);
 8001f20:	2100      	movs	r1, #0
 8001f22:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001f26:	f7ff ff43 	bl	8001db0 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_MAGENTA, 1);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001f30:	f7ff ff3e 	bl	8001db0 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_YELLOW, 2);
 8001f34:	2102      	movs	r1, #2
 8001f36:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001f3a:	f7ff ff39 	bl	8001db0 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_BLACK, 3);
 8001f3e:	2103      	movs	r1, #3
 8001f40:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f44:	f7ff ff34 	bl	8001db0 <lcd_control_change_sdram>
    ltdc_change_layer(0, SDRAM_ADDRESS);
 8001f48:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 f8d5 	bl	80020fc <ltdc_change_layer>
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000002c 	.word	0x2000002c

08001f5c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	; 0x38
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2234      	movs	r2, #52	; 0x34
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fd4f 	bl	800aa0c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <MX_LTDC_Init+0x100>)
 8001f70:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <MX_LTDC_Init+0x104>)
 8001f72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <MX_LTDC_Init+0x100>)
 8001f76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f7a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <MX_LTDC_Init+0x100>)
 8001f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f82:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <MX_LTDC_Init+0x100>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <MX_LTDC_Init+0x100>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <MX_LTDC_Init+0x100>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 119;
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <MX_LTDC_Init+0x100>)
 8001f98:	2277      	movs	r2, #119	; 0x77
 8001f9a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 35;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <MX_LTDC_Init+0x100>)
 8001f9e:	2223      	movs	r2, #35	; 0x23
 8001fa0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 269;
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <MX_LTDC_Init+0x100>)
 8001fa4:	f240 120d 	movw	r2, #269	; 0x10d
 8001fa8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 835;
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <MX_LTDC_Init+0x100>)
 8001fac:	f240 3243 	movw	r2, #835	; 0x343
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 749;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <MX_LTDC_Init+0x100>)
 8001fb4:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 869;
 8001fba:	4b28      	ldr	r3, [pc, #160]	; (800205c <MX_LTDC_Init+0x100>)
 8001fbc:	f240 3265 	movw	r2, #869	; 0x365
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 899;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <MX_LTDC_Init+0x100>)
 8001fc4:	f240 3283 	movw	r2, #899	; 0x383
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <MX_LTDC_Init+0x100>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <MX_LTDC_Init+0x100>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <MX_LTDC_Init+0x100>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001fe2:	481e      	ldr	r0, [pc, #120]	; (800205c <MX_LTDC_Init+0x100>)
 8001fe4:	f006 f80e 	bl	8008004 <HAL_LTDC_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8001fee:	f000 f98b 	bl	8002308 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001ff6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001ffa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8002000:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002004:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800200a:	23ff      	movs	r3, #255	; 0xff
 800200c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002012:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002016:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002018:	2307      	movs	r3, #7
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x08020000;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_LTDC_Init+0x108>)
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8002020:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8002026:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_LTDC_Init+0x100>)
 8002046:	f006 f965 	bl	8008314 <HAL_LTDC_ConfigLayer>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8002050:	f000 f95a 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3738      	adds	r7, #56	; 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200001bc 	.word	0x200001bc
 8002060:	40016800 	.word	0x40016800
 8002064:	08020000 	.word	0x08020000

08002068 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b092      	sub	sp, #72	; 0x48
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	223c      	movs	r2, #60	; 0x3c
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f008 fcc7 	bl	800aa0c <memset>
  if(ltdcHandle->Instance==LTDC)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_LTDC_MspInit+0x8c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d130      	bne.n	80020ea <HAL_LTDC_MspInit+0x82>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002088:	2308      	movs	r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800208c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002090:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002092:	2307      	movs	r3, #7
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	4618      	mov	r0, r3
 80020a0:	f006 fd7e 	bl	8008ba0 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80020aa:	f000 f92d 	bl	8002308 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_LTDC_MspInit+0x90>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_LTDC_MspInit+0x90>)
 80020b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_LTDC_MspInit+0x90>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2058      	movs	r0, #88	; 0x58
 80020d0:	f001 f997 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020d4:	2058      	movs	r0, #88	; 0x58
 80020d6:	f001 f9b0 	bl	800343a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2059      	movs	r0, #89	; 0x59
 80020e0:	f001 f98f 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80020e4:	2059      	movs	r0, #89	; 0x59
 80020e6:	f001 f9a8 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	3748      	adds	r7, #72	; 0x48
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40016800 	.word	0x40016800
 80020f8:	40023800 	.word	0x40023800

080020fc <ltdc_change_layer>:
  }
}

/* USER CODE BEGIN 1 */
void ltdc_change_layer(uint16_t LayerIndex, uint32_t FB_Address)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b090      	sub	sp, #64	; 0x40
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	80fb      	strh	r3, [r7, #6]
    LTDC_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = NT35510_800X480_WIDTH;
 800210c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002110:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = NT35510_800X480_HEIGHT;
 8002116:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800211a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002124:	23ff      	movs	r3, #255	; 0xff
 8002126:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800213e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002144:	2307      	movs	r3, #7
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = NT35510_800X480_WIDTH;
 8002148:	f44f 7348 	mov.w	r3, #800	; 0x320
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = NT35510_800X480_HEIGHT;
 800214e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex); 
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <ltdc_change_layer+0x70>)
 800215e:	f006 f8d9 	bl	8008314 <HAL_LTDC_ConfigLayer>
}
 8002162:	bf00      	nop
 8002164:	3740      	adds	r7, #64	; 0x40
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200001bc 	.word	0x200001bc

08002170 <HAL_LTDC_ErrorCallback>:

volatile uint32_t ltdc_err = 0;
void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  ltdc_err = hltdc->ErrorCode;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_LTDC_ErrorCallback+0x20>)
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000264 	.word	0x20000264

08002194 <ltdc_get_err>:

void ltdc_get_err(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  printf("[LTDC] err: 0x%08lx \r\n", ltdc_err);
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <ltdc_get_err+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <ltdc_get_err+0x18>)
 80021a0:	f008 fc3c 	bl	800aa1c <iprintf>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000264 	.word	0x20000264
 80021ac:	0800bf3c 	.word	0x0800bf3c

080021b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b4:	f000 ff90 	bl	80030d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b8:	f000 f832 	bl	8002220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021bc:	f7ff f9d2 	bl	8001564 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80021c0:	f000 fe2e 	bl	8002e20 <MX_USART3_UART_Init>
  MX_DMA2D_Init();
 80021c4:	f7fe fd4a 	bl	8000c5c <MX_DMA2D_Init>
  MX_I2C1_Init();
 80021c8:	f7ff fc26 	bl	8001a18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 80021cc:	4910      	ldr	r1, [pc, #64]	; (8002210 <main+0x60>)
 80021ce:	4811      	ldr	r0, [pc, #68]	; (8002214 <main+0x64>)
 80021d0:	f008 fc24 	bl	800aa1c <iprintf>
  lcd_control_init();
 80021d4:	f7ff fe8c 	bl	8001ef0 <lcd_control_init>
  HAL_Delay(1000);
 80021d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021dc:	f000 ffee 	bl	80031bc <HAL_Delay>
  if (ts_init(800, 400))
 80021e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80021e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021e8:	f000 fc0a 	bl	8002a00 <ts_init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <main+0x48>
  {
    printf("TS Init Fail \r\n");
 80021f2:	4809      	ldr	r0, [pc, #36]	; (8002218 <main+0x68>)
 80021f4:	f008 fc98 	bl	800ab28 <puts>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(">>> Init Success !!! \r\n");
 80021f8:	4808      	ldr	r0, [pc, #32]	; (800221c <main+0x6c>)
 80021fa:	f008 fc95 	bl	800ab28 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 80021fe:	f000 ff1b 	bl	8003038 <uart_check_cmd_recv>
    ts_process();
 8002202:	f000 fbc1 	bl	8002988 <ts_process>
    HAL_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 ffd8 	bl	80031bc <HAL_Delay>
    uart_check_cmd_recv();
 800220c:	e7f7      	b.n	80021fe <main+0x4e>
 800220e:	bf00      	nop
 8002210:	0800bf54 	.word	0x0800bf54
 8002214:	0800bf5c 	.word	0x0800bf5c
 8002218:	0800bf94 	.word	0x0800bf94
 800221c:	0800bfa4 	.word	0x0800bfa4

08002220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b094      	sub	sp, #80	; 0x50
 8002224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	2234      	movs	r2, #52	; 0x34
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f008 fbec 	bl	800aa0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <SystemClock_Config+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a2c      	ldr	r2, [pc, #176]	; (8002300 <SystemClock_Config+0xe0>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <SystemClock_Config+0xe0>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <SystemClock_Config+0xe4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <SystemClock_Config+0xe4>)
 800226a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <SystemClock_Config+0xe4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800227c:	2301      	movs	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002284:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002286:	2302      	movs	r3, #2
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002290:	2308      	movs	r3, #8
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002294:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800229e:	2304      	movs	r3, #4
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80022a2:	2306      	movs	r3, #6
 80022a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	4618      	mov	r0, r3
 80022ac:	f006 feb6 	bl	800901c <HAL_RCC_OscConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022b6:	f000 f827 	bl	8002308 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022ba:	f006 fa01 	bl	80086c0 <HAL_PWREx_EnableOverDrive>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80022c4:	f000 f820 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c8:	230f      	movs	r3, #15
 80022ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022cc:	2302      	movs	r3, #2
 80022ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	2105      	movs	r1, #5
 80022e6:	4618      	mov	r0, r3
 80022e8:	f006 fa3a 	bl	8008760 <HAL_RCC_ClockConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80022f2:	f000 f809 	bl	8002308 <Error_Handler>
  }
}
 80022f6:	bf00      	nop
 80022f8:	3750      	adds	r7, #80	; 0x50
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0b2      	sub	sp, #200	; 0xc8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 800231e:	2078      	movs	r0, #120	; 0x78
 8002320:	f7ff fdc4 	bl	8001eac <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8002324:	4ac8      	ldr	r2, [pc, #800]	; (8002648 <NT35510_Init+0x334>)
 8002326:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800232a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800232e:	6018      	str	r0, [r3, #0]
 8002330:	3304      	adds	r3, #4
 8002332:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8002334:	4bc5      	ldr	r3, [pc, #788]	; (800264c <NT35510_Init+0x338>)
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800233a:	4bc5      	ldr	r3, [pc, #788]	; (8002650 <NT35510_Init+0x33c>)
 800233c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8002340:	4bc4      	ldr	r3, [pc, #784]	; (8002654 <NT35510_Init+0x340>)
 8002342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8002346:	4bc4      	ldr	r3, [pc, #784]	; (8002658 <NT35510_Init+0x344>)
 8002348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 800234c:	4bc3      	ldr	r3, [pc, #780]	; (800265c <NT35510_Init+0x348>)
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8002352:	4bc3      	ldr	r3, [pc, #780]	; (8002660 <NT35510_Init+0x34c>)
 8002354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8002358:	f240 13bf 	movw	r3, #447	; 0x1bf
 800235c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8002360:	4bc0      	ldr	r3, [pc, #768]	; (8002664 <NT35510_Init+0x350>)
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8002366:	4bc0      	ldr	r3, [pc, #768]	; (8002668 <NT35510_Init+0x354>)
 8002368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800236c:	4bbf      	ldr	r3, [pc, #764]	; (800266c <NT35510_Init+0x358>)
 800236e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8002372:	4bbf      	ldr	r3, [pc, #764]	; (8002670 <NT35510_Init+0x35c>)
 8002374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8002378:	4bbe      	ldr	r3, [pc, #760]	; (8002674 <NT35510_Init+0x360>)
 800237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800237e:	4bbe      	ldr	r3, [pc, #760]	; (8002678 <NT35510_Init+0x364>)
 8002380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8002384:	4abd      	ldr	r2, [pc, #756]	; (800267c <NT35510_Init+0x368>)
 8002386:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4611      	mov	r1, r2
 800238e:	8019      	strh	r1, [r3, #0]
 8002390:	3302      	adds	r3, #2
 8002392:	0c12      	lsrs	r2, r2, #16
 8002394:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8002396:	4aba      	ldr	r2, [pc, #744]	; (8002680 <NT35510_Init+0x36c>)
 8002398:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800239c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a0:	6018      	str	r0, [r3, #0]
 80023a2:	3304      	adds	r3, #4
 80023a4:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 80023a6:	4ab7      	ldr	r2, [pc, #732]	; (8002684 <NT35510_Init+0x370>)
 80023a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4611      	mov	r1, r2
 80023b0:	8019      	strh	r1, [r3, #0]
 80023b2:	3302      	adds	r3, #2
 80023b4:	0c12      	lsrs	r2, r2, #16
 80023b6:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 80023b8:	f240 33b6 	movw	r3, #950	; 0x3b6
 80023bc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 80023c0:	f245 13b5 	movw	r3, #20917	; 0x51b5
 80023c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80023c8:	4aaf      	ldr	r2, [pc, #700]	; (8002688 <NT35510_Init+0x374>)
 80023ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4611      	mov	r1, r2
 80023d2:	8019      	strh	r1, [r3, #0]
 80023d4:	3302      	adds	r3, #2
 80023d6:	0c12      	lsrs	r2, r2, #16
 80023d8:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80023da:	4aac      	ldr	r2, [pc, #688]	; (800268c <NT35510_Init+0x378>)
 80023dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e4:	6018      	str	r0, [r3, #0]
 80023e6:	3304      	adds	r3, #4
 80023e8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80023ea:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 80023ee:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80023f0:	4ba7      	ldr	r3, [pc, #668]	; (8002690 <NT35510_Init+0x37c>)
 80023f2:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80023f4:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80023f8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80023fc:	2336      	movs	r3, #54	; 0x36
 80023fe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8002402:	4aa4      	ldr	r2, [pc, #656]	; (8002694 <NT35510_Init+0x380>)
 8002404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	6018      	str	r0, [r3, #0]
 800240e:	3304      	adds	r3, #4
 8002410:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8002412:	4aa1      	ldr	r2, [pc, #644]	; (8002698 <NT35510_Init+0x384>)
 8002414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800241c:	6018      	str	r0, [r3, #0]
 800241e:	3304      	adds	r3, #4
 8002420:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8002422:	f246 0336 	movw	r3, #24630	; 0x6036
 8002426:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 800242a:	4a9c      	ldr	r2, [pc, #624]	; (800269c <NT35510_Init+0x388>)
 800242c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002434:	6018      	str	r0, [r3, #0]
 8002436:	3304      	adds	r3, #4
 8002438:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 800243a:	4a99      	ldr	r2, [pc, #612]	; (80026a0 <NT35510_Init+0x38c>)
 800243c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002444:	6018      	str	r0, [r3, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 800244a:	2335      	movs	r3, #53	; 0x35
 800244c:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 800244e:	2311      	movs	r3, #17
 8002450:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8002452:	2329      	movs	r3, #41	; 0x29
 8002454:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8002456:	f647 7351 	movw	r3, #32593	; 0x7f51
 800245a:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 800245c:	f642 4353 	movw	r3, #11347	; 0x2c53
 8002460:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8002462:	f240 2355 	movw	r3, #597	; 0x255
 8002466:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8002468:	f64f 735e 	movw	r3, #65374	; 0xff5e
 800246c:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 800246e:	232c      	movs	r3, #44	; 0x2c
 8002470:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8002472:	f245 533a 	movw	r3, #21818	; 0x553a
 8002476:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8002478:	f247 733a 	movw	r3, #30522	; 0x773a
 800247c:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800247e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002482:	4619      	mov	r1, r3
 8002484:	2005      	movs	r0, #5
 8002486:	f7fe fd83 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 800248a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800248e:	4619      	mov	r1, r3
 8002490:	2003      	movs	r0, #3
 8002492:	f7fe fd7d 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8002496:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800249a:	4619      	mov	r1, r3
 800249c:	2003      	movs	r0, #3
 800249e:	f7fe fd77 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 80024a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024a6:	4619      	mov	r1, r3
 80024a8:	2003      	movs	r0, #3
 80024aa:	f7fe fd71 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 80024ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b2:	4619      	mov	r1, r3
 80024b4:	2003      	movs	r0, #3
 80024b6:	f7fe fd6b 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 80024ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024be:	4619      	mov	r1, r3
 80024c0:	2003      	movs	r0, #3
 80024c2:	f7fe fd65 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 80024c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024ca:	4619      	mov	r1, r3
 80024cc:	2003      	movs	r0, #3
 80024ce:	f7fe fd5f 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 80024d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d6:	4619      	mov	r1, r3
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe fd59 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 80024de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024e2:	4619      	mov	r1, r3
 80024e4:	2003      	movs	r0, #3
 80024e6:	f7fe fd53 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 80024ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ee:	4619      	mov	r1, r3
 80024f0:	2003      	movs	r0, #3
 80024f2:	f7fe fd4d 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 80024f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024fa:	4619      	mov	r1, r3
 80024fc:	2003      	movs	r0, #3
 80024fe:	f7fe fd47 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8002502:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002506:	4619      	mov	r1, r3
 8002508:	2003      	movs	r0, #3
 800250a:	f7fe fd41 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800250e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002512:	4619      	mov	r1, r3
 8002514:	2003      	movs	r0, #3
 8002516:	f7fe fd3b 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 800251a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800251e:	4619      	mov	r1, r3
 8002520:	2003      	movs	r0, #3
 8002522:	f7fe fd35 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8002526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800252a:	4619      	mov	r1, r3
 800252c:	2002      	movs	r0, #2
 800252e:	f7fe fd2f 	bl	8000f90 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8002532:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002536:	4619      	mov	r1, r3
 8002538:	2005      	movs	r0, #5
 800253a:	f7fe fd29 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800253e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002542:	4619      	mov	r1, r3
 8002544:	2002      	movs	r0, #2
 8002546:	f7fe fd23 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 800254a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800254e:	4619      	mov	r1, r3
 8002550:	2001      	movs	r0, #1
 8002552:	f7fe fd1d 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8002556:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800255a:	4619      	mov	r1, r3
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe fd17 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8002562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002566:	4619      	mov	r1, r3
 8002568:	2002      	movs	r0, #2
 800256a:	f7fe fd11 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 800256e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002572:	4619      	mov	r1, r3
 8002574:	2004      	movs	r0, #4
 8002576:	f7fe fd0b 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 800257a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800257e:	4619      	mov	r1, r3
 8002580:	2003      	movs	r0, #3
 8002582:	f7fe fd05 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8002586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800258a:	4619      	mov	r1, r3
 800258c:	2003      	movs	r0, #3
 800258e:	f7fe fcff 	bl	8000f90 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8002592:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002596:	4619      	mov	r1, r3
 8002598:	2001      	movs	r0, #1
 800259a:	f7fe fcf9 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800259e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025a2:	4619      	mov	r1, r3
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe fcf3 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fced 	bl	8000f90 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80025b6:	20c8      	movs	r0, #200	; 0xc8
 80025b8:	f7ff fc78 	bl	8001eac <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d112      	bne.n	80025e8 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 80025c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025c6:	4619      	mov	r1, r3
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7fe fce1 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 80025ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025d2:	4619      	mov	r1, r3
 80025d4:	2004      	movs	r0, #4
 80025d6:	f7fe fcdb 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80025da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025de:	4619      	mov	r1, r3
 80025e0:	2004      	movs	r0, #4
 80025e2:	f7fe fcd5 	bl	8000f90 <DSI_IO_WriteCmd>
 80025e6:	e011      	b.n	800260c <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80025e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ec:	4619      	mov	r1, r3
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe fcce 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80025f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025f8:	4619      	mov	r1, r3
 80025fa:	2004      	movs	r0, #4
 80025fc:	f7fe fcc8 	bl	8000f90 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8002600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002604:	4619      	mov	r1, r3
 8002606:	2004      	movs	r0, #4
 8002608:	f7fe fcc2 	bl	8000f90 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	4619      	mov	r1, r3
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fcbc 	bl	8000f90 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8002618:	2078      	movs	r0, #120	; 0x78
 800261a:	f7ff fc47 	bl	8001eac <NT35510_IO_Delay>

  switch(ColorCoding)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <NT35510_Init+0x324>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d13c      	bne.n	80026a4 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4619      	mov	r1, r3
 8002630:	2001      	movs	r0, #1
 8002632:	f7fe fcad 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 8002636:	e03c      	b.n	80026b2 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4619      	mov	r1, r3
 800263e:	2001      	movs	r0, #1
 8002640:	f7fe fca6 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 8002644:	e035      	b.n	80026b2 <NT35510_Init+0x39e>
 8002646:	bf00      	nop
 8002648:	0800bfbc 	.word	0x0800bfbc
 800264c:	b0030303 	.word	0xb0030303
 8002650:	b6464646 	.word	0xb6464646
 8002654:	b1030303 	.word	0xb1030303
 8002658:	b7363636 	.word	0xb7363636
 800265c:	b2020000 	.word	0xb2020000
 8002660:	b8262626 	.word	0xb8262626
 8002664:	b3090909 	.word	0xb3090909
 8002668:	b9363636 	.word	0xb9363636
 800266c:	b5080808 	.word	0xb5080808
 8002670:	ba262626 	.word	0xba262626
 8002674:	bc008000 	.word	0xbc008000
 8002678:	bd008000 	.word	0xbd008000
 800267c:	0800bfc4 	.word	0x0800bfc4
 8002680:	0800bfc8 	.word	0x0800bfc8
 8002684:	0800bfd0 	.word	0x0800bfd0
 8002688:	0800bfd4 	.word	0x0800bfd4
 800268c:	0800bfd8 	.word	0x0800bfd8
 8002690:	cc000003 	.word	0xcc000003
 8002694:	0800bfe0 	.word	0x0800bfe0
 8002698:	0800bfe8 	.word	0x0800bfe8
 800269c:	0800bff0 	.word	0x0800bff0
 80026a0:	0800bff8 	.word	0x0800bff8
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4619      	mov	r1, r3
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7fe fc70 	bl	8000f90 <DSI_IO_WriteCmd>
      break;
 80026b0:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fc69 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	4619      	mov	r1, r3
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7fe fc63 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7fe fc5d 	bl	8000f90 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	4619      	mov	r1, r3
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fe fc57 	bl	8000f90 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80026e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e6:	4619      	mov	r1, r3
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fc51 	bl	8000f90 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe fc4b 	bl	8000f90 <DSI_IO_WriteCmd>

  return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	37c8      	adds	r7, #200	; 0xc8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_MspInit+0x4c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_MspInit+0x4c>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_MspInit+0x4c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_MspInit+0x4c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <NMI_Handler+0x4>

0800275a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <HardFault_Handler+0x4>

08002760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <MemManage_Handler+0x4>

08002766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler+0x4>

08002772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a0:	f000 fcec 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <I2C1_EV_IRQHandler+0x10>)
 80027ae:	f003 fbf3 	bl	8005f98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000168 	.word	0x20000168

080027bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <I2C1_ER_IRQHandler+0x10>)
 80027c2:	f003 fd5a 	bl	800627a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000168 	.word	0x20000168

080027d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <USART3_IRQHandler+0x10>)
 80027d6:	f007 f869 	bl	80098ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000494 	.word	0x20000494

080027e4 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <FMC_IRQHandler+0x10>)
 80027ea:	f006 fecf 	bl	800958c <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000128 	.word	0x20000128

080027f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <LTDC_IRQHandler+0x10>)
 80027fe:	f005 fcd1 	bl	80081a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200001bc 	.word	0x200001bc

0800280c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <LTDC_ER_IRQHandler+0x10>)
 8002812:	f005 fcc7 	bl	80081a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200001bc 	.word	0x200001bc

08002820 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <DSI_IRQHandler+0x10>)
 8002826:	f001 fb7c 	bl	8003f22 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200000fc 	.word	0x200000fc

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_kill>:

int _kill(int pid, int sig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800284e:	f008 f8b3 	bl	800a9b8 <__errno>
 8002852:	4603      	mov	r3, r0
 8002854:	2216      	movs	r2, #22
 8002856:	601a      	str	r2, [r3, #0]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_exit>:

void _exit (int status)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe7 	bl	8002844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0x12>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
	}

return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
	return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	605a      	str	r2, [r3, #4]
	return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_isatty>:

int _isatty(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	return 1;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f008 f834 	bl	800a9b8 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20050000 	.word	0x20050000
 800297c:	00000400 	.word	0x00000400
 8002980:	20000268 	.word	0x20000268
 8002984:	20000510 	.word	0x20000510

08002988 <ts_process>:
uint8_t  I2C_Address = 0;

TS_StateTypeDef  ts_state = {0};

void ts_process(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
    TS_StateTypeDef  ts_state_new = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	811a      	strh	r2, [r3, #8]
    // uint16_t x1, y1;
    ts_get_state(&ts_state_new);
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f88c 	bl	8002ab8 <ts_get_state>
    if (ts_state_new.touchDetected)
 80029a0:	793b      	ldrb	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d023      	beq.n	80029ee <ts_process+0x66>
    {
        ts_state.touchDetected = ts_state_new.touchDetected;
 80029a6:	793a      	ldrb	r2, [r7, #4]
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <ts_process+0x70>)
 80029aa:	701a      	strb	r2, [r3, #0]
        if (ts_state.touchX[0] != ts_state_new.touchX[0] || ts_state.touchY[0] != ts_state_new.touchY[0])
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <ts_process+0x70>)
 80029ae:	885a      	ldrh	r2, [r3, #2]
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d104      	bne.n	80029c0 <ts_process+0x38>
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <ts_process+0x70>)
 80029b8:	88da      	ldrh	r2, [r3, #6]
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d016      	beq.n	80029ee <ts_process+0x66>
        {
            ts_state.touchX[0] = ts_state_new.touchX[0];
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <ts_process+0x70>)
 80029c4:	805a      	strh	r2, [r3, #2]
            ts_state.touchY[0] = ts_state_new.touchY[0];
 80029c6:	897a      	ldrh	r2, [r7, #10]
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <ts_process+0x70>)
 80029ca:	80da      	strh	r2, [r3, #6]
            printf("Touch: [%d, %d] \r\n", ts_state.touchX[0], ts_state.touchY[0]);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <ts_process+0x70>)
 80029ce:	885b      	ldrh	r3, [r3, #2]
 80029d0:	4619      	mov	r1, r3
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <ts_process+0x70>)
 80029d4:	88db      	ldrh	r3, [r3, #6]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4808      	ldr	r0, [pc, #32]	; (80029fc <ts_process+0x74>)
 80029da:	f008 f81f 	bl	800aa1c <iprintf>
            lcd_change_rect_color(ts_state.touchX[0], ts_state.touchY[0]);
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <ts_process+0x70>)
 80029e0:	885b      	ldrh	r3, [r3, #2]
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <ts_process+0x70>)
 80029e4:	88d2      	ldrh	r2, [r2, #6]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f905 	bl	8001bf8 <lcd_change_rect_color>
        }
    }
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000274 	.word	0x20000274
 80029fc:	0800c000 	.word	0x0800c000

08002a00 <ts_init>:
        i2c1_error(Addr);
    }
}

uint8_t ts_init(uint16_t ts_size_x, uint16_t ts_size_y)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	460a      	mov	r2, r1
 8002a0a:	80fb      	strh	r3, [r7, #6]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80bb      	strh	r3, [r7, #4]
    uint8_t ts_status = TS_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
    uint8_t ts_id1, ts_id2 = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73bb      	strb	r3, [r7, #14]

    /* Initialize the communication channel to sensor (I2C) if necessary */
    /* that is initialization is done only once after a power up         */
    // ft6x06_ts_drv.Init(I2C_Address);

    ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <ts_init+0xa8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2054      	movs	r0, #84	; 0x54
 8002a1e:	4798      	blx	r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	737b      	strb	r3, [r7, #13]
    if(ts_id1 != FT6206_ID_VALUE)
 8002a24:	7b7b      	ldrb	r3, [r7, #13]
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d009      	beq.n	8002a3e <ts_init+0x3e>
    {
        ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <ts_init+0xa8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2070      	movs	r0, #112	; 0x70
 8002a30:	4798      	blx	r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	73bb      	strb	r3, [r7, #14]
        I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <ts_init+0xac>)
 8002a38:	2270      	movs	r2, #112	; 0x70
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e002      	b.n	8002a44 <ts_init+0x44>
    }
    else
    {
        I2C_Address    = TS_I2C_ADDRESS;    
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <ts_init+0xac>)
 8002a40:	2254      	movs	r2, #84	; 0x54
 8002a42:	701a      	strb	r2, [r3, #0]
    }

    /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
    /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
    if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE) || (ts_id2 == FT6X36_ID2_VALUE))
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	2b11      	cmp	r3, #17
 8002a48:	d005      	beq.n	8002a56 <ts_init+0x56>
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	2b11      	cmp	r3, #17
 8002a4e:	d002      	beq.n	8002a56 <ts_init+0x56>
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2bd8      	cmp	r3, #216	; 0xd8
 8002a54:	d121      	bne.n	8002a9a <ts_init+0x9a>
    {
        /* Found FT6206 : Initialize the TS driver structure */
        ts_driver = &ft6x06_ts_drv;
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <ts_init+0xb0>)
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <ts_init+0xa8>)
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get LCD chosen orientation */
        if(ts_size_x < ts_size_y)
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d203      	bcs.n	8002a6c <ts_init+0x6c>
        {
            ts_orientation = TS_SWAP_NONE;                
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <ts_init+0xb4>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e002      	b.n	8002a72 <ts_init+0x72>
        }
        else
        {
            ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <ts_init+0xb4>)
 8002a6e:	220c      	movs	r2, #12
 8002a70:	701a      	strb	r2, [r3, #0]
        }

        if(ts_status == TS_OK)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d112      	bne.n	8002a9e <ts_init+0x9e>
        {
            /* Software reset the TouchScreen */
            ts_driver->Reset(I2C_Address);
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <ts_init+0xb0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <ts_init+0xac>)
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	b292      	uxth	r2, r2
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3

            /* Calibrate, Configure and Start the TouchScreen driver */
            ts_driver->Start(I2C_Address);
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <ts_init+0xb0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <ts_init+0xac>)
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	b292      	uxth	r2, r2
 8002a94:	4610      	mov	r0, r2
 8002a96:	4798      	blx	r3
        if(ts_status == TS_OK)
 8002a98:	e001      	b.n	8002a9e <ts_init+0x9e>

        } /* of if(ts_status == TS_OK) */
    }
    else
    {
        ts_status = TS_DEVICE_NOT_FOUND;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
    }

    return (ts_status);
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000271 	.word	0x20000271
 8002ab0:	2000026c 	.word	0x2000026c
 8002ab4:	20000270 	.word	0x20000270

08002ab8 <ts_get_state>:

uint8_t ts_get_state(TS_StateTypeDef *ts_state)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
    static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
    uint8_t ts_status = TS_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	76fb      	strb	r3, [r7, #27]
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    ts_state->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002ac4:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <ts_get_state+0x214>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4a81      	ldr	r2, [pc, #516]	; (8002cd0 <ts_get_state+0x218>)
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	b292      	uxth	r2, r2
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4798      	blx	r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	701a      	strb	r2, [r3, #0]
    if(ts_state->touchDetected)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80ee 	beq.w	8002cc2 <ts_get_state+0x20a>
    {
    for(index=0; index < ts_state->touchDetected; index++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e0e3      	b.n	8002cb4 <ts_get_state+0x1fc>
    {
        /* Get each touch coordinates */
        ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <ts_get_state+0x214>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4a77      	ldr	r2, [pc, #476]	; (8002cd0 <ts_get_state+0x218>)
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	b290      	uxth	r0, r2
 8002af8:	f107 0110 	add.w	r1, r7, #16
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	0052      	lsls	r2, r2, #1
 8002b00:	188c      	adds	r4, r1, r2
 8002b02:	f107 010c 	add.w	r1, r7, #12
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	0052      	lsls	r2, r2, #1
 8002b0a:	440a      	add	r2, r1
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4798      	blx	r3

        if(ts_orientation & TS_SWAP_XY)
 8002b10:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <ts_get_state+0x21c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d019      	beq.n	8002b50 <ts_get_state+0x98>
        {
        tmp = Raw_x[index];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	3320      	adds	r3, #32
 8002b22:	443b      	add	r3, r7
 8002b24:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002b28:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	3320      	adds	r3, #32
 8002b30:	443b      	add	r3, r7
 8002b32:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	443b      	add	r3, r7
 8002b3e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	3320      	adds	r3, #32
 8002b48:	443b      	add	r3, r7
 8002b4a:	8b3a      	ldrh	r2, [r7, #24]
 8002b4c:	f823 2c14 	strh.w	r2, [r3, #-20]
        }
        
        if(ts_orientation & TS_SWAP_X)
 8002b50:	4b60      	ldr	r3, [pc, #384]	; (8002cd4 <ts_get_state+0x21c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00f      	beq.n	8002b7c <ts_get_state+0xc4>
        {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	3320      	adds	r3, #32
 8002b62:	443b      	add	r3, r7
 8002b64:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002b68:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	3320      	adds	r3, #32
 8002b76:	443b      	add	r3, r7
 8002b78:	f823 2c10 	strh.w	r2, [r3, #-16]
        }

        if(ts_orientation & TS_SWAP_Y)
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <ts_get_state+0x21c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00f      	beq.n	8002ba8 <ts_get_state+0xf0>
        {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	3320      	adds	r3, #32
 8002b8e:	443b      	add	r3, r7
 8002b90:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b94:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f823 2c14 	strh.w	r2, [r3, #-20]
        }
            
        xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	3320      	adds	r3, #32
 8002bae:	443b      	add	r3, r7
 8002bb0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <ts_get_state+0x220>)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	4299      	cmp	r1, r3
 8002bc0:	d90d      	bls.n	8002bde <ts_get_state+0x126>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	443b      	add	r3, r7
 8002bca:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002bce:	4942      	ldr	r1, [pc, #264]	; (8002cd8 <ts_get_state+0x220>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	e00c      	b.n	8002bf8 <ts_get_state+0x140>
 8002bde:	4a3e      	ldr	r2, [pc, #248]	; (8002cd8 <ts_get_state+0x220>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	3320      	adds	r3, #32
 8002bee:	443b      	add	r3, r7
 8002bf0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	82fb      	strh	r3, [r7, #22]
        yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3320      	adds	r3, #32
 8002c00:	443b      	add	r3, r7
 8002c02:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4a34      	ldr	r2, [pc, #208]	; (8002cdc <ts_get_state+0x224>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	4299      	cmp	r1, r3
 8002c12:	d90d      	bls.n	8002c30 <ts_get_state+0x178>
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	3320      	adds	r3, #32
 8002c1a:	443b      	add	r3, r7
 8002c1c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002c20:	492e      	ldr	r1, [pc, #184]	; (8002cdc <ts_get_state+0x224>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	e00c      	b.n	8002c4a <ts_get_state+0x192>
 8002c30:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <ts_get_state+0x224>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	3320      	adds	r3, #32
 8002c40:	443b      	add	r3, r7
 8002c42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	82bb      	strh	r3, [r7, #20]

        if ((xDiff + yDiff) > 5)
 8002c4c:	8afa      	ldrh	r2, [r7, #22]
 8002c4e:	8abb      	ldrh	r3, [r7, #20]
 8002c50:	4413      	add	r3, r2
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	dd15      	ble.n	8002c82 <ts_get_state+0x1ca>
        {
        _x[index] = Raw_x[index];
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	3320      	adds	r3, #32
 8002c5c:	443b      	add	r3, r7
 8002c5e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <ts_get_state+0x220>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	3320      	adds	r3, #32
 8002c72:	443b      	add	r3, r7
 8002c74:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <ts_get_state+0x224>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }


        ts_state->touchX[index] = _x[index];
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <ts_get_state+0x220>)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	b299      	uxth	r1, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	460a      	mov	r2, r1
 8002c96:	805a      	strh	r2, [r3, #2]
        ts_state->touchY[index] = _y[index];
 8002c98:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <ts_get_state+0x224>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	b299      	uxth	r1, r3
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	460a      	mov	r2, r1
 8002cac:	80da      	strh	r2, [r3, #6]
    for(index=0; index < ts_state->touchDetected; index++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f4ff af15 	bcc.w	8002aec <ts_get_state+0x34>

    } /* of for(index=0; index < ts_state->touchDetected; index++) */
    } /* end of if(ts_state->touchDetected != 0) */

    return (ts_status);
 8002cc2:	7efb      	ldrb	r3, [r7, #27]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3724      	adds	r7, #36	; 0x24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	2000026c 	.word	0x2000026c
 8002cd0:	20000271 	.word	0x20000271
 8002cd4:	20000270 	.word	0x20000270
 8002cd8:	20000280 	.word	0x20000280
 8002cdc:	20000288 	.word	0x20000288

08002ce0 <TS_IO_Init>:

/*********************************************************************************************
 * ft6x06 override
 */
void TS_IO_Init(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    // MX_I2C1_Init();
    // HAL_GPIO_WritePin(GPIOB, TS_RST_Pin, GPIO_PIN_SET);
    return;
 8002ce4:	bf00      	nop
}
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <TS_IO_Write>:

void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	71bb      	strb	r3, [r7, #6]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Write(&hi2c1,
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	2364      	movs	r3, #100	; 0x64
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	1d7b      	adds	r3, r7, #5
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4807      	ldr	r0, [pc, #28]	; (8002d3c <TS_IO_Write+0x4c>)
 8002d1e:	f002 fe1b 	bl	8005958 <HAL_I2C_Mem_Write>
 8002d22:	4603      	mov	r3, r0
 8002d24:	73fb      	strb	r3, [r7, #15]
                            &Value,
                            1,
                            100);

    /* Check the communication status */
    if(status != HAL_OK)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <TS_IO_Write+0x44>
    {
        /* Execute user timeout callback */
        i2c1_error(Addr);
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ff52 	bl	8001bd8 <i2c1_error>
    }
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000168 	.word	0x20000168

08002d40 <TS_IO_Read>:

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	4603      	mov	r3, r0
 8002d48:	460a      	mov	r2, r1
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
    uint8_t Value = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Read(&hi2c1,
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	2301      	movs	r3, #1
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	f107 030e 	add.w	r3, r7, #14
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	4808      	ldr	r0, [pc, #32]	; (8002d94 <TS_IO_Read+0x54>)
 8002d74:	f002 feea 	bl	8005b4c <HAL_I2C_Mem_Read>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
                            &Value,
                            1,
                            1000);

    /* Check the communication status */
    if(status != HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <TS_IO_Read+0x4a>
    {
        /* Execute user timeout callback */
        i2c1_error(Addr);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff27 	bl	8001bd8 <i2c1_error>
    }
    return Value;
 8002d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000168 	.word	0x20000168

08002d98 <TS_IO_ReadMultiple>:

uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af04      	add	r7, sp, #16
 8002d9e:	603a      	str	r2, [r7, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
 8002da6:	460b      	mov	r3, r1
 8002da8:	71bb      	strb	r3, [r7, #6]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Read(&hi2c1,
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	b299      	uxth	r1, r3
 8002db6:	79bb      	ldrb	r3, [r7, #6]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	88bb      	ldrh	r3, [r7, #4]
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4809      	ldr	r0, [pc, #36]	; (8002df0 <TS_IO_ReadMultiple+0x58>)
 8002dcc:	f002 febe 	bl	8005b4c <HAL_I2C_Mem_Read>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
                        Buffer,
                        Length,
                        1000);

    /* Check the communication status */
    if(status != HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <TS_IO_ReadMultiple+0x4a>
    {
        /* I2C error occured */
        i2c1_error(Addr);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fefb 	bl	8001bd8 <i2c1_error>
    }
    return status;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	b29b      	uxth	r3, r3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000168 	.word	0x20000168

08002df4 <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4804      	ldr	r0, [pc, #16]	; (8002e1c <_write+0x28>)
 8002e0c:	f006 fc8c 	bl	8009728 <HAL_UART_Transmit>
  return len;
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000494 	.word	0x20000494

08002e20 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <MX_USART3_UART_Init+0x64>)
 8002e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e46:	220c      	movs	r2, #12
 8002e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e56:	480a      	ldr	r0, [pc, #40]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e58:	f006 fc19 	bl	800968e <HAL_UART_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e62:	f7ff fa51 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_USART3_UART_Init+0x68>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <MX_USART3_UART_Init+0x6c>)
 8002e70:	4413      	add	r3, r2
 8002e72:	2201      	movs	r2, #1
 8002e74:	4619      	mov	r1, r3
 8002e76:	4802      	ldr	r0, [pc, #8]	; (8002e80 <MX_USART3_UART_Init+0x60>)
 8002e78:	f006 fce8 	bl	800984c <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000494 	.word	0x20000494
 8002e84:	40004800 	.word	0x40004800
 8002e88:	20000390 	.word	0x20000390
 8002e8c:	20000290 	.word	0x20000290

08002e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_UART_MspInit+0x94>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d134      	bne.n	8002f1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_UART_MspInit+0x98>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002efc:	2307      	movs	r3, #7
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	4809      	ldr	r0, [pc, #36]	; (8002f2c <HAL_UART_MspInit+0x9c>)
 8002f08:	f002 f8e0 	bl	80050cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2027      	movs	r0, #39	; 0x27
 8002f12:	f000 fa76 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f16:	2027      	movs	r0, #39	; 0x27
 8002f18:	f000 fa8f 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40020400 	.word	0x40020400

08002f30 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a37      	ldr	r2, [pc, #220]	; (800301c <HAL_UART_RxCpltCallback+0xec>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d167      	bne.n	8003012 <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002f4c:	5c9b      	ldrb	r3, [r3, r2]
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d007      	beq.n	8002f62 <HAL_UART_RxCpltCallback+0x32>
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	2b0d      	cmp	r3, #13
 8002f60:	d111      	bne.n	8002f86 <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_UART_RxCpltCallback+0xf8>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 8002f7c:	4929      	ldr	r1, [pc, #164]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002f7e:	482b      	ldr	r0, [pc, #172]	; (800302c <HAL_UART_RxCpltCallback+0xfc>)
 8002f80:	f007 fdda 	bl	800ab38 <strcpy>
 8002f84:	e03a      	b.n	8002ffc <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d11a      	bne.n	8002fcc <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4921      	ldr	r1, [pc, #132]	; (8003030 <HAL_UART_RxCpltCallback+0x100>)
 8002fac:	4821      	ldr	r0, [pc, #132]	; (8003034 <HAL_UART_RxCpltCallback+0x104>)
 8002fae:	f006 fbbb 	bl	8009728 <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	425a      	negs	r2, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	bf58      	it	pl
 8002fc2:	4253      	negpl	r3, r2
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e017      	b.n	8002ffc <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8002fd6:	18d1      	adds	r1, r2, r3
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4815      	ldr	r0, [pc, #84]	; (8003034 <HAL_UART_RxCpltCallback+0x104>)
 8002fe0:	f006 fba2 	bl	8009728 <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	425a      	negs	r2, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	bf58      	it	pl
 8002ff4:	4253      	negpl	r3, r2
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002ffa:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_UART_RxCpltCallback+0xf0>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_UART_RxCpltCallback+0xf4>)
 8003006:	4413      	add	r3, r2
 8003008:	2201      	movs	r2, #1
 800300a:	4619      	mov	r1, r3
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <HAL_UART_RxCpltCallback+0x104>)
 800300e:	f006 fc1d 	bl	800984c <HAL_UART_Receive_IT>
    } 
  }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40004800 	.word	0x40004800
 8003020:	20000390 	.word	0x20000390
 8003024:	20000290 	.word	0x20000290
 8003028:	20000392 	.word	0x20000392
 800302c:	20000394 	.word	0x20000394
 8003030:	0800c014 	.word	0x0800c014
 8003034:	20000494 	.word	0x20000494

08003038 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  if (cmd_ready)
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <uart_check_cmd_recv+0x20>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <uart_check_cmd_recv+0x20>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <uart_check_cmd_recv+0x24>)
 800304e:	f7fd fd69 	bl	8000b24 <cli_process>
  }
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000392 	.word	0x20000392
 800305c:	20000394 	.word	0x20000394

08003060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003066:	490e      	ldr	r1, [pc, #56]	; (80030a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800306c:	e002      	b.n	8003074 <LoopCopyDataInit>

0800306e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003072:	3304      	adds	r3, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003078:	d3f9      	bcc.n	800306e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800307c:	4c0b      	ldr	r4, [pc, #44]	; (80030ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003080:	e001      	b.n	8003086 <LoopFillZerobss>

08003082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003084:	3204      	adds	r2, #4

08003086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003088:	d3fb      	bcc.n	8003082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308a:	f000 f813 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308e:	f007 fc99 	bl	800a9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003092:	f7ff f88d 	bl	80021b0 <main>
  bx  lr    
 8003096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003098:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80030a4:	080a22dc 	.word	0x080a22dc
  ldr r2, =_sbss
 80030a8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80030ac:	2000050c 	.word	0x2000050c

080030b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC_IRQHandler>
	...

080030b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SystemInit+0x20>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <SystemInit+0x20>)
 80030c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_Init+0x40>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_Init+0x40>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_Init+0x40>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f973 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f808 	bl	800311c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7ff fafa 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_InitTick+0x54>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_InitTick+0x58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f999 	bl	8003472 <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00e      	b.n	8003168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80a      	bhi.n	8003166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003150:	2200      	movs	r2, #0
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f000 f953 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800315c:	4a06      	ldr	r2, [pc, #24]	; (8003178 <HAL_InitTick+0x5c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000030 	.word	0x20000030
 8003174:	20000038 	.word	0x20000038
 8003178:	20000034 	.word	0x20000034

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_IncTick+0x20>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_IncTick+0x24>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_IncTick+0x24>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000038 	.word	0x20000038
 80031a0:	200004d8 	.word	0x200004d8

080031a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return uwTick;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_GetTick+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	200004d8 	.word	0x200004d8

080031bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff ffee 	bl	80031a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d005      	beq.n	80031e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_Delay+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031e2:	bf00      	nop
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d8f7      	bhi.n	80031e4 <HAL_Delay+0x28>
  {
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000038 	.word	0x20000038

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db12      	blt.n	80032dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	490a      	ldr	r1, [pc, #40]	; (80032e8 <__NVIC_DisableIRQ+0x44>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	3320      	adds	r3, #32
 80032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032d0:	f3bf 8f4f 	dsb	sy
}
 80032d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032d6:	f3bf 8f6f 	isb	sy
}
 80032da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	; (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff05 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff1a 	bl	800324c <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff0d 	bl	8003268 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff1d 	bl	80032a4 <__NVIC_DisableIRQ>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ff94 	bl	80033a8 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff fe84 	bl	80031a4 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e052      	b.n	8003562 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0216 	bic.w	r2, r2, #22
 80034ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <HAL_DMA_Abort+0x62>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0208 	bic.w	r2, r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350c:	e013      	b.n	8003536 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800350e:	f7ff fe49 	bl	80031a4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b05      	cmp	r3, #5
 800351a:	d90c      	bls.n	8003536 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2203      	movs	r2, #3
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e015      	b.n	8003562 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e4      	bne.n	800350e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	223f      	movs	r2, #63	; 0x3f
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e00c      	b.n	80035a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2205      	movs	r2, #5
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035bc:	b2db      	uxtb	r3, r3
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e03b      	b.n	8003654 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd fb65 	bl	8000cc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f023 0107 	bic.w	r1, r3, #7
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68d1      	ldr	r1, [r2, #12]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	430b      	orrs	r3, r1
 8003642:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_DMA2D_Start+0x1c>
 8003674:	2302      	movs	r3, #2
 8003676:	e018      	b.n	80036aa <HAL_DMA2D_Start+0x4e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f988 	bl	80039a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d056      	beq.n	800377c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ce:	f7ff fd69 	bl	80031a4 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036d4:	e04b      	b.n	800376e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d023      	beq.n	8003730 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	f043 0201 	orr.w	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2221      	movs	r2, #33	; 0x21
 800371a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0a5      	b.n	800387c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d01a      	beq.n	800376e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7ff fd34 	bl	80031a4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <HAL_DMA2D_PollForTransfer+0x9c>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e086      	b.n	800387c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ac      	beq.n	80036d6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d061      	beq.n	8003862 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800379e:	f7ff fd01 	bl	80031a4 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037a4:	e056      	b.n	8003854 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02e      	beq.n	8003816 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	f043 0202 	orr.w	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2229      	movs	r2, #41	; 0x29
 8003800:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e032      	b.n	800387c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d01a      	beq.n	8003854 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7ff fcc1 	bl	80031a4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <HAL_DMA2D_PollForTransfer+0x182>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2203      	movs	r2, #3
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e013      	b.n	800387c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0a1      	beq.n	80037a6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2212      	movs	r2, #18
 8003868:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DMA2D_ConfigLayer+0x20>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e079      	b.n	8003998 <HAL_DMA2D_ConfigLayer+0x114>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3318      	adds	r3, #24
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80038d0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d003      	beq.n	80038e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b09      	cmp	r3, #9
 80038e0:	d107      	bne.n	80038f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e005      	b.n	80038fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	061b      	lsls	r3, r3, #24
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d120      	bne.n	8003946 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	43db      	mvns	r3, r3
 800390e:	ea02 0103 	and.w	r1, r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	430a      	orrs	r2, r1
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b0a      	cmp	r3, #10
 800392c:	d003      	beq.n	8003936 <HAL_DMA2D_ConfigLayer+0xb2>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b09      	cmp	r3, #9
 8003934:	d127      	bne.n	8003986 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
 8003944:	e01f      	b.n	8003986 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	ea02 0103 	and.w	r1, r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b0a      	cmp	r3, #10
 800396e:	d003      	beq.n	8003978 <HAL_DMA2D_ConfigLayer+0xf4>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b09      	cmp	r3, #9
 8003976:	d106      	bne.n	8003986 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003984:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	ff03000f 	.word	0xff03000f

080039a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	041a      	lsls	r2, r3, #16
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e0:	d174      	bne.n	8003acc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e053      	b.n	8003ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d106      	bne.n	8003a30 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e048      	b.n	8003ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d111      	bne.n	8003a5c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	0cdb      	lsrs	r3, r3, #19
 8003a3c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	0a9b      	lsrs	r3, r3, #10
 8003a42:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	02db      	lsls	r3, r3, #11
 8003a52:	4313      	orrs	r3, r2
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e032      	b.n	8003ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d117      	bne.n	8003a94 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	0fdb      	lsrs	r3, r3, #31
 8003a68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	0cdb      	lsrs	r3, r3, #19
 8003a6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	0adb      	lsrs	r3, r3, #11
 8003a74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	431a      	orrs	r2, r3
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	03db      	lsls	r3, r3, #15
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e016      	b.n	8003ac2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	0f1b      	lsrs	r3, r3, #28
 8003a98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	0b1b      	lsrs	r3, r3, #12
 8003aa4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	011a      	lsls	r2, r3, #4
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	031b      	lsls	r3, r3, #12
 8003aba:	4313      	orrs	r3, r2
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003aca:	e003      	b.n	8003ad4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	372c      	adds	r7, #44	; 0x2c
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	019a      	lsls	r2, r3, #6
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	431a      	orrs	r2, r3
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7ff fb40 	bl	80031a4 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b26:	e009      	b.n	8003b3c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b28:	f7ff fb3c 	bl	80031a4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b36:	d901      	bls.n	8003b3c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e015      	b.n	8003b68 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ee      	beq.n	8003b28 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	019a      	lsls	r2, r3, #6
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	ea42 0103 	orr.w	r1, r2, r3
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e10b      	b.n	8003d9c <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7c5b      	ldrb	r3, [r3, #17]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd f9ae 	bl	8000ef0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003bae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc2:	f7ff faef 	bl	80031a4 <HAL_GetTick>
 8003bc6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bc8:	e009      	b.n	8003bde <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003bca:	f7ff faeb 	bl	80031a4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd8:	d901      	bls.n	8003bde <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0de      	b.n	8003d9c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ed      	beq.n	8003bca <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003bfe:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003c02:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c1a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c22:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003c56:	2001      	movs	r0, #1
 8003c58:	f7ff fab0 	bl	80031bc <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7ff faa2 	bl	80031a4 <HAL_GetTick>
 8003c60:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c62:	e009      	b.n	8003c78 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c64:	f7ff fa9e 	bl	80031a4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c72:	d901      	bls.n	8003c78 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e091      	b.n	8003d9c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ed      	beq.n	8003c64 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0206 	orr.w	r2, r2, #6
 8003c98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0203 	bic.w	r2, r2, #3
 8003cac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0203 	bic.w	r2, r2, #3
 8003cda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d02:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_DSI_Init+0x1b4>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	e000      	b.n	8003d26 <HAL_DSI_Init+0x1b6>
 8003d24:	2301      	movs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_DSI_Init+0x234>)
 8003d2c:	fb03 f202 	mul.w	r2, r3, r2
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	003d0900 	.word	0x003d0900

08003da8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7c1b      	ldrb	r3, [r3, #16]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_DSI_ConfigErrorMonitor+0x16>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0ab      	b.n	8003f16 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003df8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003dfc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0202 	orr.w	r2, r2, #2
 8003e56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 020c 	orr.w	r2, r2, #12
 8003e74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0210 	orr.w	r2, r2, #16
 8003e92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0220 	orr.w	r2, r2, #32
 8003eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ece:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003f0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00f      	beq.n	8003f5a <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8ad 	bl	80040b4 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00f      	beq.n	8003f8a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f89f 	bl	80040c8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 808c 	beq.w	80040ac <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f9c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fb4:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f043 0202 	orr.w	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f043 0208 	orr.w	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f043 0210 	orr.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f818 	bl	80040dc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7c1b      	ldrb	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DSI_SetGenericVCID+0x16>
 8004102:	2302      	movs	r3, #2
 8004104:	e016      	b.n	8004134 <HAL_DSI_SetGenericVCID+0x44>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0203 	bic.w	r2, r2, #3
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7c1b      	ldrb	r3, [r3, #16]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_DSI_ConfigVideoMode+0x16>
 8004152:	2302      	movs	r3, #2
 8004154:	e1f6      	b.n	8004544 <HAL_DSI_ConfigVideoMode+0x404>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0203 	bic.w	r2, r2, #3
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041b4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80041d6:	f023 031f 	bic.w	r3, r3, #31
 80041da:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80041fc:	f023 031f 	bic.w	r3, r3, #31
 8004200:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0203 	bic.w	r2, r2, #3
 8004222:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0207 	bic.w	r2, r2, #7
 8004244:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6959      	ldr	r1, [r3, #20]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	431a      	orrs	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020f 	bic.w	r2, r2, #15
 8004272:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6919      	ldr	r1, [r3, #16]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020e 	bic.w	r2, r2, #14
 8004296:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	005a      	lsls	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d110      	bne.n	80042dc <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6919      	ldr	r1, [r3, #16]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042ea:	f023 030f 	bic.w	r3, r3, #15
 80042ee:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800433a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435c:	f023 0303 	bic.w	r3, r3, #3
 8004360:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043d2:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004416:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6999      	ldr	r1, [r3, #24]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	041a      	lsls	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800443a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7c1b      	ldrb	r3, [r3, #16]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_DSI_ConfigFlowControl+0x16>
 8004562:	2302      	movs	r3, #2
 8004564:	e016      	b.n	8004594 <HAL_DSI_ConfigFlowControl+0x44>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 021f 	bic.w	r2, r2, #31
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7c1b      	ldrb	r3, [r3, #16]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_DSI_ConfigPhyTimer+0x16>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e058      	b.n	8004668 <HAL_DSI_ConfigPhyTimer+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bf38      	it	cc
 80045c8:	4613      	movcc	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80045dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	041a      	lsls	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800460a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004644:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	021a      	lsls	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7c1b      	ldrb	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_DSI_ConfigHostTimeouts+0x16>
 8004686:	2302      	movs	r3, #2
 8004688:	e0b4      	b.n	80047f4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800469e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b292      	uxth	r2, r2
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	041a      	lsls	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7c1b      	ldrb	r3, [r3, #16]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_DSI_Start+0x14>
 8004810:	2302      	movs	r3, #2
 8004812:	e02b      	b.n	800486c <HAL_DSI_Start+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	7c1b      	ldrb	r3, [r3, #16]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_DSI_Stop+0x14>
 8004888:	2302      	movs	r3, #2
 800488a:	e02b      	b.n	80048e4 <HAL_DSI_Stop+0x6c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80048b4:	2300      	movs	r3, #0
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0208 	bic.w	r2, r2, #8
 80048c8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	7c1b      	ldrb	r3, [r3, #16]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_DSI_ShortWrite+0x1a>
 8004906:	2302      	movs	r3, #2
 8004908:	e010      	b.n	800492c <HAL_DSI_ShortWrite+0x3c>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff f8f9 	bl	8003b12 <DSI_ShortWrite>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	741a      	strb	r2, [r3, #16]

  return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	7c1b      	ldrb	r3, [r3, #16]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_DSI_LongWrite+0x1e>
 800494e:	2302      	movs	r3, #2
 8004950:	e084      	b.n	8004a5c <HAL_DSI_LongWrite+0x128>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004958:	f7fe fc24 	bl	80031a4 <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800495e:	e00c      	b.n	800497a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004960:	f7fe fc20 	bl	80031a4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496e:	d904      	bls.n	800497a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e070      	b.n	8004a5c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0eb      	beq.n	8004960 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b03      	cmp	r3, #3
 8004990:	bf28      	it	cs
 8004992:	2303      	movcs	r3, #3
 8004994:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	e00f      	b.n	80049bc <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	4413      	add	r3, r2
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	3301      	adds	r3, #1
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	3301      	adds	r3, #1
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d3eb      	bcc.n	800499c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80049dc:	e028      	b.n	8004a30 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	bf28      	it	cs
 80049e4:	2304      	movcs	r3, #4
 80049e6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	e00e      	b.n	8004a10 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	4413      	add	r3, r2
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d3ec      	bcc.n	80049f2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1d3      	bne.n	80049de <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a3e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	f7ff f846 	bl	8003ae0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7c1b      	ldrb	r3, [r3, #16]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e01b      	b.n	8004ab2 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004a90:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	065a      	lsls	r2, r3, #25
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ad2:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <HAL_FLASH_Program+0xa0>)
 8004ad4:	7e1b      	ldrb	r3, [r3, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_FLASH_Program+0x1e>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e03b      	b.n	8004b56 <HAL_FLASH_Program+0x96>
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_FLASH_Program+0xa0>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ae4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ae8:	f000 f870 	bl	8004bcc <FLASH_WaitForLastOperation>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d12b      	bne.n	8004b4e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004afc:	783b      	ldrb	r3, [r7, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f000 f91b 	bl	8004d3c <FLASH_Program_Byte>
 8004b06:	e016      	b.n	8004b36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d105      	bne.n	8004b1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004b0e:	883b      	ldrh	r3, [r7, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	68b8      	ldr	r0, [r7, #8]
 8004b14:	f000 f8ee 	bl	8004cf4 <FLASH_Program_HalfWord>
 8004b18:	e00d      	b.n	8004b36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d105      	bne.n	8004b2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f000 f8c3 	bl	8004cb0 <FLASH_Program_Word>
 8004b2a:	e004      	b.n	8004b36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f000 f88b 	bl	8004c4c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b3a:	f000 f847 	bl	8004bcc <FLASH_WaitForLastOperation>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_FLASH_Program+0xa4>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_FLASH_Program+0xa4>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <HAL_FLASH_Program+0xa0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200004dc 	.word	0x200004dc
 8004b64:	40023c00 	.word	0x40023c00

08004b68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_FLASH_Unlock+0x38>)
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da0b      	bge.n	8004b92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_FLASH_Unlock+0x38>)
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_FLASH_Unlock+0x3c>)
 8004b7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <HAL_FLASH_Unlock+0x38>)
 8004b82:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <HAL_FLASH_Unlock+0x40>)
 8004b84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_FLASH_Unlock+0x38>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da01      	bge.n	8004b92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b92:	79fb      	ldrb	r3, [r7, #7]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40023c00 	.word	0x40023c00
 8004ba4:	45670123 	.word	0x45670123
 8004ba8:	cdef89ab 	.word	0xcdef89ab

08004bac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_FLASH_Lock+0x1c>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_FLASH_Lock+0x1c>)
 8004bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40023c00 	.word	0x40023c00

08004bcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <FLASH_WaitForLastOperation+0x78>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bde:	f7fe fae1 	bl	80031a4 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004be4:	e010      	b.n	8004c08 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d00c      	beq.n	8004c08 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <FLASH_WaitForLastOperation+0x38>
 8004bf4:	f7fe fad6 	bl	80031a4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d201      	bcs.n	8004c08 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e019      	b.n	8004c3c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <FLASH_WaitForLastOperation+0x7c>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e8      	bne.n	8004be6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <FLASH_WaitForLastOperation+0x7c>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <FLASH_WaitForLastOperation+0x7c>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <FLASH_WaitForLastOperation+0x7c>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c32:	f000 f8a5 	bl	8004d80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
  
}  
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200004dc 	.word	0x200004dc
 8004c48:	40023c00 	.word	0x40023c00

08004c4c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c6a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <FLASH_Program_DoubleWord+0x60>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c82:	f3bf 8f6f 	isb	sy
}
 8004c86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	000a      	movs	r2, r1
 8004c96:	2300      	movs	r3, #0
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	3104      	adds	r1, #4
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <FLASH_Program_Word+0x40>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <FLASH_Program_HalfWord+0x44>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	801a      	strh	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00

08004d3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <FLASH_Program_Byte+0x40>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	701a      	strb	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40023c00 	.word	0x40023c00

08004d80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f043 0310 	orr.w	r3, r3, #16
 8004d98:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004d9a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d9c:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004d9e:	2210      	movs	r2, #16
 8004da0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004da2:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004dae:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f043 0308 	orr.w	r3, r3, #8
 8004db6:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004db8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004dc0:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f043 0304 	orr.w	r3, r3, #4
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004dd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f043 0302 	orr.w	r3, r3, #2
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004df4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004e12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f043 0320 	orr.w	r3, r3, #32
 8004e30:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <FLASH_SetErrorCode+0xc8>)
 8004e32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <FLASH_SetErrorCode+0xc4>)
 8004e36:	2202      	movs	r2, #2
 8004e38:	60da      	str	r2, [r3, #12]
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	200004dc 	.word	0x200004dc

08004e4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e5e:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <HAL_FLASHEx_Erase+0xdc>)
 8004e60:	7e1b      	ldrb	r3, [r3, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_FLASHEx_Erase+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e05a      	b.n	8004f20 <HAL_FLASHEx_Erase+0xd4>
 8004e6a:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <HAL_FLASHEx_Erase+0xdc>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e74:	f7ff feaa 	bl	8004bcc <FLASH_WaitForLastOperation>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14a      	bne.n	8004f18 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295
 8004e88:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d117      	bne.n	8004ec2 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f000 f846 	bl	8004f30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ea8:	f7ff fe90 	bl	8004bcc <FLASH_WaitForLastOperation>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_FLASHEx_Erase+0xe0>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_FLASHEx_Erase+0xe0>)
 8004eb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eba:	f023 0304 	bic.w	r3, r3, #4
 8004ebe:	6113      	str	r3, [r2, #16]
 8004ec0:	e028      	b.n	8004f14 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	e01c      	b.n	8004f04 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68b8      	ldr	r0, [r7, #8]
 8004ed4:	f000 f866 	bl	8004fa4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004edc:	f7ff fe76 	bl	8004bcc <FLASH_WaitForLastOperation>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_FLASHEx_Erase+0xe0>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <HAL_FLASHEx_Erase+0xe0>)
 8004eea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004eee:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	601a      	str	r2, [r3, #0]
          break;
 8004efc:	e00a      	b.n	8004f14 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3da      	bcc.n	8004eca <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f14:	f000 f894 	bl	8005040 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_FLASHEx_Erase+0xdc>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	761a      	strb	r2, [r3, #24]

  return status;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200004dc 	.word	0x200004dc
 8004f2c:	40023c00 	.word	0x40023c00

08004f30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f3c:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d108      	bne.n	8004f60 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004f4e:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	6113      	str	r3, [r2, #16]
 8004f5e:	e00f      	b.n	8004f80 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d106      	bne.n	8004f74 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f6c:	f043 0304 	orr.w	r3, r3, #4
 8004f70:	6113      	str	r3, [r2, #16]
 8004f72:	e005      	b.n	8004f80 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <FLASH_MassErase+0x70>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f90:	6113      	str	r3, [r2, #16]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40023c00 	.word	0x40023c00

08004fa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e010      	b.n	8004fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d103      	bne.n	8004fce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e009      	b.n	8004fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d103      	bne.n	8004fdc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e002      	b.n	8004fe2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004fdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b0b      	cmp	r3, #11
 8004fe6:	d902      	bls.n	8004fee <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <FLASH_Erase_Sector+0x98>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	; (800503c <FLASH_Erase_Sector+0x98>)
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004ffa:	4b10      	ldr	r3, [pc, #64]	; (800503c <FLASH_Erase_Sector+0x98>)
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	490f      	ldr	r1, [pc, #60]	; (800503c <FLASH_Erase_Sector+0x98>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <FLASH_Erase_Sector+0x98>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <FLASH_Erase_Sector+0x98>)
 800500c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <FLASH_Erase_Sector+0x98>)
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4313      	orrs	r3, r2
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <FLASH_Erase_Sector+0x98>)
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <FLASH_Erase_Sector+0x98>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <FLASH_Erase_Sector+0x98>)
 800502a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502e:	6113      	str	r3, [r2, #16]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40023c00 	.word	0x40023c00

08005040 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005050:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005056:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800505a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005062:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800506e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005072:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005074:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800507a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800507e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0d      	ldr	r2, [pc, #52]	; (80050c8 <FLASH_FlushCaches+0x88>)
 8005092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005096:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <FLASH_FlushCaches+0x88>)
 800509e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <FLASH_FlushCaches+0x88>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <FLASH_FlushCaches+0x88>)
 80050aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <FLASH_FlushCaches+0x88>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <FLASH_FlushCaches+0x88>)
 80050b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ba:	6013      	str	r3, [r2, #0]
  }
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40023c00 	.word	0x40023c00

080050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e177      	b.n	80053d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e8:	2201      	movs	r2, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	f040 8166 	bne.w	80053d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d005      	beq.n	800511e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511a:	2b02      	cmp	r3, #2
 800511c:	d130      	bne.n	8005180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0201 	and.w	r2, r3, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b03      	cmp	r3, #3
 800518a:	d017      	beq.n	80051bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	2203      	movs	r2, #3
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d123      	bne.n	8005210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	08da      	lsrs	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3208      	adds	r2, #8
 80051d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	220f      	movs	r2, #15
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	08da      	lsrs	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3208      	adds	r2, #8
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0203 	and.w	r2, r3, #3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80c0 	beq.w	80053d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b66      	ldr	r3, [pc, #408]	; (80053f0 <HAL_GPIO_Init+0x324>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	4a65      	ldr	r2, [pc, #404]	; (80053f0 <HAL_GPIO_Init+0x324>)
 800525c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005260:	6453      	str	r3, [r2, #68]	; 0x44
 8005262:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <HAL_GPIO_Init+0x324>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800526e:	4a61      	ldr	r2, [pc, #388]	; (80053f4 <HAL_GPIO_Init+0x328>)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	3302      	adds	r3, #2
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_GPIO_Init+0x32c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d037      	beq.n	800530a <HAL_GPIO_Init+0x23e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a57      	ldr	r2, [pc, #348]	; (80053fc <HAL_GPIO_Init+0x330>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d031      	beq.n	8005306 <HAL_GPIO_Init+0x23a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a56      	ldr	r2, [pc, #344]	; (8005400 <HAL_GPIO_Init+0x334>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <HAL_GPIO_Init+0x236>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a55      	ldr	r2, [pc, #340]	; (8005404 <HAL_GPIO_Init+0x338>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d025      	beq.n	80052fe <HAL_GPIO_Init+0x232>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a54      	ldr	r2, [pc, #336]	; (8005408 <HAL_GPIO_Init+0x33c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <HAL_GPIO_Init+0x22e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a53      	ldr	r2, [pc, #332]	; (800540c <HAL_GPIO_Init+0x340>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d019      	beq.n	80052f6 <HAL_GPIO_Init+0x22a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a52      	ldr	r2, [pc, #328]	; (8005410 <HAL_GPIO_Init+0x344>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_GPIO_Init+0x226>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a51      	ldr	r2, [pc, #324]	; (8005414 <HAL_GPIO_Init+0x348>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00d      	beq.n	80052ee <HAL_GPIO_Init+0x222>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a50      	ldr	r2, [pc, #320]	; (8005418 <HAL_GPIO_Init+0x34c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <HAL_GPIO_Init+0x21e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4f      	ldr	r2, [pc, #316]	; (800541c <HAL_GPIO_Init+0x350>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_GPIO_Init+0x21a>
 80052e2:	2309      	movs	r3, #9
 80052e4:	e012      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052e6:	230a      	movs	r3, #10
 80052e8:	e010      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e00e      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052ee:	2307      	movs	r3, #7
 80052f0:	e00c      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e00a      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e008      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e006      	b.n	800530c <HAL_GPIO_Init+0x240>
 80052fe:	2303      	movs	r3, #3
 8005300:	e004      	b.n	800530c <HAL_GPIO_Init+0x240>
 8005302:	2302      	movs	r3, #2
 8005304:	e002      	b.n	800530c <HAL_GPIO_Init+0x240>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_GPIO_Init+0x240>
 800530a:	2300      	movs	r3, #0
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f002 0203 	and.w	r2, r2, #3
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	4093      	lsls	r3, r2
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <HAL_GPIO_Init+0x328>)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800532a:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <HAL_GPIO_Init+0x354>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800534e:	4a34      	ldr	r2, [pc, #208]	; (8005420 <HAL_GPIO_Init+0x354>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005354:	4b32      	ldr	r3, [pc, #200]	; (8005420 <HAL_GPIO_Init+0x354>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005378:	4a29      	ldr	r2, [pc, #164]	; (8005420 <HAL_GPIO_Init+0x354>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800537e:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_GPIO_Init+0x354>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_GPIO_Init+0x354>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_GPIO_Init+0x354>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <HAL_GPIO_Init+0x354>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	f67f ae84 	bls.w	80050e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40020800 	.word	0x40020800
 8005404:	40020c00 	.word	0x40020c00
 8005408:	40021000 	.word	0x40021000
 800540c:	40021400 	.word	0x40021400
 8005410:	40021800 	.word	0x40021800
 8005414:	40021c00 	.word	0x40021c00
 8005418:	40022000 	.word	0x40022000
 800541c:	40022400 	.word	0x40022400
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e0d9      	b.n	80055f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005440:	2201      	movs	r2, #1
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	f040 80c9 	bne.w	80055ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800545c:	4a6b      	ldr	r2, [pc, #428]	; (800560c <HAL_GPIO_DeInit+0x1e8>)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	3302      	adds	r3, #2
 8005464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005468:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	220f      	movs	r2, #15
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a63      	ldr	r2, [pc, #396]	; (8005610 <HAL_GPIO_DeInit+0x1ec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d037      	beq.n	80054f6 <HAL_GPIO_DeInit+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a62      	ldr	r2, [pc, #392]	; (8005614 <HAL_GPIO_DeInit+0x1f0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_GPIO_DeInit+0xce>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a61      	ldr	r2, [pc, #388]	; (8005618 <HAL_GPIO_DeInit+0x1f4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02b      	beq.n	80054ee <HAL_GPIO_DeInit+0xca>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a60      	ldr	r2, [pc, #384]	; (800561c <HAL_GPIO_DeInit+0x1f8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d025      	beq.n	80054ea <HAL_GPIO_DeInit+0xc6>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a5f      	ldr	r2, [pc, #380]	; (8005620 <HAL_GPIO_DeInit+0x1fc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01f      	beq.n	80054e6 <HAL_GPIO_DeInit+0xc2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a5e      	ldr	r2, [pc, #376]	; (8005624 <HAL_GPIO_DeInit+0x200>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d019      	beq.n	80054e2 <HAL_GPIO_DeInit+0xbe>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a5d      	ldr	r2, [pc, #372]	; (8005628 <HAL_GPIO_DeInit+0x204>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_GPIO_DeInit+0xba>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a5c      	ldr	r2, [pc, #368]	; (800562c <HAL_GPIO_DeInit+0x208>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00d      	beq.n	80054da <HAL_GPIO_DeInit+0xb6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a5b      	ldr	r2, [pc, #364]	; (8005630 <HAL_GPIO_DeInit+0x20c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <HAL_GPIO_DeInit+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a5a      	ldr	r2, [pc, #360]	; (8005634 <HAL_GPIO_DeInit+0x210>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_GPIO_DeInit+0xae>
 80054ce:	2309      	movs	r3, #9
 80054d0:	e012      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054d2:	230a      	movs	r3, #10
 80054d4:	e010      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054d6:	2308      	movs	r3, #8
 80054d8:	e00e      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054da:	2307      	movs	r3, #7
 80054dc:	e00c      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054de:	2306      	movs	r3, #6
 80054e0:	e00a      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054e2:	2305      	movs	r3, #5
 80054e4:	e008      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054e6:	2304      	movs	r3, #4
 80054e8:	e006      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054ea:	2303      	movs	r3, #3
 80054ec:	e004      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e002      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_GPIO_DeInit+0xd4>
 80054f6:	2300      	movs	r3, #0
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	f002 0203 	and.w	r2, r2, #3
 80054fe:	0092      	lsls	r2, r2, #2
 8005500:	4093      	lsls	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	429a      	cmp	r2, r3
 8005506:	d132      	bne.n	800556e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005508:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	4949      	ldr	r1, [pc, #292]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 8005512:	4013      	ands	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005516:	4b48      	ldr	r3, [pc, #288]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	43db      	mvns	r3, r3
 800551e:	4946      	ldr	r1, [pc, #280]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 8005520:	4013      	ands	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005524:	4b44      	ldr	r3, [pc, #272]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	43db      	mvns	r3, r3
 800552c:	4942      	ldr	r1, [pc, #264]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 800552e:	4013      	ands	r3, r2
 8005530:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	43db      	mvns	r3, r3
 800553a:	493f      	ldr	r1, [pc, #252]	; (8005638 <HAL_GPIO_DeInit+0x214>)
 800553c:	4013      	ands	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	220f      	movs	r2, #15
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <HAL_GPIO_DeInit+0x1e8>)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	3302      	adds	r3, #2
 8005558:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	43da      	mvns	r2, r3
 8005560:	482a      	ldr	r0, [pc, #168]	; (800560c <HAL_GPIO_DeInit+0x1e8>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	400a      	ands	r2, r1
 8005568:	3302      	adds	r3, #2
 800556a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2103      	movs	r1, #3
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	08da      	lsrs	r2, r3, #3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3208      	adds	r2, #8
 800558c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	220f      	movs	r2, #15
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	08d2      	lsrs	r2, r2, #3
 80055a4:	4019      	ands	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3208      	adds	r2, #8
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	2103      	movs	r1, #3
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	401a      	ands	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	2101      	movs	r1, #1
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2103      	movs	r1, #3
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	401a      	ands	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3301      	adds	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	f67f af22 	bls.w	8005440 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40013800 	.word	0x40013800
 8005610:	40020000 	.word	0x40020000
 8005614:	40020400 	.word	0x40020400
 8005618:	40020800 	.word	0x40020800
 800561c:	40020c00 	.word	0x40020c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40021400 	.word	0x40021400
 8005628:	40021800 	.word	0x40021800
 800562c:	40021c00 	.word	0x40021c00
 8005630:	40022000 	.word	0x40022000
 8005634:	40022400 	.word	0x40022400
 8005638:	40013c00 	.word	0x40013c00

0800563c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	807b      	strh	r3, [r7, #2]
 8005648:	4613      	mov	r3, r2
 800564a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800564c:	787b      	ldrb	r3, [r7, #1]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005658:	e003      	b.n	8005662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800565a:	887b      	ldrh	r3, [r7, #2]
 800565c:	041a      	lsls	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	619a      	str	r2, [r3, #24]
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e12b      	b.n	80058da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc f9ec 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	; 0x24
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056d4:	f003 fa3c 	bl	8008b50 <HAL_RCC_GetPCLK1Freq>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4a81      	ldr	r2, [pc, #516]	; (80058e4 <HAL_I2C_Init+0x274>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d807      	bhi.n	80056f4 <HAL_I2C_Init+0x84>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a80      	ldr	r2, [pc, #512]	; (80058e8 <HAL_I2C_Init+0x278>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bf94      	ite	ls
 80056ec:	2301      	movls	r3, #1
 80056ee:	2300      	movhi	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e006      	b.n	8005702 <HAL_I2C_Init+0x92>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a7d      	ldr	r2, [pc, #500]	; (80058ec <HAL_I2C_Init+0x27c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	bf94      	ite	ls
 80056fc:	2301      	movls	r3, #1
 80056fe:	2300      	movhi	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0e7      	b.n	80058da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a78      	ldr	r2, [pc, #480]	; (80058f0 <HAL_I2C_Init+0x280>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	0c9b      	lsrs	r3, r3, #18
 8005714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	4a6a      	ldr	r2, [pc, #424]	; (80058e4 <HAL_I2C_Init+0x274>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d802      	bhi.n	8005744 <HAL_I2C_Init+0xd4>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3301      	adds	r3, #1
 8005742:	e009      	b.n	8005758 <HAL_I2C_Init+0xe8>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	4a69      	ldr	r2, [pc, #420]	; (80058f4 <HAL_I2C_Init+0x284>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	099b      	lsrs	r3, r3, #6
 8005756:	3301      	adds	r3, #1
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800576a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	495c      	ldr	r1, [pc, #368]	; (80058e4 <HAL_I2C_Init+0x274>)
 8005774:	428b      	cmp	r3, r1
 8005776:	d819      	bhi.n	80057ac <HAL_I2C_Init+0x13c>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1e59      	subs	r1, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	fbb1 f3f3 	udiv	r3, r1, r3
 8005786:	1c59      	adds	r1, r3, #1
 8005788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800578c:	400b      	ands	r3, r1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <HAL_I2C_Init+0x138>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1e59      	subs	r1, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a0:	3301      	adds	r3, #1
 80057a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a6:	e051      	b.n	800584c <HAL_I2C_Init+0x1dc>
 80057a8:	2304      	movs	r3, #4
 80057aa:	e04f      	b.n	800584c <HAL_I2C_Init+0x1dc>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d111      	bne.n	80057d8 <HAL_I2C_Init+0x168>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1e58      	subs	r0, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	440b      	add	r3, r1
 80057c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e012      	b.n	80057fe <HAL_I2C_Init+0x18e>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1e58      	subs	r0, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6859      	ldr	r1, [r3, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	0099      	lsls	r1, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ee:	3301      	adds	r3, #1
 80057f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_I2C_Init+0x196>
 8005802:	2301      	movs	r3, #1
 8005804:	e022      	b.n	800584c <HAL_I2C_Init+0x1dc>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10e      	bne.n	800582c <HAL_I2C_Init+0x1bc>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1e58      	subs	r0, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6859      	ldr	r1, [r3, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	440b      	add	r3, r1
 800581c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005820:	3301      	adds	r3, #1
 8005822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582a:	e00f      	b.n	800584c <HAL_I2C_Init+0x1dc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	1e58      	subs	r0, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6859      	ldr	r1, [r3, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	0099      	lsls	r1, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005842:	3301      	adds	r3, #1
 8005844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	6809      	ldr	r1, [r1, #0]
 8005850:	4313      	orrs	r3, r2
 8005852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800587a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6911      	ldr	r1, [r2, #16]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68d2      	ldr	r2, [r2, #12]
 8005886:	4311      	orrs	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	430b      	orrs	r3, r1
 800588e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	000186a0 	.word	0x000186a0
 80058e8:	001e847f 	.word	0x001e847f
 80058ec:	003d08ff 	.word	0x003d08ff
 80058f0:	431bde83 	.word	0x431bde83
 80058f4:	10624dd3 	.word	0x10624dd3

080058f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e021      	b.n	800594e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2224      	movs	r2, #36	; 0x24
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc f92e 	bl	8001b84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	461a      	mov	r2, r3
 8005966:	4603      	mov	r3, r0
 8005968:	817b      	strh	r3, [r7, #10]
 800596a:	460b      	mov	r3, r1
 800596c:	813b      	strh	r3, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005972:	f7fd fc17 	bl	80031a4 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b20      	cmp	r3, #32
 8005982:	f040 80d9 	bne.w	8005b38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	2319      	movs	r3, #25
 800598c:	2201      	movs	r2, #1
 800598e:	496d      	ldr	r1, [pc, #436]	; (8005b44 <HAL_I2C_Mem_Write+0x1ec>)
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f002 f90d 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
 800599e:	e0cc      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_I2C_Mem_Write+0x56>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e0c5      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d007      	beq.n	80059d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2221      	movs	r2, #33	; 0x21
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a4d      	ldr	r2, [pc, #308]	; (8005b48 <HAL_I2C_Mem_Write+0x1f0>)
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a16:	88f8      	ldrh	r0, [r7, #6]
 8005a18:	893a      	ldrh	r2, [r7, #8]
 8005a1a:	8979      	ldrh	r1, [r7, #10]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	4603      	mov	r3, r0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 fe9c 	bl	8007764 <I2C_RequestMemoryWrite>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d052      	beq.n	8005ad8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e081      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f002 f98e 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d107      	bne.n	8005a5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e06b      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_I2C_Mem_Write+0x180>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d017      	beq.n	8005ad8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1aa      	bne.n	8005a36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f002 f97a 	bl	8007dde <I2C_WaitOnBTFFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00d      	beq.n	8005b0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d107      	bne.n	8005b08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e016      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	00100002 	.word	0x00100002
 8005b48:	ffff0000 	.word	0xffff0000

08005b4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	; 0x30
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	813b      	strh	r3, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b66:	f7fd fb1d 	bl	80031a4 <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 8208 	bne.w	8005f8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2319      	movs	r3, #25
 8005b80:	2201      	movs	r2, #1
 8005b82:	497b      	ldr	r1, [pc, #492]	; (8005d70 <HAL_I2C_Mem_Read+0x224>)
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f002 f813 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b90:	2302      	movs	r3, #2
 8005b92:	e1fb      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2C_Mem_Read+0x56>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e1f4      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d007      	beq.n	8005bc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2222      	movs	r2, #34	; 0x22
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2240      	movs	r2, #64	; 0x40
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a5b      	ldr	r2, [pc, #364]	; (8005d74 <HAL_I2C_Mem_Read+0x228>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c0a:	88f8      	ldrh	r0, [r7, #6]
 8005c0c:	893a      	ldrh	r2, [r7, #8]
 8005c0e:	8979      	ldrh	r1, [r7, #10]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	4603      	mov	r3, r0
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f001 fe38 	bl	8007890 <I2C_RequestMemoryRead>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e1b0      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d113      	bne.n	8005c5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c32:	2300      	movs	r3, #0
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e184      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d11b      	bne.n	8005c9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e164      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d11b      	bne.n	8005cda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	e144      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cf0:	e138      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	f200 80f1 	bhi.w	8005ede <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d123      	bne.n	8005d4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f002 f8db 	bl	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e139      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d4a:	e10b      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d14e      	bne.n	8005df2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4906      	ldr	r1, [pc, #24]	; (8005d78 <HAL_I2C_Mem_Read+0x22c>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f001 ff26 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e10e      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
 8005d6e:	bf00      	nop
 8005d70:	00100002 	.word	0x00100002
 8005d74:	ffff0000 	.word	0xffff0000
 8005d78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005df0:	e0b8      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4966      	ldr	r1, [pc, #408]	; (8005f94 <HAL_I2C_Mem_Read+0x448>)
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f001 fed7 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0bf      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2200      	movs	r2, #0
 8005e56:	494f      	ldr	r1, [pc, #316]	; (8005f94 <HAL_I2C_Mem_Read+0x448>)
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f001 fea9 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e091      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005edc:	e042      	b.n	8005f64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f001 ffee 	bl	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e04c      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d118      	bne.n	8005f64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f aec2 	bne.w	8005cf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3728      	adds	r7, #40	; 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	00010004 	.word	0x00010004

08005f98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d003      	beq.n	8005fd0 <HAL_I2C_EV_IRQHandler+0x38>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	f040 80c1 	bne.w	8006152 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <HAL_I2C_EV_IRQHandler+0x6e>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ff0:	d003      	beq.n	8005ffa <HAL_I2C_EV_IRQHandler+0x62>
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_EV_IRQHandler+0x66>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x68>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b01      	cmp	r3, #1
 8006002:	f000 8132 	beq.w	800626a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_I2C_EV_IRQHandler+0x92>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	0a5b      	lsrs	r3, r3, #9
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 ffd6 	bl	8007fce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fd83 	bl	8006b2e <I2C_Master_SB>
 8006028:	e092      	b.n	8006150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0xb2>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fdf9 	bl	8006c3a <I2C_Master_ADD10>
 8006048:	e082      	b.n	8006150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_I2C_EV_IRQHandler+0xd2>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	0a5b      	lsrs	r3, r3, #9
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fe13 	bl	8006c8e <I2C_Master_ADDR>
 8006068:	e072      	b.n	8006150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	089b      	lsrs	r3, r3, #2
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d03b      	beq.n	80060ee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006084:	f000 80f3 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	09db      	lsrs	r3, r3, #7
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	0a9b      	lsrs	r3, r3, #10
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d009      	beq.n	80060b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f9f3 	bl	8006498 <I2C_MasterTransmit_TXE>
 80060b2:	e04d      	b.n	8006150 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80d6 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	0a5b      	lsrs	r3, r3, #9
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80cf 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2b21      	cmp	r3, #33	; 0x21
 80060d4:	d103      	bne.n	80060de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa7a 	bl	80065d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060dc:	e0c7      	b.n	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	f040 80c4 	bne.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fae8 	bl	80066bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060ec:	e0bf      	b.n	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fc:	f000 80b7 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <HAL_I2C_EV_IRQHandler+0x194>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	0a9b      	lsrs	r3, r3, #10
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <HAL_I2C_EV_IRQHandler+0x194>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fb5d 	bl	80067e4 <I2C_MasterReceive_RXNE>
 800612a:	e011      	b.n	8006150 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 809a 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	0a5b      	lsrs	r3, r3, #9
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8093 	beq.w	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fc06 	bl	800695a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800614e:	e08e      	b.n	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006150:	e08d      	b.n	800626e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e007      	b.n	8006174 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x20e>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	0a5b      	lsrs	r3, r3, #9
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 ffc4 	bl	800712c <I2C_Slave_ADDR>
 80061a4:	e066      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_I2C_EV_IRQHandler+0x22e>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fffe 	bl	80071c0 <I2C_Slave_STOPF>
 80061c4:	e056      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b21      	cmp	r3, #33	; 0x21
 80061ca:	d002      	beq.n	80061d2 <HAL_I2C_EV_IRQHandler+0x23a>
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b29      	cmp	r3, #41	; 0x29
 80061d0:	d125      	bne.n	800621e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	09db      	lsrs	r3, r3, #7
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x266>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	0a9b      	lsrs	r3, r3, #10
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x266>
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 feda 	bl	8006fb0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061fc:	e039      	b.n	8006272 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d033      	beq.n	8006272 <HAL_I2C_EV_IRQHandler+0x2da>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	0a5b      	lsrs	r3, r3, #9
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d02d      	beq.n	8006272 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ff07 	bl	800702a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800621c:	e029      	b.n	8006272 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	099b      	lsrs	r3, r3, #6
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <HAL_I2C_EV_IRQHandler+0x2b2>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0a9b      	lsrs	r3, r3, #10
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 ff12 	bl	800706c <I2C_SlaveReceive_RXNE>
 8006248:	e014      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	089b      	lsrs	r3, r3, #2
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00e      	beq.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	0a5b      	lsrs	r3, r3, #9
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 ff40 	bl	80070e8 <I2C_SlaveReceive_BTF>
 8006268:	e004      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006272:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b08a      	sub	sp, #40	; 0x28
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <HAL_I2C_ER_IRQHandler+0x4e>
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062c6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	0a5b      	lsrs	r3, r3, #9
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <HAL_I2C_ER_IRQHandler+0x78>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80062f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	0a9b      	lsrs	r3, r3, #10
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03f      	beq.n	800637e <HAL_I2C_ER_IRQHandler+0x104>
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d039      	beq.n	800637e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800630a:	7efb      	ldrb	r3, [r7, #27]
 800630c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006324:	7ebb      	ldrb	r3, [r7, #26]
 8006326:	2b20      	cmp	r3, #32
 8006328:	d112      	bne.n	8006350 <HAL_I2C_ER_IRQHandler+0xd6>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10f      	bne.n	8006350 <HAL_I2C_ER_IRQHandler+0xd6>
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	2b21      	cmp	r3, #33	; 0x21
 8006334:	d008      	beq.n	8006348 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006336:	7cfb      	ldrb	r3, [r7, #19]
 8006338:	2b29      	cmp	r3, #41	; 0x29
 800633a:	d005      	beq.n	8006348 <HAL_I2C_ER_IRQHandler+0xce>
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	2b28      	cmp	r3, #40	; 0x28
 8006340:	d106      	bne.n	8006350 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b21      	cmp	r3, #33	; 0x21
 8006346:	d103      	bne.n	8006350 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f869 	bl	8007420 <I2C_Slave_AF>
 800634e:	e016      	b.n	800637e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006358:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006362:	7efb      	ldrb	r3, [r7, #27]
 8006364:	2b10      	cmp	r3, #16
 8006366:	d002      	beq.n	800636e <HAL_I2C_ER_IRQHandler+0xf4>
 8006368:	7efb      	ldrb	r3, [r7, #27]
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d107      	bne.n	800637e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	0adb      	lsrs	r3, r3, #11
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <HAL_I2C_ER_IRQHandler+0x12e>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	0a1b      	lsrs	r3, r3, #8
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	f043 0308 	orr.w	r3, r3, #8
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80063a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f8a0 	bl	8007500 <I2C_ITError>
  }
}
 80063c0:	bf00      	nop
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
 8006424:	4613      	mov	r3, r2
 8006426:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d150      	bne.n	8006560 <I2C_MasterTransmit_TXE+0xc8>
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b21      	cmp	r3, #33	; 0x21
 80064c2:	d14d      	bne.n	8006560 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d01d      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d01a      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064d6:	d016      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2211      	movs	r2, #17
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ff62 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006504:	e060      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006514:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006524:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d107      	bne.n	8006550 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff7d 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800654e:	e03b      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff35 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800655e:	e033      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b21      	cmp	r3, #33	; 0x21
 8006564:	d005      	beq.n	8006572 <I2C_MasterTransmit_TXE+0xda>
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d12d      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	d12a      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800658c:	e01c      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d103      	bne.n	80065a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f88e 	bl	80066bc <I2C_MemoryTransmit_TXE_BTF>
}
 80065a0:	e012      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065c6:	e7ff      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b21      	cmp	r3, #33	; 0x21
 80065e8:	d164      	bne.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d012      	beq.n	800661a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006618:	e04c      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d01d      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b20      	cmp	r3, #32
 8006624:	d01a      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800662c:	d016      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800663c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2211      	movs	r2, #17
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff feb7 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
}
 800665a:	e02b      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800666a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d107      	bne.n	80066a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fed2 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
}
 80066a4:	e006      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fe8a 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11d      	bne.n	8006710 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10b      	bne.n	80066f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80066f2:	e073      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	121b      	asrs	r3, r3, #8
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800670e:	e065      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10b      	bne.n	8006730 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800672e:	e055      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	2b02      	cmp	r3, #2
 8006736:	d151      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b22      	cmp	r3, #34	; 0x22
 800673c:	d10d      	bne.n	800675a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006758:	e040      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b21      	cmp	r3, #33	; 0x21
 8006768:	d112      	bne.n	8006790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800678e:	e025      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d120      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b21      	cmp	r3, #33	; 0x21
 800679e:	d11d      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fe36 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b22      	cmp	r3, #34	; 0x22
 80067f6:	f040 80ac 	bne.w	8006952 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d921      	bls.n	800684c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b03      	cmp	r3, #3
 8006836:	f040 808c 	bne.w	8006952 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800684a:	e082      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	2b02      	cmp	r3, #2
 8006852:	d075      	beq.n	8006940 <I2C_MasterReceive_RXNE+0x15c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d002      	beq.n	8006860 <I2C_MasterReceive_RXNE+0x7c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d16f      	bne.n	8006940 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fafd 	bl	8007e60 <I2C_WaitOnSTOPRequestThroughIT>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d142      	bne.n	80068f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800688a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d10a      	bne.n	80068dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fdc1 	bl	800645c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068da:	e03a      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2212      	movs	r2, #18
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd76 	bl	80063dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068f0:	e02f      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006900:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fd99 	bl	8006470 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800693e:	e008      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694e:	605a      	str	r2, [r3, #4]
}
 8006950:	e7ff      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b04      	cmp	r3, #4
 8006970:	d11b      	bne.n	80069aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006980:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069a8:	e0bd      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d129      	bne.n	8006a08 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d00a      	beq.n	80069e0 <I2C_MasterReceive_BTF+0x86>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d007      	beq.n	80069e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a06:	e08e      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d176      	bne.n	8006b00 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <I2C_MasterReceive_BTF+0xc4>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d108      	bne.n	8006a30 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e019      	b.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d002      	beq.n	8006a3c <I2C_MasterReceive_BTF+0xe2>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d108      	bne.n	8006a4e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e00a      	b.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d007      	beq.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006abe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d10a      	bne.n	8006aea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fcba 	bl	800645c <HAL_I2C_MemRxCpltCallback>
}
 8006ae8:	e01d      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2212      	movs	r2, #18
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fc6f 	bl	80063dc <HAL_I2C_MasterRxCpltCallback>
}
 8006afe:	e012      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d117      	bne.n	8006b72 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b5a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b5c:	e067      	b.n	8006c2e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]
}
 8006b70:	e05d      	b.n	8006c2e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b7a:	d133      	bne.n	8006be4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d109      	bne.n	8006b9c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e008      	b.n	8006bae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <I2C_Master_SB+0x92>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d032      	beq.n	8006c2e <I2C_Master_SB+0x100>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02d      	beq.n	8006c2e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be0:	605a      	str	r2, [r3, #4]
}
 8006be2:	e024      	b.n	8006c2e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10e      	bne.n	8006c0a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	11db      	asrs	r3, r3, #7
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0306 	and.w	r3, r3, #6
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f063 030f 	orn	r3, r3, #15
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	611a      	str	r2, [r3, #16]
}
 8006c08:	e011      	b.n	8006c2e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d10d      	bne.n	8006c2e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	11db      	asrs	r3, r3, #7
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0306 	and.w	r3, r3, #6
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f063 030e 	orn	r3, r3, #14
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	611a      	str	r2, [r3, #16]
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <I2C_Master_ADD10+0x26>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <I2C_Master_ADD10+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c80:	605a      	str	r2, [r3, #4]
  }
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b091      	sub	sp, #68	; 0x44
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b22      	cmp	r3, #34	; 0x22
 8006cb6:	f040 8169 	bne.w	8006f8c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10f      	bne.n	8006ce2 <I2C_Master_ADDR+0x54>
 8006cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d10b      	bne.n	8006ce2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	e160      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d11d      	bne.n	8006d26 <I2C_Master_ADDR+0x98>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cf2:	d118      	bne.n	8006d26 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d18:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	651a      	str	r2, [r3, #80]	; 0x50
 8006d24:	e13e      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d30:	2300      	movs	r3, #0
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e115      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f040 808a 	bne.w	8006e78 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d6a:	d137      	bne.n	8006ddc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8a:	d113      	bne.n	8006db4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	e0e7      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db4:	2300      	movs	r3, #0
 8006db6:	623b      	str	r3, [r7, #32]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	623b      	str	r3, [r7, #32]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e0d3      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d02e      	beq.n	8006e40 <I2C_Master_ADDR+0x1b2>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d02b      	beq.n	8006e40 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	2b12      	cmp	r3, #18
 8006dec:	d102      	bne.n	8006df4 <I2C_Master_ADDR+0x166>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d125      	bne.n	8006e40 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00e      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d00b      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d008      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e26:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	e0a1      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e085      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d14d      	bne.n	8006f1e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d016      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d013      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d010      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e007      	b.n	8006ec6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ec4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed4:	d117      	bne.n	8006f06 <I2C_Master_ADDR+0x278>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006edc:	d00b      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d008      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d005      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d002      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d107      	bne.n	8006f06 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	e032      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d117      	bne.n	8006f6e <I2C_Master_ADDR+0x2e0>
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f44:	d00b      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d008      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d005      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d002      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d107      	bne.n	8006f6e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f8a:	e00b      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
}
 8006fa2:	e7ff      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
 8006fa4:	bf00      	nop
 8006fa6:	3744      	adds	r7, #68	; 0x44
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d02b      	beq.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d114      	bne.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b29      	cmp	r3, #41	; 0x29
 8006ffc:	d111      	bne.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2228      	movs	r2, #40	; 0x28
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f9e7 	bl	80063f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d02c      	beq.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d114      	bne.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d111      	bne.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2222      	movs	r2, #34	; 0x22
 80070d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2228      	movs	r2, #40	; 0x28
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff f992 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007146:	2b28      	cmp	r3, #40	; 0x28
 8007148:	d127      	bne.n	800719a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	089b      	lsrs	r3, r3, #2
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007166:	2301      	movs	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	09db      	lsrs	r3, r3, #7
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	81bb      	strh	r3, [r7, #12]
 800717c:	e002      	b.n	8007184 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800718c:	89ba      	ldrh	r2, [r7, #12]
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f940 	bl	8006418 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007198:	e00e      	b.n	80071b8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80071e0:	2300      	movs	r3, #0
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721c:	d172      	bne.n	8007304 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b22      	cmp	r3, #34	; 0x22
 8007222:	d002      	beq.n	800722a <I2C_Slave_STOPF+0x6a>
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b2a      	cmp	r3, #42	; 0x2a
 8007228:	d135      	bne.n	8007296 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc f9a3 	bl	80035ae <HAL_DMA_GetState>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d049      	beq.n	8007302 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	4a69      	ldr	r2, [pc, #420]	; (8007418 <I2C_Slave_STOPF+0x258>)
 8007274:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	4618      	mov	r0, r3
 800727c:	f7fc f975 	bl	800356a <HAL_DMA_Abort_IT>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d03d      	beq.n	8007302 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007294:	e035      	b.n	8007302 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0204 	orr.w	r2, r3, #4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fc f96d 	bl	80035ae <HAL_DMA_GetState>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d014      	beq.n	8007304 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072de:	4a4e      	ldr	r2, [pc, #312]	; (8007418 <I2C_Slave_STOPF+0x258>)
 80072e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fc f93f 	bl	800356a <HAL_DMA_Abort_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
 8007300:	e000      	b.n	8007304 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007302:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d03e      	beq.n	800738c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b04      	cmp	r3, #4
 800731a:	d112      	bne.n	8007342 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d112      	bne.n	8007376 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	f043 0204 	orr.w	r2, r3, #4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f8b3 	bl	8007500 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800739a:	e039      	b.n	8007410 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b2a      	cmp	r3, #42	; 0x2a
 80073a0:	d109      	bne.n	80073b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2228      	movs	r2, #40	; 0x28
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff f827 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b28      	cmp	r3, #40	; 0x28
 80073c0:	d111      	bne.n	80073e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <I2C_Slave_STOPF+0x25c>)
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff f828 	bl	8006434 <HAL_I2C_ListenCpltCallback>
}
 80073e4:	e014      	b.n	8007410 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	2b22      	cmp	r3, #34	; 0x22
 80073ec:	d002      	beq.n	80073f4 <I2C_Slave_STOPF+0x234>
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2b22      	cmp	r3, #34	; 0x22
 80073f2:	d10d      	bne.n	8007410 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fe fffa 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08007a61 	.word	0x08007a61
 800741c:	ffff0000 	.word	0xffff0000

08007420 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d002      	beq.n	8007442 <I2C_Slave_AF+0x22>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b20      	cmp	r3, #32
 8007440:	d129      	bne.n	8007496 <I2C_Slave_AF+0x76>
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	2b28      	cmp	r3, #40	; 0x28
 8007446:	d126      	bne.n	8007496 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a2c      	ldr	r2, [pc, #176]	; (80074fc <I2C_Slave_AF+0xdc>)
 800744c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800745c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007466:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe ffd0 	bl	8006434 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007494:	e02e      	b.n	80074f4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b21      	cmp	r3, #33	; 0x21
 800749a:	d126      	bne.n	80074ea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a17      	ldr	r2, [pc, #92]	; (80074fc <I2C_Slave_AF+0xdc>)
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2221      	movs	r2, #33	; 0x21
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe ff84 	bl	80063f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80074e8:	e004      	b.n	80074f4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074f2:	615a      	str	r2, [r3, #20]
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	ffff0000 	.word	0xffff0000

08007500 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007516:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b10      	cmp	r3, #16
 800751c:	d002      	beq.n	8007524 <I2C_ITError+0x24>
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d10a      	bne.n	800753a <I2C_ITError+0x3a>
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b22      	cmp	r3, #34	; 0x22
 8007528:	d107      	bne.n	800753a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007538:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007540:	2b28      	cmp	r3, #40	; 0x28
 8007542:	d107      	bne.n	8007554 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2228      	movs	r2, #40	; 0x28
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007552:	e015      	b.n	8007580 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800755e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007562:	d00a      	beq.n	800757a <I2C_ITError+0x7a>
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	2b60      	cmp	r3, #96	; 0x60
 8007568:	d007      	beq.n	800757a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758e:	d162      	bne.n	8007656 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800759e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d020      	beq.n	80075f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	4a6a      	ldr	r2, [pc, #424]	; (800775c <I2C_ITError+0x25c>)
 80075b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fb ffd5 	bl	800356a <HAL_DMA_Abort_IT>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8089 	beq.w	80076da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075ea:	4610      	mov	r0, r2
 80075ec:	4798      	blx	r3
 80075ee:	e074      	b.n	80076da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	4a59      	ldr	r2, [pc, #356]	; (800775c <I2C_ITError+0x25c>)
 80075f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fb ffb4 	bl	800356a <HAL_DMA_Abort_IT>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d068      	beq.n	80076da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d10b      	bne.n	800762e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	e041      	b.n	80076da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b60      	cmp	r3, #96	; 0x60
 8007660:	d125      	bne.n	80076ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d10b      	bne.n	8007696 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0201 	bic.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fe feec 	bl	8006484 <HAL_I2C_AbortCpltCallback>
 80076ac:	e015      	b.n	80076da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	d10b      	bne.n	80076d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fe fecb 	bl	8006470 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10e      	bne.n	8007708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d109      	bne.n	8007708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007716:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d113      	bne.n	8007754 <I2C_ITError+0x254>
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b28      	cmp	r3, #40	; 0x28
 8007730:	d110      	bne.n	8007754 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <I2C_ITError+0x260>)
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fe fe70 	bl	8006434 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	08007a61 	.word	0x08007a61
 8007760:	ffff0000 	.word	0xffff0000

08007764 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4603      	mov	r3, r0
 8007774:	817b      	strh	r3, [r7, #10]
 8007776:	460b      	mov	r3, r1
 8007778:	813b      	strh	r3, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800778c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	2200      	movs	r2, #0
 8007796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fa08 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b4:	d103      	bne.n	80077be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e05f      	b.n	8007882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077c2:	897b      	ldrh	r3, [r7, #10]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	492d      	ldr	r1, [pc, #180]	; (800788c <I2C_RequestMemoryWrite+0x128>)
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa40 	bl	8007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e04c      	b.n	8007882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007800:	6a39      	ldr	r1, [r7, #32]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 faaa 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00d      	beq.n	800782a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	2b04      	cmp	r3, #4
 8007814:	d107      	bne.n	8007826 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e02b      	b.n	8007882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d105      	bne.n	800783c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007830:	893b      	ldrh	r3, [r7, #8]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	611a      	str	r2, [r3, #16]
 800783a:	e021      	b.n	8007880 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	b29b      	uxth	r3, r3
 8007842:	b2da      	uxtb	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800784a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784c:	6a39      	ldr	r1, [r7, #32]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fa84 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00d      	beq.n	8007876 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b04      	cmp	r3, #4
 8007860:	d107      	bne.n	8007872 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e005      	b.n	8007882 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	00010002 	.word	0x00010002

08007890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	461a      	mov	r2, r3
 800789e:	4603      	mov	r3, r0
 80078a0:	817b      	strh	r3, [r7, #10]
 80078a2:	460b      	mov	r3, r1
 80078a4:	813b      	strh	r3, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f96a 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00d      	beq.n	80078fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f0:	d103      	bne.n	80078fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e0aa      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078fe:	897b      	ldrh	r3, [r7, #10]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	461a      	mov	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800790c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	6a3a      	ldr	r2, [r7, #32]
 8007912:	4952      	ldr	r1, [pc, #328]	; (8007a5c <I2C_RequestMemoryRead+0x1cc>)
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f9a2 	bl	8007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e097      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800793a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793c:	6a39      	ldr	r1, [r7, #32]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fa0c 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00d      	beq.n	8007966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b04      	cmp	r3, #4
 8007950:	d107      	bne.n	8007962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e076      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d105      	bne.n	8007978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800796c:	893b      	ldrh	r3, [r7, #8]
 800796e:	b2da      	uxtb	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	611a      	str	r2, [r3, #16]
 8007976:	e021      	b.n	80079bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	6a39      	ldr	r1, [r7, #32]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f9e6 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00d      	beq.n	80079b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b04      	cmp	r3, #4
 800799c:	d107      	bne.n	80079ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e050      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079b2:	893b      	ldrh	r3, [r7, #8]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079be:	6a39      	ldr	r1, [r7, #32]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f9cb 	bl	8007d5c <I2C_WaitOnTXEFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d107      	bne.n	80079e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e035      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f8d3 	bl	8007bb0 <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00d      	beq.n	8007a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d103      	bne.n	8007a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e013      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a2c:	897b      	ldrh	r3, [r7, #10]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f043 0301 	orr.w	r3, r3, #1
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	4906      	ldr	r1, [pc, #24]	; (8007a5c <I2C_RequestMemoryRead+0x1cc>)
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f90b 	bl	8007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	00010002 	.word	0x00010002

08007a60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ba8 <I2C_DMAAbort+0x148>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	4a4a      	ldr	r2, [pc, #296]	; (8007bac <I2C_DMAAbort+0x14c>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	0a1a      	lsrs	r2, r3, #8
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00da      	lsls	r2, r3, #3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	f043 0220 	orr.w	r2, r3, #32
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007aa6:	e00a      	b.n	8007abe <I2C_DMAAbort+0x5e>
    }
    count--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abc:	d0ea      	beq.n	8007a94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aca:	2200      	movs	r2, #0
 8007acc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	2200      	movs	r2, #0
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b00:	2200      	movs	r2, #0
 8007b02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b10:	2200      	movs	r2, #0
 8007b12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b60      	cmp	r3, #96	; 0x60
 8007b2e:	d10e      	bne.n	8007b4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b46:	6978      	ldr	r0, [r7, #20]
 8007b48:	f7fe fc9c 	bl	8006484 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b4c:	e027      	b.n	8007b9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b54:	2b28      	cmp	r3, #40	; 0x28
 8007b56:	d117      	bne.n	8007b88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2228      	movs	r2, #40	; 0x28
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b86:	e007      	b.n	8007b98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b98:	6978      	ldr	r0, [r7, #20]
 8007b9a:	f7fe fc69 	bl	8006470 <HAL_I2C_ErrorCallback>
}
 8007b9e:	bf00      	nop
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000030 	.word	0x20000030
 8007bac:	14f8b589 	.word	0x14f8b589

08007bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bc0:	e025      	b.n	8007c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d021      	beq.n	8007c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fb faeb 	bl	80031a4 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d116      	bne.n	8007c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	f043 0220 	orr.w	r2, r3, #32
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e023      	b.n	8007c56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	0c1b      	lsrs	r3, r3, #16
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d10d      	bne.n	8007c34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	43da      	mvns	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	e00c      	b.n	8007c4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	43da      	mvns	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bf0c      	ite	eq
 8007c46:	2301      	moveq	r3, #1
 8007c48:	2300      	movne	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d0b6      	beq.n	8007bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c6c:	e051      	b.n	8007d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7c:	d123      	bne.n	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	f043 0204 	orr.w	r2, r3, #4
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e046      	b.n	8007d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d021      	beq.n	8007d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cce:	f7fb fa69 	bl	80031a4 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d302      	bcc.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d116      	bne.n	8007d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e020      	b.n	8007d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d10c      	bne.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	43da      	mvns	r2, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4013      	ands	r3, r2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf14      	ite	ne
 8007d2e:	2301      	movne	r3, #1
 8007d30:	2300      	moveq	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	e00b      	b.n	8007d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	43da      	mvns	r2, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4013      	ands	r3, r2
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d18d      	bne.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d68:	e02d      	b.n	8007dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f900 	bl	8007f70 <I2C_IsAcknowledgeFailed>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e02d      	b.n	8007dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d021      	beq.n	8007dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d82:	f7fb fa0f 	bl	80031a4 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d302      	bcc.n	8007d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d116      	bne.n	8007dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0220 	orr.w	r2, r3, #32
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e007      	b.n	8007dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d1ca      	bne.n	8007d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dea:	e02d      	b.n	8007e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f8bf 	bl	8007f70 <I2C_IsAcknowledgeFailed>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e02d      	b.n	8007e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d021      	beq.n	8007e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e04:	f7fb f9ce 	bl	80031a4 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d116      	bne.n	8007e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f043 0220 	orr.w	r2, r3, #32
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e007      	b.n	8007e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d1ca      	bne.n	8007dec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e6c:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	08db      	lsrs	r3, r3, #3
 8007e72:	4a13      	ldr	r2, [pc, #76]	; (8007ec0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007e74:	fba2 2303 	umull	r2, r3, r2, r3
 8007e78:	0a1a      	lsrs	r2, r3, #8
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d107      	bne.n	8007e9e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f043 0220 	orr.w	r2, r3, #32
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e008      	b.n	8007eb0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eac:	d0e9      	beq.n	8007e82 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000030 	.word	0x20000030
 8007ec0:	14f8b589 	.word	0x14f8b589

08007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed0:	e042      	b.n	8007f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d119      	bne.n	8007f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0210 	mvn.w	r2, #16
 8007ee8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e029      	b.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f14:	f7fb f946 	bl	80031a4 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d116      	bne.n	8007f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	f043 0220 	orr.w	r2, r3, #32
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e007      	b.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d1b5      	bne.n	8007ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f86:	d11b      	bne.n	8007fc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007fde:	d103      	bne.n	8007fe8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007fe6:	e007      	b.n	8007ff8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007ff0:	d102      	bne.n	8007ff8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e0bf      	b.n	8008196 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fa f81c 	bl	8002068 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008046:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6999      	ldr	r1, [r3, #24]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800805c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6899      	ldr	r1, [r3, #8]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b4a      	ldr	r3, [pc, #296]	; (80081a0 <HAL_LTDC_Init+0x19c>)
 8008078:	400b      	ands	r3, r1
 800807a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6899      	ldr	r1, [r3, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68d9      	ldr	r1, [r3, #12]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b3e      	ldr	r3, [pc, #248]	; (80081a0 <HAL_LTDC_Init+0x19c>)
 80080a6:	400b      	ands	r3, r1
 80080a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68d9      	ldr	r1, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1a      	ldr	r2, [r3, #32]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6919      	ldr	r1, [r3, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b33      	ldr	r3, [pc, #204]	; (80081a0 <HAL_LTDC_Init+0x19c>)
 80080d4:	400b      	ands	r3, r1
 80080d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6919      	ldr	r1, [r3, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6959      	ldr	r1, [r3, #20]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <HAL_LTDC_Init+0x19c>)
 8008102:	400b      	ands	r3, r1
 8008104:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6959      	ldr	r1, [r3, #20]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008146:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0206 	orr.w	r2, r2, #6
 8008172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699a      	ldr	r2, [r3, #24]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	f000f800 	.word	0xf000f800

080081a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d023      	beq.n	800820e <HAL_LTDC_IRQHandler+0x6a>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01e      	beq.n	800820e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0204 	bic.w	r2, r2, #4
 80081de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2204      	movs	r2, #4
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081ee:	f043 0201 	orr.w	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2204      	movs	r2, #4
 80081fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f9 ffb1 	bl	8002170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d023      	beq.n	8008260 <HAL_LTDC_IRQHandler+0xbc>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01e      	beq.n	8008260 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0202 	bic.w	r2, r2, #2
 8008230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2202      	movs	r2, #2
 8008238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008240:	f043 0202 	orr.w	r2, r3, #2
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2204      	movs	r2, #4
 800824e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7f9 ff88 	bl	8002170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01b      	beq.n	80082a2 <HAL_LTDC_IRQHandler+0xfe>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d016      	beq.n	80082a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2201      	movs	r2, #1
 800828a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f825 	bl	80082ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01b      	beq.n	80082e4 <HAL_LTDC_IRQHandler+0x140>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d016      	beq.n	80082e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0208 	bic.w	r2, r2, #8
 80082c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2208      	movs	r2, #8
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f80e 	bl	8008300 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008314:	b5b0      	push	{r4, r5, r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_LTDC_ConfigLayer+0x1a>
 800832a:	2302      	movs	r3, #2
 800832c:	e02c      	b.n	8008388 <HAL_LTDC_ConfigLayer+0x74>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2134      	movs	r1, #52	; 0x34
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4614      	mov	r4, r2
 8008352:	461d      	mov	r5, r3
 8008354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800835a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800835c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800835e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f811 	bl	8008390 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2201      	movs	r2, #1
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bdb0      	pop	{r4, r5, r7, pc}

08008390 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008390:	b480      	push	{r7}
 8008392:	b089      	sub	sp, #36	; 0x24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	0c1b      	lsrs	r3, r3, #16
 80083a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ac:	4413      	add	r3, r2
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	01db      	lsls	r3, r3, #7
 80083bc:	4413      	add	r3, r2
 80083be:	3384      	adds	r3, #132	; 0x84
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	4611      	mov	r1, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	01d2      	lsls	r2, r2, #7
 80083cc:	440a      	add	r2, r1
 80083ce:	3284      	adds	r2, #132	; 0x84
 80083d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80083d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80083e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80083e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4619      	mov	r1, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	01db      	lsls	r3, r3, #7
 80083f4:	440b      	add	r3, r1
 80083f6:	3384      	adds	r3, #132	; 0x84
 80083f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80083fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800840e:	4413      	add	r3, r2
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	01db      	lsls	r3, r3, #7
 800841e:	4413      	add	r3, r2
 8008420:	3384      	adds	r3, #132	; 0x84
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	4611      	mov	r1, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	01d2      	lsls	r2, r2, #7
 800842e:	440a      	add	r2, r1
 8008430:	3284      	adds	r2, #132	; 0x84
 8008432:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008436:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008446:	4413      	add	r3, r2
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	01db      	lsls	r3, r3, #7
 8008454:	440b      	add	r3, r1
 8008456:	3384      	adds	r3, #132	; 0x84
 8008458:	4619      	mov	r1, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4313      	orrs	r3, r2
 800845e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	01db      	lsls	r3, r3, #7
 800846a:	4413      	add	r3, r2
 800846c:	3384      	adds	r3, #132	; 0x84
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	4611      	mov	r1, r2
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	01d2      	lsls	r2, r2, #7
 800847a:	440a      	add	r2, r1
 800847c:	3284      	adds	r2, #132	; 0x84
 800847e:	f023 0307 	bic.w	r3, r3, #7
 8008482:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	01db      	lsls	r3, r3, #7
 800848e:	4413      	add	r3, r2
 8008490:	3384      	adds	r3, #132	; 0x84
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	061b      	lsls	r3, r3, #24
 80084b4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	01db      	lsls	r3, r3, #7
 80084c0:	4413      	add	r3, r2
 80084c2:	3384      	adds	r3, #132	; 0x84
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	01db      	lsls	r3, r3, #7
 80084d0:	4413      	add	r3, r2
 80084d2:	3384      	adds	r3, #132	; 0x84
 80084d4:	461a      	mov	r2, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e0:	461a      	mov	r2, r3
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	440b      	add	r3, r1
 80084f6:	3384      	adds	r3, #132	; 0x84
 80084f8:	4619      	mov	r1, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	4413      	add	r3, r2
 800850c:	3384      	adds	r3, #132	; 0x84
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	4611      	mov	r1, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	01d2      	lsls	r2, r2, #7
 800851a:	440a      	add	r2, r1
 800851c:	3284      	adds	r2, #132	; 0x84
 800851e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008522:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	01db      	lsls	r3, r3, #7
 800852e:	4413      	add	r3, r2
 8008530:	3384      	adds	r3, #132	; 0x84
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	01db      	lsls	r3, r3, #7
 8008544:	4413      	add	r3, r2
 8008546:	3384      	adds	r3, #132	; 0x84
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	4611      	mov	r1, r2
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	01d2      	lsls	r2, r2, #7
 8008554:	440a      	add	r2, r1
 8008556:	3284      	adds	r2, #132	; 0x84
 8008558:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800855c:	f023 0307 	bic.w	r3, r3, #7
 8008560:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	69da      	ldr	r2, [r3, #28]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	6809      	ldr	r1, [r1, #0]
 800856e:	4608      	mov	r0, r1
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	01c9      	lsls	r1, r1, #7
 8008574:	4401      	add	r1, r0
 8008576:	3184      	adds	r1, #132	; 0x84
 8008578:	4313      	orrs	r3, r2
 800857a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	01db      	lsls	r3, r3, #7
 8008586:	4413      	add	r3, r2
 8008588:	3384      	adds	r3, #132	; 0x84
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	01db      	lsls	r3, r3, #7
 8008596:	4413      	add	r3, r2
 8008598:	3384      	adds	r3, #132	; 0x84
 800859a:	461a      	mov	r2, r3
 800859c:	2300      	movs	r3, #0
 800859e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	01db      	lsls	r3, r3, #7
 80085aa:	4413      	add	r3, r2
 80085ac:	3384      	adds	r3, #132	; 0x84
 80085ae:	461a      	mov	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80085be:	2304      	movs	r3, #4
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	e01b      	b.n	80085fc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d102      	bne.n	80085d2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80085cc:	2303      	movs	r3, #3
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	e014      	b.n	80085fc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d00b      	beq.n	80085f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d007      	beq.n	80085f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d003      	beq.n	80085f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085ee:	2b07      	cmp	r3, #7
 80085f0:	d102      	bne.n	80085f8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80085f2:	2302      	movs	r3, #2
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	e001      	b.n	80085fc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80085f8:	2301      	movs	r3, #1
 80085fa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	01db      	lsls	r3, r3, #7
 8008606:	4413      	add	r3, r2
 8008608:	3384      	adds	r3, #132	; 0x84
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	4611      	mov	r1, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	01d2      	lsls	r2, r2, #7
 8008616:	440a      	add	r2, r1
 8008618:	3284      	adds	r2, #132	; 0x84
 800861a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800861e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6859      	ldr	r1, [r3, #4]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	1acb      	subs	r3, r1, r3
 8008636:	69f9      	ldr	r1, [r7, #28]
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	6809      	ldr	r1, [r1, #0]
 8008642:	4608      	mov	r0, r1
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	01c9      	lsls	r1, r1, #7
 8008648:	4401      	add	r1, r0
 800864a:	3184      	adds	r1, #132	; 0x84
 800864c:	4313      	orrs	r3, r2
 800864e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	4413      	add	r3, r2
 800865c:	3384      	adds	r3, #132	; 0x84
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	4611      	mov	r1, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	01d2      	lsls	r2, r2, #7
 800866a:	440a      	add	r2, r1
 800866c:	3284      	adds	r2, #132	; 0x84
 800866e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	01db      	lsls	r3, r3, #7
 8008682:	4413      	add	r3, r2
 8008684:	3384      	adds	r3, #132	; 0x84
 8008686:	461a      	mov	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	01db      	lsls	r3, r3, #7
 8008698:	4413      	add	r3, r2
 800869a:	3384      	adds	r3, #132	; 0x84
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	4611      	mov	r1, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	01d2      	lsls	r2, r2, #7
 80086a8:	440a      	add	r2, r1
 80086aa:	3284      	adds	r2, #132	; 0x84
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	6013      	str	r3, [r2, #0]
}
 80086b2:	bf00      	nop
 80086b4:	3724      	adds	r7, #36	; 0x24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80086ca:	2300      	movs	r3, #0
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	4b20      	ldr	r3, [pc, #128]	; (8008750 <HAL_PWREx_EnableOverDrive+0x90>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <HAL_PWREx_EnableOverDrive+0x90>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6413      	str	r3, [r2, #64]	; 0x40
 80086da:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <HAL_PWREx_EnableOverDrive+0x90>)
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80086e6:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <HAL_PWREx_EnableOverDrive+0x94>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086ec:	f7fa fd5a 	bl	80031a4 <HAL_GetTick>
 80086f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086f2:	e009      	b.n	8008708 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086f4:	f7fa fd56 	bl	80031a4 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008702:	d901      	bls.n	8008708 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e01f      	b.n	8008748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008708:	4b13      	ldr	r3, [pc, #76]	; (8008758 <HAL_PWREx_EnableOverDrive+0x98>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008714:	d1ee      	bne.n	80086f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800871c:	f7fa fd42 	bl	80031a4 <HAL_GetTick>
 8008720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008722:	e009      	b.n	8008738 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008724:	f7fa fd3e 	bl	80031a4 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008732:	d901      	bls.n	8008738 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e007      	b.n	8008748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008738:	4b07      	ldr	r3, [pc, #28]	; (8008758 <HAL_PWREx_EnableOverDrive+0x98>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008744:	d1ee      	bne.n	8008724 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40023800 	.word	0x40023800
 8008754:	420e0040 	.word	0x420e0040
 8008758:	40007000 	.word	0x40007000
 800875c:	420e0044 	.word	0x420e0044

08008760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0cc      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008774:	4b68      	ldr	r3, [pc, #416]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d90c      	bls.n	800879c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008782:	4b65      	ldr	r3, [pc, #404]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	b2d2      	uxtb	r2, r2
 8008788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800878a:	4b63      	ldr	r3, [pc, #396]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	429a      	cmp	r2, r3
 8008796:	d001      	beq.n	800879c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e0b8      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d020      	beq.n	80087ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087b4:	4b59      	ldr	r3, [pc, #356]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	4a58      	ldr	r2, [pc, #352]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087cc:	4b53      	ldr	r3, [pc, #332]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	4a52      	ldr	r2, [pc, #328]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d8:	4b50      	ldr	r3, [pc, #320]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	494d      	ldr	r1, [pc, #308]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d044      	beq.n	8008880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d107      	bne.n	800880e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087fe:	4b47      	ldr	r3, [pc, #284]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d119      	bne.n	800883e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e07f      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d003      	beq.n	800881e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800881a:	2b03      	cmp	r3, #3
 800881c:	d107      	bne.n	800882e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800881e:	4b3f      	ldr	r3, [pc, #252]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e06f      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800882e:	4b3b      	ldr	r3, [pc, #236]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e067      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800883e:	4b37      	ldr	r3, [pc, #220]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f023 0203 	bic.w	r2, r3, #3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	4934      	ldr	r1, [pc, #208]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 800884c:	4313      	orrs	r3, r2
 800884e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008850:	f7fa fca8 	bl	80031a4 <HAL_GetTick>
 8008854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008856:	e00a      	b.n	800886e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008858:	f7fa fca4 	bl	80031a4 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f241 3288 	movw	r2, #5000	; 0x1388
 8008866:	4293      	cmp	r3, r2
 8008868:	d901      	bls.n	800886e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e04f      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 020c 	and.w	r2, r3, #12
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	429a      	cmp	r2, r3
 800887e:	d1eb      	bne.n	8008858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 030f 	and.w	r3, r3, #15
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d20c      	bcs.n	80088a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800888e:	4b22      	ldr	r3, [pc, #136]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008896:	4b20      	ldr	r3, [pc, #128]	; (8008918 <HAL_RCC_ClockConfig+0x1b8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d001      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e032      	b.n	800890e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088b4:	4b19      	ldr	r3, [pc, #100]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	4916      	ldr	r1, [pc, #88]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088d2:	4b12      	ldr	r3, [pc, #72]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	490e      	ldr	r1, [pc, #56]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088e6:	f000 f821 	bl	800892c <HAL_RCC_GetSysClockFreq>
 80088ea:	4602      	mov	r2, r0
 80088ec:	4b0b      	ldr	r3, [pc, #44]	; (800891c <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	091b      	lsrs	r3, r3, #4
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	490a      	ldr	r1, [pc, #40]	; (8008920 <HAL_RCC_ClockConfig+0x1c0>)
 80088f8:	5ccb      	ldrb	r3, [r1, r3]
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <HAL_RCC_ClockConfig+0x1c4>)
 8008900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <HAL_RCC_ClockConfig+0x1c8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f7fa fc08 	bl	800311c <HAL_InitTick>

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40023c00 	.word	0x40023c00
 800891c:	40023800 	.word	0x40023800
 8008920:	080a2068 	.word	0x080a2068
 8008924:	20000030 	.word	0x20000030
 8008928:	20000034 	.word	0x20000034

0800892c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800892c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008930:	b094      	sub	sp, #80	; 0x50
 8008932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	2300      	movs	r3, #0
 800893a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800893c:	2300      	movs	r3, #0
 800893e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008944:	4b79      	ldr	r3, [pc, #484]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f003 030c 	and.w	r3, r3, #12
 800894c:	2b08      	cmp	r3, #8
 800894e:	d00d      	beq.n	800896c <HAL_RCC_GetSysClockFreq+0x40>
 8008950:	2b08      	cmp	r3, #8
 8008952:	f200 80e1 	bhi.w	8008b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_RCC_GetSysClockFreq+0x34>
 800895a:	2b04      	cmp	r3, #4
 800895c:	d003      	beq.n	8008966 <HAL_RCC_GetSysClockFreq+0x3a>
 800895e:	e0db      	b.n	8008b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008960:	4b73      	ldr	r3, [pc, #460]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008964:	e0db      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008966:	4b73      	ldr	r3, [pc, #460]	; (8008b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8008968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800896a:	e0d8      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800896c:	4b6f      	ldr	r3, [pc, #444]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008976:	4b6d      	ldr	r3, [pc, #436]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d063      	beq.n	8008a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008982:	4b6a      	ldr	r3, [pc, #424]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	2200      	movs	r2, #0
 800898a:	63bb      	str	r3, [r7, #56]	; 0x38
 800898c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
 800899a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800899e:	4622      	mov	r2, r4
 80089a0:	462b      	mov	r3, r5
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f04f 0100 	mov.w	r1, #0
 80089aa:	0159      	lsls	r1, r3, #5
 80089ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089b0:	0150      	lsls	r0, r2, #5
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4621      	mov	r1, r4
 80089b8:	1a51      	subs	r1, r2, r1
 80089ba:	6139      	str	r1, [r7, #16]
 80089bc:	4629      	mov	r1, r5
 80089be:	eb63 0301 	sbc.w	r3, r3, r1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089d0:	4659      	mov	r1, fp
 80089d2:	018b      	lsls	r3, r1, #6
 80089d4:	4651      	mov	r1, sl
 80089d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089da:	4651      	mov	r1, sl
 80089dc:	018a      	lsls	r2, r1, #6
 80089de:	4651      	mov	r1, sl
 80089e0:	ebb2 0801 	subs.w	r8, r2, r1
 80089e4:	4659      	mov	r1, fp
 80089e6:	eb63 0901 	sbc.w	r9, r3, r1
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089fe:	4690      	mov	r8, r2
 8008a00:	4699      	mov	r9, r3
 8008a02:	4623      	mov	r3, r4
 8008a04:	eb18 0303 	adds.w	r3, r8, r3
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	eb49 0303 	adc.w	r3, r9, r3
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008a1e:	4629      	mov	r1, r5
 8008a20:	024b      	lsls	r3, r1, #9
 8008a22:	4621      	mov	r1, r4
 8008a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a28:	4621      	mov	r1, r4
 8008a2a:	024a      	lsls	r2, r1, #9
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a32:	2200      	movs	r2, #0
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a3c:	f7f7 fc48 	bl	80002d0 <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4613      	mov	r3, r2
 8008a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a48:	e058      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a4a:	4b38      	ldr	r3, [pc, #224]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	099b      	lsrs	r3, r3, #6
 8008a50:	2200      	movs	r2, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	4611      	mov	r1, r2
 8008a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a5a:	623b      	str	r3, [r7, #32]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a64:	4642      	mov	r2, r8
 8008a66:	464b      	mov	r3, r9
 8008a68:	f04f 0000 	mov.w	r0, #0
 8008a6c:	f04f 0100 	mov.w	r1, #0
 8008a70:	0159      	lsls	r1, r3, #5
 8008a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a76:	0150      	lsls	r0, r2, #5
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008a82:	4649      	mov	r1, r9
 8008a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8008aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	00eb      	lsls	r3, r5, #3
 8008aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ab2:	00e2      	lsls	r2, r4, #3
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	461d      	mov	r5, r3
 8008ab8:	4643      	mov	r3, r8
 8008aba:	18e3      	adds	r3, r4, r3
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	464b      	mov	r3, r9
 8008ac0:	eb45 0303 	adc.w	r3, r5, r3
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	028b      	lsls	r3, r1, #10
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008adc:	4621      	mov	r1, r4
 8008ade:	028a      	lsls	r2, r1, #10
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	61fa      	str	r2, [r7, #28]
 8008aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008af0:	f7f7 fbee 	bl	80002d0 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	0c1b      	lsrs	r3, r3, #16
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	3301      	adds	r3, #1
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b16:	e002      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3750      	adds	r7, #80	; 0x50
 8008b24:	46bd      	mov	sp, r7
 8008b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	007a1200 	.word	0x007a1200

08008b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b3c:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000030 	.word	0x20000030

08008b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b54:	f7ff fff0 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	0a9b      	lsrs	r3, r3, #10
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	4903      	ldr	r1, [pc, #12]	; (8008b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b66:	5ccb      	ldrb	r3, [r1, r3]
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40023800 	.word	0x40023800
 8008b74:	080a2078 	.word	0x080a2078

08008b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b7c:	f7ff ffdc 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	0b5b      	lsrs	r3, r3, #13
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4903      	ldr	r1, [pc, #12]	; (8008b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40023800 	.word	0x40023800
 8008b9c:	080a2078 	.word	0x080a2078

08008ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008bc8:	4b66      	ldr	r3, [pc, #408]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd6:	4963      	ldr	r1, [pc, #396]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008bea:	4b5e      	ldr	r3, [pc, #376]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	495a      	ldr	r1, [pc, #360]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d075      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008c24:	4b50      	ldr	r3, [pc, #320]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c2a:	f7fa fabb 	bl	80031a4 <HAL_GetTick>
 8008c2e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c30:	e008      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c32:	f7fa fab7 	bl	80031a4 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e1dc      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c44:	4b47      	ldr	r3, [pc, #284]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f0      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d009      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	019a      	lsls	r2, r3, #6
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	071b      	lsls	r3, r3, #28
 8008c68:	493e      	ldr	r1, [pc, #248]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01f      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c7c:	4b39      	ldr	r3, [pc, #228]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	0f1b      	lsrs	r3, r3, #28
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	019a      	lsls	r2, r3, #6
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	061b      	lsls	r3, r3, #24
 8008c96:	431a      	orrs	r2, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	071b      	lsls	r3, r3, #28
 8008c9c:	4931      	ldr	r1, [pc, #196]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ca4:	4b2f      	ldr	r3, [pc, #188]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008caa:	f023 021f 	bic.w	r2, r3, #31
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	492b      	ldr	r1, [pc, #172]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00d      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	019a      	lsls	r2, r3, #6
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	061b      	lsls	r3, r3, #24
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	071b      	lsls	r3, r3, #28
 8008cdc:	4921      	ldr	r1, [pc, #132]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ce4:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cea:	f7fa fa5b 	bl	80031a4 <HAL_GetTick>
 8008cee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cf2:	f7fa fa57 	bl	80031a4 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e17c      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d04:	4b17      	ldr	r3, [pc, #92]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d112      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10c      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80ce 	beq.w	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d3e:	f040 80c8 	bne.w	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d42:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d48:	f7fa fa2c 	bl	80031a4 <HAL_GetTick>
 8008d4c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d4e:	e00f      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008d50:	f7fa fa28 	bl	80031a4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d908      	bls.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e14d      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008d62:	bf00      	nop
 8008d64:	40023800 	.word	0x40023800
 8008d68:	42470068 	.word	0x42470068
 8008d6c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d70:	4ba5      	ldr	r3, [pc, #660]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7c:	d0e8      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d02e      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008d8a:	4b9f      	ldr	r3, [pc, #636]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d90:	0c1b      	lsrs	r3, r3, #16
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	3301      	adds	r3, #1
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d9c:	4b9a      	ldr	r3, [pc, #616]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	0f1b      	lsrs	r3, r3, #28
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	019a      	lsls	r2, r3, #6
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	3b01      	subs	r3, #1
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	061b      	lsls	r3, r3, #24
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	071b      	lsls	r3, r3, #28
 8008dc6:	4990      	ldr	r1, [pc, #576]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008dce:	4b8e      	ldr	r3, [pc, #568]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	4989      	ldr	r1, [pc, #548]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d02c      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008df4:	4b84      	ldr	r3, [pc, #528]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	3301      	adds	r3, #1
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e06:	4b80      	ldr	r3, [pc, #512]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0c:	0e1b      	lsrs	r3, r3, #24
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	019a      	lsls	r2, r3, #6
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	041b      	lsls	r3, r3, #16
 8008e22:	431a      	orrs	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	061b      	lsls	r3, r3, #24
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	071b      	lsls	r3, r3, #28
 8008e30:	4975      	ldr	r1, [pc, #468]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008e38:	4b73      	ldr	r3, [pc, #460]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	4970      	ldr	r1, [pc, #448]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d024      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d11f      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e64:	4b68      	ldr	r3, [pc, #416]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6a:	0e1b      	lsrs	r3, r3, #24
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e72:	4b65      	ldr	r3, [pc, #404]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e78:	0f1b      	lsrs	r3, r3, #28
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	019a      	lsls	r2, r3, #6
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	041b      	lsls	r3, r3, #16
 8008e90:	431a      	orrs	r2, r3
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	431a      	orrs	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	071b      	lsls	r3, r3, #28
 8008e9c:	495a      	ldr	r1, [pc, #360]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ea4:	4b59      	ldr	r3, [pc, #356]	; (800900c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eaa:	f7fa f97b 	bl	80031a4 <HAL_GetTick>
 8008eae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008eb2:	f7fa f977 	bl	80031a4 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e09c      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ec4:	4b50      	ldr	r3, [pc, #320]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed0:	d1ef      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 8083 	beq.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60bb      	str	r3, [r7, #8]
 8008ee4:	4b48      	ldr	r3, [pc, #288]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee8:	4a47      	ldr	r2, [pc, #284]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eee:	6413      	str	r3, [r2, #64]	; 0x40
 8008ef0:	4b45      	ldr	r3, [pc, #276]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008efc:	4b44      	ldr	r3, [pc, #272]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a43      	ldr	r2, [pc, #268]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f06:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f08:	f7fa f94c 	bl	80031a4 <HAL_GetTick>
 8008f0c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f10:	f7fa f948 	bl	80031a4 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e06d      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f22:	4b3b      	ldr	r3, [pc, #236]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f0      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f2e:	4b36      	ldr	r3, [pc, #216]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f36:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d02f      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d028      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f4c:	4b2e      	ldr	r3, [pc, #184]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f54:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f56:	4b2f      	ldr	r3, [pc, #188]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f5c:	4b2d      	ldr	r3, [pc, #180]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f62:	4a29      	ldr	r2, [pc, #164]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f68:	4b27      	ldr	r3, [pc, #156]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d114      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f74:	f7fa f916 	bl	80031a4 <HAL_GetTick>
 8008f78:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f7a:	e00a      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f7c:	f7fa f912 	bl	80031a4 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e035      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f92:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0ee      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008faa:	d10d      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc0:	4911      	ldr	r1, [pc, #68]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	608b      	str	r3, [r1, #8]
 8008fc6:	e005      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	4a0e      	ldr	r2, [pc, #56]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008fd2:	6093      	str	r3, [r2, #8]
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe0:	4909      	ldr	r1, [pc, #36]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008ffa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	40023800 	.word	0x40023800
 800900c:	42470070 	.word	0x42470070
 8009010:	40007000 	.word	0x40007000
 8009014:	42470e40 	.word	0x42470e40
 8009018:	424711e0 	.word	0x424711e0

0800901c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e273      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d075      	beq.n	8009126 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800903a:	4b88      	ldr	r3, [pc, #544]	; (800925c <HAL_RCC_OscConfig+0x240>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 030c 	and.w	r3, r3, #12
 8009042:	2b04      	cmp	r3, #4
 8009044:	d00c      	beq.n	8009060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009046:	4b85      	ldr	r3, [pc, #532]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800904e:	2b08      	cmp	r3, #8
 8009050:	d112      	bne.n	8009078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009052:	4b82      	ldr	r3, [pc, #520]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800905a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800905e:	d10b      	bne.n	8009078 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009060:	4b7e      	ldr	r3, [pc, #504]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d05b      	beq.n	8009124 <HAL_RCC_OscConfig+0x108>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d157      	bne.n	8009124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e24e      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009080:	d106      	bne.n	8009090 <HAL_RCC_OscConfig+0x74>
 8009082:	4b76      	ldr	r3, [pc, #472]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a75      	ldr	r2, [pc, #468]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e01d      	b.n	80090cc <HAL_RCC_OscConfig+0xb0>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009098:	d10c      	bne.n	80090b4 <HAL_RCC_OscConfig+0x98>
 800909a:	4b70      	ldr	r3, [pc, #448]	; (800925c <HAL_RCC_OscConfig+0x240>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a6f      	ldr	r2, [pc, #444]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4b6d      	ldr	r3, [pc, #436]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a6c      	ldr	r2, [pc, #432]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	e00b      	b.n	80090cc <HAL_RCC_OscConfig+0xb0>
 80090b4:	4b69      	ldr	r3, [pc, #420]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a68      	ldr	r2, [pc, #416]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4b66      	ldr	r3, [pc, #408]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a65      	ldr	r2, [pc, #404]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d013      	beq.n	80090fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d4:	f7fa f866 	bl	80031a4 <HAL_GetTick>
 80090d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090da:	e008      	b.n	80090ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090dc:	f7fa f862 	bl	80031a4 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b64      	cmp	r3, #100	; 0x64
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e213      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	4b5b      	ldr	r3, [pc, #364]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f0      	beq.n	80090dc <HAL_RCC_OscConfig+0xc0>
 80090fa:	e014      	b.n	8009126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fc:	f7fa f852 	bl	80031a4 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009104:	f7fa f84e 	bl	80031a4 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	; 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e1ff      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009116:	4b51      	ldr	r3, [pc, #324]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCC_OscConfig+0xe8>
 8009122:	e000      	b.n	8009126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d063      	beq.n	80091fa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009132:	4b4a      	ldr	r3, [pc, #296]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 030c 	and.w	r3, r3, #12
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800913e:	4b47      	ldr	r3, [pc, #284]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009146:	2b08      	cmp	r3, #8
 8009148:	d11c      	bne.n	8009184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800914a:	4b44      	ldr	r3, [pc, #272]	; (800925c <HAL_RCC_OscConfig+0x240>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d116      	bne.n	8009184 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009156:	4b41      	ldr	r3, [pc, #260]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_RCC_OscConfig+0x152>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d001      	beq.n	800916e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e1d3      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800916e:	4b3b      	ldr	r3, [pc, #236]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4937      	ldr	r1, [pc, #220]	; (800925c <HAL_RCC_OscConfig+0x240>)
 800917e:	4313      	orrs	r3, r2
 8009180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009182:	e03a      	b.n	80091fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d020      	beq.n	80091ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800918c:	4b34      	ldr	r3, [pc, #208]	; (8009260 <HAL_RCC_OscConfig+0x244>)
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009192:	f7fa f807 	bl	80031a4 <HAL_GetTick>
 8009196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800919a:	f7fa f803 	bl	80031a4 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e1b4      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ac:	4b2b      	ldr	r3, [pc, #172]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0f0      	beq.n	800919a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091b8:	4b28      	ldr	r3, [pc, #160]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	4925      	ldr	r1, [pc, #148]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	600b      	str	r3, [r1, #0]
 80091cc:	e015      	b.n	80091fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ce:	4b24      	ldr	r3, [pc, #144]	; (8009260 <HAL_RCC_OscConfig+0x244>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d4:	f7f9 ffe6 	bl	80031a4 <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091dc:	f7f9 ffe2 	bl	80031a4 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e193      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <HAL_RCC_OscConfig+0x240>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f0      	bne.n	80091dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0308 	and.w	r3, r3, #8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d036      	beq.n	8009274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d016      	beq.n	800923c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <HAL_RCC_OscConfig+0x248>)
 8009210:	2201      	movs	r2, #1
 8009212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009214:	f7f9 ffc6 	bl	80031a4 <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800921c:	f7f9 ffc2 	bl	80031a4 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e173      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <HAL_RCC_OscConfig+0x240>)
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f0      	beq.n	800921c <HAL_RCC_OscConfig+0x200>
 800923a:	e01b      	b.n	8009274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <HAL_RCC_OscConfig+0x248>)
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009242:	f7f9 ffaf 	bl	80031a4 <HAL_GetTick>
 8009246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009248:	e00e      	b.n	8009268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800924a:	f7f9 ffab 	bl	80031a4 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d907      	bls.n	8009268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e15c      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
 800925c:	40023800 	.word	0x40023800
 8009260:	42470000 	.word	0x42470000
 8009264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009268:	4b8a      	ldr	r3, [pc, #552]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800926a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1ea      	bne.n	800924a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8097 	beq.w	80093b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009286:	4b83      	ldr	r3, [pc, #524]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]
 8009296:	4b7f      	ldr	r3, [pc, #508]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	4a7e      	ldr	r2, [pc, #504]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800929c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a0:	6413      	str	r3, [r2, #64]	; 0x40
 80092a2:	4b7c      	ldr	r3, [pc, #496]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092aa:	60bb      	str	r3, [r7, #8]
 80092ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ae:	2301      	movs	r3, #1
 80092b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092b2:	4b79      	ldr	r3, [pc, #484]	; (8009498 <HAL_RCC_OscConfig+0x47c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d118      	bne.n	80092f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092be:	4b76      	ldr	r3, [pc, #472]	; (8009498 <HAL_RCC_OscConfig+0x47c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a75      	ldr	r2, [pc, #468]	; (8009498 <HAL_RCC_OscConfig+0x47c>)
 80092c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092ca:	f7f9 ff6b 	bl	80031a4 <HAL_GetTick>
 80092ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092d0:	e008      	b.n	80092e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d2:	f7f9 ff67 	bl	80031a4 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e118      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092e4:	4b6c      	ldr	r3, [pc, #432]	; (8009498 <HAL_RCC_OscConfig+0x47c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0f0      	beq.n	80092d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d106      	bne.n	8009306 <HAL_RCC_OscConfig+0x2ea>
 80092f8:	4b66      	ldr	r3, [pc, #408]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80092fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fc:	4a65      	ldr	r2, [pc, #404]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	6713      	str	r3, [r2, #112]	; 0x70
 8009304:	e01c      	b.n	8009340 <HAL_RCC_OscConfig+0x324>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b05      	cmp	r3, #5
 800930c:	d10c      	bne.n	8009328 <HAL_RCC_OscConfig+0x30c>
 800930e:	4b61      	ldr	r3, [pc, #388]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	4a60      	ldr	r2, [pc, #384]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009314:	f043 0304 	orr.w	r3, r3, #4
 8009318:	6713      	str	r3, [r2, #112]	; 0x70
 800931a:	4b5e      	ldr	r3, [pc, #376]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800931c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931e:	4a5d      	ldr	r2, [pc, #372]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	6713      	str	r3, [r2, #112]	; 0x70
 8009326:	e00b      	b.n	8009340 <HAL_RCC_OscConfig+0x324>
 8009328:	4b5a      	ldr	r3, [pc, #360]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	4a59      	ldr	r2, [pc, #356]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800932e:	f023 0301 	bic.w	r3, r3, #1
 8009332:	6713      	str	r3, [r2, #112]	; 0x70
 8009334:	4b57      	ldr	r3, [pc, #348]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009338:	4a56      	ldr	r2, [pc, #344]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800933a:	f023 0304 	bic.w	r3, r3, #4
 800933e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d015      	beq.n	8009374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009348:	f7f9 ff2c 	bl	80031a4 <HAL_GetTick>
 800934c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800934e:	e00a      	b.n	8009366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009350:	f7f9 ff28 	bl	80031a4 <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	f241 3288 	movw	r2, #5000	; 0x1388
 800935e:	4293      	cmp	r3, r2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e0d7      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009366:	4b4b      	ldr	r3, [pc, #300]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0ee      	beq.n	8009350 <HAL_RCC_OscConfig+0x334>
 8009372:	e014      	b.n	800939e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009374:	f7f9 ff16 	bl	80031a4 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800937a:	e00a      	b.n	8009392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800937c:	f7f9 ff12 	bl	80031a4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f241 3288 	movw	r2, #5000	; 0x1388
 800938a:	4293      	cmp	r3, r2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e0c1      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009392:	4b40      	ldr	r3, [pc, #256]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1ee      	bne.n	800937c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d105      	bne.n	80093b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093a4:	4b3b      	ldr	r3, [pc, #236]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	4a3a      	ldr	r2, [pc, #232]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80093aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80ad 	beq.w	8009514 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093ba:	4b36      	ldr	r3, [pc, #216]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f003 030c 	and.w	r3, r3, #12
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d060      	beq.n	8009488 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d145      	bne.n	800945a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ce:	4b33      	ldr	r3, [pc, #204]	; (800949c <HAL_RCC_OscConfig+0x480>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d4:	f7f9 fee6 	bl	80031a4 <HAL_GetTick>
 80093d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093da:	e008      	b.n	80093ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093dc:	f7f9 fee2 	bl	80031a4 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e093      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ee:	4b29      	ldr	r3, [pc, #164]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1f0      	bne.n	80093dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	019b      	lsls	r3, r3, #6
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	3b01      	subs	r3, #1
 8009414:	041b      	lsls	r3, r3, #16
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	071b      	lsls	r3, r3, #28
 8009426:	491b      	ldr	r1, [pc, #108]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 8009428:	4313      	orrs	r3, r2
 800942a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800942c:	4b1b      	ldr	r3, [pc, #108]	; (800949c <HAL_RCC_OscConfig+0x480>)
 800942e:	2201      	movs	r2, #1
 8009430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009432:	f7f9 feb7 	bl	80031a4 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800943a:	f7f9 feb3 	bl	80031a4 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e064      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800944c:	4b11      	ldr	r3, [pc, #68]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0f0      	beq.n	800943a <HAL_RCC_OscConfig+0x41e>
 8009458:	e05c      	b.n	8009514 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <HAL_RCC_OscConfig+0x480>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009460:	f7f9 fea0 	bl	80031a4 <HAL_GetTick>
 8009464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009466:	e008      	b.n	800947a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009468:	f7f9 fe9c 	bl	80031a4 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b02      	cmp	r3, #2
 8009474:	d901      	bls.n	800947a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e04d      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800947a:	4b06      	ldr	r3, [pc, #24]	; (8009494 <HAL_RCC_OscConfig+0x478>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1f0      	bne.n	8009468 <HAL_RCC_OscConfig+0x44c>
 8009486:	e045      	b.n	8009514 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d107      	bne.n	80094a0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e040      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
 8009494:	40023800 	.word	0x40023800
 8009498:	40007000 	.word	0x40007000
 800949c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80094a0:	4b1f      	ldr	r3, [pc, #124]	; (8009520 <HAL_RCC_OscConfig+0x504>)
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d030      	beq.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d129      	bne.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d122      	bne.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094d0:	4013      	ands	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094d8:	4293      	cmp	r3, r2
 80094da:	d119      	bne.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	3b01      	subs	r3, #1
 80094ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d10f      	bne.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d107      	bne.n	8009510 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800950c:	429a      	cmp	r2, r3
 800950e:	d001      	beq.n	8009514 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40023800 	.word	0x40023800

08009524 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e025      	b.n	8009584 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7f7 fec7 	bl	80012e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f001 f909 	bl	800a77c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	461a      	mov	r2, r3
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	f001 f95e 	bl	800a836 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10a      	bne.n	80095b8 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f80c 	bl	80095c0 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695a      	ldr	r2, [r3, #20]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0201 	orr.w	r2, r2, #1
 80095b6:	615a      	str	r2, [r3, #20]
  }
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d101      	bne.n	80095f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80095ee:	2302      	movs	r3, #2
 80095f0:	e021      	b.n	8009636 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <HAL_SDRAM_SendCommand+0x2a>
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	d118      	bne.n	8009630 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	4618      	mov	r0, r3
 8009610:	f001 f97a 	bl	800a908 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d104      	bne.n	8009626 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2205      	movs	r2, #5
 8009620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009624:	e006      	b.n	8009634 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800962e:	e001      	b.n	8009634 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e000      	b.n	8009636 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d101      	bne.n	8009658 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009654:	2302      	movs	r3, #2
 8009656:	e016      	b.n	8009686 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	d10f      	bne.n	8009684 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f001 f985 	bl	800a982 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e000      	b.n	8009686 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e03f      	b.n	8009720 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7f9 fbeb 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2224      	movs	r2, #36	; 0x24
 80096be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fdde 	bl	800a294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691a      	ldr	r2, [r3, #16]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695a      	ldr	r2, [r3, #20]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b20      	cmp	r3, #32
 8009746:	d17c      	bne.n	8009842 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <HAL_UART_Transmit+0x2c>
 800974e:	88fb      	ldrh	r3, [r7, #6]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e075      	b.n	8009844 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_UART_Transmit+0x3e>
 8009762:	2302      	movs	r3, #2
 8009764:	e06e      	b.n	8009844 <HAL_UART_Transmit+0x11c>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2221      	movs	r2, #33	; 0x21
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800977c:	f7f9 fd12 	bl	80031a4 <HAL_GetTick>
 8009780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009796:	d108      	bne.n	80097aa <HAL_UART_Transmit+0x82>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	61bb      	str	r3, [r7, #24]
 80097a8:	e003      	b.n	80097b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80097ba:	e02a      	b.n	8009812 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	2180      	movs	r1, #128	; 0x80
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fb1e 	bl	8009e08 <UART_WaitOnFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e036      	b.n	8009844 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10b      	bne.n	80097f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	3302      	adds	r3, #2
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	e007      	b.n	8009804 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	3301      	adds	r3, #1
 8009802:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009808:	b29b      	uxth	r3, r3
 800980a:	3b01      	subs	r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1cf      	bne.n	80097bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 faee 	bl	8009e08 <UART_WaitOnFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e006      	b.n	8009844 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	e000      	b.n	8009844 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009842:	2302      	movs	r3, #2
  }
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b20      	cmp	r3, #32
 8009864:	d11d      	bne.n	80098a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_UART_Receive_IT+0x26>
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e016      	b.n	80098a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_UART_Receive_IT+0x38>
 8009880:	2302      	movs	r3, #2
 8009882:	e00f      	b.n	80098a4 <HAL_UART_Receive_IT+0x58>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009892:	88fb      	ldrh	r3, [r7, #6]
 8009894:	461a      	mov	r2, r3
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fb23 	bl	8009ee4 <UART_Start_Receive_IT>
 800989e:	4603      	mov	r3, r0
 80098a0:	e000      	b.n	80098a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80098a2:	2302      	movs	r3, #2
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b0ba      	sub	sp, #232	; 0xe8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80098ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10f      	bne.n	8009912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_UART_IRQHandler+0x66>
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fc07 	bl	800a11e <UART_Receive_IT>
      return;
 8009910:	e256      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 80de 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x22c>
 800991c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80d1 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <HAL_UART_IRQHandler+0xae>
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	f043 0201 	orr.w	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800995a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <HAL_UART_IRQHandler+0xd2>
 8009966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	f043 0202 	orr.w	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <HAL_UART_IRQHandler+0xf6>
 800998a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f043 0204 	orr.w	r2, r3, #4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <HAL_UART_IRQHandler+0x126>
 80099ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0208 	orr.w	r2, r3, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 81ed 	beq.w	8009db6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e0:	f003 0320 	and.w	r3, r3, #32
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d008      	beq.n	80099fa <HAL_UART_IRQHandler+0x14e>
 80099e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb92 	bl	800a11e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	bf0c      	ite	eq
 8009a08:	2301      	moveq	r3, #1
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <HAL_UART_IRQHandler+0x17a>
 8009a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d04f      	beq.n	8009ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa9a 	bl	8009f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b40      	cmp	r3, #64	; 0x40
 8009a38:	d141      	bne.n	8009abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3314      	adds	r3, #20
 8009a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3314      	adds	r3, #20
 8009a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d9      	bne.n	8009a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	4a7d      	ldr	r2, [pc, #500]	; (8009c88 <HAL_UART_IRQHandler+0x3dc>)
 8009a94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 fd65 	bl	800356a <HAL_DMA_Abort_IT>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	e00e      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f990 	bl	8009ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	e00a      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f98c 	bl	8009ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac4:	e006      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f988 	bl	8009ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ad2:	e170      	b.n	8009db6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	bf00      	nop
    return;
 8009ad6:	e16e      	b.n	8009db6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	f040 814a 	bne.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae6:	f003 0310 	and.w	r3, r3, #16
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 8143 	beq.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 813c 	beq.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009afe:	2300      	movs	r3, #0
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60bb      	str	r3, [r7, #8]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	60bb      	str	r3, [r7, #8]
 8009b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	f040 80b4 	bne.w	8009c8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8140 	beq.w	8009dba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b42:	429a      	cmp	r2, r3
 8009b44:	f080 8139 	bcs.w	8009dba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5a:	f000 8088 	beq.w	8009c6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	330c      	adds	r3, #12
 8009b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1d9      	bne.n	8009b5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3314      	adds	r3, #20
 8009bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bbc:	f023 0301 	bic.w	r3, r3, #1
 8009bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e1      	bne.n	8009baa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3314      	adds	r3, #20
 8009bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3314      	adds	r3, #20
 8009c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e3      	bne.n	8009be6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3e:	f023 0310 	bic.w	r3, r3, #16
 8009c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	330c      	adds	r3, #12
 8009c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c50:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e3      	bne.n	8009c2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f9 fc0e 	bl	800348a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f8b6 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c84:	e099      	b.n	8009dba <HAL_UART_IRQHandler+0x50e>
 8009c86:	bf00      	nop
 8009c88:	0800a027 	.word	0x0800a027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 808b 	beq.w	8009dbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8086 	beq.w	8009dbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8009cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e3      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3314      	adds	r3, #20
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3314      	adds	r3, #20
 8009d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e3      	bne.n	8009cea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	330c      	adds	r3, #12
 8009d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d54:	61fa      	str	r2, [r7, #28]
 8009d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	69b9      	ldr	r1, [r7, #24]
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	617b      	str	r3, [r7, #20]
   return(result);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e3      	bne.n	8009d30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f83e 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d74:	e023      	b.n	8009dbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <HAL_UART_IRQHandler+0x4ea>
 8009d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f95d 	bl	800a04e <UART_Transmit_IT>
    return;
 8009d94:	e014      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x514>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d008      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f99d 	bl	800a0ee <UART_EndTransmit_IT>
    return;
 8009db4:	e004      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
    return;
 8009db6:	bf00      	nop
 8009db8:	e002      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dba:	bf00      	nop
 8009dbc:	e000      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dbe:	bf00      	nop
  }
}
 8009dc0:	37e8      	adds	r7, #232	; 0xe8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop

08009dc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b090      	sub	sp, #64	; 0x40
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e18:	e050      	b.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e20:	d04c      	beq.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e28:	f7f9 f9bc 	bl	80031a4 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d241      	bcs.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e58:	637a      	str	r2, [r7, #52]	; 0x34
 8009e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e5      	bne.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3314      	adds	r3, #20
 8009e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e8c:	623a      	str	r2, [r7, #32]
 8009e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	69f9      	ldr	r1, [r7, #28]
 8009e92:	6a3a      	ldr	r2, [r7, #32]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e5      	bne.n	8009e6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e00f      	b.n	8009edc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	bf0c      	ite	eq
 8009ecc:	2301      	moveq	r3, #1
 8009ece:	2300      	movne	r3, #0
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d09f      	beq.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3740      	adds	r7, #64	; 0x40
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	88fa      	ldrh	r2, [r7, #6]
 8009efc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	88fa      	ldrh	r2, [r7, #6]
 8009f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2222      	movs	r2, #34	; 0x22
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	695a      	ldr	r2, [r3, #20]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f042 0201 	orr.w	r2, r2, #1
 8009f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68da      	ldr	r2, [r3, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0220 	orr.w	r2, r2, #32
 8009f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b095      	sub	sp, #84	; 0x54
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f88:	643a      	str	r2, [r7, #64]	; 0x40
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3314      	adds	r3, #20
 8009fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3314      	adds	r3, #20
 8009fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e5      	bne.n	8009f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d119      	bne.n	800a00c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	330c      	adds	r3, #12
 8009fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	e853 3f00 	ldrex	r3, [r3]
 8009fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f023 0310 	bic.w	r3, r3, #16
 8009fee:	647b      	str	r3, [r7, #68]	; 0x44
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	330c      	adds	r3, #12
 8009ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ff8:	61ba      	str	r2, [r7, #24]
 8009ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	6979      	ldr	r1, [r7, #20]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	613b      	str	r3, [r7, #16]
   return(result);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e5      	bne.n	8009fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2220      	movs	r2, #32
 800a010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a01a:	bf00      	nop
 800a01c:	3754      	adds	r7, #84	; 0x54
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fecb 	bl	8009ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b21      	cmp	r3, #33	; 0x21
 800a060:	d13e      	bne.n	800a0e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06a:	d114      	bne.n	800a096 <UART_Transmit_IT+0x48>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d110      	bne.n	800a096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	1c9a      	adds	r2, r3, #2
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	621a      	str	r2, [r3, #32]
 800a094:	e008      	b.n	800a0a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6211      	str	r1, [r2, #32]
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10f      	bne.n	800a0dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e000      	b.n	800a0e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a0e0:	2302      	movs	r3, #2
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff fe5a 	bl	8009dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b08c      	sub	sp, #48	; 0x30
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b22      	cmp	r3, #34	; 0x22
 800a130:	f040 80ab 	bne.w	800a28a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13c:	d117      	bne.n	800a16e <UART_Receive_IT+0x50>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d113      	bne.n	800a16e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	b29b      	uxth	r3, r3
 800a158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	1c9a      	adds	r2, r3, #2
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28
 800a16c:	e026      	b.n	800a1bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a180:	d007      	beq.n	800a192 <UART_Receive_IT+0x74>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <UART_Receive_IT+0x82>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e008      	b.n	800a1b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d15a      	bne.n	800a286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0220 	bic.w	r2, r2, #32
 800a1de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695a      	ldr	r2, [r3, #20]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 0201 	bic.w	r2, r2, #1
 800a1fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2220      	movs	r2, #32
 800a204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d135      	bne.n	800a27c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	330c      	adds	r3, #12
 800a21c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	613b      	str	r3, [r7, #16]
   return(result);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f023 0310 	bic.w	r3, r3, #16
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	330c      	adds	r3, #12
 800a234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a236:	623a      	str	r2, [r7, #32]
 800a238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	69f9      	ldr	r1, [r7, #28]
 800a23c:	6a3a      	ldr	r2, [r7, #32]
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	61bb      	str	r3, [r7, #24]
   return(result);
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e5      	bne.n	800a216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	2b10      	cmp	r3, #16
 800a256:	d10a      	bne.n	800a26e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff fdbb 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
 800a27a:	e002      	b.n	800a282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7f8 fe57 	bl	8002f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	e002      	b.n	800a28c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	e000      	b.n	800a28c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a28a:	2302      	movs	r3, #2
  }
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3730      	adds	r7, #48	; 0x30
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a298:	b0c0      	sub	sp, #256	; 0x100
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b0:	68d9      	ldr	r1, [r3, #12]
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	ea40 0301 	orr.w	r3, r0, r1
 800a2bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2ec:	f021 010c 	bic.w	r1, r1, #12
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	6999      	ldr	r1, [r3, #24]
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	ea40 0301 	orr.w	r3, r0, r1
 800a31a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b8f      	ldr	r3, [pc, #572]	; (800a560 <UART_SetConfig+0x2cc>)
 800a324:	429a      	cmp	r2, r3
 800a326:	d005      	beq.n	800a334 <UART_SetConfig+0xa0>
 800a328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	4b8d      	ldr	r3, [pc, #564]	; (800a564 <UART_SetConfig+0x2d0>)
 800a330:	429a      	cmp	r2, r3
 800a332:	d104      	bne.n	800a33e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a334:	f7fe fc20 	bl	8008b78 <HAL_RCC_GetPCLK2Freq>
 800a338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a33c:	e003      	b.n	800a346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a33e:	f7fe fc07 	bl	8008b50 <HAL_RCC_GetPCLK1Freq>
 800a342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a350:	f040 810c 	bne.w	800a56c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a35e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	1891      	adds	r1, r2, r2
 800a36c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a36e:	415b      	adcs	r3, r3
 800a370:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a376:	4621      	mov	r1, r4
 800a378:	eb12 0801 	adds.w	r8, r2, r1
 800a37c:	4629      	mov	r1, r5
 800a37e:	eb43 0901 	adc.w	r9, r3, r1
 800a382:	f04f 0200 	mov.w	r2, #0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a38e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a396:	4690      	mov	r8, r2
 800a398:	4699      	mov	r9, r3
 800a39a:	4623      	mov	r3, r4
 800a39c:	eb18 0303 	adds.w	r3, r8, r3
 800a3a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	eb49 0303 	adc.w	r3, r9, r3
 800a3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a3be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	18db      	adds	r3, r3, r3
 800a3c6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	eb42 0303 	adc.w	r3, r2, r3
 800a3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a3d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a3d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3d8:	f7f5 ff7a 	bl	80002d0 <__aeabi_uldivmod>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4b61      	ldr	r3, [pc, #388]	; (800a568 <UART_SetConfig+0x2d4>)
 800a3e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e6:	095b      	lsrs	r3, r3, #5
 800a3e8:	011c      	lsls	r4, r3, #4
 800a3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	1891      	adds	r1, r2, r2
 800a402:	64b9      	str	r1, [r7, #72]	; 0x48
 800a404:	415b      	adcs	r3, r3
 800a406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a40c:	4641      	mov	r1, r8
 800a40e:	eb12 0a01 	adds.w	sl, r2, r1
 800a412:	4649      	mov	r1, r9
 800a414:	eb43 0b01 	adc.w	fp, r3, r1
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	f04f 0300 	mov.w	r3, #0
 800a420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a42c:	4692      	mov	sl, r2
 800a42e:	469b      	mov	fp, r3
 800a430:	4643      	mov	r3, r8
 800a432:	eb1a 0303 	adds.w	r3, sl, r3
 800a436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a43a:	464b      	mov	r3, r9
 800a43c:	eb4b 0303 	adc.w	r3, fp, r3
 800a440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a458:	460b      	mov	r3, r1
 800a45a:	18db      	adds	r3, r3, r3
 800a45c:	643b      	str	r3, [r7, #64]	; 0x40
 800a45e:	4613      	mov	r3, r2
 800a460:	eb42 0303 	adc.w	r3, r2, r3
 800a464:	647b      	str	r3, [r7, #68]	; 0x44
 800a466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a46a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a46e:	f7f5 ff2f 	bl	80002d0 <__aeabi_uldivmod>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4611      	mov	r1, r2
 800a478:	4b3b      	ldr	r3, [pc, #236]	; (800a568 <UART_SetConfig+0x2d4>)
 800a47a:	fba3 2301 	umull	r2, r3, r3, r1
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	2264      	movs	r2, #100	; 0x64
 800a482:	fb02 f303 	mul.w	r3, r2, r3
 800a486:	1acb      	subs	r3, r1, r3
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a48e:	4b36      	ldr	r3, [pc, #216]	; (800a568 <UART_SetConfig+0x2d4>)
 800a490:	fba3 2302 	umull	r2, r3, r3, r2
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a49c:	441c      	add	r4, r3
 800a49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	1891      	adds	r1, r2, r2
 800a4b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4b8:	415b      	adcs	r3, r3
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	1851      	adds	r1, r2, r1
 800a4c4:	6339      	str	r1, [r7, #48]	; 0x30
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	414b      	adcs	r3, r1
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a4cc:	f04f 0200 	mov.w	r2, #0
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a4d8:	4659      	mov	r1, fp
 800a4da:	00cb      	lsls	r3, r1, #3
 800a4dc:	4651      	mov	r1, sl
 800a4de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	00ca      	lsls	r2, r1, #3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	eb42 0303 	adc.w	r3, r2, r3
 800a4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a50c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a514:	460b      	mov	r3, r1
 800a516:	18db      	adds	r3, r3, r3
 800a518:	62bb      	str	r3, [r7, #40]	; 0x28
 800a51a:	4613      	mov	r3, r2
 800a51c:	eb42 0303 	adc.w	r3, r2, r3
 800a520:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a52a:	f7f5 fed1 	bl	80002d0 <__aeabi_uldivmod>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <UART_SetConfig+0x2d4>)
 800a534:	fba3 1302 	umull	r1, r3, r3, r2
 800a538:	095b      	lsrs	r3, r3, #5
 800a53a:	2164      	movs	r1, #100	; 0x64
 800a53c:	fb01 f303 	mul.w	r3, r1, r3
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	3332      	adds	r3, #50	; 0x32
 800a546:	4a08      	ldr	r2, [pc, #32]	; (800a568 <UART_SetConfig+0x2d4>)
 800a548:	fba2 2303 	umull	r2, r3, r2, r3
 800a54c:	095b      	lsrs	r3, r3, #5
 800a54e:	f003 0207 	and.w	r2, r3, #7
 800a552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4422      	add	r2, r4
 800a55a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a55c:	e105      	b.n	800a76a <UART_SetConfig+0x4d6>
 800a55e:	bf00      	nop
 800a560:	40011000 	.word	0x40011000
 800a564:	40011400 	.word	0x40011400
 800a568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a56c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a570:	2200      	movs	r2, #0
 800a572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a57a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	1891      	adds	r1, r2, r2
 800a584:	6239      	str	r1, [r7, #32]
 800a586:	415b      	adcs	r3, r3
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
 800a58a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a58e:	4641      	mov	r1, r8
 800a590:	1854      	adds	r4, r2, r1
 800a592:	4649      	mov	r1, r9
 800a594:	eb43 0501 	adc.w	r5, r3, r1
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	00eb      	lsls	r3, r5, #3
 800a5a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5a6:	00e2      	lsls	r2, r4, #3
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	461d      	mov	r5, r3
 800a5ac:	4643      	mov	r3, r8
 800a5ae:	18e3      	adds	r3, r4, r3
 800a5b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5b4:	464b      	mov	r3, r9
 800a5b6:	eb45 0303 	adc.w	r3, r5, r3
 800a5ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a5ce:	f04f 0200 	mov.w	r2, #0
 800a5d2:	f04f 0300 	mov.w	r3, #0
 800a5d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5da:	4629      	mov	r1, r5
 800a5dc:	008b      	lsls	r3, r1, #2
 800a5de:	4621      	mov	r1, r4
 800a5e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	008a      	lsls	r2, r1, #2
 800a5e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5ec:	f7f5 fe70 	bl	80002d0 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4b60      	ldr	r3, [pc, #384]	; (800a778 <UART_SetConfig+0x4e4>)
 800a5f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	011c      	lsls	r4, r3, #4
 800a5fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a602:	2200      	movs	r2, #0
 800a604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a60c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a610:	4642      	mov	r2, r8
 800a612:	464b      	mov	r3, r9
 800a614:	1891      	adds	r1, r2, r2
 800a616:	61b9      	str	r1, [r7, #24]
 800a618:	415b      	adcs	r3, r3
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a620:	4641      	mov	r1, r8
 800a622:	1851      	adds	r1, r2, r1
 800a624:	6139      	str	r1, [r7, #16]
 800a626:	4649      	mov	r1, r9
 800a628:	414b      	adcs	r3, r1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a638:	4659      	mov	r1, fp
 800a63a:	00cb      	lsls	r3, r1, #3
 800a63c:	4651      	mov	r1, sl
 800a63e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a642:	4651      	mov	r1, sl
 800a644:	00ca      	lsls	r2, r1, #3
 800a646:	4610      	mov	r0, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	4642      	mov	r2, r8
 800a64e:	189b      	adds	r3, r3, r2
 800a650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a654:	464b      	mov	r3, r9
 800a656:	460a      	mov	r2, r1
 800a658:	eb42 0303 	adc.w	r3, r2, r3
 800a65c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	67bb      	str	r3, [r7, #120]	; 0x78
 800a66a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	f04f 0300 	mov.w	r3, #0
 800a674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a678:	4649      	mov	r1, r9
 800a67a:	008b      	lsls	r3, r1, #2
 800a67c:	4641      	mov	r1, r8
 800a67e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a682:	4641      	mov	r1, r8
 800a684:	008a      	lsls	r2, r1, #2
 800a686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a68a:	f7f5 fe21 	bl	80002d0 <__aeabi_uldivmod>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4b39      	ldr	r3, [pc, #228]	; (800a778 <UART_SetConfig+0x4e4>)
 800a694:	fba3 1302 	umull	r1, r3, r3, r2
 800a698:	095b      	lsrs	r3, r3, #5
 800a69a:	2164      	movs	r1, #100	; 0x64
 800a69c:	fb01 f303 	mul.w	r3, r1, r3
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	011b      	lsls	r3, r3, #4
 800a6a4:	3332      	adds	r3, #50	; 0x32
 800a6a6:	4a34      	ldr	r2, [pc, #208]	; (800a778 <UART_SetConfig+0x4e4>)
 800a6a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ac:	095b      	lsrs	r3, r3, #5
 800a6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6b2:	441c      	add	r4, r3
 800a6b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	673b      	str	r3, [r7, #112]	; 0x70
 800a6bc:	677a      	str	r2, [r7, #116]	; 0x74
 800a6be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a6c2:	4642      	mov	r2, r8
 800a6c4:	464b      	mov	r3, r9
 800a6c6:	1891      	adds	r1, r2, r2
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	415b      	adcs	r3, r3
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	1851      	adds	r1, r2, r1
 800a6d6:	6039      	str	r1, [r7, #0]
 800a6d8:	4649      	mov	r1, r9
 800a6da:	414b      	adcs	r3, r1
 800a6dc:	607b      	str	r3, [r7, #4]
 800a6de:	f04f 0200 	mov.w	r2, #0
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	00cb      	lsls	r3, r1, #3
 800a6ee:	4651      	mov	r1, sl
 800a6f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6f4:	4651      	mov	r1, sl
 800a6f6:	00ca      	lsls	r2, r1, #3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4642      	mov	r2, r8
 800a700:	189b      	adds	r3, r3, r2
 800a702:	66bb      	str	r3, [r7, #104]	; 0x68
 800a704:	464b      	mov	r3, r9
 800a706:	460a      	mov	r2, r1
 800a708:	eb42 0303 	adc.w	r3, r2, r3
 800a70c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	663b      	str	r3, [r7, #96]	; 0x60
 800a718:	667a      	str	r2, [r7, #100]	; 0x64
 800a71a:	f04f 0200 	mov.w	r2, #0
 800a71e:	f04f 0300 	mov.w	r3, #0
 800a722:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a726:	4649      	mov	r1, r9
 800a728:	008b      	lsls	r3, r1, #2
 800a72a:	4641      	mov	r1, r8
 800a72c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a730:	4641      	mov	r1, r8
 800a732:	008a      	lsls	r2, r1, #2
 800a734:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a738:	f7f5 fdca 	bl	80002d0 <__aeabi_uldivmod>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4b0d      	ldr	r3, [pc, #52]	; (800a778 <UART_SetConfig+0x4e4>)
 800a742:	fba3 1302 	umull	r1, r3, r3, r2
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	2164      	movs	r1, #100	; 0x64
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	3332      	adds	r3, #50	; 0x32
 800a754:	4a08      	ldr	r2, [pc, #32]	; (800a778 <UART_SetConfig+0x4e4>)
 800a756:	fba2 2303 	umull	r2, r3, r2, r3
 800a75a:	095b      	lsrs	r3, r3, #5
 800a75c:	f003 020f 	and.w	r2, r3, #15
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4422      	add	r2, r4
 800a768:	609a      	str	r2, [r3, #8]
}
 800a76a:	bf00      	nop
 800a76c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a770:	46bd      	mov	sp, r7
 800a772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a776:	bf00      	nop
 800a778:	51eb851f 	.word	0x51eb851f

0800a77c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d123      	bne.n	800a7d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a796:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	6851      	ldr	r1, [r2, #4]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	6892      	ldr	r2, [r2, #8]
 800a7a2:	4311      	orrs	r1, r2
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	68d2      	ldr	r2, [r2, #12]
 800a7a8:	4311      	orrs	r1, r2
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	6912      	ldr	r2, [r2, #16]
 800a7ae:	4311      	orrs	r1, r2
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	6952      	ldr	r2, [r2, #20]
 800a7b4:	4311      	orrs	r1, r2
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	6992      	ldr	r2, [r2, #24]
 800a7ba:	4311      	orrs	r1, r2
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	69d2      	ldr	r2, [r2, #28]
 800a7c0:	4311      	orrs	r1, r2
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	6a12      	ldr	r2, [r2, #32]
 800a7c6:	4311      	orrs	r1, r2
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e028      	b.n	800a828 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	69d9      	ldr	r1, [r3, #28]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	4319      	orrs	r1, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	430b      	orrs	r3, r1
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a7fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	6851      	ldr	r1, [r2, #4]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	6892      	ldr	r2, [r2, #8]
 800a808:	4311      	orrs	r1, r2
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	68d2      	ldr	r2, [r2, #12]
 800a80e:	4311      	orrs	r1, r2
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	6912      	ldr	r2, [r2, #16]
 800a814:	4311      	orrs	r1, r2
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	6952      	ldr	r2, [r2, #20]
 800a81a:	4311      	orrs	r1, r2
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	6992      	ldr	r2, [r2, #24]
 800a820:	430a      	orrs	r2, r1
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d128      	bne.n	800a89a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	1e59      	subs	r1, r3, #1
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	011b      	lsls	r3, r3, #4
 800a85e:	4319      	orrs	r1, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	3b01      	subs	r3, #1
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	4319      	orrs	r1, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	3b01      	subs	r3, #1
 800a870:	031b      	lsls	r3, r3, #12
 800a872:	4319      	orrs	r1, r3
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	3b01      	subs	r3, #1
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	4319      	orrs	r1, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	3b01      	subs	r3, #1
 800a884:	051b      	lsls	r3, r3, #20
 800a886:	4319      	orrs	r1, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	061b      	lsls	r3, r3, #24
 800a890:	430b      	orrs	r3, r1
 800a892:	431a      	orrs	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	e02f      	b.n	800a8fa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	68d2      	ldr	r2, [r2, #12]
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	0311      	lsls	r1, r2, #12
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	6952      	ldr	r2, [r2, #20]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	0512      	lsls	r2, r2, #20
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	1e59      	subs	r1, r3, #1
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	011b      	lsls	r3, r3, #4
 800a8d4:	4319      	orrs	r1, r3
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	4319      	orrs	r1, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	041b      	lsls	r3, r3, #16
 800a8e8:	4319      	orrs	r1, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	061b      	lsls	r3, r3, #24
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	0d9b      	lsrs	r3, r3, #22
 800a91e:	059b      	lsls	r3, r3, #22
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	6811      	ldr	r1, [r2, #0]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	6852      	ldr	r2, [r2, #4]
 800a928:	4311      	orrs	r1, r2
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	6892      	ldr	r2, [r2, #8]
 800a92e:	3a01      	subs	r2, #1
 800a930:	0152      	lsls	r2, r2, #5
 800a932:	4311      	orrs	r1, r2
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	68d2      	ldr	r2, [r2, #12]
 800a938:	0252      	lsls	r2, r2, #9
 800a93a:	430a      	orrs	r2, r1
 800a93c:	431a      	orrs	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a942:	f7f8 fc2f 	bl	80031a4 <HAL_GetTick>
 800a946:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a948:	e010      	b.n	800a96c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d00c      	beq.n	800a96c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <FMC_SDRAM_SendCommand+0x60>
 800a958:	f7f8 fc24 	bl	80031a4 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	429a      	cmp	r2, r3
 800a966:	d201      	bcs.n	800a96c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e006      	b.n	800a97a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b20      	cmp	r3, #32
 800a976:	d0e8      	beq.n	800a94a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a994:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	0052      	lsls	r2, r2, #1
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <atoi>:
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	f000 b9a6 	b.w	800ad04 <strtol>

0800a9b8 <__errno>:
 800a9b8:	4b01      	ldr	r3, [pc, #4]	; (800a9c0 <__errno+0x8>)
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	2000003c 	.word	0x2000003c

0800a9c4 <__libc_init_array>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	4d0d      	ldr	r5, [pc, #52]	; (800a9fc <__libc_init_array+0x38>)
 800a9c8:	4c0d      	ldr	r4, [pc, #52]	; (800aa00 <__libc_init_array+0x3c>)
 800a9ca:	1b64      	subs	r4, r4, r5
 800a9cc:	10a4      	asrs	r4, r4, #2
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	42a6      	cmp	r6, r4
 800a9d2:	d109      	bne.n	800a9e8 <__libc_init_array+0x24>
 800a9d4:	4d0b      	ldr	r5, [pc, #44]	; (800aa04 <__libc_init_array+0x40>)
 800a9d6:	4c0c      	ldr	r4, [pc, #48]	; (800aa08 <__libc_init_array+0x44>)
 800a9d8:	f001 f998 	bl	800bd0c <_init>
 800a9dc:	1b64      	subs	r4, r4, r5
 800a9de:	10a4      	asrs	r4, r4, #2
 800a9e0:	2600      	movs	r6, #0
 800a9e2:	42a6      	cmp	r6, r4
 800a9e4:	d105      	bne.n	800a9f2 <__libc_init_array+0x2e>
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ec:	4798      	blx	r3
 800a9ee:	3601      	adds	r6, #1
 800a9f0:	e7ee      	b.n	800a9d0 <__libc_init_array+0xc>
 800a9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f6:	4798      	blx	r3
 800a9f8:	3601      	adds	r6, #1
 800a9fa:	e7f2      	b.n	800a9e2 <__libc_init_array+0x1e>
 800a9fc:	080a22d4 	.word	0x080a22d4
 800aa00:	080a22d4 	.word	0x080a22d4
 800aa04:	080a22d4 	.word	0x080a22d4
 800aa08:	080a22d8 	.word	0x080a22d8

0800aa0c <memset>:
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d100      	bne.n	800aa16 <memset+0xa>
 800aa14:	4770      	bx	lr
 800aa16:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1a:	e7f9      	b.n	800aa10 <memset+0x4>

0800aa1c <iprintf>:
 800aa1c:	b40f      	push	{r0, r1, r2, r3}
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <iprintf+0x2c>)
 800aa20:	b513      	push	{r0, r1, r4, lr}
 800aa22:	681c      	ldr	r4, [r3, #0]
 800aa24:	b124      	cbz	r4, 800aa30 <iprintf+0x14>
 800aa26:	69a3      	ldr	r3, [r4, #24]
 800aa28:	b913      	cbnz	r3, 800aa30 <iprintf+0x14>
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fb6c 	bl	800b108 <__sinit>
 800aa30:	ab05      	add	r3, sp, #20
 800aa32:	9a04      	ldr	r2, [sp, #16]
 800aa34:	68a1      	ldr	r1, [r4, #8]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fd8f 	bl	800b55c <_vfiprintf_r>
 800aa3e:	b002      	add	sp, #8
 800aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa44:	b004      	add	sp, #16
 800aa46:	4770      	bx	lr
 800aa48:	2000003c 	.word	0x2000003c

0800aa4c <_puts_r>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	460e      	mov	r6, r1
 800aa50:	4605      	mov	r5, r0
 800aa52:	b118      	cbz	r0, 800aa5c <_puts_r+0x10>
 800aa54:	6983      	ldr	r3, [r0, #24]
 800aa56:	b90b      	cbnz	r3, 800aa5c <_puts_r+0x10>
 800aa58:	f000 fb56 	bl	800b108 <__sinit>
 800aa5c:	69ab      	ldr	r3, [r5, #24]
 800aa5e:	68ac      	ldr	r4, [r5, #8]
 800aa60:	b913      	cbnz	r3, 800aa68 <_puts_r+0x1c>
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 fb50 	bl	800b108 <__sinit>
 800aa68:	4b2c      	ldr	r3, [pc, #176]	; (800ab1c <_puts_r+0xd0>)
 800aa6a:	429c      	cmp	r4, r3
 800aa6c:	d120      	bne.n	800aab0 <_puts_r+0x64>
 800aa6e:	686c      	ldr	r4, [r5, #4]
 800aa70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa72:	07db      	lsls	r3, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_puts_r+0x36>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	0598      	lsls	r0, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_puts_r+0x36>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa7e:	f000 fbf3 	bl	800b268 <__retarget_lock_acquire_recursive>
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	0719      	lsls	r1, r3, #28
 800aa86:	d51d      	bpl.n	800aac4 <_puts_r+0x78>
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	b1db      	cbz	r3, 800aac4 <_puts_r+0x78>
 800aa8c:	3e01      	subs	r6, #1
 800aa8e:	68a3      	ldr	r3, [r4, #8]
 800aa90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa94:	3b01      	subs	r3, #1
 800aa96:	60a3      	str	r3, [r4, #8]
 800aa98:	bb39      	cbnz	r1, 800aaea <_puts_r+0x9e>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da38      	bge.n	800ab10 <_puts_r+0xc4>
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	210a      	movs	r1, #10
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f938 	bl	800ad18 <__swbuf_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d011      	beq.n	800aad0 <_puts_r+0x84>
 800aaac:	250a      	movs	r5, #10
 800aaae:	e011      	b.n	800aad4 <_puts_r+0x88>
 800aab0:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <_puts_r+0xd4>)
 800aab2:	429c      	cmp	r4, r3
 800aab4:	d101      	bne.n	800aaba <_puts_r+0x6e>
 800aab6:	68ac      	ldr	r4, [r5, #8]
 800aab8:	e7da      	b.n	800aa70 <_puts_r+0x24>
 800aaba:	4b1a      	ldr	r3, [pc, #104]	; (800ab24 <_puts_r+0xd8>)
 800aabc:	429c      	cmp	r4, r3
 800aabe:	bf08      	it	eq
 800aac0:	68ec      	ldreq	r4, [r5, #12]
 800aac2:	e7d5      	b.n	800aa70 <_puts_r+0x24>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f978 	bl	800adbc <__swsetup_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d0dd      	beq.n	800aa8c <_puts_r+0x40>
 800aad0:	f04f 35ff 	mov.w	r5, #4294967295
 800aad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad6:	07da      	lsls	r2, r3, #31
 800aad8:	d405      	bmi.n	800aae6 <_puts_r+0x9a>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	059b      	lsls	r3, r3, #22
 800aade:	d402      	bmi.n	800aae6 <_puts_r+0x9a>
 800aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae2:	f000 fbc2 	bl	800b26a <__retarget_lock_release_recursive>
 800aae6:	4628      	mov	r0, r5
 800aae8:	bd70      	pop	{r4, r5, r6, pc}
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da04      	bge.n	800aaf8 <_puts_r+0xac>
 800aaee:	69a2      	ldr	r2, [r4, #24]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	dc06      	bgt.n	800ab02 <_puts_r+0xb6>
 800aaf4:	290a      	cmp	r1, #10
 800aaf6:	d004      	beq.n	800ab02 <_puts_r+0xb6>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	6022      	str	r2, [r4, #0]
 800aafe:	7019      	strb	r1, [r3, #0]
 800ab00:	e7c5      	b.n	800aa8e <_puts_r+0x42>
 800ab02:	4622      	mov	r2, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	f000 f907 	bl	800ad18 <__swbuf_r>
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d1bf      	bne.n	800aa8e <_puts_r+0x42>
 800ab0e:	e7df      	b.n	800aad0 <_puts_r+0x84>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	250a      	movs	r5, #10
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	6022      	str	r2, [r4, #0]
 800ab18:	701d      	strb	r5, [r3, #0]
 800ab1a:	e7db      	b.n	800aad4 <_puts_r+0x88>
 800ab1c:	080a2258 	.word	0x080a2258
 800ab20:	080a2278 	.word	0x080a2278
 800ab24:	080a2238 	.word	0x080a2238

0800ab28 <puts>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <puts+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f7ff bf8d 	b.w	800aa4c <_puts_r>
 800ab32:	bf00      	nop
 800ab34:	2000003c 	.word	0x2000003c

0800ab38 <strcpy>:
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab3e:	f803 2b01 	strb.w	r2, [r3], #1
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	d1f9      	bne.n	800ab3a <strcpy+0x2>
 800ab46:	4770      	bx	lr

0800ab48 <strtok>:
 800ab48:	4b16      	ldr	r3, [pc, #88]	; (800aba4 <strtok+0x5c>)
 800ab4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab4c:	681e      	ldr	r6, [r3, #0]
 800ab4e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ab50:	4605      	mov	r5, r0
 800ab52:	b9fc      	cbnz	r4, 800ab94 <strtok+0x4c>
 800ab54:	2050      	movs	r0, #80	; 0x50
 800ab56:	9101      	str	r1, [sp, #4]
 800ab58:	f000 fbee 	bl	800b338 <malloc>
 800ab5c:	9901      	ldr	r1, [sp, #4]
 800ab5e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ab60:	4602      	mov	r2, r0
 800ab62:	b920      	cbnz	r0, 800ab6e <strtok+0x26>
 800ab64:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <strtok+0x60>)
 800ab66:	4811      	ldr	r0, [pc, #68]	; (800abac <strtok+0x64>)
 800ab68:	2157      	movs	r1, #87	; 0x57
 800ab6a:	f000 f995 	bl	800ae98 <__assert_func>
 800ab6e:	e9c0 4400 	strd	r4, r4, [r0]
 800ab72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ab7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ab82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ab86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ab8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ab8e:	6184      	str	r4, [r0, #24]
 800ab90:	7704      	strb	r4, [r0, #28]
 800ab92:	6244      	str	r4, [r0, #36]	; 0x24
 800ab94:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ab96:	2301      	movs	r3, #1
 800ab98:	4628      	mov	r0, r5
 800ab9a:	b002      	add	sp, #8
 800ab9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aba0:	f000 b806 	b.w	800abb0 <__strtok_r>
 800aba4:	2000003c 	.word	0x2000003c
 800aba8:	080a2084 	.word	0x080a2084
 800abac:	080a209b 	.word	0x080a209b

0800abb0 <__strtok_r>:
 800abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb2:	b908      	cbnz	r0, 800abb8 <__strtok_r+0x8>
 800abb4:	6810      	ldr	r0, [r2, #0]
 800abb6:	b188      	cbz	r0, 800abdc <__strtok_r+0x2c>
 800abb8:	4604      	mov	r4, r0
 800abba:	4620      	mov	r0, r4
 800abbc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800abc0:	460f      	mov	r7, r1
 800abc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abc6:	b91e      	cbnz	r6, 800abd0 <__strtok_r+0x20>
 800abc8:	b965      	cbnz	r5, 800abe4 <__strtok_r+0x34>
 800abca:	6015      	str	r5, [r2, #0]
 800abcc:	4628      	mov	r0, r5
 800abce:	e005      	b.n	800abdc <__strtok_r+0x2c>
 800abd0:	42b5      	cmp	r5, r6
 800abd2:	d1f6      	bne.n	800abc2 <__strtok_r+0x12>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f0      	bne.n	800abba <__strtok_r+0xa>
 800abd8:	6014      	str	r4, [r2, #0]
 800abda:	7003      	strb	r3, [r0, #0]
 800abdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abde:	461c      	mov	r4, r3
 800abe0:	e00c      	b.n	800abfc <__strtok_r+0x4c>
 800abe2:	b915      	cbnz	r5, 800abea <__strtok_r+0x3a>
 800abe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abe8:	460e      	mov	r6, r1
 800abea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800abee:	42ab      	cmp	r3, r5
 800abf0:	d1f7      	bne.n	800abe2 <__strtok_r+0x32>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0f3      	beq.n	800abde <__strtok_r+0x2e>
 800abf6:	2300      	movs	r3, #0
 800abf8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800abfc:	6014      	str	r4, [r2, #0]
 800abfe:	e7ed      	b.n	800abdc <__strtok_r+0x2c>

0800ac00 <_strtol_l.constprop.0>:
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac06:	d001      	beq.n	800ac0c <_strtol_l.constprop.0+0xc>
 800ac08:	2b24      	cmp	r3, #36	; 0x24
 800ac0a:	d906      	bls.n	800ac1a <_strtol_l.constprop.0+0x1a>
 800ac0c:	f7ff fed4 	bl	800a9b8 <__errno>
 800ac10:	2316      	movs	r3, #22
 800ac12:	6003      	str	r3, [r0, #0]
 800ac14:	2000      	movs	r0, #0
 800ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad00 <_strtol_l.constprop.0+0x100>
 800ac1e:	460d      	mov	r5, r1
 800ac20:	462e      	mov	r6, r5
 800ac22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac2a:	f017 0708 	ands.w	r7, r7, #8
 800ac2e:	d1f7      	bne.n	800ac20 <_strtol_l.constprop.0+0x20>
 800ac30:	2c2d      	cmp	r4, #45	; 0x2d
 800ac32:	d132      	bne.n	800ac9a <_strtol_l.constprop.0+0x9a>
 800ac34:	782c      	ldrb	r4, [r5, #0]
 800ac36:	2701      	movs	r7, #1
 800ac38:	1cb5      	adds	r5, r6, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d05b      	beq.n	800acf6 <_strtol_l.constprop.0+0xf6>
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d109      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800ac42:	2c30      	cmp	r4, #48	; 0x30
 800ac44:	d107      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800ac46:	782c      	ldrb	r4, [r5, #0]
 800ac48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac4c:	2c58      	cmp	r4, #88	; 0x58
 800ac4e:	d14d      	bne.n	800acec <_strtol_l.constprop.0+0xec>
 800ac50:	786c      	ldrb	r4, [r5, #1]
 800ac52:	2310      	movs	r3, #16
 800ac54:	3502      	adds	r5, #2
 800ac56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac5e:	f04f 0c00 	mov.w	ip, #0
 800ac62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac66:	4666      	mov	r6, ip
 800ac68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac70:	f1be 0f09 	cmp.w	lr, #9
 800ac74:	d816      	bhi.n	800aca4 <_strtol_l.constprop.0+0xa4>
 800ac76:	4674      	mov	r4, lr
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	dd24      	ble.n	800acc6 <_strtol_l.constprop.0+0xc6>
 800ac7c:	f1bc 0f00 	cmp.w	ip, #0
 800ac80:	db1e      	blt.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac82:	45b1      	cmp	r9, r6
 800ac84:	d31c      	bcc.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac86:	d101      	bne.n	800ac8c <_strtol_l.constprop.0+0x8c>
 800ac88:	45a2      	cmp	sl, r4
 800ac8a:	db19      	blt.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ac90:	f04f 0c01 	mov.w	ip, #1
 800ac94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac98:	e7e8      	b.n	800ac6c <_strtol_l.constprop.0+0x6c>
 800ac9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ac9c:	bf04      	itt	eq
 800ac9e:	782c      	ldrbeq	r4, [r5, #0]
 800aca0:	1cb5      	addeq	r5, r6, #2
 800aca2:	e7ca      	b.n	800ac3a <_strtol_l.constprop.0+0x3a>
 800aca4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aca8:	f1be 0f19 	cmp.w	lr, #25
 800acac:	d801      	bhi.n	800acb2 <_strtol_l.constprop.0+0xb2>
 800acae:	3c37      	subs	r4, #55	; 0x37
 800acb0:	e7e2      	b.n	800ac78 <_strtol_l.constprop.0+0x78>
 800acb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800acb6:	f1be 0f19 	cmp.w	lr, #25
 800acba:	d804      	bhi.n	800acc6 <_strtol_l.constprop.0+0xc6>
 800acbc:	3c57      	subs	r4, #87	; 0x57
 800acbe:	e7db      	b.n	800ac78 <_strtol_l.constprop.0+0x78>
 800acc0:	f04f 3cff 	mov.w	ip, #4294967295
 800acc4:	e7e6      	b.n	800ac94 <_strtol_l.constprop.0+0x94>
 800acc6:	f1bc 0f00 	cmp.w	ip, #0
 800acca:	da05      	bge.n	800acd8 <_strtol_l.constprop.0+0xd8>
 800accc:	2322      	movs	r3, #34	; 0x22
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	4646      	mov	r6, r8
 800acd2:	b942      	cbnz	r2, 800ace6 <_strtol_l.constprop.0+0xe6>
 800acd4:	4630      	mov	r0, r6
 800acd6:	e79e      	b.n	800ac16 <_strtol_l.constprop.0+0x16>
 800acd8:	b107      	cbz	r7, 800acdc <_strtol_l.constprop.0+0xdc>
 800acda:	4276      	negs	r6, r6
 800acdc:	2a00      	cmp	r2, #0
 800acde:	d0f9      	beq.n	800acd4 <_strtol_l.constprop.0+0xd4>
 800ace0:	f1bc 0f00 	cmp.w	ip, #0
 800ace4:	d000      	beq.n	800ace8 <_strtol_l.constprop.0+0xe8>
 800ace6:	1e69      	subs	r1, r5, #1
 800ace8:	6011      	str	r1, [r2, #0]
 800acea:	e7f3      	b.n	800acd4 <_strtol_l.constprop.0+0xd4>
 800acec:	2430      	movs	r4, #48	; 0x30
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1b1      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acf2:	2308      	movs	r3, #8
 800acf4:	e7af      	b.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acf6:	2c30      	cmp	r4, #48	; 0x30
 800acf8:	d0a5      	beq.n	800ac46 <_strtol_l.constprop.0+0x46>
 800acfa:	230a      	movs	r3, #10
 800acfc:	e7ab      	b.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acfe:	bf00      	nop
 800ad00:	080a2135 	.word	0x080a2135

0800ad04 <strtol>:
 800ad04:	4613      	mov	r3, r2
 800ad06:	460a      	mov	r2, r1
 800ad08:	4601      	mov	r1, r0
 800ad0a:	4802      	ldr	r0, [pc, #8]	; (800ad14 <strtol+0x10>)
 800ad0c:	6800      	ldr	r0, [r0, #0]
 800ad0e:	f7ff bf77 	b.w	800ac00 <_strtol_l.constprop.0>
 800ad12:	bf00      	nop
 800ad14:	2000003c 	.word	0x2000003c

0800ad18 <__swbuf_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b118      	cbz	r0, 800ad2a <__swbuf_r+0x12>
 800ad22:	6983      	ldr	r3, [r0, #24]
 800ad24:	b90b      	cbnz	r3, 800ad2a <__swbuf_r+0x12>
 800ad26:	f000 f9ef 	bl	800b108 <__sinit>
 800ad2a:	4b21      	ldr	r3, [pc, #132]	; (800adb0 <__swbuf_r+0x98>)
 800ad2c:	429c      	cmp	r4, r3
 800ad2e:	d12b      	bne.n	800ad88 <__swbuf_r+0x70>
 800ad30:	686c      	ldr	r4, [r5, #4]
 800ad32:	69a3      	ldr	r3, [r4, #24]
 800ad34:	60a3      	str	r3, [r4, #8]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	071a      	lsls	r2, r3, #28
 800ad3a:	d52f      	bpl.n	800ad9c <__swbuf_r+0x84>
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	b36b      	cbz	r3, 800ad9c <__swbuf_r+0x84>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	6820      	ldr	r0, [r4, #0]
 800ad44:	1ac0      	subs	r0, r0, r3
 800ad46:	6963      	ldr	r3, [r4, #20]
 800ad48:	b2f6      	uxtb	r6, r6
 800ad4a:	4283      	cmp	r3, r0
 800ad4c:	4637      	mov	r7, r6
 800ad4e:	dc04      	bgt.n	800ad5a <__swbuf_r+0x42>
 800ad50:	4621      	mov	r1, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 f944 	bl	800afe0 <_fflush_r>
 800ad58:	bb30      	cbnz	r0, 800ada8 <__swbuf_r+0x90>
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	60a3      	str	r3, [r4, #8]
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	6022      	str	r2, [r4, #0]
 800ad66:	701e      	strb	r6, [r3, #0]
 800ad68:	6963      	ldr	r3, [r4, #20]
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	4283      	cmp	r3, r0
 800ad6e:	d004      	beq.n	800ad7a <__swbuf_r+0x62>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	07db      	lsls	r3, r3, #31
 800ad74:	d506      	bpl.n	800ad84 <__swbuf_r+0x6c>
 800ad76:	2e0a      	cmp	r6, #10
 800ad78:	d104      	bne.n	800ad84 <__swbuf_r+0x6c>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f000 f92f 	bl	800afe0 <_fflush_r>
 800ad82:	b988      	cbnz	r0, 800ada8 <__swbuf_r+0x90>
 800ad84:	4638      	mov	r0, r7
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <__swbuf_r+0x9c>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d101      	bne.n	800ad92 <__swbuf_r+0x7a>
 800ad8e:	68ac      	ldr	r4, [r5, #8]
 800ad90:	e7cf      	b.n	800ad32 <__swbuf_r+0x1a>
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <__swbuf_r+0xa0>)
 800ad94:	429c      	cmp	r4, r3
 800ad96:	bf08      	it	eq
 800ad98:	68ec      	ldreq	r4, [r5, #12]
 800ad9a:	e7ca      	b.n	800ad32 <__swbuf_r+0x1a>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f80c 	bl	800adbc <__swsetup_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d0cb      	beq.n	800ad40 <__swbuf_r+0x28>
 800ada8:	f04f 37ff 	mov.w	r7, #4294967295
 800adac:	e7ea      	b.n	800ad84 <__swbuf_r+0x6c>
 800adae:	bf00      	nop
 800adb0:	080a2258 	.word	0x080a2258
 800adb4:	080a2278 	.word	0x080a2278
 800adb8:	080a2238 	.word	0x080a2238

0800adbc <__swsetup_r>:
 800adbc:	4b32      	ldr	r3, [pc, #200]	; (800ae88 <__swsetup_r+0xcc>)
 800adbe:	b570      	push	{r4, r5, r6, lr}
 800adc0:	681d      	ldr	r5, [r3, #0]
 800adc2:	4606      	mov	r6, r0
 800adc4:	460c      	mov	r4, r1
 800adc6:	b125      	cbz	r5, 800add2 <__swsetup_r+0x16>
 800adc8:	69ab      	ldr	r3, [r5, #24]
 800adca:	b913      	cbnz	r3, 800add2 <__swsetup_r+0x16>
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 f99b 	bl	800b108 <__sinit>
 800add2:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <__swsetup_r+0xd0>)
 800add4:	429c      	cmp	r4, r3
 800add6:	d10f      	bne.n	800adf8 <__swsetup_r+0x3c>
 800add8:	686c      	ldr	r4, [r5, #4]
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ade0:	0719      	lsls	r1, r3, #28
 800ade2:	d42c      	bmi.n	800ae3e <__swsetup_r+0x82>
 800ade4:	06dd      	lsls	r5, r3, #27
 800ade6:	d411      	bmi.n	800ae0c <__swsetup_r+0x50>
 800ade8:	2309      	movs	r3, #9
 800adea:	6033      	str	r3, [r6, #0]
 800adec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	f04f 30ff 	mov.w	r0, #4294967295
 800adf6:	e03e      	b.n	800ae76 <__swsetup_r+0xba>
 800adf8:	4b25      	ldr	r3, [pc, #148]	; (800ae90 <__swsetup_r+0xd4>)
 800adfa:	429c      	cmp	r4, r3
 800adfc:	d101      	bne.n	800ae02 <__swsetup_r+0x46>
 800adfe:	68ac      	ldr	r4, [r5, #8]
 800ae00:	e7eb      	b.n	800adda <__swsetup_r+0x1e>
 800ae02:	4b24      	ldr	r3, [pc, #144]	; (800ae94 <__swsetup_r+0xd8>)
 800ae04:	429c      	cmp	r4, r3
 800ae06:	bf08      	it	eq
 800ae08:	68ec      	ldreq	r4, [r5, #12]
 800ae0a:	e7e6      	b.n	800adda <__swsetup_r+0x1e>
 800ae0c:	0758      	lsls	r0, r3, #29
 800ae0e:	d512      	bpl.n	800ae36 <__swsetup_r+0x7a>
 800ae10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae12:	b141      	cbz	r1, 800ae26 <__swsetup_r+0x6a>
 800ae14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae18:	4299      	cmp	r1, r3
 800ae1a:	d002      	beq.n	800ae22 <__swsetup_r+0x66>
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f000 fa93 	bl	800b348 <_free_r>
 800ae22:	2300      	movs	r3, #0
 800ae24:	6363      	str	r3, [r4, #52]	; 0x34
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0308 	orr.w	r3, r3, #8
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	b94b      	cbnz	r3, 800ae56 <__swsetup_r+0x9a>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae4c:	d003      	beq.n	800ae56 <__swsetup_r+0x9a>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	4630      	mov	r0, r6
 800ae52:	f000 fa31 	bl	800b2b8 <__smakebuf_r>
 800ae56:	89a0      	ldrh	r0, [r4, #12]
 800ae58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae5c:	f010 0301 	ands.w	r3, r0, #1
 800ae60:	d00a      	beq.n	800ae78 <__swsetup_r+0xbc>
 800ae62:	2300      	movs	r3, #0
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6963      	ldr	r3, [r4, #20]
 800ae68:	425b      	negs	r3, r3
 800ae6a:	61a3      	str	r3, [r4, #24]
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	b943      	cbnz	r3, 800ae82 <__swsetup_r+0xc6>
 800ae70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae74:	d1ba      	bne.n	800adec <__swsetup_r+0x30>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	0781      	lsls	r1, r0, #30
 800ae7a:	bf58      	it	pl
 800ae7c:	6963      	ldrpl	r3, [r4, #20]
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	e7f4      	b.n	800ae6c <__swsetup_r+0xb0>
 800ae82:	2000      	movs	r0, #0
 800ae84:	e7f7      	b.n	800ae76 <__swsetup_r+0xba>
 800ae86:	bf00      	nop
 800ae88:	2000003c 	.word	0x2000003c
 800ae8c:	080a2258 	.word	0x080a2258
 800ae90:	080a2278 	.word	0x080a2278
 800ae94:	080a2238 	.word	0x080a2238

0800ae98 <__assert_func>:
 800ae98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae9a:	4614      	mov	r4, r2
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <__assert_func+0x2c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4605      	mov	r5, r0
 800aea4:	68d8      	ldr	r0, [r3, #12]
 800aea6:	b14c      	cbz	r4, 800aebc <__assert_func+0x24>
 800aea8:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <__assert_func+0x30>)
 800aeaa:	9100      	str	r1, [sp, #0]
 800aeac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeb0:	4906      	ldr	r1, [pc, #24]	; (800aecc <__assert_func+0x34>)
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	f000 f9a6 	bl	800b204 <fiprintf>
 800aeb8:	f000 fe7a 	bl	800bbb0 <abort>
 800aebc:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <__assert_func+0x38>)
 800aebe:	461c      	mov	r4, r3
 800aec0:	e7f3      	b.n	800aeaa <__assert_func+0x12>
 800aec2:	bf00      	nop
 800aec4:	2000003c 	.word	0x2000003c
 800aec8:	080a20f8 	.word	0x080a20f8
 800aecc:	080a2105 	.word	0x080a2105
 800aed0:	080a2133 	.word	0x080a2133

0800aed4 <__sflush_r>:
 800aed4:	898a      	ldrh	r2, [r1, #12]
 800aed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeda:	4605      	mov	r5, r0
 800aedc:	0710      	lsls	r0, r2, #28
 800aede:	460c      	mov	r4, r1
 800aee0:	d458      	bmi.n	800af94 <__sflush_r+0xc0>
 800aee2:	684b      	ldr	r3, [r1, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	dc05      	bgt.n	800aef4 <__sflush_r+0x20>
 800aee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dc02      	bgt.n	800aef4 <__sflush_r+0x20>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aef6:	2e00      	cmp	r6, #0
 800aef8:	d0f9      	beq.n	800aeee <__sflush_r+0x1a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af00:	682f      	ldr	r7, [r5, #0]
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	d032      	beq.n	800af6c <__sflush_r+0x98>
 800af06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	075a      	lsls	r2, r3, #29
 800af0c:	d505      	bpl.n	800af1a <__sflush_r+0x46>
 800af0e:	6863      	ldr	r3, [r4, #4]
 800af10:	1ac0      	subs	r0, r0, r3
 800af12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af14:	b10b      	cbz	r3, 800af1a <__sflush_r+0x46>
 800af16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af18:	1ac0      	subs	r0, r0, r3
 800af1a:	2300      	movs	r3, #0
 800af1c:	4602      	mov	r2, r0
 800af1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af20:	6a21      	ldr	r1, [r4, #32]
 800af22:	4628      	mov	r0, r5
 800af24:	47b0      	blx	r6
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	d106      	bne.n	800af3a <__sflush_r+0x66>
 800af2c:	6829      	ldr	r1, [r5, #0]
 800af2e:	291d      	cmp	r1, #29
 800af30:	d82c      	bhi.n	800af8c <__sflush_r+0xb8>
 800af32:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <__sflush_r+0x108>)
 800af34:	40ca      	lsrs	r2, r1
 800af36:	07d6      	lsls	r6, r2, #31
 800af38:	d528      	bpl.n	800af8c <__sflush_r+0xb8>
 800af3a:	2200      	movs	r2, #0
 800af3c:	6062      	str	r2, [r4, #4]
 800af3e:	04d9      	lsls	r1, r3, #19
 800af40:	6922      	ldr	r2, [r4, #16]
 800af42:	6022      	str	r2, [r4, #0]
 800af44:	d504      	bpl.n	800af50 <__sflush_r+0x7c>
 800af46:	1c42      	adds	r2, r0, #1
 800af48:	d101      	bne.n	800af4e <__sflush_r+0x7a>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b903      	cbnz	r3, 800af50 <__sflush_r+0x7c>
 800af4e:	6560      	str	r0, [r4, #84]	; 0x54
 800af50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af52:	602f      	str	r7, [r5, #0]
 800af54:	2900      	cmp	r1, #0
 800af56:	d0ca      	beq.n	800aeee <__sflush_r+0x1a>
 800af58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af5c:	4299      	cmp	r1, r3
 800af5e:	d002      	beq.n	800af66 <__sflush_r+0x92>
 800af60:	4628      	mov	r0, r5
 800af62:	f000 f9f1 	bl	800b348 <_free_r>
 800af66:	2000      	movs	r0, #0
 800af68:	6360      	str	r0, [r4, #52]	; 0x34
 800af6a:	e7c1      	b.n	800aef0 <__sflush_r+0x1c>
 800af6c:	6a21      	ldr	r1, [r4, #32]
 800af6e:	2301      	movs	r3, #1
 800af70:	4628      	mov	r0, r5
 800af72:	47b0      	blx	r6
 800af74:	1c41      	adds	r1, r0, #1
 800af76:	d1c7      	bne.n	800af08 <__sflush_r+0x34>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d0c4      	beq.n	800af08 <__sflush_r+0x34>
 800af7e:	2b1d      	cmp	r3, #29
 800af80:	d001      	beq.n	800af86 <__sflush_r+0xb2>
 800af82:	2b16      	cmp	r3, #22
 800af84:	d101      	bne.n	800af8a <__sflush_r+0xb6>
 800af86:	602f      	str	r7, [r5, #0]
 800af88:	e7b1      	b.n	800aeee <__sflush_r+0x1a>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af90:	81a3      	strh	r3, [r4, #12]
 800af92:	e7ad      	b.n	800aef0 <__sflush_r+0x1c>
 800af94:	690f      	ldr	r7, [r1, #16]
 800af96:	2f00      	cmp	r7, #0
 800af98:	d0a9      	beq.n	800aeee <__sflush_r+0x1a>
 800af9a:	0793      	lsls	r3, r2, #30
 800af9c:	680e      	ldr	r6, [r1, #0]
 800af9e:	bf08      	it	eq
 800afa0:	694b      	ldreq	r3, [r1, #20]
 800afa2:	600f      	str	r7, [r1, #0]
 800afa4:	bf18      	it	ne
 800afa6:	2300      	movne	r3, #0
 800afa8:	eba6 0807 	sub.w	r8, r6, r7
 800afac:	608b      	str	r3, [r1, #8]
 800afae:	f1b8 0f00 	cmp.w	r8, #0
 800afb2:	dd9c      	ble.n	800aeee <__sflush_r+0x1a>
 800afb4:	6a21      	ldr	r1, [r4, #32]
 800afb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afb8:	4643      	mov	r3, r8
 800afba:	463a      	mov	r2, r7
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b0      	blx	r6
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dc06      	bgt.n	800afd2 <__sflush_r+0xfe>
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	e78e      	b.n	800aef0 <__sflush_r+0x1c>
 800afd2:	4407      	add	r7, r0
 800afd4:	eba8 0800 	sub.w	r8, r8, r0
 800afd8:	e7e9      	b.n	800afae <__sflush_r+0xda>
 800afda:	bf00      	nop
 800afdc:	20400001 	.word	0x20400001

0800afe0 <_fflush_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	690b      	ldr	r3, [r1, #16]
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	b913      	cbnz	r3, 800aff0 <_fflush_r+0x10>
 800afea:	2500      	movs	r5, #0
 800afec:	4628      	mov	r0, r5
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	b118      	cbz	r0, 800affa <_fflush_r+0x1a>
 800aff2:	6983      	ldr	r3, [r0, #24]
 800aff4:	b90b      	cbnz	r3, 800affa <_fflush_r+0x1a>
 800aff6:	f000 f887 	bl	800b108 <__sinit>
 800affa:	4b14      	ldr	r3, [pc, #80]	; (800b04c <_fflush_r+0x6c>)
 800affc:	429c      	cmp	r4, r3
 800affe:	d11b      	bne.n	800b038 <_fflush_r+0x58>
 800b000:	686c      	ldr	r4, [r5, #4]
 800b002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0ef      	beq.n	800afea <_fflush_r+0xa>
 800b00a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b00c:	07d0      	lsls	r0, r2, #31
 800b00e:	d404      	bmi.n	800b01a <_fflush_r+0x3a>
 800b010:	0599      	lsls	r1, r3, #22
 800b012:	d402      	bmi.n	800b01a <_fflush_r+0x3a>
 800b014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b016:	f000 f927 	bl	800b268 <__retarget_lock_acquire_recursive>
 800b01a:	4628      	mov	r0, r5
 800b01c:	4621      	mov	r1, r4
 800b01e:	f7ff ff59 	bl	800aed4 <__sflush_r>
 800b022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b024:	07da      	lsls	r2, r3, #31
 800b026:	4605      	mov	r5, r0
 800b028:	d4e0      	bmi.n	800afec <_fflush_r+0xc>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	059b      	lsls	r3, r3, #22
 800b02e:	d4dd      	bmi.n	800afec <_fflush_r+0xc>
 800b030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b032:	f000 f91a 	bl	800b26a <__retarget_lock_release_recursive>
 800b036:	e7d9      	b.n	800afec <_fflush_r+0xc>
 800b038:	4b05      	ldr	r3, [pc, #20]	; (800b050 <_fflush_r+0x70>)
 800b03a:	429c      	cmp	r4, r3
 800b03c:	d101      	bne.n	800b042 <_fflush_r+0x62>
 800b03e:	68ac      	ldr	r4, [r5, #8]
 800b040:	e7df      	b.n	800b002 <_fflush_r+0x22>
 800b042:	4b04      	ldr	r3, [pc, #16]	; (800b054 <_fflush_r+0x74>)
 800b044:	429c      	cmp	r4, r3
 800b046:	bf08      	it	eq
 800b048:	68ec      	ldreq	r4, [r5, #12]
 800b04a:	e7da      	b.n	800b002 <_fflush_r+0x22>
 800b04c:	080a2258 	.word	0x080a2258
 800b050:	080a2278 	.word	0x080a2278
 800b054:	080a2238 	.word	0x080a2238

0800b058 <std>:
 800b058:	2300      	movs	r3, #0
 800b05a:	b510      	push	{r4, lr}
 800b05c:	4604      	mov	r4, r0
 800b05e:	e9c0 3300 	strd	r3, r3, [r0]
 800b062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b066:	6083      	str	r3, [r0, #8]
 800b068:	8181      	strh	r1, [r0, #12]
 800b06a:	6643      	str	r3, [r0, #100]	; 0x64
 800b06c:	81c2      	strh	r2, [r0, #14]
 800b06e:	6183      	str	r3, [r0, #24]
 800b070:	4619      	mov	r1, r3
 800b072:	2208      	movs	r2, #8
 800b074:	305c      	adds	r0, #92	; 0x5c
 800b076:	f7ff fcc9 	bl	800aa0c <memset>
 800b07a:	4b05      	ldr	r3, [pc, #20]	; (800b090 <std+0x38>)
 800b07c:	6263      	str	r3, [r4, #36]	; 0x24
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <std+0x3c>)
 800b080:	62a3      	str	r3, [r4, #40]	; 0x28
 800b082:	4b05      	ldr	r3, [pc, #20]	; (800b098 <std+0x40>)
 800b084:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <std+0x44>)
 800b088:	6224      	str	r4, [r4, #32]
 800b08a:	6323      	str	r3, [r4, #48]	; 0x30
 800b08c:	bd10      	pop	{r4, pc}
 800b08e:	bf00      	nop
 800b090:	0800bb05 	.word	0x0800bb05
 800b094:	0800bb27 	.word	0x0800bb27
 800b098:	0800bb5f 	.word	0x0800bb5f
 800b09c:	0800bb83 	.word	0x0800bb83

0800b0a0 <_cleanup_r>:
 800b0a0:	4901      	ldr	r1, [pc, #4]	; (800b0a8 <_cleanup_r+0x8>)
 800b0a2:	f000 b8c1 	b.w	800b228 <_fwalk_reent>
 800b0a6:	bf00      	nop
 800b0a8:	0800afe1 	.word	0x0800afe1

0800b0ac <__sfmoreglue>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	2268      	movs	r2, #104	; 0x68
 800b0b0:	1e4d      	subs	r5, r1, #1
 800b0b2:	4355      	muls	r5, r2
 800b0b4:	460e      	mov	r6, r1
 800b0b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0ba:	f000 f9b1 	bl	800b420 <_malloc_r>
 800b0be:	4604      	mov	r4, r0
 800b0c0:	b140      	cbz	r0, 800b0d4 <__sfmoreglue+0x28>
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b0c8:	300c      	adds	r0, #12
 800b0ca:	60a0      	str	r0, [r4, #8]
 800b0cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0d0:	f7ff fc9c 	bl	800aa0c <memset>
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}

0800b0d8 <__sfp_lock_acquire>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	; (800b0e0 <__sfp_lock_acquire+0x8>)
 800b0da:	f000 b8c5 	b.w	800b268 <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	200004fd 	.word	0x200004fd

0800b0e4 <__sfp_lock_release>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	; (800b0ec <__sfp_lock_release+0x8>)
 800b0e6:	f000 b8c0 	b.w	800b26a <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	200004fd 	.word	0x200004fd

0800b0f0 <__sinit_lock_acquire>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	; (800b0f8 <__sinit_lock_acquire+0x8>)
 800b0f2:	f000 b8b9 	b.w	800b268 <__retarget_lock_acquire_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	200004fe 	.word	0x200004fe

0800b0fc <__sinit_lock_release>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__sinit_lock_release+0x8>)
 800b0fe:	f000 b8b4 	b.w	800b26a <__retarget_lock_release_recursive>
 800b102:	bf00      	nop
 800b104:	200004fe 	.word	0x200004fe

0800b108 <__sinit>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	4604      	mov	r4, r0
 800b10c:	f7ff fff0 	bl	800b0f0 <__sinit_lock_acquire>
 800b110:	69a3      	ldr	r3, [r4, #24]
 800b112:	b11b      	cbz	r3, 800b11c <__sinit+0x14>
 800b114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b118:	f7ff bff0 	b.w	800b0fc <__sinit_lock_release>
 800b11c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b120:	6523      	str	r3, [r4, #80]	; 0x50
 800b122:	4b13      	ldr	r3, [pc, #76]	; (800b170 <__sinit+0x68>)
 800b124:	4a13      	ldr	r2, [pc, #76]	; (800b174 <__sinit+0x6c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	62a2      	str	r2, [r4, #40]	; 0x28
 800b12a:	42a3      	cmp	r3, r4
 800b12c:	bf04      	itt	eq
 800b12e:	2301      	moveq	r3, #1
 800b130:	61a3      	streq	r3, [r4, #24]
 800b132:	4620      	mov	r0, r4
 800b134:	f000 f820 	bl	800b178 <__sfp>
 800b138:	6060      	str	r0, [r4, #4]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 f81c 	bl	800b178 <__sfp>
 800b140:	60a0      	str	r0, [r4, #8]
 800b142:	4620      	mov	r0, r4
 800b144:	f000 f818 	bl	800b178 <__sfp>
 800b148:	2200      	movs	r2, #0
 800b14a:	60e0      	str	r0, [r4, #12]
 800b14c:	2104      	movs	r1, #4
 800b14e:	6860      	ldr	r0, [r4, #4]
 800b150:	f7ff ff82 	bl	800b058 <std>
 800b154:	68a0      	ldr	r0, [r4, #8]
 800b156:	2201      	movs	r2, #1
 800b158:	2109      	movs	r1, #9
 800b15a:	f7ff ff7d 	bl	800b058 <std>
 800b15e:	68e0      	ldr	r0, [r4, #12]
 800b160:	2202      	movs	r2, #2
 800b162:	2112      	movs	r1, #18
 800b164:	f7ff ff78 	bl	800b058 <std>
 800b168:	2301      	movs	r3, #1
 800b16a:	61a3      	str	r3, [r4, #24]
 800b16c:	e7d2      	b.n	800b114 <__sinit+0xc>
 800b16e:	bf00      	nop
 800b170:	080a2080 	.word	0x080a2080
 800b174:	0800b0a1 	.word	0x0800b0a1

0800b178 <__sfp>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	4607      	mov	r7, r0
 800b17c:	f7ff ffac 	bl	800b0d8 <__sfp_lock_acquire>
 800b180:	4b1e      	ldr	r3, [pc, #120]	; (800b1fc <__sfp+0x84>)
 800b182:	681e      	ldr	r6, [r3, #0]
 800b184:	69b3      	ldr	r3, [r6, #24]
 800b186:	b913      	cbnz	r3, 800b18e <__sfp+0x16>
 800b188:	4630      	mov	r0, r6
 800b18a:	f7ff ffbd 	bl	800b108 <__sinit>
 800b18e:	3648      	adds	r6, #72	; 0x48
 800b190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b194:	3b01      	subs	r3, #1
 800b196:	d503      	bpl.n	800b1a0 <__sfp+0x28>
 800b198:	6833      	ldr	r3, [r6, #0]
 800b19a:	b30b      	cbz	r3, 800b1e0 <__sfp+0x68>
 800b19c:	6836      	ldr	r6, [r6, #0]
 800b19e:	e7f7      	b.n	800b190 <__sfp+0x18>
 800b1a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1a4:	b9d5      	cbnz	r5, 800b1dc <__sfp+0x64>
 800b1a6:	4b16      	ldr	r3, [pc, #88]	; (800b200 <__sfp+0x88>)
 800b1a8:	60e3      	str	r3, [r4, #12]
 800b1aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b1b0:	f000 f859 	bl	800b266 <__retarget_lock_init_recursive>
 800b1b4:	f7ff ff96 	bl	800b0e4 <__sfp_lock_release>
 800b1b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1c0:	6025      	str	r5, [r4, #0]
 800b1c2:	61a5      	str	r5, [r4, #24]
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1cc:	f7ff fc1e 	bl	800aa0c <memset>
 800b1d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1d8:	4620      	mov	r0, r4
 800b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1dc:	3468      	adds	r4, #104	; 0x68
 800b1de:	e7d9      	b.n	800b194 <__sfp+0x1c>
 800b1e0:	2104      	movs	r1, #4
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	f7ff ff62 	bl	800b0ac <__sfmoreglue>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	6030      	str	r0, [r6, #0]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d1d5      	bne.n	800b19c <__sfp+0x24>
 800b1f0:	f7ff ff78 	bl	800b0e4 <__sfp_lock_release>
 800b1f4:	230c      	movs	r3, #12
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	e7ee      	b.n	800b1d8 <__sfp+0x60>
 800b1fa:	bf00      	nop
 800b1fc:	080a2080 	.word	0x080a2080
 800b200:	ffff0001 	.word	0xffff0001

0800b204 <fiprintf>:
 800b204:	b40e      	push	{r1, r2, r3}
 800b206:	b503      	push	{r0, r1, lr}
 800b208:	4601      	mov	r1, r0
 800b20a:	ab03      	add	r3, sp, #12
 800b20c:	4805      	ldr	r0, [pc, #20]	; (800b224 <fiprintf+0x20>)
 800b20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b212:	6800      	ldr	r0, [r0, #0]
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	f000 f9a1 	bl	800b55c <_vfiprintf_r>
 800b21a:	b002      	add	sp, #8
 800b21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b220:	b003      	add	sp, #12
 800b222:	4770      	bx	lr
 800b224:	2000003c 	.word	0x2000003c

0800b228 <_fwalk_reent>:
 800b228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b22c:	4606      	mov	r6, r0
 800b22e:	4688      	mov	r8, r1
 800b230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b234:	2700      	movs	r7, #0
 800b236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b23a:	f1b9 0901 	subs.w	r9, r9, #1
 800b23e:	d505      	bpl.n	800b24c <_fwalk_reent+0x24>
 800b240:	6824      	ldr	r4, [r4, #0]
 800b242:	2c00      	cmp	r4, #0
 800b244:	d1f7      	bne.n	800b236 <_fwalk_reent+0xe>
 800b246:	4638      	mov	r0, r7
 800b248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24c:	89ab      	ldrh	r3, [r5, #12]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d907      	bls.n	800b262 <_fwalk_reent+0x3a>
 800b252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b256:	3301      	adds	r3, #1
 800b258:	d003      	beq.n	800b262 <_fwalk_reent+0x3a>
 800b25a:	4629      	mov	r1, r5
 800b25c:	4630      	mov	r0, r6
 800b25e:	47c0      	blx	r8
 800b260:	4307      	orrs	r7, r0
 800b262:	3568      	adds	r5, #104	; 0x68
 800b264:	e7e9      	b.n	800b23a <_fwalk_reent+0x12>

0800b266 <__retarget_lock_init_recursive>:
 800b266:	4770      	bx	lr

0800b268 <__retarget_lock_acquire_recursive>:
 800b268:	4770      	bx	lr

0800b26a <__retarget_lock_release_recursive>:
 800b26a:	4770      	bx	lr

0800b26c <__swhatbuf_r>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	460e      	mov	r6, r1
 800b270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b274:	2900      	cmp	r1, #0
 800b276:	b096      	sub	sp, #88	; 0x58
 800b278:	4614      	mov	r4, r2
 800b27a:	461d      	mov	r5, r3
 800b27c:	da08      	bge.n	800b290 <__swhatbuf_r+0x24>
 800b27e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	061a      	lsls	r2, r3, #24
 800b288:	d410      	bmi.n	800b2ac <__swhatbuf_r+0x40>
 800b28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b28e:	e00e      	b.n	800b2ae <__swhatbuf_r+0x42>
 800b290:	466a      	mov	r2, sp
 800b292:	f000 fca5 	bl	800bbe0 <_fstat_r>
 800b296:	2800      	cmp	r0, #0
 800b298:	dbf1      	blt.n	800b27e <__swhatbuf_r+0x12>
 800b29a:	9a01      	ldr	r2, [sp, #4]
 800b29c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2a4:	425a      	negs	r2, r3
 800b2a6:	415a      	adcs	r2, r3
 800b2a8:	602a      	str	r2, [r5, #0]
 800b2aa:	e7ee      	b.n	800b28a <__swhatbuf_r+0x1e>
 800b2ac:	2340      	movs	r3, #64	; 0x40
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	b016      	add	sp, #88	; 0x58
 800b2b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2b8 <__smakebuf_r>:
 800b2b8:	898b      	ldrh	r3, [r1, #12]
 800b2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2bc:	079d      	lsls	r5, r3, #30
 800b2be:	4606      	mov	r6, r0
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	d507      	bpl.n	800b2d4 <__smakebuf_r+0x1c>
 800b2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	6163      	str	r3, [r4, #20]
 800b2d0:	b002      	add	sp, #8
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}
 800b2d4:	ab01      	add	r3, sp, #4
 800b2d6:	466a      	mov	r2, sp
 800b2d8:	f7ff ffc8 	bl	800b26c <__swhatbuf_r>
 800b2dc:	9900      	ldr	r1, [sp, #0]
 800b2de:	4605      	mov	r5, r0
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 f89d 	bl	800b420 <_malloc_r>
 800b2e6:	b948      	cbnz	r0, 800b2fc <__smakebuf_r+0x44>
 800b2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d4ef      	bmi.n	800b2d0 <__smakebuf_r+0x18>
 800b2f0:	f023 0303 	bic.w	r3, r3, #3
 800b2f4:	f043 0302 	orr.w	r3, r3, #2
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	e7e3      	b.n	800b2c4 <__smakebuf_r+0xc>
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <__smakebuf_r+0x7c>)
 800b2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	6020      	str	r0, [r4, #0]
 800b304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	9b00      	ldr	r3, [sp, #0]
 800b30c:	6163      	str	r3, [r4, #20]
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	6120      	str	r0, [r4, #16]
 800b312:	b15b      	cbz	r3, 800b32c <__smakebuf_r+0x74>
 800b314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b318:	4630      	mov	r0, r6
 800b31a:	f000 fc73 	bl	800bc04 <_isatty_r>
 800b31e:	b128      	cbz	r0, 800b32c <__smakebuf_r+0x74>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f023 0303 	bic.w	r3, r3, #3
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	89a0      	ldrh	r0, [r4, #12]
 800b32e:	4305      	orrs	r5, r0
 800b330:	81a5      	strh	r5, [r4, #12]
 800b332:	e7cd      	b.n	800b2d0 <__smakebuf_r+0x18>
 800b334:	0800b0a1 	.word	0x0800b0a1

0800b338 <malloc>:
 800b338:	4b02      	ldr	r3, [pc, #8]	; (800b344 <malloc+0xc>)
 800b33a:	4601      	mov	r1, r0
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	f000 b86f 	b.w	800b420 <_malloc_r>
 800b342:	bf00      	nop
 800b344:	2000003c 	.word	0x2000003c

0800b348 <_free_r>:
 800b348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b34a:	2900      	cmp	r1, #0
 800b34c:	d044      	beq.n	800b3d8 <_free_r+0x90>
 800b34e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b352:	9001      	str	r0, [sp, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f1a1 0404 	sub.w	r4, r1, #4
 800b35a:	bfb8      	it	lt
 800b35c:	18e4      	addlt	r4, r4, r3
 800b35e:	f000 fc73 	bl	800bc48 <__malloc_lock>
 800b362:	4a1e      	ldr	r2, [pc, #120]	; (800b3dc <_free_r+0x94>)
 800b364:	9801      	ldr	r0, [sp, #4]
 800b366:	6813      	ldr	r3, [r2, #0]
 800b368:	b933      	cbnz	r3, 800b378 <_free_r+0x30>
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	6014      	str	r4, [r2, #0]
 800b36e:	b003      	add	sp, #12
 800b370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b374:	f000 bc6e 	b.w	800bc54 <__malloc_unlock>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d908      	bls.n	800b38e <_free_r+0x46>
 800b37c:	6825      	ldr	r5, [r4, #0]
 800b37e:	1961      	adds	r1, r4, r5
 800b380:	428b      	cmp	r3, r1
 800b382:	bf01      	itttt	eq
 800b384:	6819      	ldreq	r1, [r3, #0]
 800b386:	685b      	ldreq	r3, [r3, #4]
 800b388:	1949      	addeq	r1, r1, r5
 800b38a:	6021      	streq	r1, [r4, #0]
 800b38c:	e7ed      	b.n	800b36a <_free_r+0x22>
 800b38e:	461a      	mov	r2, r3
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	b10b      	cbz	r3, 800b398 <_free_r+0x50>
 800b394:	42a3      	cmp	r3, r4
 800b396:	d9fa      	bls.n	800b38e <_free_r+0x46>
 800b398:	6811      	ldr	r1, [r2, #0]
 800b39a:	1855      	adds	r5, r2, r1
 800b39c:	42a5      	cmp	r5, r4
 800b39e:	d10b      	bne.n	800b3b8 <_free_r+0x70>
 800b3a0:	6824      	ldr	r4, [r4, #0]
 800b3a2:	4421      	add	r1, r4
 800b3a4:	1854      	adds	r4, r2, r1
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	6011      	str	r1, [r2, #0]
 800b3aa:	d1e0      	bne.n	800b36e <_free_r+0x26>
 800b3ac:	681c      	ldr	r4, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	6053      	str	r3, [r2, #4]
 800b3b2:	4421      	add	r1, r4
 800b3b4:	6011      	str	r1, [r2, #0]
 800b3b6:	e7da      	b.n	800b36e <_free_r+0x26>
 800b3b8:	d902      	bls.n	800b3c0 <_free_r+0x78>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	6003      	str	r3, [r0, #0]
 800b3be:	e7d6      	b.n	800b36e <_free_r+0x26>
 800b3c0:	6825      	ldr	r5, [r4, #0]
 800b3c2:	1961      	adds	r1, r4, r5
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf04      	itt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	6063      	str	r3, [r4, #4]
 800b3ce:	bf04      	itt	eq
 800b3d0:	1949      	addeq	r1, r1, r5
 800b3d2:	6021      	streq	r1, [r4, #0]
 800b3d4:	6054      	str	r4, [r2, #4]
 800b3d6:	e7ca      	b.n	800b36e <_free_r+0x26>
 800b3d8:	b003      	add	sp, #12
 800b3da:	bd30      	pop	{r4, r5, pc}
 800b3dc:	20000500 	.word	0x20000500

0800b3e0 <sbrk_aligned>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4e0e      	ldr	r6, [pc, #56]	; (800b41c <sbrk_aligned+0x3c>)
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	6831      	ldr	r1, [r6, #0]
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	b911      	cbnz	r1, 800b3f2 <sbrk_aligned+0x12>
 800b3ec:	f000 fb7a 	bl	800bae4 <_sbrk_r>
 800b3f0:	6030      	str	r0, [r6, #0]
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fb75 	bl	800bae4 <_sbrk_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d00a      	beq.n	800b414 <sbrk_aligned+0x34>
 800b3fe:	1cc4      	adds	r4, r0, #3
 800b400:	f024 0403 	bic.w	r4, r4, #3
 800b404:	42a0      	cmp	r0, r4
 800b406:	d007      	beq.n	800b418 <sbrk_aligned+0x38>
 800b408:	1a21      	subs	r1, r4, r0
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 fb6a 	bl	800bae4 <_sbrk_r>
 800b410:	3001      	adds	r0, #1
 800b412:	d101      	bne.n	800b418 <sbrk_aligned+0x38>
 800b414:	f04f 34ff 	mov.w	r4, #4294967295
 800b418:	4620      	mov	r0, r4
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	20000504 	.word	0x20000504

0800b420 <_malloc_r>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	1ccd      	adds	r5, r1, #3
 800b426:	f025 0503 	bic.w	r5, r5, #3
 800b42a:	3508      	adds	r5, #8
 800b42c:	2d0c      	cmp	r5, #12
 800b42e:	bf38      	it	cc
 800b430:	250c      	movcc	r5, #12
 800b432:	2d00      	cmp	r5, #0
 800b434:	4607      	mov	r7, r0
 800b436:	db01      	blt.n	800b43c <_malloc_r+0x1c>
 800b438:	42a9      	cmp	r1, r5
 800b43a:	d905      	bls.n	800b448 <_malloc_r+0x28>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	2600      	movs	r6, #0
 800b442:	4630      	mov	r0, r6
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	4e2e      	ldr	r6, [pc, #184]	; (800b504 <_malloc_r+0xe4>)
 800b44a:	f000 fbfd 	bl	800bc48 <__malloc_lock>
 800b44e:	6833      	ldr	r3, [r6, #0]
 800b450:	461c      	mov	r4, r3
 800b452:	bb34      	cbnz	r4, 800b4a2 <_malloc_r+0x82>
 800b454:	4629      	mov	r1, r5
 800b456:	4638      	mov	r0, r7
 800b458:	f7ff ffc2 	bl	800b3e0 <sbrk_aligned>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	4604      	mov	r4, r0
 800b460:	d14d      	bne.n	800b4fe <_malloc_r+0xde>
 800b462:	6834      	ldr	r4, [r6, #0]
 800b464:	4626      	mov	r6, r4
 800b466:	2e00      	cmp	r6, #0
 800b468:	d140      	bne.n	800b4ec <_malloc_r+0xcc>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	4631      	mov	r1, r6
 800b46e:	4638      	mov	r0, r7
 800b470:	eb04 0803 	add.w	r8, r4, r3
 800b474:	f000 fb36 	bl	800bae4 <_sbrk_r>
 800b478:	4580      	cmp	r8, r0
 800b47a:	d13a      	bne.n	800b4f2 <_malloc_r+0xd2>
 800b47c:	6821      	ldr	r1, [r4, #0]
 800b47e:	3503      	adds	r5, #3
 800b480:	1a6d      	subs	r5, r5, r1
 800b482:	f025 0503 	bic.w	r5, r5, #3
 800b486:	3508      	adds	r5, #8
 800b488:	2d0c      	cmp	r5, #12
 800b48a:	bf38      	it	cc
 800b48c:	250c      	movcc	r5, #12
 800b48e:	4629      	mov	r1, r5
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff ffa5 	bl	800b3e0 <sbrk_aligned>
 800b496:	3001      	adds	r0, #1
 800b498:	d02b      	beq.n	800b4f2 <_malloc_r+0xd2>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	442b      	add	r3, r5
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	e00e      	b.n	800b4c0 <_malloc_r+0xa0>
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	1b52      	subs	r2, r2, r5
 800b4a6:	d41e      	bmi.n	800b4e6 <_malloc_r+0xc6>
 800b4a8:	2a0b      	cmp	r2, #11
 800b4aa:	d916      	bls.n	800b4da <_malloc_r+0xba>
 800b4ac:	1961      	adds	r1, r4, r5
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	bf18      	it	ne
 800b4b4:	6059      	strne	r1, [r3, #4]
 800b4b6:	6863      	ldr	r3, [r4, #4]
 800b4b8:	bf08      	it	eq
 800b4ba:	6031      	streq	r1, [r6, #0]
 800b4bc:	5162      	str	r2, [r4, r5]
 800b4be:	604b      	str	r3, [r1, #4]
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f104 060b 	add.w	r6, r4, #11
 800b4c6:	f000 fbc5 	bl	800bc54 <__malloc_unlock>
 800b4ca:	f026 0607 	bic.w	r6, r6, #7
 800b4ce:	1d23      	adds	r3, r4, #4
 800b4d0:	1af2      	subs	r2, r6, r3
 800b4d2:	d0b6      	beq.n	800b442 <_malloc_r+0x22>
 800b4d4:	1b9b      	subs	r3, r3, r6
 800b4d6:	50a3      	str	r3, [r4, r2]
 800b4d8:	e7b3      	b.n	800b442 <_malloc_r+0x22>
 800b4da:	6862      	ldr	r2, [r4, #4]
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	bf0c      	ite	eq
 800b4e0:	6032      	streq	r2, [r6, #0]
 800b4e2:	605a      	strne	r2, [r3, #4]
 800b4e4:	e7ec      	b.n	800b4c0 <_malloc_r+0xa0>
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	6864      	ldr	r4, [r4, #4]
 800b4ea:	e7b2      	b.n	800b452 <_malloc_r+0x32>
 800b4ec:	4634      	mov	r4, r6
 800b4ee:	6876      	ldr	r6, [r6, #4]
 800b4f0:	e7b9      	b.n	800b466 <_malloc_r+0x46>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	603b      	str	r3, [r7, #0]
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f000 fbac 	bl	800bc54 <__malloc_unlock>
 800b4fc:	e7a1      	b.n	800b442 <_malloc_r+0x22>
 800b4fe:	6025      	str	r5, [r4, #0]
 800b500:	e7de      	b.n	800b4c0 <_malloc_r+0xa0>
 800b502:	bf00      	nop
 800b504:	20000500 	.word	0x20000500

0800b508 <__sfputc_r>:
 800b508:	6893      	ldr	r3, [r2, #8]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	b410      	push	{r4}
 800b510:	6093      	str	r3, [r2, #8]
 800b512:	da08      	bge.n	800b526 <__sfputc_r+0x1e>
 800b514:	6994      	ldr	r4, [r2, #24]
 800b516:	42a3      	cmp	r3, r4
 800b518:	db01      	blt.n	800b51e <__sfputc_r+0x16>
 800b51a:	290a      	cmp	r1, #10
 800b51c:	d103      	bne.n	800b526 <__sfputc_r+0x1e>
 800b51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b522:	f7ff bbf9 	b.w	800ad18 <__swbuf_r>
 800b526:	6813      	ldr	r3, [r2, #0]
 800b528:	1c58      	adds	r0, r3, #1
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	7019      	strb	r1, [r3, #0]
 800b52e:	4608      	mov	r0, r1
 800b530:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <__sfputs_r>:
 800b536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b538:	4606      	mov	r6, r0
 800b53a:	460f      	mov	r7, r1
 800b53c:	4614      	mov	r4, r2
 800b53e:	18d5      	adds	r5, r2, r3
 800b540:	42ac      	cmp	r4, r5
 800b542:	d101      	bne.n	800b548 <__sfputs_r+0x12>
 800b544:	2000      	movs	r0, #0
 800b546:	e007      	b.n	800b558 <__sfputs_r+0x22>
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	463a      	mov	r2, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ffda 	bl	800b508 <__sfputc_r>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d1f3      	bne.n	800b540 <__sfputs_r+0xa>
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b55c <_vfiprintf_r>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	460d      	mov	r5, r1
 800b562:	b09d      	sub	sp, #116	; 0x74
 800b564:	4614      	mov	r4, r2
 800b566:	4698      	mov	r8, r3
 800b568:	4606      	mov	r6, r0
 800b56a:	b118      	cbz	r0, 800b574 <_vfiprintf_r+0x18>
 800b56c:	6983      	ldr	r3, [r0, #24]
 800b56e:	b90b      	cbnz	r3, 800b574 <_vfiprintf_r+0x18>
 800b570:	f7ff fdca 	bl	800b108 <__sinit>
 800b574:	4b89      	ldr	r3, [pc, #548]	; (800b79c <_vfiprintf_r+0x240>)
 800b576:	429d      	cmp	r5, r3
 800b578:	d11b      	bne.n	800b5b2 <_vfiprintf_r+0x56>
 800b57a:	6875      	ldr	r5, [r6, #4]
 800b57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b57e:	07d9      	lsls	r1, r3, #31
 800b580:	d405      	bmi.n	800b58e <_vfiprintf_r+0x32>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	059a      	lsls	r2, r3, #22
 800b586:	d402      	bmi.n	800b58e <_vfiprintf_r+0x32>
 800b588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b58a:	f7ff fe6d 	bl	800b268 <__retarget_lock_acquire_recursive>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	071b      	lsls	r3, r3, #28
 800b592:	d501      	bpl.n	800b598 <_vfiprintf_r+0x3c>
 800b594:	692b      	ldr	r3, [r5, #16]
 800b596:	b9eb      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x78>
 800b598:	4629      	mov	r1, r5
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff fc0e 	bl	800adbc <__swsetup_r>
 800b5a0:	b1c0      	cbz	r0, 800b5d4 <_vfiprintf_r+0x78>
 800b5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5a4:	07dc      	lsls	r4, r3, #31
 800b5a6:	d50e      	bpl.n	800b5c6 <_vfiprintf_r+0x6a>
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	b01d      	add	sp, #116	; 0x74
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	4b7b      	ldr	r3, [pc, #492]	; (800b7a0 <_vfiprintf_r+0x244>)
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	d101      	bne.n	800b5bc <_vfiprintf_r+0x60>
 800b5b8:	68b5      	ldr	r5, [r6, #8]
 800b5ba:	e7df      	b.n	800b57c <_vfiprintf_r+0x20>
 800b5bc:	4b79      	ldr	r3, [pc, #484]	; (800b7a4 <_vfiprintf_r+0x248>)
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	bf08      	it	eq
 800b5c2:	68f5      	ldreq	r5, [r6, #12]
 800b5c4:	e7da      	b.n	800b57c <_vfiprintf_r+0x20>
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	0598      	lsls	r0, r3, #22
 800b5ca:	d4ed      	bmi.n	800b5a8 <_vfiprintf_r+0x4c>
 800b5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ce:	f7ff fe4c 	bl	800b26a <__retarget_lock_release_recursive>
 800b5d2:	e7e9      	b.n	800b5a8 <_vfiprintf_r+0x4c>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5e2:	2330      	movs	r3, #48	; 0x30
 800b5e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7a8 <_vfiprintf_r+0x24c>
 800b5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ec:	f04f 0901 	mov.w	r9, #1
 800b5f0:	4623      	mov	r3, r4
 800b5f2:	469a      	mov	sl, r3
 800b5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f8:	b10a      	cbz	r2, 800b5fe <_vfiprintf_r+0xa2>
 800b5fa:	2a25      	cmp	r2, #37	; 0x25
 800b5fc:	d1f9      	bne.n	800b5f2 <_vfiprintf_r+0x96>
 800b5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b602:	d00b      	beq.n	800b61c <_vfiprintf_r+0xc0>
 800b604:	465b      	mov	r3, fp
 800b606:	4622      	mov	r2, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ff93 	bl	800b536 <__sfputs_r>
 800b610:	3001      	adds	r0, #1
 800b612:	f000 80aa 	beq.w	800b76a <_vfiprintf_r+0x20e>
 800b616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b618:	445a      	add	r2, fp
 800b61a:	9209      	str	r2, [sp, #36]	; 0x24
 800b61c:	f89a 3000 	ldrb.w	r3, [sl]
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 80a2 	beq.w	800b76a <_vfiprintf_r+0x20e>
 800b626:	2300      	movs	r3, #0
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b630:	f10a 0a01 	add.w	sl, sl, #1
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b63c:	931a      	str	r3, [sp, #104]	; 0x68
 800b63e:	4654      	mov	r4, sl
 800b640:	2205      	movs	r2, #5
 800b642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b646:	4858      	ldr	r0, [pc, #352]	; (800b7a8 <_vfiprintf_r+0x24c>)
 800b648:	f7f4 fdf2 	bl	8000230 <memchr>
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	b9d8      	cbnz	r0, 800b688 <_vfiprintf_r+0x12c>
 800b650:	06d1      	lsls	r1, r2, #27
 800b652:	bf44      	itt	mi
 800b654:	2320      	movmi	r3, #32
 800b656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b65a:	0713      	lsls	r3, r2, #28
 800b65c:	bf44      	itt	mi
 800b65e:	232b      	movmi	r3, #43	; 0x2b
 800b660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b664:	f89a 3000 	ldrb.w	r3, [sl]
 800b668:	2b2a      	cmp	r3, #42	; 0x2a
 800b66a:	d015      	beq.n	800b698 <_vfiprintf_r+0x13c>
 800b66c:	9a07      	ldr	r2, [sp, #28]
 800b66e:	4654      	mov	r4, sl
 800b670:	2000      	movs	r0, #0
 800b672:	f04f 0c0a 	mov.w	ip, #10
 800b676:	4621      	mov	r1, r4
 800b678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b67c:	3b30      	subs	r3, #48	; 0x30
 800b67e:	2b09      	cmp	r3, #9
 800b680:	d94e      	bls.n	800b720 <_vfiprintf_r+0x1c4>
 800b682:	b1b0      	cbz	r0, 800b6b2 <_vfiprintf_r+0x156>
 800b684:	9207      	str	r2, [sp, #28]
 800b686:	e014      	b.n	800b6b2 <_vfiprintf_r+0x156>
 800b688:	eba0 0308 	sub.w	r3, r0, r8
 800b68c:	fa09 f303 	lsl.w	r3, r9, r3
 800b690:	4313      	orrs	r3, r2
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	46a2      	mov	sl, r4
 800b696:	e7d2      	b.n	800b63e <_vfiprintf_r+0xe2>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	1d19      	adds	r1, r3, #4
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	9103      	str	r1, [sp, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bfbb      	ittet	lt
 800b6a4:	425b      	neglt	r3, r3
 800b6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6aa:	9307      	strge	r3, [sp, #28]
 800b6ac:	9307      	strlt	r3, [sp, #28]
 800b6ae:	bfb8      	it	lt
 800b6b0:	9204      	strlt	r2, [sp, #16]
 800b6b2:	7823      	ldrb	r3, [r4, #0]
 800b6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b6b6:	d10c      	bne.n	800b6d2 <_vfiprintf_r+0x176>
 800b6b8:	7863      	ldrb	r3, [r4, #1]
 800b6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b6bc:	d135      	bne.n	800b72a <_vfiprintf_r+0x1ce>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	9203      	str	r2, [sp, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfb8      	it	lt
 800b6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6ce:	3402      	adds	r4, #2
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7b8 <_vfiprintf_r+0x25c>
 800b6d6:	7821      	ldrb	r1, [r4, #0]
 800b6d8:	2203      	movs	r2, #3
 800b6da:	4650      	mov	r0, sl
 800b6dc:	f7f4 fda8 	bl	8000230 <memchr>
 800b6e0:	b140      	cbz	r0, 800b6f4 <_vfiprintf_r+0x198>
 800b6e2:	2340      	movs	r3, #64	; 0x40
 800b6e4:	eba0 000a 	sub.w	r0, r0, sl
 800b6e8:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ec:	9b04      	ldr	r3, [sp, #16]
 800b6ee:	4303      	orrs	r3, r0
 800b6f0:	3401      	adds	r4, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f8:	482c      	ldr	r0, [pc, #176]	; (800b7ac <_vfiprintf_r+0x250>)
 800b6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6fe:	2206      	movs	r2, #6
 800b700:	f7f4 fd96 	bl	8000230 <memchr>
 800b704:	2800      	cmp	r0, #0
 800b706:	d03f      	beq.n	800b788 <_vfiprintf_r+0x22c>
 800b708:	4b29      	ldr	r3, [pc, #164]	; (800b7b0 <_vfiprintf_r+0x254>)
 800b70a:	bb1b      	cbnz	r3, 800b754 <_vfiprintf_r+0x1f8>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	3307      	adds	r3, #7
 800b710:	f023 0307 	bic.w	r3, r3, #7
 800b714:	3308      	adds	r3, #8
 800b716:	9303      	str	r3, [sp, #12]
 800b718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71a:	443b      	add	r3, r7
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	e767      	b.n	800b5f0 <_vfiprintf_r+0x94>
 800b720:	fb0c 3202 	mla	r2, ip, r2, r3
 800b724:	460c      	mov	r4, r1
 800b726:	2001      	movs	r0, #1
 800b728:	e7a5      	b.n	800b676 <_vfiprintf_r+0x11a>
 800b72a:	2300      	movs	r3, #0
 800b72c:	3401      	adds	r4, #1
 800b72e:	9305      	str	r3, [sp, #20]
 800b730:	4619      	mov	r1, r3
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	4620      	mov	r0, r4
 800b738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b73c:	3a30      	subs	r2, #48	; 0x30
 800b73e:	2a09      	cmp	r2, #9
 800b740:	d903      	bls.n	800b74a <_vfiprintf_r+0x1ee>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d0c5      	beq.n	800b6d2 <_vfiprintf_r+0x176>
 800b746:	9105      	str	r1, [sp, #20]
 800b748:	e7c3      	b.n	800b6d2 <_vfiprintf_r+0x176>
 800b74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b74e:	4604      	mov	r4, r0
 800b750:	2301      	movs	r3, #1
 800b752:	e7f0      	b.n	800b736 <_vfiprintf_r+0x1da>
 800b754:	ab03      	add	r3, sp, #12
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	462a      	mov	r2, r5
 800b75a:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <_vfiprintf_r+0x258>)
 800b75c:	a904      	add	r1, sp, #16
 800b75e:	4630      	mov	r0, r6
 800b760:	f3af 8000 	nop.w
 800b764:	4607      	mov	r7, r0
 800b766:	1c78      	adds	r0, r7, #1
 800b768:	d1d6      	bne.n	800b718 <_vfiprintf_r+0x1bc>
 800b76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b76c:	07d9      	lsls	r1, r3, #31
 800b76e:	d405      	bmi.n	800b77c <_vfiprintf_r+0x220>
 800b770:	89ab      	ldrh	r3, [r5, #12]
 800b772:	059a      	lsls	r2, r3, #22
 800b774:	d402      	bmi.n	800b77c <_vfiprintf_r+0x220>
 800b776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b778:	f7ff fd77 	bl	800b26a <__retarget_lock_release_recursive>
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	065b      	lsls	r3, r3, #25
 800b780:	f53f af12 	bmi.w	800b5a8 <_vfiprintf_r+0x4c>
 800b784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b786:	e711      	b.n	800b5ac <_vfiprintf_r+0x50>
 800b788:	ab03      	add	r3, sp, #12
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	462a      	mov	r2, r5
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <_vfiprintf_r+0x258>)
 800b790:	a904      	add	r1, sp, #16
 800b792:	4630      	mov	r0, r6
 800b794:	f000 f880 	bl	800b898 <_printf_i>
 800b798:	e7e4      	b.n	800b764 <_vfiprintf_r+0x208>
 800b79a:	bf00      	nop
 800b79c:	080a2258 	.word	0x080a2258
 800b7a0:	080a2278 	.word	0x080a2278
 800b7a4:	080a2238 	.word	0x080a2238
 800b7a8:	080a2298 	.word	0x080a2298
 800b7ac:	080a22a2 	.word	0x080a22a2
 800b7b0:	00000000 	.word	0x00000000
 800b7b4:	0800b537 	.word	0x0800b537
 800b7b8:	080a229e 	.word	0x080a229e

0800b7bc <_printf_common>:
 800b7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c0:	4616      	mov	r6, r2
 800b7c2:	4699      	mov	r9, r3
 800b7c4:	688a      	ldr	r2, [r1, #8]
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bfb8      	it	lt
 800b7d0:	4613      	movlt	r3, r2
 800b7d2:	6033      	str	r3, [r6, #0]
 800b7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7d8:	4607      	mov	r7, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b10a      	cbz	r2, 800b7e2 <_printf_common+0x26>
 800b7de:	3301      	adds	r3, #1
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	0699      	lsls	r1, r3, #26
 800b7e6:	bf42      	ittt	mi
 800b7e8:	6833      	ldrmi	r3, [r6, #0]
 800b7ea:	3302      	addmi	r3, #2
 800b7ec:	6033      	strmi	r3, [r6, #0]
 800b7ee:	6825      	ldr	r5, [r4, #0]
 800b7f0:	f015 0506 	ands.w	r5, r5, #6
 800b7f4:	d106      	bne.n	800b804 <_printf_common+0x48>
 800b7f6:	f104 0a19 	add.w	sl, r4, #25
 800b7fa:	68e3      	ldr	r3, [r4, #12]
 800b7fc:	6832      	ldr	r2, [r6, #0]
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	42ab      	cmp	r3, r5
 800b802:	dc26      	bgt.n	800b852 <_printf_common+0x96>
 800b804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b808:	1e13      	subs	r3, r2, #0
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	bf18      	it	ne
 800b80e:	2301      	movne	r3, #1
 800b810:	0692      	lsls	r2, r2, #26
 800b812:	d42b      	bmi.n	800b86c <_printf_common+0xb0>
 800b814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b818:	4649      	mov	r1, r9
 800b81a:	4638      	mov	r0, r7
 800b81c:	47c0      	blx	r8
 800b81e:	3001      	adds	r0, #1
 800b820:	d01e      	beq.n	800b860 <_printf_common+0xa4>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	68e5      	ldr	r5, [r4, #12]
 800b826:	6832      	ldr	r2, [r6, #0]
 800b828:	f003 0306 	and.w	r3, r3, #6
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	bf08      	it	eq
 800b830:	1aad      	subeq	r5, r5, r2
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	6922      	ldr	r2, [r4, #16]
 800b836:	bf0c      	ite	eq
 800b838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b83c:	2500      	movne	r5, #0
 800b83e:	4293      	cmp	r3, r2
 800b840:	bfc4      	itt	gt
 800b842:	1a9b      	subgt	r3, r3, r2
 800b844:	18ed      	addgt	r5, r5, r3
 800b846:	2600      	movs	r6, #0
 800b848:	341a      	adds	r4, #26
 800b84a:	42b5      	cmp	r5, r6
 800b84c:	d11a      	bne.n	800b884 <_printf_common+0xc8>
 800b84e:	2000      	movs	r0, #0
 800b850:	e008      	b.n	800b864 <_printf_common+0xa8>
 800b852:	2301      	movs	r3, #1
 800b854:	4652      	mov	r2, sl
 800b856:	4649      	mov	r1, r9
 800b858:	4638      	mov	r0, r7
 800b85a:	47c0      	blx	r8
 800b85c:	3001      	adds	r0, #1
 800b85e:	d103      	bne.n	800b868 <_printf_common+0xac>
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b868:	3501      	adds	r5, #1
 800b86a:	e7c6      	b.n	800b7fa <_printf_common+0x3e>
 800b86c:	18e1      	adds	r1, r4, r3
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	2030      	movs	r0, #48	; 0x30
 800b872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b876:	4422      	add	r2, r4
 800b878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b87c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b880:	3302      	adds	r3, #2
 800b882:	e7c7      	b.n	800b814 <_printf_common+0x58>
 800b884:	2301      	movs	r3, #1
 800b886:	4622      	mov	r2, r4
 800b888:	4649      	mov	r1, r9
 800b88a:	4638      	mov	r0, r7
 800b88c:	47c0      	blx	r8
 800b88e:	3001      	adds	r0, #1
 800b890:	d0e6      	beq.n	800b860 <_printf_common+0xa4>
 800b892:	3601      	adds	r6, #1
 800b894:	e7d9      	b.n	800b84a <_printf_common+0x8e>
	...

0800b898 <_printf_i>:
 800b898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b89c:	7e0f      	ldrb	r7, [r1, #24]
 800b89e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8a0:	2f78      	cmp	r7, #120	; 0x78
 800b8a2:	4691      	mov	r9, r2
 800b8a4:	4680      	mov	r8, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	469a      	mov	sl, r3
 800b8aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8ae:	d807      	bhi.n	800b8c0 <_printf_i+0x28>
 800b8b0:	2f62      	cmp	r7, #98	; 0x62
 800b8b2:	d80a      	bhi.n	800b8ca <_printf_i+0x32>
 800b8b4:	2f00      	cmp	r7, #0
 800b8b6:	f000 80d8 	beq.w	800ba6a <_printf_i+0x1d2>
 800b8ba:	2f58      	cmp	r7, #88	; 0x58
 800b8bc:	f000 80a3 	beq.w	800ba06 <_printf_i+0x16e>
 800b8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8c8:	e03a      	b.n	800b940 <_printf_i+0xa8>
 800b8ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8ce:	2b15      	cmp	r3, #21
 800b8d0:	d8f6      	bhi.n	800b8c0 <_printf_i+0x28>
 800b8d2:	a101      	add	r1, pc, #4	; (adr r1, 800b8d8 <_printf_i+0x40>)
 800b8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8d8:	0800b931 	.word	0x0800b931
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b8c1 	.word	0x0800b8c1
 800b8e4:	0800b8c1 	.word	0x0800b8c1
 800b8e8:	0800b8c1 	.word	0x0800b8c1
 800b8ec:	0800b8c1 	.word	0x0800b8c1
 800b8f0:	0800b945 	.word	0x0800b945
 800b8f4:	0800b8c1 	.word	0x0800b8c1
 800b8f8:	0800b8c1 	.word	0x0800b8c1
 800b8fc:	0800b8c1 	.word	0x0800b8c1
 800b900:	0800b8c1 	.word	0x0800b8c1
 800b904:	0800ba51 	.word	0x0800ba51
 800b908:	0800b975 	.word	0x0800b975
 800b90c:	0800ba33 	.word	0x0800ba33
 800b910:	0800b8c1 	.word	0x0800b8c1
 800b914:	0800b8c1 	.word	0x0800b8c1
 800b918:	0800ba73 	.word	0x0800ba73
 800b91c:	0800b8c1 	.word	0x0800b8c1
 800b920:	0800b975 	.word	0x0800b975
 800b924:	0800b8c1 	.word	0x0800b8c1
 800b928:	0800b8c1 	.word	0x0800b8c1
 800b92c:	0800ba3b 	.word	0x0800ba3b
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	1d1a      	adds	r2, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	602a      	str	r2, [r5, #0]
 800b938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b93c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b940:	2301      	movs	r3, #1
 800b942:	e0a3      	b.n	800ba8c <_printf_i+0x1f4>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	6829      	ldr	r1, [r5, #0]
 800b948:	0606      	lsls	r6, r0, #24
 800b94a:	f101 0304 	add.w	r3, r1, #4
 800b94e:	d50a      	bpl.n	800b966 <_printf_i+0xce>
 800b950:	680e      	ldr	r6, [r1, #0]
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	2e00      	cmp	r6, #0
 800b956:	da03      	bge.n	800b960 <_printf_i+0xc8>
 800b958:	232d      	movs	r3, #45	; 0x2d
 800b95a:	4276      	negs	r6, r6
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b960:	485e      	ldr	r0, [pc, #376]	; (800badc <_printf_i+0x244>)
 800b962:	230a      	movs	r3, #10
 800b964:	e019      	b.n	800b99a <_printf_i+0x102>
 800b966:	680e      	ldr	r6, [r1, #0]
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b96e:	bf18      	it	ne
 800b970:	b236      	sxthne	r6, r6
 800b972:	e7ef      	b.n	800b954 <_printf_i+0xbc>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	1d19      	adds	r1, r3, #4
 800b97a:	6029      	str	r1, [r5, #0]
 800b97c:	0601      	lsls	r1, r0, #24
 800b97e:	d501      	bpl.n	800b984 <_printf_i+0xec>
 800b980:	681e      	ldr	r6, [r3, #0]
 800b982:	e002      	b.n	800b98a <_printf_i+0xf2>
 800b984:	0646      	lsls	r6, r0, #25
 800b986:	d5fb      	bpl.n	800b980 <_printf_i+0xe8>
 800b988:	881e      	ldrh	r6, [r3, #0]
 800b98a:	4854      	ldr	r0, [pc, #336]	; (800badc <_printf_i+0x244>)
 800b98c:	2f6f      	cmp	r7, #111	; 0x6f
 800b98e:	bf0c      	ite	eq
 800b990:	2308      	moveq	r3, #8
 800b992:	230a      	movne	r3, #10
 800b994:	2100      	movs	r1, #0
 800b996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b99a:	6865      	ldr	r5, [r4, #4]
 800b99c:	60a5      	str	r5, [r4, #8]
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	bfa2      	ittt	ge
 800b9a2:	6821      	ldrge	r1, [r4, #0]
 800b9a4:	f021 0104 	bicge.w	r1, r1, #4
 800b9a8:	6021      	strge	r1, [r4, #0]
 800b9aa:	b90e      	cbnz	r6, 800b9b0 <_printf_i+0x118>
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	d04d      	beq.n	800ba4c <_printf_i+0x1b4>
 800b9b0:	4615      	mov	r5, r2
 800b9b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9b6:	fb03 6711 	mls	r7, r3, r1, r6
 800b9ba:	5dc7      	ldrb	r7, [r0, r7]
 800b9bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9c0:	4637      	mov	r7, r6
 800b9c2:	42bb      	cmp	r3, r7
 800b9c4:	460e      	mov	r6, r1
 800b9c6:	d9f4      	bls.n	800b9b2 <_printf_i+0x11a>
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d10b      	bne.n	800b9e4 <_printf_i+0x14c>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	07de      	lsls	r6, r3, #31
 800b9d0:	d508      	bpl.n	800b9e4 <_printf_i+0x14c>
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	6861      	ldr	r1, [r4, #4]
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	bfde      	ittt	le
 800b9da:	2330      	movle	r3, #48	; 0x30
 800b9dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9e4:	1b52      	subs	r2, r2, r5
 800b9e6:	6122      	str	r2, [r4, #16]
 800b9e8:	f8cd a000 	str.w	sl, [sp]
 800b9ec:	464b      	mov	r3, r9
 800b9ee:	aa03      	add	r2, sp, #12
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7ff fee2 	bl	800b7bc <_printf_common>
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d14c      	bne.n	800ba96 <_printf_i+0x1fe>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	b004      	add	sp, #16
 800ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba06:	4835      	ldr	r0, [pc, #212]	; (800badc <_printf_i+0x244>)
 800ba08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba0c:	6829      	ldr	r1, [r5, #0]
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba14:	6029      	str	r1, [r5, #0]
 800ba16:	061d      	lsls	r5, r3, #24
 800ba18:	d514      	bpl.n	800ba44 <_printf_i+0x1ac>
 800ba1a:	07df      	lsls	r7, r3, #31
 800ba1c:	bf44      	itt	mi
 800ba1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba22:	6023      	strmi	r3, [r4, #0]
 800ba24:	b91e      	cbnz	r6, 800ba2e <_printf_i+0x196>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	f023 0320 	bic.w	r3, r3, #32
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	2310      	movs	r3, #16
 800ba30:	e7b0      	b.n	800b994 <_printf_i+0xfc>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	f043 0320 	orr.w	r3, r3, #32
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	2378      	movs	r3, #120	; 0x78
 800ba3c:	4828      	ldr	r0, [pc, #160]	; (800bae0 <_printf_i+0x248>)
 800ba3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba42:	e7e3      	b.n	800ba0c <_printf_i+0x174>
 800ba44:	0659      	lsls	r1, r3, #25
 800ba46:	bf48      	it	mi
 800ba48:	b2b6      	uxthmi	r6, r6
 800ba4a:	e7e6      	b.n	800ba1a <_printf_i+0x182>
 800ba4c:	4615      	mov	r5, r2
 800ba4e:	e7bb      	b.n	800b9c8 <_printf_i+0x130>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	6826      	ldr	r6, [r4, #0]
 800ba54:	6961      	ldr	r1, [r4, #20]
 800ba56:	1d18      	adds	r0, r3, #4
 800ba58:	6028      	str	r0, [r5, #0]
 800ba5a:	0635      	lsls	r5, r6, #24
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	d501      	bpl.n	800ba64 <_printf_i+0x1cc>
 800ba60:	6019      	str	r1, [r3, #0]
 800ba62:	e002      	b.n	800ba6a <_printf_i+0x1d2>
 800ba64:	0670      	lsls	r0, r6, #25
 800ba66:	d5fb      	bpl.n	800ba60 <_printf_i+0x1c8>
 800ba68:	8019      	strh	r1, [r3, #0]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	4615      	mov	r5, r2
 800ba70:	e7ba      	b.n	800b9e8 <_printf_i+0x150>
 800ba72:	682b      	ldr	r3, [r5, #0]
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	602a      	str	r2, [r5, #0]
 800ba78:	681d      	ldr	r5, [r3, #0]
 800ba7a:	6862      	ldr	r2, [r4, #4]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f7f4 fbd6 	bl	8000230 <memchr>
 800ba84:	b108      	cbz	r0, 800ba8a <_printf_i+0x1f2>
 800ba86:	1b40      	subs	r0, r0, r5
 800ba88:	6060      	str	r0, [r4, #4]
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba94:	e7a8      	b.n	800b9e8 <_printf_i+0x150>
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	462a      	mov	r2, r5
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	47d0      	blx	sl
 800baa0:	3001      	adds	r0, #1
 800baa2:	d0ab      	beq.n	800b9fc <_printf_i+0x164>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	079b      	lsls	r3, r3, #30
 800baa8:	d413      	bmi.n	800bad2 <_printf_i+0x23a>
 800baaa:	68e0      	ldr	r0, [r4, #12]
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	4298      	cmp	r0, r3
 800bab0:	bfb8      	it	lt
 800bab2:	4618      	movlt	r0, r3
 800bab4:	e7a4      	b.n	800ba00 <_printf_i+0x168>
 800bab6:	2301      	movs	r3, #1
 800bab8:	4632      	mov	r2, r6
 800baba:	4649      	mov	r1, r9
 800babc:	4640      	mov	r0, r8
 800babe:	47d0      	blx	sl
 800bac0:	3001      	adds	r0, #1
 800bac2:	d09b      	beq.n	800b9fc <_printf_i+0x164>
 800bac4:	3501      	adds	r5, #1
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	9903      	ldr	r1, [sp, #12]
 800baca:	1a5b      	subs	r3, r3, r1
 800bacc:	42ab      	cmp	r3, r5
 800bace:	dcf2      	bgt.n	800bab6 <_printf_i+0x21e>
 800bad0:	e7eb      	b.n	800baaa <_printf_i+0x212>
 800bad2:	2500      	movs	r5, #0
 800bad4:	f104 0619 	add.w	r6, r4, #25
 800bad8:	e7f5      	b.n	800bac6 <_printf_i+0x22e>
 800bada:	bf00      	nop
 800badc:	080a22a9 	.word	0x080a22a9
 800bae0:	080a22ba 	.word	0x080a22ba

0800bae4 <_sbrk_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	; (800bb00 <_sbrk_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 ff14 	bl	800291c <_sbrk>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_sbrk_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_sbrk_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000508 	.word	0x20000508

0800bb04 <__sread>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0c:	f000 f8a8 	bl	800bc60 <_read_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	bfab      	itete	ge
 800bb14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb16:	89a3      	ldrhlt	r3, [r4, #12]
 800bb18:	181b      	addge	r3, r3, r0
 800bb1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb1e:	bfac      	ite	ge
 800bb20:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb22:	81a3      	strhlt	r3, [r4, #12]
 800bb24:	bd10      	pop	{r4, pc}

0800bb26 <__swrite>:
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	461f      	mov	r7, r3
 800bb2c:	898b      	ldrh	r3, [r1, #12]
 800bb2e:	05db      	lsls	r3, r3, #23
 800bb30:	4605      	mov	r5, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	4616      	mov	r6, r2
 800bb36:	d505      	bpl.n	800bb44 <__swrite+0x1e>
 800bb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f000 f870 	bl	800bc24 <_lseek_r>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	4632      	mov	r2, r6
 800bb52:	463b      	mov	r3, r7
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5a:	f000 b817 	b.w	800bb8c <_write_r>

0800bb5e <__sseek>:
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb66:	f000 f85d 	bl	800bc24 <_lseek_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	bf15      	itete	ne
 800bb70:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb7a:	81a3      	strheq	r3, [r4, #12]
 800bb7c:	bf18      	it	ne
 800bb7e:	81a3      	strhne	r3, [r4, #12]
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <__sclose>:
 800bb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb86:	f000 b81b 	b.w	800bbc0 <_close_r>
	...

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_write_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f7 f92a 	bl	8002df4 <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20000508 	.word	0x20000508

0800bbb0 <abort>:
 800bbb0:	b508      	push	{r3, lr}
 800bbb2:	2006      	movs	r0, #6
 800bbb4:	f000 f88e 	bl	800bcd4 <raise>
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f7f6 fe53 	bl	8002864 <_exit>
	...

0800bbc0 <_close_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4d06      	ldr	r5, [pc, #24]	; (800bbdc <_close_r+0x1c>)
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	4608      	mov	r0, r1
 800bbca:	602b      	str	r3, [r5, #0]
 800bbcc:	f7f6 fe71 	bl	80028b2 <_close>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_close_r+0x1a>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_close_r+0x1a>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	20000508 	.word	0x20000508

0800bbe0 <_fstat_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d07      	ldr	r5, [pc, #28]	; (800bc00 <_fstat_r+0x20>)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	4611      	mov	r1, r2
 800bbec:	602b      	str	r3, [r5, #0]
 800bbee:	f7f6 fe6c 	bl	80028ca <_fstat>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	d102      	bne.n	800bbfc <_fstat_r+0x1c>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	b103      	cbz	r3, 800bbfc <_fstat_r+0x1c>
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000508 	.word	0x20000508

0800bc04 <_isatty_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4d06      	ldr	r5, [pc, #24]	; (800bc20 <_isatty_r+0x1c>)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	602b      	str	r3, [r5, #0]
 800bc10:	f7f6 fe6b 	bl	80028ea <_isatty>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_isatty_r+0x1a>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_isatty_r+0x1a>
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	20000508 	.word	0x20000508

0800bc24 <_lseek_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d07      	ldr	r5, [pc, #28]	; (800bc44 <_lseek_r+0x20>)
 800bc28:	4604      	mov	r4, r0
 800bc2a:	4608      	mov	r0, r1
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	2200      	movs	r2, #0
 800bc30:	602a      	str	r2, [r5, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	f7f6 fe64 	bl	8002900 <_lseek>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_lseek_r+0x1e>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_lseek_r+0x1e>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	20000508 	.word	0x20000508

0800bc48 <__malloc_lock>:
 800bc48:	4801      	ldr	r0, [pc, #4]	; (800bc50 <__malloc_lock+0x8>)
 800bc4a:	f7ff bb0d 	b.w	800b268 <__retarget_lock_acquire_recursive>
 800bc4e:	bf00      	nop
 800bc50:	200004fc 	.word	0x200004fc

0800bc54 <__malloc_unlock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__malloc_unlock+0x8>)
 800bc56:	f7ff bb08 	b.w	800b26a <__retarget_lock_release_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	200004fc 	.word	0x200004fc

0800bc60 <_read_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_read_r+0x20>)
 800bc64:	4604      	mov	r4, r0
 800bc66:	4608      	mov	r0, r1
 800bc68:	4611      	mov	r1, r2
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f7f6 fe02 	bl	8002878 <_read>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_read_r+0x1e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_read_r+0x1e>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20000508 	.word	0x20000508

0800bc84 <_raise_r>:
 800bc84:	291f      	cmp	r1, #31
 800bc86:	b538      	push	{r3, r4, r5, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	460d      	mov	r5, r1
 800bc8c:	d904      	bls.n	800bc98 <_raise_r+0x14>
 800bc8e:	2316      	movs	r3, #22
 800bc90:	6003      	str	r3, [r0, #0]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc9a:	b112      	cbz	r2, 800bca2 <_raise_r+0x1e>
 800bc9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bca0:	b94b      	cbnz	r3, 800bcb6 <_raise_r+0x32>
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 f830 	bl	800bd08 <_getpid_r>
 800bca8:	462a      	mov	r2, r5
 800bcaa:	4601      	mov	r1, r0
 800bcac:	4620      	mov	r0, r4
 800bcae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb2:	f000 b817 	b.w	800bce4 <_kill_r>
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d00a      	beq.n	800bcd0 <_raise_r+0x4c>
 800bcba:	1c59      	adds	r1, r3, #1
 800bcbc:	d103      	bne.n	800bcc6 <_raise_r+0x42>
 800bcbe:	2316      	movs	r3, #22
 800bcc0:	6003      	str	r3, [r0, #0]
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e7e7      	b.n	800bc96 <_raise_r+0x12>
 800bcc6:	2400      	movs	r4, #0
 800bcc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bccc:	4628      	mov	r0, r5
 800bcce:	4798      	blx	r3
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	e7e0      	b.n	800bc96 <_raise_r+0x12>

0800bcd4 <raise>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <raise+0xc>)
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f7ff bfd3 	b.w	800bc84 <_raise_r>
 800bcde:	bf00      	nop
 800bce0:	2000003c 	.word	0x2000003c

0800bce4 <_kill_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d07      	ldr	r5, [pc, #28]	; (800bd04 <_kill_r+0x20>)
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	f7f6 fda7 	bl	8002844 <_kill>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d102      	bne.n	800bd00 <_kill_r+0x1c>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b103      	cbz	r3, 800bd00 <_kill_r+0x1c>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
 800bd02:	bf00      	nop
 800bd04:	20000508 	.word	0x20000508

0800bd08 <_getpid_r>:
 800bd08:	f7f6 bd94 	b.w	8002834 <_getpid>

0800bd0c <_init>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr

0800bd18 <_fini>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr
