
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c84  08007c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c8c  08007c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000364  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011654  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030fc  00000000  00000000  000316f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000347f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd2f  00000000  00000000  000362c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001574c  00000000  00000000  00062ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8e1a  00000000  00000000  00078743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017155d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000424c  00000000  00000000  001715b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007888 	.word	0x08007888

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08007888 	.word	0x08007888

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <lcd_control>:
        (void *)0, (void *)0, (void *)0
    }
};

static void lcd_control(uint8_t argc, void **argv)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	617b      	str	r3, [r7, #20]
    char *arg1 = argv[0 + strlen(command)];
 80005e6:	6978      	ldr	r0, [r7, #20]
 80005e8:	f7ff fe14 	bl	8000214 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	613b      	str	r3, [r7, #16]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80005f8:	6978      	ldr	r0, [r7, #20]
 80005fa:	f7ff fe0b 	bl	8000214 <strlen>
 80005fe:	4604      	mov	r4, r0
 8000600:	6938      	ldr	r0, [r7, #16]
 8000602:	f7ff fe07 	bl	8000214 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4423      	add	r3, r4
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]

    if (argc == 1)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d136      	bne.n	8000688 <lcd_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
 800061e:	e027      	b.n	8000670 <lcd_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000620:	494c      	ldr	r1, [pc, #304]	; (8000754 <lcd_control+0x180>)
 8000622:	69fa      	ldr	r2, [r7, #28]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fde4 	bl	8000200 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d115      	bne.n	800066a <lcd_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 800063e:	4945      	ldr	r1, [pc, #276]	; (8000754 <lcd_control+0x180>)
 8000640:	69fa      	ldr	r2, [r7, #28]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	4841      	ldr	r0, [pc, #260]	; (8000754 <lcd_control+0x180>)
 8000650:	69fa      	ldr	r2, [r7, #28]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4403      	add	r3, r0
 800065c:	3308      	adds	r3, #8
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	483d      	ldr	r0, [pc, #244]	; (8000758 <lcd_control+0x184>)
 8000664:	f006 f824 	bl	80066b0 <iprintf>
                return;
 8000668:	e070      	b.n	800074c <lcd_control+0x178>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3301      	adds	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	4938      	ldr	r1, [pc, #224]	; (8000754 <lcd_control+0x180>)
 8000672:	69fa      	ldr	r2, [r7, #28]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	3304      	adds	r3, #4
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1cc      	bne.n	8000620 <lcd_control+0x4c>
 8000686:	e05e      	b.n	8000746 <lcd_control+0x172>
            }
        }
    }
    else if (argc == 2)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d11f      	bne.n	80006ce <lcd_control+0xfa>
    {
        if (strcmp(arg1, "err") == 0)
 800068e:	4933      	ldr	r1, [pc, #204]	; (800075c <lcd_control+0x188>)
 8000690:	6938      	ldr	r0, [r7, #16]
 8000692:	f7ff fdb5 	bl	8000200 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <lcd_control+0xce>
        {
            ltdc_get_err();
 800069c:	f001 f8a8 	bl	80017f0 <ltdc_get_err>
            return ;
 80006a0:	e054      	b.n	800074c <lcd_control+0x178>
        }
        else if (strcmp(arg1, "start") == 0)
 80006a2:	492f      	ldr	r1, [pc, #188]	; (8000760 <lcd_control+0x18c>)
 80006a4:	6938      	ldr	r0, [r7, #16]
 80006a6:	f7ff fdab 	bl	8000200 <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d103      	bne.n	80006b8 <lcd_control+0xe4>
        {
            dsi_start(true);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fb93 	bl	8000ddc <dsi_start>
            return ;
 80006b6:	e049      	b.n	800074c <lcd_control+0x178>
        }
        else if (strcmp(arg1, "stop") == 0)
 80006b8:	492a      	ldr	r1, [pc, #168]	; (8000764 <lcd_control+0x190>)
 80006ba:	6938      	ldr	r0, [r7, #16]
 80006bc:	f7ff fda0 	bl	8000200 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d13f      	bne.n	8000746 <lcd_control+0x172>
        {
            dsi_start(false);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fb88 	bl	8000ddc <dsi_start>
            return ;
 80006cc:	e03e      	b.n	800074c <lcd_control+0x178>
        }

    }
    else if (argc == 3)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d138      	bne.n	8000746 <lcd_control+0x172>
    {
        LCD_CONTROL_COLOR color = eLCD_CONTROL_COLOR_R;            
 80006d4:	2302      	movs	r3, #2
 80006d6:	76fb      	strb	r3, [r7, #27]
        if (strcmp(arg1, "r") == 0)
 80006d8:	4923      	ldr	r1, [pc, #140]	; (8000768 <lcd_control+0x194>)
 80006da:	6938      	ldr	r0, [r7, #16]
 80006dc:	f7ff fd90 	bl	8000200 <strcmp>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <lcd_control+0x118>
        {
            color = eLCD_CONTROL_COLOR_R;            
 80006e6:	2302      	movs	r3, #2
 80006e8:	76fb      	strb	r3, [r7, #27]
 80006ea:	e012      	b.n	8000712 <lcd_control+0x13e>
        }
        else if (strcmp(arg1, "g") == 0)
 80006ec:	491f      	ldr	r1, [pc, #124]	; (800076c <lcd_control+0x198>)
 80006ee:	6938      	ldr	r0, [r7, #16]
 80006f0:	f7ff fd86 	bl	8000200 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <lcd_control+0x12c>
        {
            color = eLCD_CONTROL_COLOR_G;
 80006fa:	2301      	movs	r3, #1
 80006fc:	76fb      	strb	r3, [r7, #27]
 80006fe:	e008      	b.n	8000712 <lcd_control+0x13e>
        }
        else if (strcmp(arg1, "b") == 0)
 8000700:	491b      	ldr	r1, [pc, #108]	; (8000770 <lcd_control+0x19c>)
 8000702:	6938      	ldr	r0, [r7, #16]
 8000704:	f7ff fd7c 	bl	8000200 <strcmp>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <lcd_control+0x13e>
        {
            color = eLCD_CONTROL_COLOR_B;
 800070e:	2300      	movs	r3, #0
 8000710:	76fb      	strb	r3, [r7, #27]
        }

        if (strcmp(arg2, "l") == 0)
 8000712:	4918      	ldr	r1, [pc, #96]	; (8000774 <lcd_control+0x1a0>)
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f7ff fd73 	bl	8000200 <strcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d105      	bne.n	800072c <lcd_control+0x158>
        {
            lcd_control_change(color, true);
 8000720:	7efb      	ldrb	r3, [r7, #27]
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f000 feb5 	bl	8001494 <lcd_control_change>
            return;
 800072a:	e00f      	b.n	800074c <lcd_control+0x178>
        }
        else if (strcmp(arg2, "r") == 0)
 800072c:	490e      	ldr	r1, [pc, #56]	; (8000768 <lcd_control+0x194>)
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fd66 	bl	8000200 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d105      	bne.n	8000746 <lcd_control+0x172>
        {
            lcd_control_change(color, false);
 800073a:	7efb      	ldrb	r3, [r7, #27]
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fea8 	bl	8001494 <lcd_control_change>
            return;
 8000744:	e002      	b.n	800074c <lcd_control+0x178>
        }
    }
    printf("\r\nNot registered command \r\n");
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <lcd_control+0x1a4>)
 8000748:	f006 f838 	bl	80067bc <puts>
}
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	bf00      	nop
 8000754:	08007af4 	.word	0x08007af4
 8000758:	08007958 	.word	0x08007958
 800075c:	08007968 	.word	0x08007968
 8000760:	0800796c 	.word	0x0800796c
 8000764:	08007974 	.word	0x08007974
 8000768:	0800797c 	.word	0x0800797c
 800076c:	08007980 	.word	0x08007980
 8000770:	08007984 	.word	0x08007984
 8000774:	08007988 	.word	0x08007988
 8000778:	0800798c 	.word	0x0800798c

0800077c <led_control>:

static void led_control(uint8_t argc, void **argv)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	613b      	str	r3, [r7, #16]
    char *arg1 = argv[0 + strlen(command)];
 800078e:	6938      	ldr	r0, [r7, #16]
 8000790:	f7ff fd40 	bl	8000214 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	4413      	add	r3, r2
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	60fb      	str	r3, [r7, #12]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80007a0:	6938      	ldr	r0, [r7, #16]
 80007a2:	f7ff fd37 	bl	8000214 <strlen>
 80007a6:	4604      	mov	r4, r0
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd33 	bl	8000214 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4423      	add	r3, r4
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	60bb      	str	r3, [r7, #8]

    if (argc == 1)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d136      	bne.n	8000830 <led_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e027      	b.n	8000818 <led_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 80007c8:	493f      	ldr	r1, [pc, #252]	; (80008c8 <led_control+0x14c>)
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6939      	ldr	r1, [r7, #16]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd10 	bl	8000200 <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d115      	bne.n	8000812 <led_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 80007e6:	4938      	ldr	r1, [pc, #224]	; (80008c8 <led_control+0x14c>)
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4834      	ldr	r0, [pc, #208]	; (80008c8 <led_control+0x14c>)
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4403      	add	r3, r0
 8000804:	3308      	adds	r3, #8
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4830      	ldr	r0, [pc, #192]	; (80008cc <led_control+0x150>)
 800080c:	f005 ff50 	bl	80066b0 <iprintf>
                return;
 8000810:	e056      	b.n	80008c0 <led_control+0x144>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	492b      	ldr	r1, [pc, #172]	; (80008c8 <led_control+0x14c>)
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3304      	adds	r3, #4
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1cc      	bne.n	80007c8 <led_control+0x4c>
 800082e:	e044      	b.n	80008ba <led_control+0x13e>
            }
        }
    }
    else if (argc == 3)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d141      	bne.n	80008ba <led_control+0x13e>
    {
        if (strcmp(arg1, "on") == 0)
 8000836:	4926      	ldr	r1, [pc, #152]	; (80008d0 <led_control+0x154>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fce1 	bl	8000200 <strcmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d119      	bne.n	8000878 <led_control+0xfc>
        {
            if (strcmp(arg2, "1") == 0)
 8000844:	4923      	ldr	r1, [pc, #140]	; (80008d4 <led_control+0x158>)
 8000846:	68b8      	ldr	r0, [r7, #8]
 8000848:	f7ff fcda 	bl	8000200 <strcmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <led_control+0xe2>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <led_control+0x15c>)
 8000858:	f003 fbd6 	bl	8004008 <HAL_GPIO_WritePin>
                return;
 800085c:	e030      	b.n	80008c0 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 800085e:	491f      	ldr	r1, [pc, #124]	; (80008dc <led_control+0x160>)
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f7ff fccd 	bl	8000200 <strcmp>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d126      	bne.n	80008ba <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2110      	movs	r1, #16
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <led_control+0x164>)
 8000872:	f003 fbc9 	bl	8004008 <HAL_GPIO_WritePin>
                return;
 8000876:	e023      	b.n	80008c0 <led_control+0x144>
            }
        }
        else if (strcmp(arg1, "off") == 0)
 8000878:	491a      	ldr	r1, [pc, #104]	; (80008e4 <led_control+0x168>)
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff fcc0 	bl	8000200 <strcmp>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d119      	bne.n	80008ba <led_control+0x13e>
        {
            if (strcmp(arg2, "1") == 0)
 8000886:	4913      	ldr	r1, [pc, #76]	; (80008d4 <led_control+0x158>)
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f7ff fcb9 	bl	8000200 <strcmp>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d105      	bne.n	80008a0 <led_control+0x124>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <led_control+0x15c>)
 800089a:	f003 fbb5 	bl	8004008 <HAL_GPIO_WritePin>
                return;
 800089e:	e00f      	b.n	80008c0 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80008a0:	490e      	ldr	r1, [pc, #56]	; (80008dc <led_control+0x160>)
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f7ff fcac 	bl	8000200 <strcmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d105      	bne.n	80008ba <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <led_control+0x164>)
 80008b4:	f003 fba8 	bl	8004008 <HAL_GPIO_WritePin>
                return;
 80008b8:	e002      	b.n	80008c0 <led_control+0x144>
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <led_control+0x16c>)
 80008bc:	f005 ff7e 	bl	80067bc <puts>
    
}
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08007af4 	.word	0x08007af4
 80008cc:	08007958 	.word	0x08007958
 80008d0:	080079a8 	.word	0x080079a8
 80008d4:	080079ac 	.word	0x080079ac
 80008d8:	40021800 	.word	0x40021800
 80008dc:	080079b0 	.word	0x080079b0
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	080079b4 	.word	0x080079b4
 80008e8:	0800798c 	.word	0x0800798c

080008ec <help_func>:

static void help_func(uint8_t argc, void **argv)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d129      	bne.n	8000952 <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 80008fe:	4816      	ldr	r0, [pc, #88]	; (8000958 <help_func+0x6c>)
 8000900:	f005 ff5c 	bl	80067bc <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e017      	b.n	800093a <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 800090a:	4914      	ldr	r1, [pc, #80]	; (800095c <help_func+0x70>)
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	6819      	ldr	r1, [r3, #0]
 800091a:	4810      	ldr	r0, [pc, #64]	; (800095c <help_func+0x70>)
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4403      	add	r3, r0
 8000928:	3308      	adds	r3, #8
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <help_func+0x74>)
 8000930:	f005 febe 	bl	80066b0 <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <help_func+0x70>)
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	3304      	adds	r3, #4
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1dc      	bne.n	800090a <help_func+0x1e>
        }
        return;
 8000950:	bf00      	nop
    }
}
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	080079b8 	.word	0x080079b8
 800095c:	08007af4 	.word	0x08007af4
 8000960:	08007958 	.word	0x08007958

08000964 <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    int i = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e011      	b.n	800099a <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 8000976:	4912      	ldr	r1, [pc, #72]	; (80009c0 <shell_get_command_index+0x5c>)
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc39 	bl	8000200 <strcmp>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00e      	beq.n	80009b2 <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4909      	ldr	r1, [pc, #36]	; (80009c0 <shell_get_command_index+0x5c>)
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	3304      	adds	r3, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e2      	bne.n	8000976 <shell_get_command_index+0x12>
 80009b0:	e000      	b.n	80009b4 <shell_get_command_index+0x50>
        {
            break;
 80009b2:	bf00      	nop
        }
    }

    return i;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b2db      	uxtb	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08007af4 	.word	0x08007af4

080009c4 <cli_process>:

void cli_process(char* cmd)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009d0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80009d4:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 80009d6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009da:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80009de:	4618      	mov	r0, r3
 80009e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e4:	461a      	mov	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f005 fe5a 	bl	80066a0 <memset>
    int i = 0, idx = 0, argc = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 80009fe:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a02:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000a06:	4939      	ldr	r1, [pc, #228]	; (8000aec <cli_process+0x128>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f005 fee7 	bl	80067dc <strtok>
 8000a0e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 8000a12:	e02c      	b.n	8000a6e <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a1a:	e014      	b.n	8000a46 <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000a1c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000a20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000a2a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000a2e:	4411      	add	r1, r2
 8000a30:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000a34:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000a3c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a40:	3301      	adds	r3, #1
 8000a42:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a46:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000a4a:	f7ff fbe3 	bl	8000214 <strlen>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8e1      	bhi.n	8000a1c <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 8000a58:	4924      	ldr	r1, [pc, #144]	; (8000aec <cli_process+0x128>)
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f005 febe 	bl	80067dc <strtok>
 8000a60:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 8000a64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a68:	3301      	adds	r3, #1
 8000a6a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 8000a6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1ce      	bne.n	8000a14 <cli_process+0x50>
    }

    command = argv[0];
 8000a76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a7a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 8000a84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d027      	beq.n	8000adc <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 8000a8c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000a90:	f7ff ff68 	bl	8000964 <shell_get_command_index>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 8000a9a:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000a9e:	4914      	ldr	r1, [pc, #80]	; (8000af0 <cli_process+0x12c>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3304      	adds	r3, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <cli_process+0x130>)
 8000ab4:	f005 fe82 	bl	80067bc <puts>
 8000ab8:	e013      	b.n	8000ae2 <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 8000aba:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000abe:	490c      	ldr	r1, [pc, #48]	; (8000af0 <cli_process+0x12c>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3304      	adds	r3, #4
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	f107 0108 	add.w	r1, r7, #8
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4798      	blx	r3
    }

    printf("\r\n");
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <cli_process+0x134>)
 8000ade:	f005 fe6d 	bl	80067bc <puts>
 8000ae2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	080079d4 	.word	0x080079d4
 8000af0:	08007af4 	.word	0x08007af4
 8000af4:	080079d8 	.word	0x080079d8
 8000af8:	080079f0 	.word	0x080079f0

08000afc <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0ae      	sub	sp, #184	; 0xb8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b0e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fdc2 	bl	80066a0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	226c      	movs	r2, #108	; 0x6c
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 fdb3 	bl	80066a0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b3a:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b3c:	4a69      	ldr	r2, [pc, #420]	; (8000ce4 <MX_DSIHOST_DSI_Init+0x1e8>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b40:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b46:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b4c:	4b64      	ldr	r3, [pc, #400]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000b52:	237d      	movs	r3, #125	; 0x7d
 8000b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b68:	4619      	mov	r1, r3
 8000b6a:	485d      	ldr	r0, [pc, #372]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b6c:	f001 fdf2 	bl	8002754 <HAL_DSI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000b76:	f000 fed7 	bl	8001928 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	484a      	ldr	r0, [pc, #296]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000bb8:	f002 fb4e 	bl	8003258 <HAL_DSI_ConfigHostTimeouts>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000bc2:	f000 feb1 	bl	8001928 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000bc6:	2323      	movs	r3, #35	; 0x23
 8000bc8:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000bca:	2323      	movs	r3, #35	; 0x23
 8000bcc:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 35;
 8000bce:	2323      	movs	r3, #35	; 0x23
 8000bd0:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 35;
 8000bd2:	2323      	movs	r3, #35	; 0x23
 8000bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 10;
 8000bdc:	230a      	movs	r3, #10
 8000bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000be6:	4619      	mov	r1, r3
 8000be8:	483d      	ldr	r0, [pc, #244]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000bea:	f002 facb 	bl	8003184 <HAL_DSI_ConfigPhyTimer>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000bf4:	f000 fe98 	bl	8001928 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000bfc:	f002 fa9a 	bl	8003134 <HAL_DSI_ConfigFlowControl>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8000c06:	f000 fe8f 	bl	8001928 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c0a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c0e:	4834      	ldr	r0, [pc, #208]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000c10:	f002 fd1a 	bl	8003648 <HAL_DSI_SetLowPowerRXFilter>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000c1a:	f000 fe85 	bl	8001928 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_GEN) != HAL_OK)
 8000c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c22:	482f      	ldr	r0, [pc, #188]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000c24:	f001 feb2 	bl	800298c <HAL_DSI_ConfigErrorMonitor>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DSIHOST_DSI_Init+0x136>
  {
    Error_Handler();
 8000c2e:	f000 fe7b 	bl	8001928 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000c36:	2305      	movs	r3, #5
 8000c38:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 800;
 8000c42:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c46:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 68;
 8000c60:	2344      	movs	r3, #68	; 0x44
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1940;
 8000c64:	f240 7394 	movw	r3, #1940	; 0x794
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 120;
 8000c6a:	2378      	movs	r3, #120	; 0x78
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 150;
 8000c6e:	2396      	movs	r3, #150	; 0x96
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 150;
 8000c72:	2396      	movs	r3, #150	; 0x96
 8000c74:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8000c76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c98:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000cb6:	f002 f835 	bl	8002d24 <HAL_DSI_ConfigVideoMode>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_DSIHOST_DSI_Init+0x1c8>
  {
    Error_Handler();
 8000cc0:	f000 fe32 	bl	8001928 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000cc8:	f002 f804 	bl	8002cd4 <HAL_DSI_SetGenericVCID>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_DSIHOST_DSI_Init+0x1da>
  {
    Error_Handler();
 8000cd2:	f000 fe29 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	37b8      	adds	r7, #184	; 0xb8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	40016c00 	.word	0x40016c00

08000ce8 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_DSI_MspInit+0x94>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d133      	bne.n	8000d72 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_DSI_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000d42:	2304      	movs	r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000d52:	230d      	movs	r3, #13
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_DSI_MspInit+0x9c>)
 8000d5e:	f002 ffa7 	bl	8003cb0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	205c      	movs	r0, #92	; 0x5c
 8000d68:	f001 fbe3 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000d6c:	205c      	movs	r0, #92	; 0x5c
 8000d6e:	f001 fbfc 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40016c00 	.word	0x40016c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40022400 	.word	0x40022400

08000d88 <DSI_IO_WriteCmd>:
  }
}

/* USER CODE BEGIN 1 */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d80d      	bhi.n	8000db4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi, (uint32_t) 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	4613      	mov	r3, r2
 8000da8:	2215      	movs	r2, #21
 8000daa:	2100      	movs	r1, #0
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <DSI_IO_WriteCmd+0x50>)
 8000dae:	f002 fb91 	bl	80034d4 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000db2:	e00d      	b.n	8000dd0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2239      	movs	r2, #57	; 0x39
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <DSI_IO_WriteCmd+0x50>)
 8000dcc:	f002 fba4 	bl	8003518 <HAL_DSI_LongWrite>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000008c 	.word	0x2000008c

08000ddc <dsi_start>:

void dsi_start(bool start)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if(start)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d007      	beq.n	8000dfc <dsi_start+0x20>
  {
      HAL_DSI_Start(&(hdsi));
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <dsi_start+0x30>)
 8000dee:	f002 faf9 	bl	80033e4 <HAL_DSI_Start>
      ltdc_default_init(0, LAYER0_ADDRESS);
 8000df2:	4907      	ldr	r1, [pc, #28]	; (8000e10 <dsi_start+0x34>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fcaf 	bl	8001758 <ltdc_default_init>
  }
  else
  {
      HAL_DSI_Stop(&(hdsi));
  }
}
 8000dfa:	e002      	b.n	8000e02 <dsi_start+0x26>
      HAL_DSI_Stop(&(hdsi));
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <dsi_start+0x30>)
 8000dfe:	f002 fb2d 	bl	800345c <HAL_DSI_Stop>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000008c 	.word	0x2000008c
 8000e10:	08020000 	.word	0x08020000

08000e14 <MX_GPIO_Init>:
     PE12   ------> FMC_D9_DA9
     PE15   ------> FMC_D12_DA12
     PE13   ------> FMC_D10_DA10
*/
void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b090      	sub	sp, #64	; 0x40
 8000e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2e:	4bac      	ldr	r3, [pc, #688]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4aab      	ldr	r2, [pc, #684]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4ba9      	ldr	r3, [pc, #676]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	4ba5      	ldr	r3, [pc, #660]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4aa4      	ldr	r2, [pc, #656]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4ba2      	ldr	r3, [pc, #648]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a9d      	ldr	r2, [pc, #628]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b9b      	ldr	r3, [pc, #620]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	4b97      	ldr	r3, [pc, #604]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a96      	ldr	r2, [pc, #600]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b94      	ldr	r3, [pc, #592]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	4b90      	ldr	r3, [pc, #576]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a8f      	ldr	r2, [pc, #572]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b8d      	ldr	r3, [pc, #564]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b89      	ldr	r3, [pc, #548]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a88      	ldr	r2, [pc, #544]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b86      	ldr	r3, [pc, #536]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a81      	ldr	r2, [pc, #516]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b7b      	ldr	r3, [pc, #492]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a7a      	ldr	r2, [pc, #488]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a6c      	ldr	r2, [pc, #432]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a65      	ldr	r2, [pc, #404]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <MX_GPIO_Init+0x2cc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	210c      	movs	r1, #12
 8000f62:	4860      	ldr	r0, [pc, #384]	; (80010e4 <MX_GPIO_Init+0x2d0>)
 8000f64:	f003 f850 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2130      	movs	r1, #48	; 0x30
 8000f6c:	485e      	ldr	r0, [pc, #376]	; (80010e8 <MX_GPIO_Init+0x2d4>)
 8000f6e:	f003 f84b 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2108      	movs	r1, #8
 8000f76:	485d      	ldr	r0, [pc, #372]	; (80010ec <MX_GPIO_Init+0x2d8>)
 8000f78:	f003 f846 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	485b      	ldr	r0, [pc, #364]	; (80010f0 <MX_GPIO_Init+0x2dc>)
 8000f82:	f003 f841 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2105      	movs	r1, #5
 8000f8a:	485a      	ldr	r0, [pc, #360]	; (80010f4 <MX_GPIO_Init+0x2e0>)
 8000f8c:	f003 f83c 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	4858      	ldr	r0, [pc, #352]	; (80010f8 <MX_GPIO_Init+0x2e4>)
 8000f96:	f003 f837 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4857      	ldr	r0, [pc, #348]	; (80010fc <MX_GPIO_Init+0x2e8>)
 8000fa0:	f003 f832 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8000fa4:	2330      	movs	r3, #48	; 0x30
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4849      	ldr	r0, [pc, #292]	; (80010e4 <MX_GPIO_Init+0x2d0>)
 8000fc0:	f002 fe76 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4842      	ldr	r0, [pc, #264]	; (80010e4 <MX_GPIO_Init+0x2d0>)
 8000fdc:	f002 fe68 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8000fe0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	483c      	ldr	r0, [pc, #240]	; (80010f0 <MX_GPIO_Init+0x2dc>)
 8000ffe:	f002 fe57 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001002:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001014:	230c      	movs	r3, #12
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	4619      	mov	r1, r3
 800101e:	4831      	ldr	r0, [pc, #196]	; (80010e4 <MX_GPIO_Init+0x2d0>)
 8001020:	f002 fe46 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001036:	2304      	movs	r3, #4
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MX_GPIO_Init+0x2e0>)
 8001042:	f002 fe35 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001046:	2308      	movs	r3, #8
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001056:	2306      	movs	r3, #6
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	; (80010f4 <MX_GPIO_Init+0x2e0>)
 8001062:	f002 fe25 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001066:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001078:	230c      	movs	r3, #12
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	481f      	ldr	r0, [pc, #124]	; (8001100 <MX_GPIO_Init+0x2ec>)
 8001084:	f002 fe14 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_GPIO_Init+0x2e0>)
 800109e:	f002 fe07 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80010b2:	230a      	movs	r3, #10
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_GPIO_Init+0x2e0>)
 80010be:	f002 fdf7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80010c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010d4:	230c      	movs	r3, #12
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	e011      	b.n	8001104 <MX_GPIO_Init+0x2f0>
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40022800 	.word	0x40022800
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40021c00 	.word	0x40021c00
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020800 	.word	0x40020800
 8001104:	48ac      	ldr	r0, [pc, #688]	; (80013b8 <MX_GPIO_Init+0x5a4>)
 8001106:	f002 fdd3 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800111a:	2306      	movs	r3, #6
 800111c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	48a5      	ldr	r0, [pc, #660]	; (80013bc <MX_GPIO_Init+0x5a8>)
 8001126:	f002 fdc3 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 800112a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800113c:	230c      	movs	r3, #12
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	489d      	ldr	r0, [pc, #628]	; (80013bc <MX_GPIO_Init+0x5a8>)
 8001148:	f002 fdb2 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800114c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800115e:	230a      	movs	r3, #10
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4895      	ldr	r0, [pc, #596]	; (80013c0 <MX_GPIO_Init+0x5ac>)
 800116a:	f002 fda1 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin
                           PIPin PIPin PIPin PIPin
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800116e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001180:	230c      	movs	r3, #12
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001188:	4619      	mov	r1, r3
 800118a:	488e      	ldr	r0, [pc, #568]	; (80013c4 <MX_GPIO_Init+0x5b0>)
 800118c:	f002 fd90 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001190:	2330      	movs	r3, #48	; 0x30
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001194:	2311      	movs	r3, #17
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4885      	ldr	r0, [pc, #532]	; (80013bc <MX_GPIO_Init+0x5a8>)
 80011a8:	f002 fd82 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80011ac:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011be:	230c      	movs	r3, #12
 80011c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c6:	4619      	mov	r1, r3
 80011c8:	487f      	ldr	r0, [pc, #508]	; (80013c8 <MX_GPIO_Init+0x5b4>)
 80011ca:	f002 fd71 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80011ce:	2308      	movs	r3, #8
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011d2:	2311      	movs	r3, #17
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4879      	ldr	r0, [pc, #484]	; (80013cc <MX_GPIO_Init+0x5b8>)
 80011e6:	f002 fd63 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80011ea:	2304      	movs	r3, #4
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011fa:	230c      	movs	r3, #12
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001202:	4619      	mov	r1, r3
 8001204:	486d      	ldr	r0, [pc, #436]	; (80013bc <MX_GPIO_Init+0x5a8>)
 8001206:	f002 fd53 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 800120a:	f64f 730c 	movw	r3, #65292	; 0xff0c
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800121c:	230c      	movs	r3, #12
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	486a      	ldr	r0, [pc, #424]	; (80013d0 <MX_GPIO_Init+0x5bc>)
 8001228:	f002 fd42 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	485f      	ldr	r0, [pc, #380]	; (80013c0 <MX_GPIO_Init+0x5ac>)
 8001242:	f002 fd35 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001246:	2330      	movs	r3, #48	; 0x30
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001256:	2304      	movs	r3, #4
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800125a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125e:	4619      	mov	r1, r3
 8001260:	485b      	ldr	r0, [pc, #364]	; (80013d0 <MX_GPIO_Init+0x5bc>)
 8001262:	f002 fd25 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001276:	2306      	movs	r3, #6
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127e:	4619      	mov	r1, r3
 8001280:	484d      	ldr	r0, [pc, #308]	; (80013b8 <MX_GPIO_Init+0x5a4>)
 8001282:	f002 fd15 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001286:	2340      	movs	r3, #64	; 0x40
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800128a:	2311      	movs	r3, #17
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129a:	4619      	mov	r1, r3
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <MX_GPIO_Init+0x5a4>)
 800129e:	f002 fd07 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80012a2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80012b4:	2309      	movs	r3, #9
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	4842      	ldr	r0, [pc, #264]	; (80013c8 <MX_GPIO_Init+0x5b4>)
 80012c0:	f002 fcf6 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80012c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80012d6:	230a      	movs	r3, #10
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012de:	4619      	mov	r1, r3
 80012e0:	4839      	ldr	r0, [pc, #228]	; (80013c8 <MX_GPIO_Init+0x5b4>)
 80012e2:	f002 fce5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f6:	230c      	movs	r3, #12
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fe:	4619      	mov	r1, r3
 8001300:	4834      	ldr	r0, [pc, #208]	; (80013d4 <MX_GPIO_Init+0x5c0>)
 8001302:	f002 fcd5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001306:	2305      	movs	r3, #5
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131a:	4619      	mov	r1, r3
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <MX_GPIO_Init+0x5c4>)
 800131e:	f002 fcc7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001334:	2302      	movs	r3, #2
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133c:	4619      	mov	r1, r3
 800133e:	481f      	ldr	r0, [pc, #124]	; (80013bc <MX_GPIO_Init+0x5a8>)
 8001340:	f002 fcb6 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001344:	2304      	movs	r3, #4
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001354:	4619      	mov	r1, r3
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_GPIO_Init+0x5a4>)
 8001358:	f002 fcaa 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800135c:	2320      	movs	r3, #32
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001360:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_GPIO_Init+0x5c8>)
 8001372:	f002 fc9d 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MX_GPIO_Init+0x5bc>)
 800138e:	f002 fc8f 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001392:	2308      	movs	r3, #8
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_GPIO_Init+0x5ac>)
 80013aa:	f002 fc81 	bl	8003cb0 <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3740      	adds	r7, #64	; 0x40
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40022800 	.word	0x40022800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40022400 	.word	0x40022400

080013e0 <color_write>:
#include "nt35510.h"
#include "stm32f4xx_hal.h"


static void color_write(uint8_t sector, uint32_t address, uint32_t color)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
    printf("sector %d, address 0x%08lx, color 0x%08lx \r\n", sector, address, color);
 80013ee:	7bf9      	ldrb	r1, [r7, #15]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4824      	ldr	r0, [pc, #144]	; (8001488 <color_write+0xa8>)
 80013f6:	f005 f95b 	bl	80066b0 <iprintf>
    HAL_StatusTypeDef status;
    uint32_t error = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    FLASH_EraseInitTypeDef eraseInitStruct;

    HAL_FLASH_Unlock();
 80013fe:	f002 f9a5 	bl	800374c <HAL_FLASH_Unlock>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Sector = sector;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbSectors = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &error);
 8001412:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fb07 	bl	8003a30 <HAL_FLASHEx_Erase>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (status != HAL_OK)
 8001428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <color_write+0x5c>
    {
        printf("[Error] Flash Erase \r\n");
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <color_write+0xac>)
 8001432:	f005 f9c3 	bl	80067bc <puts>
        HAL_FLASH_Lock();
 8001436:	f002 f9ab 	bl	8003790 <HAL_FLASH_Lock>
 800143a:	e022      	b.n	8001482 <color_write+0xa2>
        return;
    }

    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001440:	e017      	b.n	8001472 <color_write+0x92>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, color);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	461c      	mov	r4, r3
 8001448:	4615      	mov	r5, r2
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001450:	2002      	movs	r0, #2
 8001452:	f002 f927 	bl	80036a4 <HAL_FLASH_Program>
 8001456:	4603      	mov	r3, r0
 8001458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (status != HAL_OK)
 800145c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <color_write+0x8c>
        {
            printf("[Error] Flash write \r\n");
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <color_write+0xb0>)
 8001466:	f005 f9a9 	bl	80067bc <puts>
            break;
 800146a:	e008      	b.n	800147e <color_write+0x9e>
    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	3304      	adds	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147a:	429a      	cmp	r2, r3
 800147c:	d3e1      	bcc.n	8001442 <color_write+0x62>
        }
    }

    HAL_FLASH_Lock();
 800147e:	f002 f987 	bl	8003790 <HAL_FLASH_Lock>
}
 8001482:	3730      	adds	r7, #48	; 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	080079f4 	.word	0x080079f4
 800148c:	08007a24 	.word	0x08007a24
 8001490:	08007a3c 	.word	0x08007a3c

08001494 <lcd_control_change>:

void lcd_control_change(LCD_CONTROL_COLOR color, bool tmp)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	460a      	mov	r2, r1
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	4613      	mov	r3, r2
 80014a2:	71bb      	strb	r3, [r7, #6]
    uint32_t color_value = 0xFF000000;
 80014a4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80014a8:	61fb      	str	r3, [r7, #28]
    color_value |= 0xFF<<(color*8);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61fb      	str	r3, [r7, #28]
    if (tmp) // sector 5~11 (128K*7)
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01c      	beq.n	80014fc <lcd_control_change+0x68>
    {
        uint32_t address_offset = 0x08020000;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <lcd_control_change+0xa8>)
 80014c4:	613b      	str	r3, [r7, #16]
        uint32_t address = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
        for (int sector=0; sector<7; sector+=1)
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e011      	b.n	80014f4 <lcd_control_change+0x60>
        // for (int sector=0; sector<1; sector+=1)
        {
            address = address_offset + sector*(0x400*128);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	045b      	lsls	r3, r3, #17
 80014d4:	461a      	mov	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
            color_write(sector+5, address, color_value);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3305      	adds	r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff79 	bl	80013e0 <color_write>
        for (int sector=0; sector<7; sector+=1)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	3301      	adds	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	ddea      	ble.n	80014d0 <lcd_control_change+0x3c>
        {
            address = address_offset + sector*(0x400*128);
            color_write(sector+17, address, color_value);
        }
    }
}
 80014fa:	e01b      	b.n	8001534 <lcd_control_change+0xa0>
        uint32_t address_offset = 0x08120000;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <lcd_control_change+0xac>)
 80014fe:	61bb      	str	r3, [r7, #24]
        uint32_t address = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
        for (int sector=0; sector<7; sector+=1)
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	e011      	b.n	800152e <lcd_control_change+0x9a>
            address = address_offset + sector*(0x400*128);
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	045b      	lsls	r3, r3, #17
 800150e:	461a      	mov	r2, r3
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4413      	add	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
            color_write(sector+17, address, color_value);
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3311      	adds	r3, #17
 800151c:	b2db      	uxtb	r3, r3
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	6979      	ldr	r1, [r7, #20]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff5c 	bl	80013e0 <color_write>
        for (int sector=0; sector<7; sector+=1)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	3301      	adds	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	2b06      	cmp	r3, #6
 8001532:	ddea      	ble.n	800150a <lcd_control_change+0x76>
}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08020000 	.word	0x08020000
 8001540:	08120000 	.word	0x08120000

08001544 <NT35510_IO_Delay>:

void NT35510_IO_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    HAL_Delay(Delay);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fef1 	bl	8002334 <HAL_Delay>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <lcd_reset>:

static void lcd_reset(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <lcd_reset+0x28>)
 8001566:	f002 fd4f 	bl	8004008 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800156a:	2014      	movs	r0, #20
 800156c:	f000 fee2 	bl	8002334 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <lcd_reset+0x28>)
 8001576:	f002 fd47 	bl	8004008 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800157a:	2014      	movs	r0, #20
 800157c:	f000 feda 	bl	8002334 <HAL_Delay>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021c00 	.word	0x40021c00

08001588 <lcd_control_init>:

void lcd_control_init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    lcd_reset();
 800158c:	f7ff ffe6 	bl	800155c <lcd_reset>
    MX_DSIHOST_DSI_Init();
 8001590:	f7ff fab4 	bl	8000afc <MX_DSIHOST_DSI_Init>
    MX_LTDC_Init();
 8001594:	f000 f810 	bl	80015b8 <MX_LTDC_Init>
    dsi_start(true);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fc1f 	bl	8000ddc <dsi_start>

    NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 800159e:	2101      	movs	r1, #1
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 f9c7 	bl	8001934 <NT35510_Init>

    ltdc_default_init(0, LAYER0_ADDRESS);
 80015a6:	4903      	ldr	r1, [pc, #12]	; (80015b4 <lcd_control_init+0x2c>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 f8d5 	bl	8001758 <ltdc_default_init>
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08020000 	.word	0x08020000

080015b8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	; 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2234      	movs	r2, #52	; 0x34
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 f86b 	bl	80066a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015cc:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <MX_LTDC_Init+0x104>)
 80015ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015d6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 119;
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015f4:	2277      	movs	r2, #119	; 0x77
 80015f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 35;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <MX_LTDC_Init+0x100>)
 80015fa:	2223      	movs	r2, #35	; 0x23
 80015fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 269;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001600:	f240 120d 	movw	r2, #269	; 0x10d
 8001604:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 835;
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001608:	f240 3243 	movw	r2, #835	; 0x343
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 749;
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001610:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 869;
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001618:	f240 3265 	movw	r2, #869	; 0x365
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 899;
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001620:	f240 3283 	movw	r2, #899	; 0x383
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800163e:	481e      	ldr	r0, [pc, #120]	; (80016b8 <MX_LTDC_Init+0x100>)
 8001640:	f002 fcfc 	bl	800403c <HAL_LTDC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 800164a:	f000 f96d 	bl	8001928 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001652:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001656:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800165c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001660:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001666:	23ff      	movs	r3, #255	; 0xff
 8001668:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800166e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001672:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001674:	2307      	movs	r3, #7
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x08020000;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_LTDC_Init+0x108>)
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 800167c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001682:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_LTDC_Init+0x100>)
 80016a2:	f002 fe53 	bl	800434c <HAL_LTDC_ConfigLayer>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80016ac:	f000 f93c 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3738      	adds	r7, #56	; 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000a8 	.word	0x200000a8
 80016bc:	40016800 	.word	0x40016800
 80016c0:	08020000 	.word	0x08020000

080016c4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b092      	sub	sp, #72	; 0x48
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	223c      	movs	r2, #60	; 0x3c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 ffe3 	bl	80066a0 <memset>
  if(ltdcHandle->Instance==LTDC)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_LTDC_MspInit+0x8c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d130      	bne.n	8001746 <HAL_LTDC_MspInit+0x82>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016e4:	2308      	movs	r3, #8
 80016e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80016ee:	2307      	movs	r3, #7
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fa6c 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001706:	f000 f90f 	bl	8001928 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_LTDC_MspInit+0x90>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_LTDC_MspInit+0x90>)
 8001714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_LTDC_MspInit+0x90>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2058      	movs	r0, #88	; 0x58
 800172c:	f000 ff01 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001730:	2058      	movs	r0, #88	; 0x58
 8001732:	f000 ff1a 	bl	800256a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2059      	movs	r0, #89	; 0x59
 800173c:	f000 fef9 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001740:	2059      	movs	r0, #89	; 0x59
 8001742:	f000 ff12 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	3748      	adds	r7, #72	; 0x48
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40016800 	.word	0x40016800
 8001754:	40023800 	.word	0x40023800

08001758 <ltdc_default_init>:
  }
}

/* USER CODE BEGIN 1 */
void ltdc_default_init(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	80fb      	strh	r3, [r7, #6]
    LTDC_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = NT35510_800X480_WIDTH;
 8001768:	f44f 7348 	mov.w	r3, #800	; 0x320
 800176c:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = NT35510_800X480_HEIGHT;
 8001772:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001776:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001780:	23ff      	movs	r3, #255	; 0xff
 8001782:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800179a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017a0:	2307      	movs	r3, #7
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = NT35510_800X480_WIDTH;
 80017a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = NT35510_800X480_HEIGHT;
 80017aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex); 
 80017b0:	88fa      	ldrh	r2, [r7, #6]
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <ltdc_default_init+0x70>)
 80017ba:	f002 fdc7 	bl	800434c <HAL_LTDC_ConfigLayer>
}
 80017be:	bf00      	nop
 80017c0:	3740      	adds	r7, #64	; 0x40
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000a8 	.word	0x200000a8

080017cc <HAL_LTDC_ErrorCallback>:

volatile uint32_t ltdc_err = 0;
void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  ltdc_err = hltdc->ErrorCode;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_LTDC_ErrorCallback+0x20>)
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000150 	.word	0x20000150

080017f0 <ltdc_get_err>:

void ltdc_get_err(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  printf("[LTDC] err: 0x%08lx \r\n", ltdc_err);
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <ltdc_get_err+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <ltdc_get_err+0x18>)
 80017fc:	f004 ff58 	bl	80066b0 <iprintf>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000150 	.word	0x20000150
 8001808:	08007a54 	.word	0x08007a54

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f000 fd1e 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f814 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f7ff fafc 	bl	8000e14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800181c:	f000 fbbc 	bl	8001f98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_control_init();
 8001820:	f7ff feb2 	bl	8001588 <lcd_control_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <main+0x2c>)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <main+0x30>)
 8001828:	f004 ff42 	bl	80066b0 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 800182c:	f000 fcc0 	bl	80021b0 <uart_check_cmd_recv>
    HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fd7f 	bl	8002334 <HAL_Delay>
    uart_check_cmd_recv();
 8001836:	e7f9      	b.n	800182c <main+0x20>
 8001838:	08007a6c 	.word	0x08007a6c
 800183c:	08007a74 	.word	0x08007a74

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	2234      	movs	r2, #52	; 0x34
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f004 ff26 	bl	80066a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <SystemClock_Config+0xe0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <SystemClock_Config+0xe0>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <SystemClock_Config+0xe0>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <SystemClock_Config+0xe4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <SystemClock_Config+0xe4>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <SystemClock_Config+0xe4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018b0:	2308      	movs	r3, #8
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80018b4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018be:	2304      	movs	r3, #4
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80018c2:	2306      	movs	r3, #6
 80018c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fbc2 	bl	8005054 <HAL_RCC_OscConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018d6:	f000 f827 	bl	8001928 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018da:	f002 ff0d 	bl	80046f8 <HAL_PWREx_EnableOverDrive>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018e4:	f000 f820 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	2105      	movs	r1, #5
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff46 	bl	8004798 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001912:	f000 f809 	bl	8001928 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b2      	sub	sp, #200	; 0xc8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f7ff fe00 	bl	8001544 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8001944:	4ac8      	ldr	r2, [pc, #800]	; (8001c68 <NT35510_Init+0x334>)
 8001946:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800194a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800194e:	6018      	str	r0, [r3, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8001954:	4bc5      	ldr	r3, [pc, #788]	; (8001c6c <NT35510_Init+0x338>)
 8001956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800195a:	4bc5      	ldr	r3, [pc, #788]	; (8001c70 <NT35510_Init+0x33c>)
 800195c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8001960:	4bc4      	ldr	r3, [pc, #784]	; (8001c74 <NT35510_Init+0x340>)
 8001962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8001966:	4bc4      	ldr	r3, [pc, #784]	; (8001c78 <NT35510_Init+0x344>)
 8001968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 800196c:	4bc3      	ldr	r3, [pc, #780]	; (8001c7c <NT35510_Init+0x348>)
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8001972:	4bc3      	ldr	r3, [pc, #780]	; (8001c80 <NT35510_Init+0x34c>)
 8001974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8001978:	f240 13bf 	movw	r3, #447	; 0x1bf
 800197c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8001980:	4bc0      	ldr	r3, [pc, #768]	; (8001c84 <NT35510_Init+0x350>)
 8001982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8001986:	4bc0      	ldr	r3, [pc, #768]	; (8001c88 <NT35510_Init+0x354>)
 8001988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800198c:	4bbf      	ldr	r3, [pc, #764]	; (8001c8c <NT35510_Init+0x358>)
 800198e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8001992:	4bbf      	ldr	r3, [pc, #764]	; (8001c90 <NT35510_Init+0x35c>)
 8001994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8001998:	4bbe      	ldr	r3, [pc, #760]	; (8001c94 <NT35510_Init+0x360>)
 800199a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800199e:	4bbe      	ldr	r3, [pc, #760]	; (8001c98 <NT35510_Init+0x364>)
 80019a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 80019a4:	4abd      	ldr	r2, [pc, #756]	; (8001c9c <NT35510_Init+0x368>)
 80019a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4611      	mov	r1, r2
 80019ae:	8019      	strh	r1, [r3, #0]
 80019b0:	3302      	adds	r3, #2
 80019b2:	0c12      	lsrs	r2, r2, #16
 80019b4:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 80019b6:	4aba      	ldr	r2, [pc, #744]	; (8001ca0 <NT35510_Init+0x36c>)
 80019b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c0:	6018      	str	r0, [r3, #0]
 80019c2:	3304      	adds	r3, #4
 80019c4:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 80019c6:	4ab7      	ldr	r2, [pc, #732]	; (8001ca4 <NT35510_Init+0x370>)
 80019c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	4611      	mov	r1, r2
 80019d0:	8019      	strh	r1, [r3, #0]
 80019d2:	3302      	adds	r3, #2
 80019d4:	0c12      	lsrs	r2, r2, #16
 80019d6:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 80019d8:	f240 33b6 	movw	r3, #950	; 0x3b6
 80019dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 80019e0:	f245 13b5 	movw	r3, #20917	; 0x51b5
 80019e4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80019e8:	4aaf      	ldr	r2, [pc, #700]	; (8001ca8 <NT35510_Init+0x374>)
 80019ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	8019      	strh	r1, [r3, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	0c12      	lsrs	r2, r2, #16
 80019f8:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80019fa:	4aac      	ldr	r2, [pc, #688]	; (8001cac <NT35510_Init+0x378>)
 80019fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a04:	6018      	str	r0, [r3, #0]
 8001a06:	3304      	adds	r3, #4
 8001a08:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8001a0a:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8001a0e:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8001a10:	4ba7      	ldr	r3, [pc, #668]	; (8001cb0 <NT35510_Init+0x37c>)
 8001a12:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8001a14:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8001a18:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8001a1c:	2336      	movs	r3, #54	; 0x36
 8001a1e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8001a22:	4aa4      	ldr	r2, [pc, #656]	; (8001cb4 <NT35510_Init+0x380>)
 8001a24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a2c:	6018      	str	r0, [r3, #0]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8001a32:	4aa1      	ldr	r2, [pc, #644]	; (8001cb8 <NT35510_Init+0x384>)
 8001a34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3c:	6018      	str	r0, [r3, #0]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8001a42:	f246 0336 	movw	r3, #24630	; 0x6036
 8001a46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8001a4a:	4a9c      	ldr	r2, [pc, #624]	; (8001cbc <NT35510_Init+0x388>)
 8001a4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a54:	6018      	str	r0, [r3, #0]
 8001a56:	3304      	adds	r3, #4
 8001a58:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8001a5a:	4a99      	ldr	r2, [pc, #612]	; (8001cc0 <NT35510_Init+0x38c>)
 8001a5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a64:	6018      	str	r0, [r3, #0]
 8001a66:	3304      	adds	r3, #4
 8001a68:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8001a6a:	2335      	movs	r3, #53	; 0x35
 8001a6c:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8001a6e:	2311      	movs	r3, #17
 8001a70:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8001a72:	2329      	movs	r3, #41	; 0x29
 8001a74:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8001a76:	f647 7351 	movw	r3, #32593	; 0x7f51
 8001a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8001a7c:	f642 4353 	movw	r3, #11347	; 0x2c53
 8001a80:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8001a82:	f240 2355 	movw	r3, #597	; 0x255
 8001a86:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8001a88:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8001a8c:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8001a8e:	232c      	movs	r3, #44	; 0x2c
 8001a90:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8001a92:	f245 533a 	movw	r3, #21818	; 0x553a
 8001a96:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8001a98:	f247 733a 	movw	r3, #30522	; 0x773a
 8001a9c:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8001a9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2005      	movs	r0, #5
 8001aa6:	f7ff f96f 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8001aaa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f7ff f969 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8001ab6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aba:	4619      	mov	r1, r3
 8001abc:	2003      	movs	r0, #3
 8001abe:	f7ff f963 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8001ac2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f7ff f95d 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8001ace:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f7ff f957 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8001ada:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f7ff f951 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8001ae6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aea:	4619      	mov	r1, r3
 8001aec:	2003      	movs	r0, #3
 8001aee:	f7ff f94b 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8001af2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af6:	4619      	mov	r1, r3
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff f945 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8001afe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b02:	4619      	mov	r1, r3
 8001b04:	2003      	movs	r0, #3
 8001b06:	f7ff f93f 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8001b0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2003      	movs	r0, #3
 8001b12:	f7ff f939 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8001b16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff f933 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8001b22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b26:	4619      	mov	r1, r3
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f7ff f92d 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8001b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b32:	4619      	mov	r1, r3
 8001b34:	2003      	movs	r0, #3
 8001b36:	f7ff f927 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8001b3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2003      	movs	r0, #3
 8001b42:	f7ff f921 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8001b46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff f91b 	bl	8000d88 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8001b52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b56:	4619      	mov	r1, r3
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f7ff f915 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8001b5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b62:	4619      	mov	r1, r3
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7ff f90f 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8001b6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff f909 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8001b76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff f903 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8001b82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b86:	4619      	mov	r1, r3
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff f8fd 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8001b8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b92:	4619      	mov	r1, r3
 8001b94:	2004      	movs	r0, #4
 8001b96:	f7ff f8f7 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8001b9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7ff f8f1 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8001ba6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff f8eb 	bl	8000d88 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8001bb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff f8e5 	bl	8000d88 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8001bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f8df 	bl	8000d88 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff f8d9 	bl	8000d88 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8001bd6:	20c8      	movs	r0, #200	; 0xc8
 8001bd8:	f7ff fcb4 	bl	8001544 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d112      	bne.n	8001c08 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8001be2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be6:	4619      	mov	r1, r3
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff f8cd 	bl	8000d88 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8001bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2004      	movs	r0, #4
 8001bf6:	f7ff f8c7 	bl	8000d88 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8001bfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2004      	movs	r0, #4
 8001c02:	f7ff f8c1 	bl	8000d88 <DSI_IO_WriteCmd>
 8001c06:	e011      	b.n	8001c2c <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8001c08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff f8ba 	bl	8000d88 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8001c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2004      	movs	r0, #4
 8001c1c:	f7ff f8b4 	bl	8000d88 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8001c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c24:	4619      	mov	r1, r3
 8001c26:	2004      	movs	r0, #4
 8001c28:	f7ff f8ae 	bl	8000d88 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8001c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c30:	4619      	mov	r1, r3
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff f8a8 	bl	8000d88 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8001c38:	2078      	movs	r0, #120	; 0x78
 8001c3a:	f7ff fc83 	bl	8001544 <NT35510_IO_Delay>

  switch(ColorCoding)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <NT35510_Init+0x324>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d13c      	bne.n	8001cc4 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	4619      	mov	r1, r3
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff f899 	bl	8000d88 <DSI_IO_WriteCmd>
      break;
 8001c56:	e03c      	b.n	8001cd2 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff f892 	bl	8000d88 <DSI_IO_WriteCmd>
      break;
 8001c64:	e035      	b.n	8001cd2 <NT35510_Init+0x39e>
 8001c66:	bf00      	nop
 8001c68:	08007aac 	.word	0x08007aac
 8001c6c:	b0030303 	.word	0xb0030303
 8001c70:	b6464646 	.word	0xb6464646
 8001c74:	b1030303 	.word	0xb1030303
 8001c78:	b7363636 	.word	0xb7363636
 8001c7c:	b2020000 	.word	0xb2020000
 8001c80:	b8262626 	.word	0xb8262626
 8001c84:	b3090909 	.word	0xb3090909
 8001c88:	b9363636 	.word	0xb9363636
 8001c8c:	b5080808 	.word	0xb5080808
 8001c90:	ba262626 	.word	0xba262626
 8001c94:	bc008000 	.word	0xbc008000
 8001c98:	bd008000 	.word	0xbd008000
 8001c9c:	08007ab4 	.word	0x08007ab4
 8001ca0:	08007ab8 	.word	0x08007ab8
 8001ca4:	08007ac0 	.word	0x08007ac0
 8001ca8:	08007ac4 	.word	0x08007ac4
 8001cac:	08007ac8 	.word	0x08007ac8
 8001cb0:	cc000003 	.word	0xcc000003
 8001cb4:	08007ad0 	.word	0x08007ad0
 8001cb8:	08007ad8 	.word	0x08007ad8
 8001cbc:	08007ae0 	.word	0x08007ae0
 8001cc0:	08007ae8 	.word	0x08007ae8
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff f85c 	bl	8000d88 <DSI_IO_WriteCmd>
      break;
 8001cd0:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff f855 	bl	8000d88 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff f84f 	bl	8000d88 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f7ff f849 	bl	8000d88 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff f843 	bl	8000d88 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8001d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d06:	4619      	mov	r1, r3
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff f83d 	bl	8000d88 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f837 	bl	8000d88 <DSI_IO_WriteCmd>

  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	37c8      	adds	r7, #200	; 0xc8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f000 fa98 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <USART3_IRQHandler+0x10>)
 8001dce:	f003 fcd5 	bl	800577c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000035c 	.word	0x2000035c

08001ddc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <LTDC_IRQHandler+0x10>)
 8001de2:	f002 f9fb 	bl	80041dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000a8 	.word	0x200000a8

08001df0 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <LTDC_ER_IRQHandler+0x10>)
 8001df6:	f002 f9f1 	bl	80041dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000a8 	.word	0x200000a8

08001e04 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DSI_IRQHandler+0x10>)
 8001e0a:	f000 fe7c 	bl	8002b06 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000008c 	.word	0x2000008c

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e32:	f004 fc0b 	bl	800664c <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
	}

return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_isatty>:

int _isatty(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f004 fb8c 	bl	800664c <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20050000 	.word	0x20050000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20000154 	.word	0x20000154
 8001f68:	200003d8 	.word	0x200003d8

08001f6c <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <_write+0x28>)
 8001f84:	f003 fb37 	bl	80055f6 <HAL_UART_Transmit>
  return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000035c 	.word	0x2000035c

08001f98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <MX_USART3_UART_Init+0x64>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fce:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001fd0:	f003 fac4 	bl	800555c <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fda:	f7ff fca5 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART3_UART_Init+0x68>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_USART3_UART_Init+0x6c>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <MX_USART3_UART_Init+0x60>)
 8001ff0:	f003 fb93 	bl	800571a <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000035c 	.word	0x2000035c
 8001ffc:	40004800 	.word	0x40004800
 8002000:	20000258 	.word	0x20000258
 8002004:	20000158 	.word	0x20000158

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_UART_MspInit+0x94>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d134      	bne.n	8002094 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_UART_MspInit+0x98>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_UART_MspInit+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002062:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002074:	2307      	movs	r3, #7
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <HAL_UART_MspInit+0x9c>)
 8002080:	f001 fe16 	bl	8003cb0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2027      	movs	r0, #39	; 0x27
 800208a:	f000 fa52 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800208e:	2027      	movs	r0, #39	; 0x27
 8002090:	f000 fa6b 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40004800 	.word	0x40004800
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_UART_RxCpltCallback+0xec>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d167      	bne.n	800218a <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 80020c4:	5c9b      	ldrb	r3, [r3, r2]
 80020c6:	2b0a      	cmp	r3, #10
 80020c8:	d007      	beq.n	80020da <HAL_UART_RxCpltCallback+0x32>
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	2b0d      	cmp	r3, #13
 80020d8:	d111      	bne.n	80020fe <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_UART_RxCpltCallback+0xf8>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 80020f4:	4929      	ldr	r1, [pc, #164]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 80020f6:	482b      	ldr	r0, [pc, #172]	; (80021a4 <HAL_UART_RxCpltCallback+0xfc>)
 80020f8:	f004 fb68 	bl	80067cc <strcpy>
 80020fc:	e03a      	b.n	8002174 <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 8002108:	5c9b      	ldrb	r3, [r3, r2]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d11a      	bne.n	8002144 <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	2203      	movs	r2, #3
 8002122:	4921      	ldr	r1, [pc, #132]	; (80021a8 <HAL_UART_RxCpltCallback+0x100>)
 8002124:	4821      	ldr	r0, [pc, #132]	; (80021ac <HAL_UART_RxCpltCallback+0x104>)
 8002126:	f003 fa66 	bl	80055f6 <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	425a      	negs	r2, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	bf58      	it	pl
 800213a:	4253      	negpl	r3, r2
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e017      	b.n	8002174 <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 800214e:	18d1      	adds	r1, r2, r3
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	2201      	movs	r2, #1
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <HAL_UART_RxCpltCallback+0x104>)
 8002158:	f003 fa4d 	bl	80055f6 <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	3301      	adds	r3, #1
 8002164:	425a      	negs	r2, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	bf58      	it	pl
 800216c:	4253      	negpl	r3, r2
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002172:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 800217e:	4413      	add	r3, r2
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	4809      	ldr	r0, [pc, #36]	; (80021ac <HAL_UART_RxCpltCallback+0x104>)
 8002186:	f003 fac8 	bl	800571a <HAL_UART_Receive_IT>
    } 
  }
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40004800 	.word	0x40004800
 8002198:	20000258 	.word	0x20000258
 800219c:	20000158 	.word	0x20000158
 80021a0:	2000025a 	.word	0x2000025a
 80021a4:	2000025c 	.word	0x2000025c
 80021a8:	08007af0 	.word	0x08007af0
 80021ac:	2000035c 	.word	0x2000035c

080021b0 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  if (cmd_ready)
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <uart_check_cmd_recv+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <uart_check_cmd_recv+0x20>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <uart_check_cmd_recv+0x24>)
 80021c6:	f7fe fbfd 	bl	80009c4 <cli_process>
  }
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000025a 	.word	0x2000025a
 80021d4:	2000025c 	.word	0x2000025c

080021d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021de:	490e      	ldr	r1, [pc, #56]	; (8002218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f4:	4c0b      	ldr	r4, [pc, #44]	; (8002224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002202:	f000 f813 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002206:	f004 fa27 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220a:	f7ff faff 	bl	800180c <main>
  bx  lr    
 800220e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002210:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800221c:	08007c94 	.word	0x08007c94
  ldr r2, =_sbss
 8002220:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002224:	200003d4 	.word	0x200003d4

08002228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC_IRQHandler>
	...

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_Init+0x40>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_Init+0x40>)
 8002266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_Init+0x40>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 f94f 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff fd4e 	bl	8001d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f967 	bl	8002586 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 f92f 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	200003a0 	.word	0x200003a0

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200003a0 	.word	0x200003a0

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff3e 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff31 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff feb6 	bl	800231c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d008      	beq.n	80025d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e052      	b.n	8002676 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0216 	bic.w	r2, r2, #22
 80025de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <HAL_DMA_Abort+0x62>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0208 	bic.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002620:	e013      	b.n	800264a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002622:	f7ff fe7b 	bl	800231c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b05      	cmp	r3, #5
 800262e:	d90c      	bls.n	800264a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e015      	b.n	8002676 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e4      	bne.n	8002622 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d004      	beq.n	800269c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e00c      	b.n	80026b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2205      	movs	r2, #5
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	019a      	lsls	r2, r3, #6
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	431a      	orrs	r2, r3
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002702:	f7ff fe0b 	bl	800231c <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002708:	e009      	b.n	800271e <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800270a:	f7ff fe07 	bl	800231c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002718:	d901      	bls.n	800271e <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e015      	b.n	800274a <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	431a      	orrs	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	041a      	lsls	r2, r3, #16
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e10b      	b.n	8002980 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c5b      	ldrb	r3, [r3, #17]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fab8 	bl	8000ce8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002792:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800279e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a6:	f7ff fdb9 	bl	800231c <HAL_GetTick>
 80027aa:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027ac:	e009      	b.n	80027c2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80027ae:	f7ff fdb5 	bl	800231c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027bc:	d901      	bls.n	80027c2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0de      	b.n	8002980 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ed      	beq.n	80027ae <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80027e2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80027e6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80027fe:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002806:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff fd7a 	bl	8002334 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002840:	f7ff fd6c 	bl	800231c <HAL_GetTick>
 8002844:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002846:	e009      	b.n	800285c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002848:	f7ff fd68 	bl	800231c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002856:	d901      	bls.n	800285c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e091      	b.n	8002980 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ed      	beq.n	8002848 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0206 	orr.w	r2, r2, #6
 800287c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0203 	bic.w	r2, r2, #3
 8002890:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0203 	bic.w	r2, r2, #3
 80028be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_DSI_Init+0x1b4>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	e000      	b.n	800290a <HAL_DSI_Init+0x1b6>
 8002908:	2301      	movs	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_DSI_Init+0x234>)
 8002910:	fb03 f202 	mul.w	r2, r3, r2
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	409a      	lsls	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002940:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	430a      	orrs	r2, r1
 8002954:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	003d0900 	.word	0x003d0900

0800298c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7c1b      	ldrb	r3, [r3, #16]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_DSI_ConfigErrorMonitor+0x16>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0ab      	b.n	8002afa <HAL_DSI_ConfigErrorMonitor+0x16e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80029dc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80029e0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80029fe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0202 	orr.w	r2, r2, #2
 8002a3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 020c 	orr.w	r2, r2, #12
 8002a58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0210 	orr.w	r2, r2, #16
 8002a76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002aee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8ad 	bl	8002c98 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00f      	beq.n	8002b6e <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f89f 	bl	8002cac <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808c 	beq.w	8002c90 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b80:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b98:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f043 0202 	orr.w	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f043 0208 	orr.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f818 	bl	8002cc0 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7c1b      	ldrb	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_DSI_SetGenericVCID+0x16>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e016      	b.n	8002d18 <HAL_DSI_SetGenericVCID+0x44>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0203 	bic.w	r2, r2, #3
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7c1b      	ldrb	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_DSI_ConfigVideoMode+0x16>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e1f6      	b.n	8003128 <HAL_DSI_ConfigVideoMode+0x404>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0203 	bic.w	r2, r2, #3
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d98:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002dba:	f023 031f 	bic.w	r3, r3, #31
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002de0:	f023 031f 	bic.w	r3, r3, #31
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0203 	bic.w	r2, r2, #3
 8002e06:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68d9      	ldr	r1, [r3, #12]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0207 	bic.w	r2, r2, #7
 8002e28:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6959      	ldr	r1, [r3, #20]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 020f 	bic.w	r2, r2, #15
 8002e56:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6919      	ldr	r1, [r3, #16]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 020e 	bic.w	r2, r2, #14
 8002e7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	005a      	lsls	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d110      	bne.n	8002ec0 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eac:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6919      	ldr	r1, [r3, #16]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ece:	f023 030f 	bic.w	r3, r3, #15
 8002ed2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ef4:	f023 030f 	bic.w	r3, r3, #15
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f1e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f40:	f023 0303 	bic.w	r3, r3, #3
 8002f44:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f8c:	f023 0303 	bic.w	r3, r3, #3
 8002f90:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002ffa:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	041a      	lsls	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800301e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6999      	ldr	r1, [r3, #24]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7c1b      	ldrb	r3, [r3, #16]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_DSI_ConfigFlowControl+0x16>
 8003146:	2302      	movs	r3, #2
 8003148:	e016      	b.n	8003178 <HAL_DSI_ConfigFlowControl+0x44>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 021f 	bic.w	r2, r2, #31
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7c1b      	ldrb	r3, [r3, #16]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_DSI_ConfigPhyTimer+0x16>
 8003196:	2302      	movs	r3, #2
 8003198:	e058      	b.n	800324c <HAL_DSI_ConfigPhyTimer+0xc8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf38      	it	cc
 80031ac:	4613      	movcc	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80031c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80031ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003228:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7c1b      	ldrb	r3, [r3, #16]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_DSI_ConfigHostTimeouts+0x16>
 800326a:	2302      	movs	r3, #2
 800326c:	e0b4      	b.n	80033d8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003282:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b292      	uxth	r2, r2
 80032a4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7c1b      	ldrb	r3, [r3, #16]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_DSI_Start+0x14>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e02b      	b.n	8003450 <HAL_DSI_Start+0x6c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0208 	orr.w	r2, r2, #8
 8003434:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7c1b      	ldrb	r3, [r3, #16]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_DSI_Stop+0x14>
 800346c:	2302      	movs	r3, #2
 800346e:	e02b      	b.n	80034c8 <HAL_DSI_Stop+0x6c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	7c1b      	ldrb	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_DSI_ShortWrite+0x1a>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e010      	b.n	8003510 <HAL_DSI_ShortWrite+0x3c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff f8f8 	bl	80026f4 <DSI_ShortWrite>
 8003504:	4603      	mov	r3, r0
 8003506:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	741a      	strb	r2, [r3, #16]

  return status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	; 0x30
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	7c1b      	ldrb	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_DSI_LongWrite+0x1e>
 8003532:	2302      	movs	r3, #2
 8003534:	e084      	b.n	8003640 <HAL_DSI_LongWrite+0x128>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800353c:	f7fe feee 	bl	800231c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003542:	e00c      	b.n	800355e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003544:	f7fe feea 	bl	800231c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003552:	d904      	bls.n	800355e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e070      	b.n	8003640 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0eb      	beq.n	8003544 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b03      	cmp	r3, #3
 8003574:	bf28      	it	cs
 8003576:	2303      	movcs	r3, #3
 8003578:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
 800357e:	e00f      	b.n	80035a0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	4413      	add	r3, r2
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	3301      	adds	r3, #1
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	4313      	orrs	r3, r2
 8003598:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	3301      	adds	r3, #1
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3eb      	bcc.n	8003580 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80035c0:	e028      	b.n	8003614 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	bf28      	it	cs
 80035c8:	2304      	movcs	r3, #4
 80035ca:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	e00e      	b.n	80035f4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	3301      	adds	r3, #1
 80035f2:	623b      	str	r3, [r7, #32]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3ec      	bcc.n	80035d6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1d3      	bne.n	80035c2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003622:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800362a:	b2db      	uxtb	r3, r3
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	f7ff f845 	bl	80026c2 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7c1b      	ldrb	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800365a:	2302      	movs	r3, #2
 800365c:	e01b      	b.n	8003696 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003674:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	065a      	lsls	r2, r3, #25
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_FLASH_Program+0xa0>)
 80036b8:	7e1b      	ldrb	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_FLASH_Program+0x1e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e03b      	b.n	800373a <HAL_FLASH_Program+0x96>
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_FLASH_Program+0xa0>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036cc:	f000 f870 	bl	80037b0 <FLASH_WaitForLastOperation>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d12b      	bne.n	8003732 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80036e0:	783b      	ldrb	r3, [r7, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	68b8      	ldr	r0, [r7, #8]
 80036e6:	f000 f91b 	bl	8003920 <FLASH_Program_Byte>
 80036ea:	e016      	b.n	800371a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80036f2:	883b      	ldrh	r3, [r7, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68b8      	ldr	r0, [r7, #8]
 80036f8:	f000 f8ee 	bl	80038d8 <FLASH_Program_HalfWord>
 80036fc:	e00d      	b.n	800371a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d105      	bne.n	8003710 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	68b8      	ldr	r0, [r7, #8]
 800370a:	f000 f8c3 	bl	8003894 <FLASH_Program_Word>
 800370e:	e004      	b.n	800371a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f000 f88b 	bl	8003830 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800371a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800371e:	f000 f847 	bl	80037b0 <FLASH_WaitForLastOperation>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_FLASH_Program+0xa4>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_FLASH_Program+0xa4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003732:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_FLASH_Program+0xa0>)
 8003734:	2200      	movs	r2, #0
 8003736:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200003a4 	.word	0x200003a4
 8003748:	40023c00 	.word	0x40023c00

0800374c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_FLASH_Unlock+0x38>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da0b      	bge.n	8003776 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_FLASH_Unlock+0x38>)
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_FLASH_Unlock+0x3c>)
 8003762:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_FLASH_Unlock+0x38>)
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_FLASH_Unlock+0x40>)
 8003768:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_FLASH_Unlock+0x38>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da01      	bge.n	8003776 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003776:	79fb      	ldrb	r3, [r7, #7]
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40023c00 	.word	0x40023c00
 8003788:	45670123 	.word	0x45670123
 800378c:	cdef89ab 	.word	0xcdef89ab

08003790 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_FLASH_Lock+0x1c>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_FLASH_Lock+0x1c>)
 800379a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800379e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40023c00 	.word	0x40023c00

080037b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <FLASH_WaitForLastOperation+0x78>)
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80037c2:	f7fe fdab 	bl	800231c <HAL_GetTick>
 80037c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80037c8:	e010      	b.n	80037ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d00c      	beq.n	80037ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <FLASH_WaitForLastOperation+0x38>
 80037d8:	f7fe fda0 	bl	800231c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d201      	bcs.n	80037ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e019      	b.n	8003820 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <FLASH_WaitForLastOperation+0x7c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e8      	bne.n	80037ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <FLASH_WaitForLastOperation+0x7c>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <FLASH_WaitForLastOperation+0x7c>)
 8003806:	2201      	movs	r2, #1
 8003808:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <FLASH_WaitForLastOperation+0x7c>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003816:	f000 f8a5 	bl	8003964 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
  
}  
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200003a4 	.word	0x200003a4
 800382c:	40023c00 	.word	0x40023c00

08003830 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4a10      	ldr	r2, [pc, #64]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 800384e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <FLASH_Program_DoubleWord+0x60>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003866:	f3bf 8f6f 	isb	sy
}
 800386a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800386c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	000a      	movs	r2, r1
 800387a:	2300      	movs	r3, #0
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	3104      	adds	r1, #4
 8003880:	4613      	mov	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40023c00 	.word	0x40023c00

08003894 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <FLASH_Program_Word+0x40>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40023c00 	.word	0x40023c00

080038d8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <FLASH_Program_HalfWord+0x44>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <FLASH_Program_HalfWord+0x44>)
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <FLASH_Program_HalfWord+0x44>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <FLASH_Program_HalfWord+0x44>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <FLASH_Program_HalfWord+0x44>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <FLASH_Program_HalfWord+0x44>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	801a      	strh	r2, [r3, #0]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023c00 	.word	0x40023c00

08003920 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <FLASH_Program_Byte+0x40>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <FLASH_Program_Byte+0x40>)
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <FLASH_Program_Byte+0x40>)
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <FLASH_Program_Byte+0x40>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <FLASH_Program_Byte+0x40>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4a06      	ldr	r2, [pc, #24]	; (8003960 <FLASH_Program_Byte+0x40>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	701a      	strb	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023c00 	.word	0x40023c00

08003964 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003968:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003974:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f043 0310 	orr.w	r3, r3, #16
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 800397e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003980:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 8003982:	2210      	movs	r2, #16
 8003984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f043 0308 	orr.w	r3, r3, #8
 800399a:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 800399c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039a0:	2220      	movs	r2, #32
 80039a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039be:	2240      	movs	r2, #64	; 0x40
 80039c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 80039f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 80039fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <FLASH_SetErrorCode+0xc8>)
 8003a16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <FLASH_SetErrorCode+0xc4>)
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	60da      	str	r2, [r3, #12]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	200003a4 	.word	0x200003a4

08003a30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a42:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_FLASHEx_Erase+0xdc>)
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_FLASHEx_Erase+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e05a      	b.n	8003b04 <HAL_FLASHEx_Erase+0xd4>
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_FLASHEx_Erase+0xdc>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a58:	f7ff feaa 	bl	80037b0 <FLASH_WaitForLastOperation>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d14a      	bne.n	8003afc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d117      	bne.n	8003aa6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 f846 	bl	8003b14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a8c:	f7ff fe90 	bl	80037b0 <FLASH_WaitForLastOperation>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_FLASHEx_Erase+0xe0>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_FLASHEx_Erase+0xe0>)
 8003a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6113      	str	r3, [r2, #16]
 8003aa4:	e028      	b.n	8003af8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	e01c      	b.n	8003ae8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f000 f866 	bl	8003b88 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003abc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ac0:	f7ff fe76 	bl	80037b0 <FLASH_WaitForLastOperation>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_FLASHEx_Erase+0xe0>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <HAL_FLASHEx_Erase+0xe0>)
 8003ace:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ad2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	601a      	str	r2, [r3, #0]
          break;
 8003ae0:	e00a      	b.n	8003af8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3da      	bcc.n	8003aae <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003af8:	f000 f894 	bl	8003c24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_FLASHEx_Erase+0xdc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	761a      	strb	r2, [r3, #24]

  return status;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200003a4 	.word	0x200003a4
 8003b10:	40023c00 	.word	0x40023c00

08003b14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d108      	bne.n	8003b44 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6113      	str	r3, [r2, #16]
 8003b42:	e00f      	b.n	8003b64 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d106      	bne.n	8003b58 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6113      	str	r3, [r2, #16]
 8003b56:	e005      	b.n	8003b64 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <FLASH_MassErase+0x70>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6113      	str	r3, [r2, #16]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e010      	b.n	8003bc6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d103      	bne.n	8003bb2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e009      	b.n	8003bc6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d103      	bne.n	8003bc0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b0b      	cmp	r3, #11
 8003bca:	d902      	bls.n	8003bd2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	490f      	ldr	r1, [pc, #60]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003bf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003c02:	f043 0302 	orr.w	r3, r3, #2
 8003c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <FLASH_Erase_Sector+0x98>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	6113      	str	r3, [r2, #16]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d017      	beq.n	8003c64 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c3e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a16      	ldr	r2, [pc, #88]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c56:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c58:	4b14      	ldr	r3, [pc, #80]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c62:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c92:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <FLASH_FlushCaches+0x88>)
 8003c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e177      	b.n	8003fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 8166 	bne.w	8003fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d130      	bne.n	8003d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80c0 	beq.w	8003fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e52:	4a61      	ldr	r2, [pc, #388]	; (8003fd8 <HAL_GPIO_Init+0x328>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_GPIO_Init+0x32c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d037      	beq.n	8003eee <HAL_GPIO_Init+0x23e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a57      	ldr	r2, [pc, #348]	; (8003fe0 <HAL_GPIO_Init+0x330>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_GPIO_Init+0x23a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_GPIO_Init+0x236>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a55      	ldr	r2, [pc, #340]	; (8003fe8 <HAL_GPIO_Init+0x338>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_Init+0x232>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a54      	ldr	r2, [pc, #336]	; (8003fec <HAL_GPIO_Init+0x33c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_Init+0x22e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a53      	ldr	r2, [pc, #332]	; (8003ff0 <HAL_GPIO_Init+0x340>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_Init+0x22a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_GPIO_Init+0x344>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0x226>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a51      	ldr	r2, [pc, #324]	; (8003ff8 <HAL_GPIO_Init+0x348>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_Init+0x222>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a50      	ldr	r2, [pc, #320]	; (8003ffc <HAL_GPIO_Init+0x34c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x21e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a4f      	ldr	r2, [pc, #316]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_Init+0x21a>
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	e012      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eca:	230a      	movs	r3, #10
 8003ecc:	e010      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e00e      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00c      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ed6:	2306      	movs	r3, #6
 8003ed8:	e00a      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eda:	2305      	movs	r3, #5
 8003edc:	e008      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e004      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	f002 0203 	and.w	r2, r2, #3
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4093      	lsls	r3, r2
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f00:	4935      	ldr	r1, [pc, #212]	; (8003fd8 <HAL_GPIO_Init+0x328>)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	3302      	adds	r3, #2
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f5c:	4a29      	ldr	r2, [pc, #164]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f86:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <HAL_GPIO_Init+0x354>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	f67f ae84 	bls.w	8003ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40020400 	.word	0x40020400
 8003fe4:	40020800 	.word	0x40020800
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40021400 	.word	0x40021400
 8003ff4:	40021800 	.word	0x40021800
 8003ff8:	40021c00 	.word	0x40021c00
 8003ffc:	40022000 	.word	0x40022000
 8004000:	40022400 	.word	0x40022400
 8004004:	40013c00 	.word	0x40013c00

08004008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	4613      	mov	r3, r2
 8004016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004018:	787b      	ldrb	r3, [r7, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004024:	e003      	b.n	800402e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0bf      	b.n	80041ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fb2e 	bl	80016c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800407e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004094:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_LTDC_Init+0x19c>)
 80040b0:	400b      	ands	r3, r1
 80040b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68d9      	ldr	r1, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_LTDC_Init+0x19c>)
 80040de:	400b      	ands	r3, r1
 80040e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68d9      	ldr	r1, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <HAL_LTDC_Init+0x19c>)
 800410c:	400b      	ands	r3, r1
 800410e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6919      	ldr	r1, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6959      	ldr	r1, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_LTDC_Init+0x19c>)
 800413a:	400b      	ands	r3, r1
 800413c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6959      	ldr	r1, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0206 	orr.w	r2, r2, #6
 80041aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	f000f800 	.word	0xf000f800

080041dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d023      	beq.n	8004246 <HAL_LTDC_IRQHandler+0x6a>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01e      	beq.n	8004246 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd fac3 	bl	80017cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_LTDC_IRQHandler+0xbc>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01e      	beq.n	8004298 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0202 	bic.w	r2, r2, #2
 8004268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2202      	movs	r2, #2
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fa9a 	bl	80017cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <HAL_LTDC_IRQHandler+0xfe>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d016      	beq.n	80042da <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f825 	bl	8004324 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_LTDC_IRQHandler+0x140>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2208      	movs	r2, #8
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f80e 	bl	8004338 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800434c:	b5b0      	push	{r4, r5, r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_LTDC_ConfigLayer+0x1a>
 8004362:	2302      	movs	r3, #2
 8004364:	e02c      	b.n	80043c0 <HAL_LTDC_ConfigLayer+0x74>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2134      	movs	r1, #52	; 0x34
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800438e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f811 	bl	80043c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bdb0      	pop	{r4, r5, r7, pc}

080043c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	4413      	add	r3, r2
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4413      	add	r3, r2
 80043f6:	3384      	adds	r3, #132	; 0x84
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	4611      	mov	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	01d2      	lsls	r2, r2, #7
 8004404:	440a      	add	r2, r1
 8004406:	3284      	adds	r2, #132	; 0x84
 8004408:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800440c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800441e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004420:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	01db      	lsls	r3, r3, #7
 800442c:	440b      	add	r3, r1
 800442e:	3384      	adds	r3, #132	; 0x84
 8004430:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004436:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004446:	4413      	add	r3, r2
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	4413      	add	r3, r2
 8004458:	3384      	adds	r3, #132	; 0x84
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	4611      	mov	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	01d2      	lsls	r2, r2, #7
 8004466:	440a      	add	r2, r1
 8004468:	3284      	adds	r2, #132	; 0x84
 800446a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800446e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447e:	4413      	add	r3, r2
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4619      	mov	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	01db      	lsls	r3, r3, #7
 800448c:	440b      	add	r3, r1
 800448e:	3384      	adds	r3, #132	; 0x84
 8004490:	4619      	mov	r1, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	01db      	lsls	r3, r3, #7
 80044a2:	4413      	add	r3, r2
 80044a4:	3384      	adds	r3, #132	; 0x84
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	4611      	mov	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	01d2      	lsls	r2, r2, #7
 80044b2:	440a      	add	r2, r1
 80044b4:	3284      	adds	r2, #132	; 0x84
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	4413      	add	r3, r2
 80044c8:	3384      	adds	r3, #132	; 0x84
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	01db      	lsls	r3, r3, #7
 80044f8:	4413      	add	r3, r2
 80044fa:	3384      	adds	r3, #132	; 0x84
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	01db      	lsls	r3, r3, #7
 8004508:	4413      	add	r3, r2
 800450a:	3384      	adds	r3, #132	; 0x84
 800450c:	461a      	mov	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004518:	461a      	mov	r2, r3
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	431a      	orrs	r2, r3
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	01db      	lsls	r3, r3, #7
 800452c:	440b      	add	r3, r1
 800452e:	3384      	adds	r3, #132	; 0x84
 8004530:	4619      	mov	r1, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	01db      	lsls	r3, r3, #7
 8004542:	4413      	add	r3, r2
 8004544:	3384      	adds	r3, #132	; 0x84
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4611      	mov	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	01d2      	lsls	r2, r2, #7
 8004552:	440a      	add	r2, r1
 8004554:	3284      	adds	r2, #132	; 0x84
 8004556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800455a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	01db      	lsls	r3, r3, #7
 8004566:	4413      	add	r3, r2
 8004568:	3384      	adds	r3, #132	; 0x84
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	4413      	add	r3, r2
 800457e:	3384      	adds	r3, #132	; 0x84
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	4611      	mov	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	01d2      	lsls	r2, r2, #7
 800458c:	440a      	add	r2, r1
 800458e:	3284      	adds	r2, #132	; 0x84
 8004590:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004594:	f023 0307 	bic.w	r3, r3, #7
 8004598:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	6809      	ldr	r1, [r1, #0]
 80045a6:	4608      	mov	r0, r1
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	01c9      	lsls	r1, r1, #7
 80045ac:	4401      	add	r1, r0
 80045ae:	3184      	adds	r1, #132	; 0x84
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	01db      	lsls	r3, r3, #7
 80045be:	4413      	add	r3, r2
 80045c0:	3384      	adds	r3, #132	; 0x84
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	4413      	add	r3, r2
 80045d0:	3384      	adds	r3, #132	; 0x84
 80045d2:	461a      	mov	r2, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	01db      	lsls	r3, r3, #7
 80045e2:	4413      	add	r3, r2
 80045e4:	3384      	adds	r3, #132	; 0x84
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80045f6:	2304      	movs	r3, #4
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e01b      	b.n	8004634 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d102      	bne.n	800460a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004604:	2303      	movs	r3, #3
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e014      	b.n	8004634 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d00b      	beq.n	800462a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004616:	2b02      	cmp	r3, #2
 8004618:	d007      	beq.n	800462a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800461e:	2b03      	cmp	r3, #3
 8004620:	d003      	beq.n	800462a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004626:	2b07      	cmp	r3, #7
 8004628:	d102      	bne.n	8004630 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800462a:	2302      	movs	r3, #2
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e001      	b.n	8004634 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004630:	2301      	movs	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4413      	add	r3, r2
 8004640:	3384      	adds	r3, #132	; 0x84
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4611      	mov	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	01d2      	lsls	r2, r2, #7
 800464e:	440a      	add	r2, r1
 8004650:	3284      	adds	r2, #132	; 0x84
 8004652:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004656:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1acb      	subs	r3, r1, r3
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	6809      	ldr	r1, [r1, #0]
 800467a:	4608      	mov	r0, r1
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	01c9      	lsls	r1, r1, #7
 8004680:	4401      	add	r1, r0
 8004682:	3184      	adds	r1, #132	; 0x84
 8004684:	4313      	orrs	r3, r2
 8004686:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	01db      	lsls	r3, r3, #7
 8004692:	4413      	add	r3, r2
 8004694:	3384      	adds	r3, #132	; 0x84
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4611      	mov	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	01d2      	lsls	r2, r2, #7
 80046a2:	440a      	add	r2, r1
 80046a4:	3284      	adds	r2, #132	; 0x84
 80046a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	4413      	add	r3, r2
 80046bc:	3384      	adds	r3, #132	; 0x84
 80046be:	461a      	mov	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	4413      	add	r3, r2
 80046d2:	3384      	adds	r3, #132	; 0x84
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	4611      	mov	r1, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	01d2      	lsls	r2, r2, #7
 80046e0:	440a      	add	r2, r1
 80046e2:	3284      	adds	r2, #132	; 0x84
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6013      	str	r3, [r2, #0]
}
 80046ea:	bf00      	nop
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_PWREx_EnableOverDrive+0x94>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004724:	f7fd fdfa 	bl	800231c <HAL_GetTick>
 8004728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800472a:	e009      	b.n	8004740 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800472c:	f7fd fdf6 	bl	800231c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473a:	d901      	bls.n	8004740 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e01f      	b.n	8004780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004740:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_PWREx_EnableOverDrive+0x98>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d1ee      	bne.n	800472c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004754:	f7fd fde2 	bl	800231c <HAL_GetTick>
 8004758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800475a:	e009      	b.n	8004770 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800475c:	f7fd fdde 	bl	800231c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476a:	d901      	bls.n	8004770 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e007      	b.n	8004780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <HAL_PWREx_EnableOverDrive+0x98>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477c:	d1ee      	bne.n	800475c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	420e0040 	.word	0x420e0040
 8004790:	40007000 	.word	0x40007000
 8004794:	420e0044 	.word	0x420e0044

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fd fd48 	bl	800231c <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fd fd44 	bl	800231c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fca8 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08007b24 	.word	0x08007b24
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b094      	sub	sp, #80	; 0x50
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	647b      	str	r3, [r7, #68]	; 0x44
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	2300      	movs	r3, #0
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b79      	ldr	r3, [pc, #484]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80e1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0db      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800499c:	e0db      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a2:	e0d8      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	0159      	lsls	r1, r3, #5
 80049e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e8:	0150      	lsls	r0, r2, #5
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4621      	mov	r1, r4
 80049f0:	1a51      	subs	r1, r2, r1
 80049f2:	6139      	str	r1, [r7, #16]
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	018b      	lsls	r3, r1, #6
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a12:	4651      	mov	r1, sl
 8004a14:	018a      	lsls	r2, r1, #6
 8004a16:	4651      	mov	r1, sl
 8004a18:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	eb18 0303 	adds.w	r3, r8, r3
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	462b      	mov	r3, r5
 8004a44:	eb49 0303 	adc.w	r3, r9, r3
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a56:	4629      	mov	r1, r5
 8004a58:	024b      	lsls	r3, r1, #9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a60:	4621      	mov	r1, r4
 8004a62:	024a      	lsls	r2, r1, #9
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a74:	f7fb fc2c 	bl	80002d0 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a80:	e058      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aae:	0150      	lsls	r0, r2, #5
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	464b      	mov	r3, r9
 8004af8:	eb45 0303 	adc.w	r3, r5, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	61fa      	str	r2, [r7, #28]
 8004b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b28:	f7fb fbd2 	bl	80002d0 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3750      	adds	r7, #80	; 0x50
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000000 	.word	0x20000000

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08007b34 	.word	0x08007b34

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb4:	f7ff ffdc 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08007b34 	.word	0x08007b34

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c00:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	4963      	ldr	r1, [pc, #396]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004c22:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	495a      	ldr	r1, [pc, #360]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d075      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c5c:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fd fb5b 	bl	800231c <HAL_GetTick>
 8004c66:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c6a:	f7fd fb57 	bl	800231c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1dc      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c7c:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	019a      	lsls	r2, r3, #6
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	071b      	lsls	r3, r3, #28
 8004ca0:	493e      	ldr	r1, [pc, #248]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01f      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	0f1b      	lsrs	r3, r3, #28
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	019a      	lsls	r2, r3, #6
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	071b      	lsls	r3, r3, #28
 8004cd4:	4931      	ldr	r1, [pc, #196]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce2:	f023 021f 	bic.w	r2, r3, #31
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	492b      	ldr	r1, [pc, #172]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	019a      	lsls	r2, r3, #6
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	071b      	lsls	r3, r3, #28
 8004d14:	4921      	ldr	r1, [pc, #132]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d1c:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fd fafb 	bl	800231c <HAL_GetTick>
 8004d26:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d2a:	f7fd faf7 	bl	800231c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e17c      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10c      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80ce 	beq.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	f040 80c8 	bne.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d80:	f7fd facc 	bl	800231c <HAL_GetTick>
 8004d84:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d86:	e00f      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d88:	f7fd fac8 	bl	800231c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d908      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e14d      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	42470068 	.word	0x42470068
 8004da4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004da8:	4ba5      	ldr	r3, [pc, #660]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db4:	d0e8      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d02e      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004dc2:	4b9f      	ldr	r3, [pc, #636]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dd4:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	0f1b      	lsrs	r3, r3, #28
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	019a      	lsls	r2, r3, #6
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	3b01      	subs	r3, #1
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	071b      	lsls	r3, r3, #28
 8004dfe:	4990      	ldr	r1, [pc, #576]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e06:	4b8e      	ldr	r3, [pc, #568]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	3b01      	subs	r3, #1
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	4989      	ldr	r1, [pc, #548]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02c      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004e2c:	4b84      	ldr	r3, [pc, #528]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e3e:	4b80      	ldr	r3, [pc, #512]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	0e1b      	lsrs	r3, r3, #24
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	019a      	lsls	r2, r3, #6
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	071b      	lsls	r3, r3, #28
 8004e68:	4975      	ldr	r1, [pc, #468]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e70:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	4970      	ldr	r1, [pc, #448]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d024      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8004e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9a:	d11f      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e9c:	4b68      	ldr	r3, [pc, #416]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	0e1b      	lsrs	r3, r3, #24
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eaa:	4b65      	ldr	r3, [pc, #404]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	0f1b      	lsrs	r3, r3, #28
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	019a      	lsls	r2, r3, #6
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	071b      	lsls	r3, r3, #28
 8004ed4:	495a      	ldr	r1, [pc, #360]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004edc:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee2:	f7fd fa1b 	bl	800231c <HAL_GetTick>
 8004ee6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004eea:	f7fd fa17 	bl	800231c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e09c      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f08:	d1ef      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8083 	beq.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	4b48      	ldr	r3, [pc, #288]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	4a47      	ldr	r2, [pc, #284]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6413      	str	r3, [r2, #64]	; 0x40
 8004f28:	4b45      	ldr	r3, [pc, #276]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f34:	4b44      	ldr	r3, [pc, #272]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f40:	f7fd f9ec 	bl	800231c <HAL_GetTick>
 8004f44:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fd f9e8 	bl	800231c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e06d      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f66:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d02f      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d028      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f84:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f8e:	4b2f      	ldr	r3, [pc, #188]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f94:	4b2d      	ldr	r3, [pc, #180]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f9a:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d114      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fd f9b6 	bl	800231c <HAL_GetTick>
 8004fb0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fd f9b2 	bl	800231c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e035      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ee      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004fe4:	4b16      	ldr	r3, [pc, #88]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	4911      	ldr	r1, [pc, #68]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
 8004ffe:	e005      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005006:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800500a:	6093      	str	r3, [r2, #8]
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800500e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005018:	4909      	ldr	r1, [pc, #36]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800501a:	4313      	orrs	r3, r2
 800501c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005032:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	42470070 	.word	0x42470070
 8005048:	40007000 	.word	0x40007000
 800504c:	42470e40 	.word	0x42470e40
 8005050:	424711e0 	.word	0x424711e0

08005054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e273      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e24e      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd f906 	bl	800231c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd f902 	bl	800231c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e213      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd f8f2 	bl	800231c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fd f8ee 	bl	800231c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1ff      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b44      	ldr	r3, [pc, #272]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1d3      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fd f8a7 	bl	800231c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fd f8a3 	bl	800231c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1b4      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd f886 	bl	800231c <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005214:	f7fd f882 	bl	800231c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e193      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd f866 	bl	800231c <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005254:	f7fd f862 	bl	800231c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e173      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527a:	f7fd f84f 	bl	800231c <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd f84b 	bl	800231c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e15c      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	4b8a      	ldr	r3, [pc, #552]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b83      	ldr	r3, [pc, #524]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7f      	ldr	r3, [pc, #508]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4a7e      	ldr	r2, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
 80052da:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b79      	ldr	r3, [pc, #484]	; (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b76      	ldr	r3, [pc, #472]	; (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	; (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd f80b 	bl	800231c <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd f807 	bl	800231c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e118      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b6c      	ldr	r3, [pc, #432]	; (80054d0 <HAL_RCC_OscConfig+0x47c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b66      	ldr	r3, [pc, #408]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a65      	ldr	r2, [pc, #404]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b61      	ldr	r3, [pc, #388]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a60      	ldr	r2, [pc, #384]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	; 0x70
 8005352:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	4a5d      	ldr	r2, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	; 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b5a      	ldr	r3, [pc, #360]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a59      	ldr	r2, [pc, #356]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	4b57      	ldr	r3, [pc, #348]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4a56      	ldr	r2, [pc, #344]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fc ffcc 	bl	800231c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fc ffc8 	bl	800231c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0d7      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fc ffb6 	bl	800231c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fc ffb2 	bl	800231c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0c1      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b40      	ldr	r3, [pc, #256]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	4a3a      	ldr	r2, [pc, #232]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80ad 	beq.w	800554c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f2:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d060      	beq.n	80054c0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d145      	bne.n	8005492 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b33      	ldr	r3, [pc, #204]	; (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc ff86 	bl	800231c <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc ff82 	bl	800231c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e093      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	491b      	ldr	r1, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fc ff57 	bl	800231c <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005472:	f7fc ff53 	bl	800231c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e064      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x41e>
 8005490:	e05c      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fc ff40 	bl	800231c <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc ff3c 	bl	800231c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e04d      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x44c>
 80054be:	e045      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e040      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40007000 	.word	0x40007000
 80054d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d8:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <HAL_RCC_OscConfig+0x504>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d030      	beq.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d129      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d122      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800550e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005510:	4293      	cmp	r3, r2
 8005512:	d119      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	3b01      	subs	r3, #1
 8005522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d10f      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800

0800555c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e03f      	b.n	80055ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fd40 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fddf 	bl	8006164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08a      	sub	sp, #40	; 0x28
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b20      	cmp	r3, #32
 8005614:	d17c      	bne.n	8005710 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_UART_Transmit+0x2c>
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e075      	b.n	8005712 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Transmit+0x3e>
 8005630:	2302      	movs	r3, #2
 8005632:	e06e      	b.n	8005712 <HAL_UART_Transmit+0x11c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2221      	movs	r2, #33	; 0x21
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564a:	f7fc fe67 	bl	800231c <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d108      	bne.n	8005678 <HAL_UART_Transmit+0x82>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e003      	b.n	8005680 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005688:	e02a      	b.n	80056e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fb1f 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e036      	b.n	8005712 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3302      	adds	r3, #2
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e007      	b.n	80056d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1cf      	bne.n	800568a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 faef 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e006      	b.n	8005712 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b20      	cmp	r3, #32
 8005732:	d11d      	bne.n	8005770 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Receive_IT+0x26>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e016      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x38>
 800574e:	2302      	movs	r3, #2
 8005750:	e00f      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	461a      	mov	r2, r3
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fb24 	bl	8005db4 <UART_Start_Receive_IT>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b0ba      	sub	sp, #232	; 0xe8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_UART_IRQHandler+0x66>
 80057ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fc07 	bl	8005fee <UART_Receive_IT>
      return;
 80057e0:	e256      	b.n	8005c90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80de 	beq.w	80059a8 <HAL_UART_IRQHandler+0x22c>
 80057ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80d1 	beq.w	80059a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <HAL_UART_IRQHandler+0xae>
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_UART_IRQHandler+0xd2>
 8005836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0202 	orr.w	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_UART_IRQHandler+0xf6>
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d011      	beq.n	80058a2 <HAL_UART_IRQHandler+0x126>
 800587e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800588a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0208 	orr.w	r2, r3, #8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 81ed 	beq.w	8005c86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_UART_IRQHandler+0x14e>
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb92 	bl	8005fee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <HAL_UART_IRQHandler+0x17a>
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d04f      	beq.n	8005996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa9a 	bl	8005e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	d141      	bne.n	800598e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800593a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800594e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1d9      	bne.n	800590a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	2b00      	cmp	r3, #0
 800595c:	d013      	beq.n	8005986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	4a7d      	ldr	r2, [pc, #500]	; (8005b58 <HAL_UART_IRQHandler+0x3dc>)
 8005964:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	4618      	mov	r0, r3
 800596c:	f7fc fe87 	bl	800267e <HAL_DMA_Abort_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e00e      	b.n	80059a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f990 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	e00a      	b.n	80059a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f98c 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	e006      	b.n	80059a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f988 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059a2:	e170      	b.n	8005c86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	bf00      	nop
    return;
 80059a6:	e16e      	b.n	8005c86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 814a 	bne.w	8005c46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8143 	beq.w	8005c46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 813c 	beq.w	8005c46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	f040 80b4 	bne.w	8005b5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8140 	beq.w	8005c8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a12:	429a      	cmp	r2, r3
 8005a14:	f080 8139 	bcs.w	8005c8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	f000 8088 	beq.w	8005b3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e1      	bne.n	8005a7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e3      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0e:	f023 0310 	bic.w	r3, r3, #16
 8005b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b20:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e3      	bne.n	8005afc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fc fd30 	bl	800259e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8b6 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b54:	e099      	b.n	8005c8a <HAL_UART_IRQHandler+0x50e>
 8005b56:	bf00      	nop
 8005b58:	08005ef7 	.word	0x08005ef7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 808b 	beq.w	8005c8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8086 	beq.w	8005c8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e3      	bne.n	8005b82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bde:	633a      	str	r2, [r7, #48]	; 0x30
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e3      	bne.n	8005bba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0310 	bic.w	r3, r3, #16
 8005c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c24:	61fa      	str	r2, [r7, #28]
 8005c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	617b      	str	r3, [r7, #20]
   return(result);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e3      	bne.n	8005c00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f83e 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c44:	e023      	b.n	8005c8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_UART_IRQHandler+0x4ea>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f95d 	bl	8005f1e <UART_Transmit_IT>
    return;
 8005c64:	e014      	b.n	8005c90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <HAL_UART_IRQHandler+0x514>
 8005c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f99d 	bl	8005fbe <UART_EndTransmit_IT>
    return;
 8005c84:	e004      	b.n	8005c90 <HAL_UART_IRQHandler+0x514>
    return;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <HAL_UART_IRQHandler+0x514>
      return;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <HAL_UART_IRQHandler+0x514>
      return;
 8005c8e:	bf00      	nop
  }
}
 8005c90:	37e8      	adds	r7, #232	; 0xe8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop

08005c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b090      	sub	sp, #64	; 0x40
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce8:	e050      	b.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d04c      	beq.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf8:	f7fc fb10 	bl	800231c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d241      	bcs.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d28:	637a      	str	r2, [r7, #52]	; 0x34
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e5      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d5c:	623a      	str	r2, [r7, #32]
 8005d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	6a3a      	ldr	r2, [r7, #32]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e00f      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d09f      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3740      	adds	r7, #64	; 0x40
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2222      	movs	r2, #34	; 0x22
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0220 	orr.w	r2, r2, #32
 8005e20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b095      	sub	sp, #84	; 0x54
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e58:	643a      	str	r2, [r7, #64]	; 0x40
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e5      	bne.n	8005e6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d119      	bne.n	8005edc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f023 0310 	bic.w	r3, r3, #16
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec8:	61ba      	str	r2, [r7, #24]
 8005eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005eea:	bf00      	nop
 8005eec:	3754      	adds	r7, #84	; 0x54
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fecb 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b21      	cmp	r3, #33	; 0x21
 8005f30:	d13e      	bne.n	8005fb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d114      	bne.n	8005f66 <UART_Transmit_IT+0x48>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d110      	bne.n	8005f66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	1c9a      	adds	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	621a      	str	r2, [r3, #32]
 8005f64:	e008      	b.n	8005f78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	1c59      	adds	r1, r3, #1
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6211      	str	r1, [r2, #32]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4619      	mov	r1, r3
 8005f86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10f      	bne.n	8005fac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005faa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
  }
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fe5a 	bl	8005c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b08c      	sub	sp, #48	; 0x30
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b22      	cmp	r3, #34	; 0x22
 8006000:	f040 80ab 	bne.w	800615a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600c:	d117      	bne.n	800603e <UART_Receive_IT+0x50>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d113      	bne.n	800603e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	b29a      	uxth	r2, r3
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
 800603c:	e026      	b.n	800608c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d007      	beq.n	8006062 <UART_Receive_IT+0x74>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <UART_Receive_IT+0x82>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e008      	b.n	8006082 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29b      	uxth	r3, r3
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4619      	mov	r1, r3
 800609a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800609c:	2b00      	cmp	r3, #0
 800609e:	d15a      	bne.n	8006156 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0220 	bic.w	r2, r2, #32
 80060ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d135      	bne.n	800614c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f023 0310 	bic.w	r3, r3, #16
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	623a      	str	r2, [r7, #32]
 8006108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	69f9      	ldr	r1, [r7, #28]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	61bb      	str	r3, [r7, #24]
   return(result);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b10      	cmp	r3, #16
 8006126:	d10a      	bne.n	800613e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fdbb 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
 800614a:	e002      	b.n	8006152 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fb ffab 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e002      	b.n	800615c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	; 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006168:	b0c0      	sub	sp, #256	; 0x100
 800616a:	af00      	add	r7, sp, #0
 800616c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	68d9      	ldr	r1, [r3, #12]
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	ea40 0301 	orr.w	r3, r0, r1
 800618c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	431a      	orrs	r2, r3
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061bc:	f021 010c 	bic.w	r1, r1, #12
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ca:	430b      	orrs	r3, r1
 80061cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061de:	6999      	ldr	r1, [r3, #24]
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	ea40 0301 	orr.w	r3, r0, r1
 80061ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b8f      	ldr	r3, [pc, #572]	; (8006430 <UART_SetConfig+0x2cc>)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d005      	beq.n	8006204 <UART_SetConfig+0xa0>
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b8d      	ldr	r3, [pc, #564]	; (8006434 <UART_SetConfig+0x2d0>)
 8006200:	429a      	cmp	r2, r3
 8006202:	d104      	bne.n	800620e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006204:	f7fe fcd4 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8006208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800620c:	e003      	b.n	8006216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800620e:	f7fe fcbb 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8006212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006220:	f040 810c 	bne.w	800643c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800622e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	1891      	adds	r1, r2, r2
 800623c:	65b9      	str	r1, [r7, #88]	; 0x58
 800623e:	415b      	adcs	r3, r3
 8006240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006246:	4621      	mov	r1, r4
 8006248:	eb12 0801 	adds.w	r8, r2, r1
 800624c:	4629      	mov	r1, r5
 800624e:	eb43 0901 	adc.w	r9, r3, r1
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800625e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006266:	4690      	mov	r8, r2
 8006268:	4699      	mov	r9, r3
 800626a:	4623      	mov	r3, r4
 800626c:	eb18 0303 	adds.w	r3, r8, r3
 8006270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006274:	462b      	mov	r3, r5
 8006276:	eb49 0303 	adc.w	r3, r9, r3
 800627a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800628a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800628e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006292:	460b      	mov	r3, r1
 8006294:	18db      	adds	r3, r3, r3
 8006296:	653b      	str	r3, [r7, #80]	; 0x50
 8006298:	4613      	mov	r3, r2
 800629a:	eb42 0303 	adc.w	r3, r2, r3
 800629e:	657b      	str	r3, [r7, #84]	; 0x54
 80062a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062a8:	f7fa f812 	bl	80002d0 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4b61      	ldr	r3, [pc, #388]	; (8006438 <UART_SetConfig+0x2d4>)
 80062b2:	fba3 2302 	umull	r2, r3, r3, r2
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	011c      	lsls	r4, r3, #4
 80062ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	1891      	adds	r1, r2, r2
 80062d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80062d4:	415b      	adcs	r3, r3
 80062d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062dc:	4641      	mov	r1, r8
 80062de:	eb12 0a01 	adds.w	sl, r2, r1
 80062e2:	4649      	mov	r1, r9
 80062e4:	eb43 0b01 	adc.w	fp, r3, r1
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fc:	4692      	mov	sl, r2
 80062fe:	469b      	mov	fp, r3
 8006300:	4643      	mov	r3, r8
 8006302:	eb1a 0303 	adds.w	r3, sl, r3
 8006306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630a:	464b      	mov	r3, r9
 800630c:	eb4b 0303 	adc.w	r3, fp, r3
 8006310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006328:	460b      	mov	r3, r1
 800632a:	18db      	adds	r3, r3, r3
 800632c:	643b      	str	r3, [r7, #64]	; 0x40
 800632e:	4613      	mov	r3, r2
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800633a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800633e:	f7f9 ffc7 	bl	80002d0 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4611      	mov	r1, r2
 8006348:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <UART_SetConfig+0x2d4>)
 800634a:	fba3 2301 	umull	r2, r3, r3, r1
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	2264      	movs	r2, #100	; 0x64
 8006352:	fb02 f303 	mul.w	r3, r2, r3
 8006356:	1acb      	subs	r3, r1, r3
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <UART_SetConfig+0x2d4>)
 8006360:	fba3 2302 	umull	r2, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800636c:	441c      	add	r4, r3
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800637c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	1891      	adds	r1, r2, r2
 8006386:	63b9      	str	r1, [r7, #56]	; 0x38
 8006388:	415b      	adcs	r3, r3
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800638c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006390:	4641      	mov	r1, r8
 8006392:	1851      	adds	r1, r2, r1
 8006394:	6339      	str	r1, [r7, #48]	; 0x30
 8006396:	4649      	mov	r1, r9
 8006398:	414b      	adcs	r3, r1
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063a8:	4659      	mov	r1, fp
 80063aa:	00cb      	lsls	r3, r1, #3
 80063ac:	4651      	mov	r1, sl
 80063ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b2:	4651      	mov	r1, sl
 80063b4:	00ca      	lsls	r2, r1, #3
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	4642      	mov	r2, r8
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063c4:	464b      	mov	r3, r9
 80063c6:	460a      	mov	r2, r1
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063e4:	460b      	mov	r3, r1
 80063e6:	18db      	adds	r3, r3, r3
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ea:	4613      	mov	r3, r2
 80063ec:	eb42 0303 	adc.w	r3, r2, r3
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063fa:	f7f9 ff69 	bl	80002d0 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <UART_SetConfig+0x2d4>)
 8006404:	fba3 1302 	umull	r1, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	2164      	movs	r1, #100	; 0x64
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	3332      	adds	r3, #50	; 0x32
 8006416:	4a08      	ldr	r2, [pc, #32]	; (8006438 <UART_SetConfig+0x2d4>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	f003 0207 	and.w	r2, r3, #7
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4422      	add	r2, r4
 800642a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800642c:	e105      	b.n	800663a <UART_SetConfig+0x4d6>
 800642e:	bf00      	nop
 8006430:	40011000 	.word	0x40011000
 8006434:	40011400 	.word	0x40011400
 8006438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800643c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006440:	2200      	movs	r2, #0
 8006442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800644a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800644e:	4642      	mov	r2, r8
 8006450:	464b      	mov	r3, r9
 8006452:	1891      	adds	r1, r2, r2
 8006454:	6239      	str	r1, [r7, #32]
 8006456:	415b      	adcs	r3, r3
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
 800645a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800645e:	4641      	mov	r1, r8
 8006460:	1854      	adds	r4, r2, r1
 8006462:	4649      	mov	r1, r9
 8006464:	eb43 0501 	adc.w	r5, r3, r1
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	00eb      	lsls	r3, r5, #3
 8006472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006476:	00e2      	lsls	r2, r4, #3
 8006478:	4614      	mov	r4, r2
 800647a:	461d      	mov	r5, r3
 800647c:	4643      	mov	r3, r8
 800647e:	18e3      	adds	r3, r4, r3
 8006480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006484:	464b      	mov	r3, r9
 8006486:	eb45 0303 	adc.w	r3, r5, r3
 800648a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800649a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064aa:	4629      	mov	r1, r5
 80064ac:	008b      	lsls	r3, r1, #2
 80064ae:	4621      	mov	r1, r4
 80064b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b4:	4621      	mov	r1, r4
 80064b6:	008a      	lsls	r2, r1, #2
 80064b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064bc:	f7f9 ff08 	bl	80002d0 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4b60      	ldr	r3, [pc, #384]	; (8006648 <UART_SetConfig+0x4e4>)
 80064c6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	011c      	lsls	r4, r3, #4
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	1891      	adds	r1, r2, r2
 80064e6:	61b9      	str	r1, [r7, #24]
 80064e8:	415b      	adcs	r3, r3
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f0:	4641      	mov	r1, r8
 80064f2:	1851      	adds	r1, r2, r1
 80064f4:	6139      	str	r1, [r7, #16]
 80064f6:	4649      	mov	r1, r9
 80064f8:	414b      	adcs	r3, r1
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006508:	4659      	mov	r1, fp
 800650a:	00cb      	lsls	r3, r1, #3
 800650c:	4651      	mov	r1, sl
 800650e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006512:	4651      	mov	r1, sl
 8006514:	00ca      	lsls	r2, r1, #3
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	4603      	mov	r3, r0
 800651c:	4642      	mov	r2, r8
 800651e:	189b      	adds	r3, r3, r2
 8006520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006524:	464b      	mov	r3, r9
 8006526:	460a      	mov	r2, r1
 8006528:	eb42 0303 	adc.w	r3, r2, r3
 800652c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	67bb      	str	r3, [r7, #120]	; 0x78
 800653a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006548:	4649      	mov	r1, r9
 800654a:	008b      	lsls	r3, r1, #2
 800654c:	4641      	mov	r1, r8
 800654e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006552:	4641      	mov	r1, r8
 8006554:	008a      	lsls	r2, r1, #2
 8006556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800655a:	f7f9 feb9 	bl	80002d0 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <UART_SetConfig+0x4e4>)
 8006564:	fba3 1302 	umull	r1, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	2164      	movs	r1, #100	; 0x64
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	3332      	adds	r3, #50	; 0x32
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <UART_SetConfig+0x4e4>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006582:	441c      	add	r4, r3
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006588:	2200      	movs	r2, #0
 800658a:	673b      	str	r3, [r7, #112]	; 0x70
 800658c:	677a      	str	r2, [r7, #116]	; 0x74
 800658e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006592:	4642      	mov	r2, r8
 8006594:	464b      	mov	r3, r9
 8006596:	1891      	adds	r1, r2, r2
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	415b      	adcs	r3, r3
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a2:	4641      	mov	r1, r8
 80065a4:	1851      	adds	r1, r2, r1
 80065a6:	6039      	str	r1, [r7, #0]
 80065a8:	4649      	mov	r1, r9
 80065aa:	414b      	adcs	r3, r1
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065ba:	4659      	mov	r1, fp
 80065bc:	00cb      	lsls	r3, r1, #3
 80065be:	4651      	mov	r1, sl
 80065c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c4:	4651      	mov	r1, sl
 80065c6:	00ca      	lsls	r2, r1, #3
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	4603      	mov	r3, r0
 80065ce:	4642      	mov	r2, r8
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d4:	464b      	mov	r3, r9
 80065d6:	460a      	mov	r2, r1
 80065d8:	eb42 0303 	adc.w	r3, r2, r3
 80065dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	663b      	str	r3, [r7, #96]	; 0x60
 80065e8:	667a      	str	r2, [r7, #100]	; 0x64
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065f6:	4649      	mov	r1, r9
 80065f8:	008b      	lsls	r3, r1, #2
 80065fa:	4641      	mov	r1, r8
 80065fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006600:	4641      	mov	r1, r8
 8006602:	008a      	lsls	r2, r1, #2
 8006604:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006608:	f7f9 fe62 	bl	80002d0 <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <UART_SetConfig+0x4e4>)
 8006612:	fba3 1302 	umull	r1, r3, r3, r2
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2164      	movs	r1, #100	; 0x64
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	3332      	adds	r3, #50	; 0x32
 8006624:	4a08      	ldr	r2, [pc, #32]	; (8006648 <UART_SetConfig+0x4e4>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	f003 020f 	and.w	r2, r3, #15
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4422      	add	r2, r4
 8006638:	609a      	str	r2, [r3, #8]
}
 800663a:	bf00      	nop
 800663c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006640:	46bd      	mov	sp, r7
 8006642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006646:	bf00      	nop
 8006648:	51eb851f 	.word	0x51eb851f

0800664c <__errno>:
 800664c:	4b01      	ldr	r3, [pc, #4]	; (8006654 <__errno+0x8>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000000c 	.word	0x2000000c

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4d0d      	ldr	r5, [pc, #52]	; (8006690 <__libc_init_array+0x38>)
 800665c:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	2600      	movs	r6, #0
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	4d0b      	ldr	r5, [pc, #44]	; (8006698 <__libc_init_array+0x40>)
 800666a:	4c0c      	ldr	r4, [pc, #48]	; (800669c <__libc_init_array+0x44>)
 800666c:	f001 f90c 	bl	8007888 <_init>
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	2600      	movs	r6, #0
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	f855 3b04 	ldr.w	r3, [r5], #4
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	08007c8c 	.word	0x08007c8c
 8006694:	08007c8c 	.word	0x08007c8c
 8006698:	08007c8c 	.word	0x08007c8c
 800669c:	08007c90 	.word	0x08007c90

080066a0 <memset>:
 80066a0:	4402      	add	r2, r0
 80066a2:	4603      	mov	r3, r0
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d100      	bne.n	80066aa <memset+0xa>
 80066a8:	4770      	bx	lr
 80066aa:	f803 1b01 	strb.w	r1, [r3], #1
 80066ae:	e7f9      	b.n	80066a4 <memset+0x4>

080066b0 <iprintf>:
 80066b0:	b40f      	push	{r0, r1, r2, r3}
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <iprintf+0x2c>)
 80066b4:	b513      	push	{r0, r1, r4, lr}
 80066b6:	681c      	ldr	r4, [r3, #0]
 80066b8:	b124      	cbz	r4, 80066c4 <iprintf+0x14>
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	b913      	cbnz	r3, 80066c4 <iprintf+0x14>
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fae0 	bl	8006c84 <__sinit>
 80066c4:	ab05      	add	r3, sp, #20
 80066c6:	9a04      	ldr	r2, [sp, #16]
 80066c8:	68a1      	ldr	r1, [r4, #8]
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fd03 	bl	80070d8 <_vfiprintf_r>
 80066d2:	b002      	add	sp, #8
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr
 80066dc:	2000000c 	.word	0x2000000c

080066e0 <_puts_r>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	460e      	mov	r6, r1
 80066e4:	4605      	mov	r5, r0
 80066e6:	b118      	cbz	r0, 80066f0 <_puts_r+0x10>
 80066e8:	6983      	ldr	r3, [r0, #24]
 80066ea:	b90b      	cbnz	r3, 80066f0 <_puts_r+0x10>
 80066ec:	f000 faca 	bl	8006c84 <__sinit>
 80066f0:	69ab      	ldr	r3, [r5, #24]
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	b913      	cbnz	r3, 80066fc <_puts_r+0x1c>
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fac4 	bl	8006c84 <__sinit>
 80066fc:	4b2c      	ldr	r3, [pc, #176]	; (80067b0 <_puts_r+0xd0>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d120      	bne.n	8006744 <_puts_r+0x64>
 8006702:	686c      	ldr	r4, [r5, #4]
 8006704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006706:	07db      	lsls	r3, r3, #31
 8006708:	d405      	bmi.n	8006716 <_puts_r+0x36>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	0598      	lsls	r0, r3, #22
 800670e:	d402      	bmi.n	8006716 <_puts_r+0x36>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 fb67 	bl	8006de4 <__retarget_lock_acquire_recursive>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d51d      	bpl.n	8006758 <_puts_r+0x78>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b1db      	cbz	r3, 8006758 <_puts_r+0x78>
 8006720:	3e01      	subs	r6, #1
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	bb39      	cbnz	r1, 800677e <_puts_r+0x9e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	da38      	bge.n	80067a4 <_puts_r+0xc4>
 8006732:	4622      	mov	r2, r4
 8006734:	210a      	movs	r1, #10
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f8ac 	bl	8006894 <__swbuf_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d011      	beq.n	8006764 <_puts_r+0x84>
 8006740:	250a      	movs	r5, #10
 8006742:	e011      	b.n	8006768 <_puts_r+0x88>
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <_puts_r+0xd4>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d101      	bne.n	800674e <_puts_r+0x6e>
 800674a:	68ac      	ldr	r4, [r5, #8]
 800674c:	e7da      	b.n	8006704 <_puts_r+0x24>
 800674e:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <_puts_r+0xd8>)
 8006750:	429c      	cmp	r4, r3
 8006752:	bf08      	it	eq
 8006754:	68ec      	ldreq	r4, [r5, #12]
 8006756:	e7d5      	b.n	8006704 <_puts_r+0x24>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f8ec 	bl	8006938 <__swsetup_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	d0dd      	beq.n	8006720 <_puts_r+0x40>
 8006764:	f04f 35ff 	mov.w	r5, #4294967295
 8006768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676a:	07da      	lsls	r2, r3, #31
 800676c:	d405      	bmi.n	800677a <_puts_r+0x9a>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d402      	bmi.n	800677a <_puts_r+0x9a>
 8006774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006776:	f000 fb36 	bl	8006de6 <__retarget_lock_release_recursive>
 800677a:	4628      	mov	r0, r5
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	2b00      	cmp	r3, #0
 8006780:	da04      	bge.n	800678c <_puts_r+0xac>
 8006782:	69a2      	ldr	r2, [r4, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	dc06      	bgt.n	8006796 <_puts_r+0xb6>
 8006788:	290a      	cmp	r1, #10
 800678a:	d004      	beq.n	8006796 <_puts_r+0xb6>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	7019      	strb	r1, [r3, #0]
 8006794:	e7c5      	b.n	8006722 <_puts_r+0x42>
 8006796:	4622      	mov	r2, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f87b 	bl	8006894 <__swbuf_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	d1bf      	bne.n	8006722 <_puts_r+0x42>
 80067a2:	e7df      	b.n	8006764 <_puts_r+0x84>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	250a      	movs	r5, #10
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	701d      	strb	r5, [r3, #0]
 80067ae:	e7db      	b.n	8006768 <_puts_r+0x88>
 80067b0:	08007c10 	.word	0x08007c10
 80067b4:	08007c30 	.word	0x08007c30
 80067b8:	08007bf0 	.word	0x08007bf0

080067bc <puts>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <puts+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f7ff bf8d 	b.w	80066e0 <_puts_r>
 80067c6:	bf00      	nop
 80067c8:	2000000c 	.word	0x2000000c

080067cc <strcpy>:
 80067cc:	4603      	mov	r3, r0
 80067ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d2:	f803 2b01 	strb.w	r2, [r3], #1
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d1f9      	bne.n	80067ce <strcpy+0x2>
 80067da:	4770      	bx	lr

080067dc <strtok>:
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <strtok+0x5c>)
 80067de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067e0:	681e      	ldr	r6, [r3, #0]
 80067e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80067e4:	4605      	mov	r5, r0
 80067e6:	b9fc      	cbnz	r4, 8006828 <strtok+0x4c>
 80067e8:	2050      	movs	r0, #80	; 0x50
 80067ea:	9101      	str	r1, [sp, #4]
 80067ec:	f000 fb62 	bl	8006eb4 <malloc>
 80067f0:	9901      	ldr	r1, [sp, #4]
 80067f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80067f4:	4602      	mov	r2, r0
 80067f6:	b920      	cbnz	r0, 8006802 <strtok+0x26>
 80067f8:	4b10      	ldr	r3, [pc, #64]	; (800683c <strtok+0x60>)
 80067fa:	4811      	ldr	r0, [pc, #68]	; (8006840 <strtok+0x64>)
 80067fc:	2157      	movs	r1, #87	; 0x57
 80067fe:	f000 f909 	bl	8006a14 <__assert_func>
 8006802:	e9c0 4400 	strd	r4, r4, [r0]
 8006806:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800680a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800680e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006812:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006816:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800681a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800681e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006822:	6184      	str	r4, [r0, #24]
 8006824:	7704      	strb	r4, [r0, #28]
 8006826:	6244      	str	r4, [r0, #36]	; 0x24
 8006828:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800682a:	2301      	movs	r3, #1
 800682c:	4628      	mov	r0, r5
 800682e:	b002      	add	sp, #8
 8006830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006834:	f000 b806 	b.w	8006844 <__strtok_r>
 8006838:	2000000c 	.word	0x2000000c
 800683c:	08007b40 	.word	0x08007b40
 8006840:	08007b57 	.word	0x08007b57

08006844 <__strtok_r>:
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006846:	b908      	cbnz	r0, 800684c <__strtok_r+0x8>
 8006848:	6810      	ldr	r0, [r2, #0]
 800684a:	b188      	cbz	r0, 8006870 <__strtok_r+0x2c>
 800684c:	4604      	mov	r4, r0
 800684e:	4620      	mov	r0, r4
 8006850:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006854:	460f      	mov	r7, r1
 8006856:	f817 6b01 	ldrb.w	r6, [r7], #1
 800685a:	b91e      	cbnz	r6, 8006864 <__strtok_r+0x20>
 800685c:	b965      	cbnz	r5, 8006878 <__strtok_r+0x34>
 800685e:	6015      	str	r5, [r2, #0]
 8006860:	4628      	mov	r0, r5
 8006862:	e005      	b.n	8006870 <__strtok_r+0x2c>
 8006864:	42b5      	cmp	r5, r6
 8006866:	d1f6      	bne.n	8006856 <__strtok_r+0x12>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <__strtok_r+0xa>
 800686c:	6014      	str	r4, [r2, #0]
 800686e:	7003      	strb	r3, [r0, #0]
 8006870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006872:	461c      	mov	r4, r3
 8006874:	e00c      	b.n	8006890 <__strtok_r+0x4c>
 8006876:	b915      	cbnz	r5, 800687e <__strtok_r+0x3a>
 8006878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800687c:	460e      	mov	r6, r1
 800687e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006882:	42ab      	cmp	r3, r5
 8006884:	d1f7      	bne.n	8006876 <__strtok_r+0x32>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f3      	beq.n	8006872 <__strtok_r+0x2e>
 800688a:	2300      	movs	r3, #0
 800688c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006890:	6014      	str	r4, [r2, #0]
 8006892:	e7ed      	b.n	8006870 <__strtok_r+0x2c>

08006894 <__swbuf_r>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	460e      	mov	r6, r1
 8006898:	4614      	mov	r4, r2
 800689a:	4605      	mov	r5, r0
 800689c:	b118      	cbz	r0, 80068a6 <__swbuf_r+0x12>
 800689e:	6983      	ldr	r3, [r0, #24]
 80068a0:	b90b      	cbnz	r3, 80068a6 <__swbuf_r+0x12>
 80068a2:	f000 f9ef 	bl	8006c84 <__sinit>
 80068a6:	4b21      	ldr	r3, [pc, #132]	; (800692c <__swbuf_r+0x98>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	d12b      	bne.n	8006904 <__swbuf_r+0x70>
 80068ac:	686c      	ldr	r4, [r5, #4]
 80068ae:	69a3      	ldr	r3, [r4, #24]
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	071a      	lsls	r2, r3, #28
 80068b6:	d52f      	bpl.n	8006918 <__swbuf_r+0x84>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	b36b      	cbz	r3, 8006918 <__swbuf_r+0x84>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	1ac0      	subs	r0, r0, r3
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	b2f6      	uxtb	r6, r6
 80068c6:	4283      	cmp	r3, r0
 80068c8:	4637      	mov	r7, r6
 80068ca:	dc04      	bgt.n	80068d6 <__swbuf_r+0x42>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f944 	bl	8006b5c <_fflush_r>
 80068d4:	bb30      	cbnz	r0, 8006924 <__swbuf_r+0x90>
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	3b01      	subs	r3, #1
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	701e      	strb	r6, [r3, #0]
 80068e4:	6963      	ldr	r3, [r4, #20]
 80068e6:	3001      	adds	r0, #1
 80068e8:	4283      	cmp	r3, r0
 80068ea:	d004      	beq.n	80068f6 <__swbuf_r+0x62>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	07db      	lsls	r3, r3, #31
 80068f0:	d506      	bpl.n	8006900 <__swbuf_r+0x6c>
 80068f2:	2e0a      	cmp	r6, #10
 80068f4:	d104      	bne.n	8006900 <__swbuf_r+0x6c>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f92f 	bl	8006b5c <_fflush_r>
 80068fe:	b988      	cbnz	r0, 8006924 <__swbuf_r+0x90>
 8006900:	4638      	mov	r0, r7
 8006902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <__swbuf_r+0x9c>)
 8006906:	429c      	cmp	r4, r3
 8006908:	d101      	bne.n	800690e <__swbuf_r+0x7a>
 800690a:	68ac      	ldr	r4, [r5, #8]
 800690c:	e7cf      	b.n	80068ae <__swbuf_r+0x1a>
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <__swbuf_r+0xa0>)
 8006910:	429c      	cmp	r4, r3
 8006912:	bf08      	it	eq
 8006914:	68ec      	ldreq	r4, [r5, #12]
 8006916:	e7ca      	b.n	80068ae <__swbuf_r+0x1a>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f80c 	bl	8006938 <__swsetup_r>
 8006920:	2800      	cmp	r0, #0
 8006922:	d0cb      	beq.n	80068bc <__swbuf_r+0x28>
 8006924:	f04f 37ff 	mov.w	r7, #4294967295
 8006928:	e7ea      	b.n	8006900 <__swbuf_r+0x6c>
 800692a:	bf00      	nop
 800692c:	08007c10 	.word	0x08007c10
 8006930:	08007c30 	.word	0x08007c30
 8006934:	08007bf0 	.word	0x08007bf0

08006938 <__swsetup_r>:
 8006938:	4b32      	ldr	r3, [pc, #200]	; (8006a04 <__swsetup_r+0xcc>)
 800693a:	b570      	push	{r4, r5, r6, lr}
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	4606      	mov	r6, r0
 8006940:	460c      	mov	r4, r1
 8006942:	b125      	cbz	r5, 800694e <__swsetup_r+0x16>
 8006944:	69ab      	ldr	r3, [r5, #24]
 8006946:	b913      	cbnz	r3, 800694e <__swsetup_r+0x16>
 8006948:	4628      	mov	r0, r5
 800694a:	f000 f99b 	bl	8006c84 <__sinit>
 800694e:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <__swsetup_r+0xd0>)
 8006950:	429c      	cmp	r4, r3
 8006952:	d10f      	bne.n	8006974 <__swsetup_r+0x3c>
 8006954:	686c      	ldr	r4, [r5, #4]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800695c:	0719      	lsls	r1, r3, #28
 800695e:	d42c      	bmi.n	80069ba <__swsetup_r+0x82>
 8006960:	06dd      	lsls	r5, r3, #27
 8006962:	d411      	bmi.n	8006988 <__swsetup_r+0x50>
 8006964:	2309      	movs	r3, #9
 8006966:	6033      	str	r3, [r6, #0]
 8006968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
 8006972:	e03e      	b.n	80069f2 <__swsetup_r+0xba>
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <__swsetup_r+0xd4>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d101      	bne.n	800697e <__swsetup_r+0x46>
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	e7eb      	b.n	8006956 <__swsetup_r+0x1e>
 800697e:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <__swsetup_r+0xd8>)
 8006980:	429c      	cmp	r4, r3
 8006982:	bf08      	it	eq
 8006984:	68ec      	ldreq	r4, [r5, #12]
 8006986:	e7e6      	b.n	8006956 <__swsetup_r+0x1e>
 8006988:	0758      	lsls	r0, r3, #29
 800698a:	d512      	bpl.n	80069b2 <__swsetup_r+0x7a>
 800698c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698e:	b141      	cbz	r1, 80069a2 <__swsetup_r+0x6a>
 8006990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006994:	4299      	cmp	r1, r3
 8006996:	d002      	beq.n	800699e <__swsetup_r+0x66>
 8006998:	4630      	mov	r0, r6
 800699a:	f000 fa93 	bl	8006ec4 <_free_r>
 800699e:	2300      	movs	r3, #0
 80069a0:	6363      	str	r3, [r4, #52]	; 0x34
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	2300      	movs	r3, #0
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f043 0308 	orr.w	r3, r3, #8
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	b94b      	cbnz	r3, 80069d2 <__swsetup_r+0x9a>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c8:	d003      	beq.n	80069d2 <__swsetup_r+0x9a>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 fa31 	bl	8006e34 <__smakebuf_r>
 80069d2:	89a0      	ldrh	r0, [r4, #12]
 80069d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d8:	f010 0301 	ands.w	r3, r0, #1
 80069dc:	d00a      	beq.n	80069f4 <__swsetup_r+0xbc>
 80069de:	2300      	movs	r3, #0
 80069e0:	60a3      	str	r3, [r4, #8]
 80069e2:	6963      	ldr	r3, [r4, #20]
 80069e4:	425b      	negs	r3, r3
 80069e6:	61a3      	str	r3, [r4, #24]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	b943      	cbnz	r3, 80069fe <__swsetup_r+0xc6>
 80069ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069f0:	d1ba      	bne.n	8006968 <__swsetup_r+0x30>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	0781      	lsls	r1, r0, #30
 80069f6:	bf58      	it	pl
 80069f8:	6963      	ldrpl	r3, [r4, #20]
 80069fa:	60a3      	str	r3, [r4, #8]
 80069fc:	e7f4      	b.n	80069e8 <__swsetup_r+0xb0>
 80069fe:	2000      	movs	r0, #0
 8006a00:	e7f7      	b.n	80069f2 <__swsetup_r+0xba>
 8006a02:	bf00      	nop
 8006a04:	2000000c 	.word	0x2000000c
 8006a08:	08007c10 	.word	0x08007c10
 8006a0c:	08007c30 	.word	0x08007c30
 8006a10:	08007bf0 	.word	0x08007bf0

08006a14 <__assert_func>:
 8006a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a16:	4614      	mov	r4, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <__assert_func+0x2c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4605      	mov	r5, r0
 8006a20:	68d8      	ldr	r0, [r3, #12]
 8006a22:	b14c      	cbz	r4, 8006a38 <__assert_func+0x24>
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <__assert_func+0x30>)
 8006a26:	9100      	str	r1, [sp, #0]
 8006a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a2c:	4906      	ldr	r1, [pc, #24]	; (8006a48 <__assert_func+0x34>)
 8006a2e:	462b      	mov	r3, r5
 8006a30:	f000 f9a6 	bl	8006d80 <fiprintf>
 8006a34:	f000 fe7a 	bl	800772c <abort>
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <__assert_func+0x38>)
 8006a3a:	461c      	mov	r4, r3
 8006a3c:	e7f3      	b.n	8006a26 <__assert_func+0x12>
 8006a3e:	bf00      	nop
 8006a40:	2000000c 	.word	0x2000000c
 8006a44:	08007bb4 	.word	0x08007bb4
 8006a48:	08007bc1 	.word	0x08007bc1
 8006a4c:	08007bef 	.word	0x08007bef

08006a50 <__sflush_r>:
 8006a50:	898a      	ldrh	r2, [r1, #12]
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	4605      	mov	r5, r0
 8006a58:	0710      	lsls	r0, r2, #28
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	d458      	bmi.n	8006b10 <__sflush_r+0xc0>
 8006a5e:	684b      	ldr	r3, [r1, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dc05      	bgt.n	8006a70 <__sflush_r+0x20>
 8006a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dc02      	bgt.n	8006a70 <__sflush_r+0x20>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	d0f9      	beq.n	8006a6a <__sflush_r+0x1a>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a7c:	682f      	ldr	r7, [r5, #0]
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	d032      	beq.n	8006ae8 <__sflush_r+0x98>
 8006a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	075a      	lsls	r2, r3, #29
 8006a88:	d505      	bpl.n	8006a96 <__sflush_r+0x46>
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	1ac0      	subs	r0, r0, r3
 8006a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a90:	b10b      	cbz	r3, 8006a96 <__sflush_r+0x46>
 8006a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a94:	1ac0      	subs	r0, r0, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a9c:	6a21      	ldr	r1, [r4, #32]
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b0      	blx	r6
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	d106      	bne.n	8006ab6 <__sflush_r+0x66>
 8006aa8:	6829      	ldr	r1, [r5, #0]
 8006aaa:	291d      	cmp	r1, #29
 8006aac:	d82c      	bhi.n	8006b08 <__sflush_r+0xb8>
 8006aae:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <__sflush_r+0x108>)
 8006ab0:	40ca      	lsrs	r2, r1
 8006ab2:	07d6      	lsls	r6, r2, #31
 8006ab4:	d528      	bpl.n	8006b08 <__sflush_r+0xb8>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	6062      	str	r2, [r4, #4]
 8006aba:	04d9      	lsls	r1, r3, #19
 8006abc:	6922      	ldr	r2, [r4, #16]
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	d504      	bpl.n	8006acc <__sflush_r+0x7c>
 8006ac2:	1c42      	adds	r2, r0, #1
 8006ac4:	d101      	bne.n	8006aca <__sflush_r+0x7a>
 8006ac6:	682b      	ldr	r3, [r5, #0]
 8006ac8:	b903      	cbnz	r3, 8006acc <__sflush_r+0x7c>
 8006aca:	6560      	str	r0, [r4, #84]	; 0x54
 8006acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ace:	602f      	str	r7, [r5, #0]
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d0ca      	beq.n	8006a6a <__sflush_r+0x1a>
 8006ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <__sflush_r+0x92>
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f9f1 	bl	8006ec4 <_free_r>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae6:	e7c1      	b.n	8006a6c <__sflush_r+0x1c>
 8006ae8:	6a21      	ldr	r1, [r4, #32]
 8006aea:	2301      	movs	r3, #1
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b0      	blx	r6
 8006af0:	1c41      	adds	r1, r0, #1
 8006af2:	d1c7      	bne.n	8006a84 <__sflush_r+0x34>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0c4      	beq.n	8006a84 <__sflush_r+0x34>
 8006afa:	2b1d      	cmp	r3, #29
 8006afc:	d001      	beq.n	8006b02 <__sflush_r+0xb2>
 8006afe:	2b16      	cmp	r3, #22
 8006b00:	d101      	bne.n	8006b06 <__sflush_r+0xb6>
 8006b02:	602f      	str	r7, [r5, #0]
 8006b04:	e7b1      	b.n	8006a6a <__sflush_r+0x1a>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	e7ad      	b.n	8006a6c <__sflush_r+0x1c>
 8006b10:	690f      	ldr	r7, [r1, #16]
 8006b12:	2f00      	cmp	r7, #0
 8006b14:	d0a9      	beq.n	8006a6a <__sflush_r+0x1a>
 8006b16:	0793      	lsls	r3, r2, #30
 8006b18:	680e      	ldr	r6, [r1, #0]
 8006b1a:	bf08      	it	eq
 8006b1c:	694b      	ldreq	r3, [r1, #20]
 8006b1e:	600f      	str	r7, [r1, #0]
 8006b20:	bf18      	it	ne
 8006b22:	2300      	movne	r3, #0
 8006b24:	eba6 0807 	sub.w	r8, r6, r7
 8006b28:	608b      	str	r3, [r1, #8]
 8006b2a:	f1b8 0f00 	cmp.w	r8, #0
 8006b2e:	dd9c      	ble.n	8006a6a <__sflush_r+0x1a>
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b34:	4643      	mov	r3, r8
 8006b36:	463a      	mov	r2, r7
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b0      	blx	r6
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	dc06      	bgt.n	8006b4e <__sflush_r+0xfe>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	e78e      	b.n	8006a6c <__sflush_r+0x1c>
 8006b4e:	4407      	add	r7, r0
 8006b50:	eba8 0800 	sub.w	r8, r8, r0
 8006b54:	e7e9      	b.n	8006b2a <__sflush_r+0xda>
 8006b56:	bf00      	nop
 8006b58:	20400001 	.word	0x20400001

08006b5c <_fflush_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	4605      	mov	r5, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	b913      	cbnz	r3, 8006b6c <_fflush_r+0x10>
 8006b66:	2500      	movs	r5, #0
 8006b68:	4628      	mov	r0, r5
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	b118      	cbz	r0, 8006b76 <_fflush_r+0x1a>
 8006b6e:	6983      	ldr	r3, [r0, #24]
 8006b70:	b90b      	cbnz	r3, 8006b76 <_fflush_r+0x1a>
 8006b72:	f000 f887 	bl	8006c84 <__sinit>
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <_fflush_r+0x6c>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	d11b      	bne.n	8006bb4 <_fflush_r+0x58>
 8006b7c:	686c      	ldr	r4, [r5, #4]
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0ef      	beq.n	8006b66 <_fflush_r+0xa>
 8006b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b88:	07d0      	lsls	r0, r2, #31
 8006b8a:	d404      	bmi.n	8006b96 <_fflush_r+0x3a>
 8006b8c:	0599      	lsls	r1, r3, #22
 8006b8e:	d402      	bmi.n	8006b96 <_fflush_r+0x3a>
 8006b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b92:	f000 f927 	bl	8006de4 <__retarget_lock_acquire_recursive>
 8006b96:	4628      	mov	r0, r5
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f7ff ff59 	bl	8006a50 <__sflush_r>
 8006b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba0:	07da      	lsls	r2, r3, #31
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	d4e0      	bmi.n	8006b68 <_fflush_r+0xc>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	059b      	lsls	r3, r3, #22
 8006baa:	d4dd      	bmi.n	8006b68 <_fflush_r+0xc>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f000 f91a 	bl	8006de6 <__retarget_lock_release_recursive>
 8006bb2:	e7d9      	b.n	8006b68 <_fflush_r+0xc>
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <_fflush_r+0x70>)
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d101      	bne.n	8006bbe <_fflush_r+0x62>
 8006bba:	68ac      	ldr	r4, [r5, #8]
 8006bbc:	e7df      	b.n	8006b7e <_fflush_r+0x22>
 8006bbe:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <_fflush_r+0x74>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	bf08      	it	eq
 8006bc4:	68ec      	ldreq	r4, [r5, #12]
 8006bc6:	e7da      	b.n	8006b7e <_fflush_r+0x22>
 8006bc8:	08007c10 	.word	0x08007c10
 8006bcc:	08007c30 	.word	0x08007c30
 8006bd0:	08007bf0 	.word	0x08007bf0

08006bd4 <std>:
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	4604      	mov	r4, r0
 8006bda:	e9c0 3300 	strd	r3, r3, [r0]
 8006bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006be2:	6083      	str	r3, [r0, #8]
 8006be4:	8181      	strh	r1, [r0, #12]
 8006be6:	6643      	str	r3, [r0, #100]	; 0x64
 8006be8:	81c2      	strh	r2, [r0, #14]
 8006bea:	6183      	str	r3, [r0, #24]
 8006bec:	4619      	mov	r1, r3
 8006bee:	2208      	movs	r2, #8
 8006bf0:	305c      	adds	r0, #92	; 0x5c
 8006bf2:	f7ff fd55 	bl	80066a0 <memset>
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <std+0x38>)
 8006bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <std+0x3c>)
 8006bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <std+0x40>)
 8006c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x44>)
 8006c04:	6224      	str	r4, [r4, #32]
 8006c06:	6323      	str	r3, [r4, #48]	; 0x30
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08007681 	.word	0x08007681
 8006c10:	080076a3 	.word	0x080076a3
 8006c14:	080076db 	.word	0x080076db
 8006c18:	080076ff 	.word	0x080076ff

08006c1c <_cleanup_r>:
 8006c1c:	4901      	ldr	r1, [pc, #4]	; (8006c24 <_cleanup_r+0x8>)
 8006c1e:	f000 b8c1 	b.w	8006da4 <_fwalk_reent>
 8006c22:	bf00      	nop
 8006c24:	08006b5d 	.word	0x08006b5d

08006c28 <__sfmoreglue>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	2268      	movs	r2, #104	; 0x68
 8006c2c:	1e4d      	subs	r5, r1, #1
 8006c2e:	4355      	muls	r5, r2
 8006c30:	460e      	mov	r6, r1
 8006c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c36:	f000 f9b1 	bl	8006f9c <_malloc_r>
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	b140      	cbz	r0, 8006c50 <__sfmoreglue+0x28>
 8006c3e:	2100      	movs	r1, #0
 8006c40:	e9c0 1600 	strd	r1, r6, [r0]
 8006c44:	300c      	adds	r0, #12
 8006c46:	60a0      	str	r0, [r4, #8]
 8006c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c4c:	f7ff fd28 	bl	80066a0 <memset>
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd70      	pop	{r4, r5, r6, pc}

08006c54 <__sfp_lock_acquire>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__sfp_lock_acquire+0x8>)
 8006c56:	f000 b8c5 	b.w	8006de4 <__retarget_lock_acquire_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	200003c5 	.word	0x200003c5

08006c60 <__sfp_lock_release>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__sfp_lock_release+0x8>)
 8006c62:	f000 b8c0 	b.w	8006de6 <__retarget_lock_release_recursive>
 8006c66:	bf00      	nop
 8006c68:	200003c5 	.word	0x200003c5

08006c6c <__sinit_lock_acquire>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__sinit_lock_acquire+0x8>)
 8006c6e:	f000 b8b9 	b.w	8006de4 <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	200003c6 	.word	0x200003c6

08006c78 <__sinit_lock_release>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sinit_lock_release+0x8>)
 8006c7a:	f000 b8b4 	b.w	8006de6 <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	200003c6 	.word	0x200003c6

08006c84 <__sinit>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4604      	mov	r4, r0
 8006c88:	f7ff fff0 	bl	8006c6c <__sinit_lock_acquire>
 8006c8c:	69a3      	ldr	r3, [r4, #24]
 8006c8e:	b11b      	cbz	r3, 8006c98 <__sinit+0x14>
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	f7ff bff0 	b.w	8006c78 <__sinit_lock_release>
 8006c98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <__sinit+0x68>)
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <__sinit+0x6c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ca6:	42a3      	cmp	r3, r4
 8006ca8:	bf04      	itt	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	61a3      	streq	r3, [r4, #24]
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f820 	bl	8006cf4 <__sfp>
 8006cb4:	6060      	str	r0, [r4, #4]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f81c 	bl	8006cf4 <__sfp>
 8006cbc:	60a0      	str	r0, [r4, #8]
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f818 	bl	8006cf4 <__sfp>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	60e0      	str	r0, [r4, #12]
 8006cc8:	2104      	movs	r1, #4
 8006cca:	6860      	ldr	r0, [r4, #4]
 8006ccc:	f7ff ff82 	bl	8006bd4 <std>
 8006cd0:	68a0      	ldr	r0, [r4, #8]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	2109      	movs	r1, #9
 8006cd6:	f7ff ff7d 	bl	8006bd4 <std>
 8006cda:	68e0      	ldr	r0, [r4, #12]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	2112      	movs	r1, #18
 8006ce0:	f7ff ff78 	bl	8006bd4 <std>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	61a3      	str	r3, [r4, #24]
 8006ce8:	e7d2      	b.n	8006c90 <__sinit+0xc>
 8006cea:	bf00      	nop
 8006cec:	08007b3c 	.word	0x08007b3c
 8006cf0:	08006c1d 	.word	0x08006c1d

08006cf4 <__sfp>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	f7ff ffac 	bl	8006c54 <__sfp_lock_acquire>
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <__sfp+0x84>)
 8006cfe:	681e      	ldr	r6, [r3, #0]
 8006d00:	69b3      	ldr	r3, [r6, #24]
 8006d02:	b913      	cbnz	r3, 8006d0a <__sfp+0x16>
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7ff ffbd 	bl	8006c84 <__sinit>
 8006d0a:	3648      	adds	r6, #72	; 0x48
 8006d0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	d503      	bpl.n	8006d1c <__sfp+0x28>
 8006d14:	6833      	ldr	r3, [r6, #0]
 8006d16:	b30b      	cbz	r3, 8006d5c <__sfp+0x68>
 8006d18:	6836      	ldr	r6, [r6, #0]
 8006d1a:	e7f7      	b.n	8006d0c <__sfp+0x18>
 8006d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d20:	b9d5      	cbnz	r5, 8006d58 <__sfp+0x64>
 8006d22:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <__sfp+0x88>)
 8006d24:	60e3      	str	r3, [r4, #12]
 8006d26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d2c:	f000 f859 	bl	8006de2 <__retarget_lock_init_recursive>
 8006d30:	f7ff ff96 	bl	8006c60 <__sfp_lock_release>
 8006d34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d3c:	6025      	str	r5, [r4, #0]
 8006d3e:	61a5      	str	r5, [r4, #24]
 8006d40:	2208      	movs	r2, #8
 8006d42:	4629      	mov	r1, r5
 8006d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d48:	f7ff fcaa 	bl	80066a0 <memset>
 8006d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d54:	4620      	mov	r0, r4
 8006d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d58:	3468      	adds	r4, #104	; 0x68
 8006d5a:	e7d9      	b.n	8006d10 <__sfp+0x1c>
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7ff ff62 	bl	8006c28 <__sfmoreglue>
 8006d64:	4604      	mov	r4, r0
 8006d66:	6030      	str	r0, [r6, #0]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d1d5      	bne.n	8006d18 <__sfp+0x24>
 8006d6c:	f7ff ff78 	bl	8006c60 <__sfp_lock_release>
 8006d70:	230c      	movs	r3, #12
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	e7ee      	b.n	8006d54 <__sfp+0x60>
 8006d76:	bf00      	nop
 8006d78:	08007b3c 	.word	0x08007b3c
 8006d7c:	ffff0001 	.word	0xffff0001

08006d80 <fiprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	b503      	push	{r0, r1, lr}
 8006d84:	4601      	mov	r1, r0
 8006d86:	ab03      	add	r3, sp, #12
 8006d88:	4805      	ldr	r0, [pc, #20]	; (8006da0 <fiprintf+0x20>)
 8006d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d8e:	6800      	ldr	r0, [r0, #0]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	f000 f9a1 	bl	80070d8 <_vfiprintf_r>
 8006d96:	b002      	add	sp, #8
 8006d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d9c:	b003      	add	sp, #12
 8006d9e:	4770      	bx	lr
 8006da0:	2000000c 	.word	0x2000000c

08006da4 <_fwalk_reent>:
 8006da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da8:	4606      	mov	r6, r0
 8006daa:	4688      	mov	r8, r1
 8006dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006db0:	2700      	movs	r7, #0
 8006db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006db6:	f1b9 0901 	subs.w	r9, r9, #1
 8006dba:	d505      	bpl.n	8006dc8 <_fwalk_reent+0x24>
 8006dbc:	6824      	ldr	r4, [r4, #0]
 8006dbe:	2c00      	cmp	r4, #0
 8006dc0:	d1f7      	bne.n	8006db2 <_fwalk_reent+0xe>
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc8:	89ab      	ldrh	r3, [r5, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d907      	bls.n	8006dde <_fwalk_reent+0x3a>
 8006dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	d003      	beq.n	8006dde <_fwalk_reent+0x3a>
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	4630      	mov	r0, r6
 8006dda:	47c0      	blx	r8
 8006ddc:	4307      	orrs	r7, r0
 8006dde:	3568      	adds	r5, #104	; 0x68
 8006de0:	e7e9      	b.n	8006db6 <_fwalk_reent+0x12>

08006de2 <__retarget_lock_init_recursive>:
 8006de2:	4770      	bx	lr

08006de4 <__retarget_lock_acquire_recursive>:
 8006de4:	4770      	bx	lr

08006de6 <__retarget_lock_release_recursive>:
 8006de6:	4770      	bx	lr

08006de8 <__swhatbuf_r>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	460e      	mov	r6, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	2900      	cmp	r1, #0
 8006df2:	b096      	sub	sp, #88	; 0x58
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	da08      	bge.n	8006e0c <__swhatbuf_r+0x24>
 8006dfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	061a      	lsls	r2, r3, #24
 8006e04:	d410      	bmi.n	8006e28 <__swhatbuf_r+0x40>
 8006e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0a:	e00e      	b.n	8006e2a <__swhatbuf_r+0x42>
 8006e0c:	466a      	mov	r2, sp
 8006e0e:	f000 fca5 	bl	800775c <_fstat_r>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	dbf1      	blt.n	8006dfa <__swhatbuf_r+0x12>
 8006e16:	9a01      	ldr	r2, [sp, #4]
 8006e18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e20:	425a      	negs	r2, r3
 8006e22:	415a      	adcs	r2, r3
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	e7ee      	b.n	8006e06 <__swhatbuf_r+0x1e>
 8006e28:	2340      	movs	r3, #64	; 0x40
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	b016      	add	sp, #88	; 0x58
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e34 <__smakebuf_r>:
 8006e34:	898b      	ldrh	r3, [r1, #12]
 8006e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e38:	079d      	lsls	r5, r3, #30
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	d507      	bpl.n	8006e50 <__smakebuf_r+0x1c>
 8006e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	b002      	add	sp, #8
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	ab01      	add	r3, sp, #4
 8006e52:	466a      	mov	r2, sp
 8006e54:	f7ff ffc8 	bl	8006de8 <__swhatbuf_r>
 8006e58:	9900      	ldr	r1, [sp, #0]
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f89d 	bl	8006f9c <_malloc_r>
 8006e62:	b948      	cbnz	r0, 8006e78 <__smakebuf_r+0x44>
 8006e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e68:	059a      	lsls	r2, r3, #22
 8006e6a:	d4ef      	bmi.n	8006e4c <__smakebuf_r+0x18>
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	f043 0302 	orr.w	r3, r3, #2
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e7e3      	b.n	8006e40 <__smakebuf_r+0xc>
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <__smakebuf_r+0x7c>)
 8006e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	6020      	str	r0, [r4, #0]
 8006e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	6163      	str	r3, [r4, #20]
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	6120      	str	r0, [r4, #16]
 8006e8e:	b15b      	cbz	r3, 8006ea8 <__smakebuf_r+0x74>
 8006e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e94:	4630      	mov	r0, r6
 8006e96:	f000 fc73 	bl	8007780 <_isatty_r>
 8006e9a:	b128      	cbz	r0, 8006ea8 <__smakebuf_r+0x74>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	89a0      	ldrh	r0, [r4, #12]
 8006eaa:	4305      	orrs	r5, r0
 8006eac:	81a5      	strh	r5, [r4, #12]
 8006eae:	e7cd      	b.n	8006e4c <__smakebuf_r+0x18>
 8006eb0:	08006c1d 	.word	0x08006c1d

08006eb4 <malloc>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <malloc+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 b86f 	b.w	8006f9c <_malloc_r>
 8006ebe:	bf00      	nop
 8006ec0:	2000000c 	.word	0x2000000c

08006ec4 <_free_r>:
 8006ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d044      	beq.n	8006f54 <_free_r+0x90>
 8006eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ece:	9001      	str	r0, [sp, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed6:	bfb8      	it	lt
 8006ed8:	18e4      	addlt	r4, r4, r3
 8006eda:	f000 fc73 	bl	80077c4 <__malloc_lock>
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <_free_r+0x94>)
 8006ee0:	9801      	ldr	r0, [sp, #4]
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	b933      	cbnz	r3, 8006ef4 <_free_r+0x30>
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6014      	str	r4, [r2, #0]
 8006eea:	b003      	add	sp, #12
 8006eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ef0:	f000 bc6e 	b.w	80077d0 <__malloc_unlock>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d908      	bls.n	8006f0a <_free_r+0x46>
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	1961      	adds	r1, r4, r5
 8006efc:	428b      	cmp	r3, r1
 8006efe:	bf01      	itttt	eq
 8006f00:	6819      	ldreq	r1, [r3, #0]
 8006f02:	685b      	ldreq	r3, [r3, #4]
 8006f04:	1949      	addeq	r1, r1, r5
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	e7ed      	b.n	8006ee6 <_free_r+0x22>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b10b      	cbz	r3, 8006f14 <_free_r+0x50>
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d9fa      	bls.n	8006f0a <_free_r+0x46>
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	1855      	adds	r5, r2, r1
 8006f18:	42a5      	cmp	r5, r4
 8006f1a:	d10b      	bne.n	8006f34 <_free_r+0x70>
 8006f1c:	6824      	ldr	r4, [r4, #0]
 8006f1e:	4421      	add	r1, r4
 8006f20:	1854      	adds	r4, r2, r1
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	d1e0      	bne.n	8006eea <_free_r+0x26>
 8006f28:	681c      	ldr	r4, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	6053      	str	r3, [r2, #4]
 8006f2e:	4421      	add	r1, r4
 8006f30:	6011      	str	r1, [r2, #0]
 8006f32:	e7da      	b.n	8006eea <_free_r+0x26>
 8006f34:	d902      	bls.n	8006f3c <_free_r+0x78>
 8006f36:	230c      	movs	r3, #12
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	e7d6      	b.n	8006eea <_free_r+0x26>
 8006f3c:	6825      	ldr	r5, [r4, #0]
 8006f3e:	1961      	adds	r1, r4, r5
 8006f40:	428b      	cmp	r3, r1
 8006f42:	bf04      	itt	eq
 8006f44:	6819      	ldreq	r1, [r3, #0]
 8006f46:	685b      	ldreq	r3, [r3, #4]
 8006f48:	6063      	str	r3, [r4, #4]
 8006f4a:	bf04      	itt	eq
 8006f4c:	1949      	addeq	r1, r1, r5
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	6054      	str	r4, [r2, #4]
 8006f52:	e7ca      	b.n	8006eea <_free_r+0x26>
 8006f54:	b003      	add	sp, #12
 8006f56:	bd30      	pop	{r4, r5, pc}
 8006f58:	200003c8 	.word	0x200003c8

08006f5c <sbrk_aligned>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4e0e      	ldr	r6, [pc, #56]	; (8006f98 <sbrk_aligned+0x3c>)
 8006f60:	460c      	mov	r4, r1
 8006f62:	6831      	ldr	r1, [r6, #0]
 8006f64:	4605      	mov	r5, r0
 8006f66:	b911      	cbnz	r1, 8006f6e <sbrk_aligned+0x12>
 8006f68:	f000 fb7a 	bl	8007660 <_sbrk_r>
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 fb75 	bl	8007660 <_sbrk_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d00a      	beq.n	8006f90 <sbrk_aligned+0x34>
 8006f7a:	1cc4      	adds	r4, r0, #3
 8006f7c:	f024 0403 	bic.w	r4, r4, #3
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d007      	beq.n	8006f94 <sbrk_aligned+0x38>
 8006f84:	1a21      	subs	r1, r4, r0
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fb6a 	bl	8007660 <_sbrk_r>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d101      	bne.n	8006f94 <sbrk_aligned+0x38>
 8006f90:	f04f 34ff 	mov.w	r4, #4294967295
 8006f94:	4620      	mov	r0, r4
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	200003cc 	.word	0x200003cc

08006f9c <_malloc_r>:
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	1ccd      	adds	r5, r1, #3
 8006fa2:	f025 0503 	bic.w	r5, r5, #3
 8006fa6:	3508      	adds	r5, #8
 8006fa8:	2d0c      	cmp	r5, #12
 8006faa:	bf38      	it	cc
 8006fac:	250c      	movcc	r5, #12
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	db01      	blt.n	8006fb8 <_malloc_r+0x1c>
 8006fb4:	42a9      	cmp	r1, r5
 8006fb6:	d905      	bls.n	8006fc4 <_malloc_r+0x28>
 8006fb8:	230c      	movs	r3, #12
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	4e2e      	ldr	r6, [pc, #184]	; (8007080 <_malloc_r+0xe4>)
 8006fc6:	f000 fbfd 	bl	80077c4 <__malloc_lock>
 8006fca:	6833      	ldr	r3, [r6, #0]
 8006fcc:	461c      	mov	r4, r3
 8006fce:	bb34      	cbnz	r4, 800701e <_malloc_r+0x82>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ffc2 	bl	8006f5c <sbrk_aligned>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	4604      	mov	r4, r0
 8006fdc:	d14d      	bne.n	800707a <_malloc_r+0xde>
 8006fde:	6834      	ldr	r4, [r6, #0]
 8006fe0:	4626      	mov	r6, r4
 8006fe2:	2e00      	cmp	r6, #0
 8006fe4:	d140      	bne.n	8007068 <_malloc_r+0xcc>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4638      	mov	r0, r7
 8006fec:	eb04 0803 	add.w	r8, r4, r3
 8006ff0:	f000 fb36 	bl	8007660 <_sbrk_r>
 8006ff4:	4580      	cmp	r8, r0
 8006ff6:	d13a      	bne.n	800706e <_malloc_r+0xd2>
 8006ff8:	6821      	ldr	r1, [r4, #0]
 8006ffa:	3503      	adds	r5, #3
 8006ffc:	1a6d      	subs	r5, r5, r1
 8006ffe:	f025 0503 	bic.w	r5, r5, #3
 8007002:	3508      	adds	r5, #8
 8007004:	2d0c      	cmp	r5, #12
 8007006:	bf38      	it	cc
 8007008:	250c      	movcc	r5, #12
 800700a:	4629      	mov	r1, r5
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff ffa5 	bl	8006f5c <sbrk_aligned>
 8007012:	3001      	adds	r0, #1
 8007014:	d02b      	beq.n	800706e <_malloc_r+0xd2>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	442b      	add	r3, r5
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	e00e      	b.n	800703c <_malloc_r+0xa0>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	1b52      	subs	r2, r2, r5
 8007022:	d41e      	bmi.n	8007062 <_malloc_r+0xc6>
 8007024:	2a0b      	cmp	r2, #11
 8007026:	d916      	bls.n	8007056 <_malloc_r+0xba>
 8007028:	1961      	adds	r1, r4, r5
 800702a:	42a3      	cmp	r3, r4
 800702c:	6025      	str	r5, [r4, #0]
 800702e:	bf18      	it	ne
 8007030:	6059      	strne	r1, [r3, #4]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	bf08      	it	eq
 8007036:	6031      	streq	r1, [r6, #0]
 8007038:	5162      	str	r2, [r4, r5]
 800703a:	604b      	str	r3, [r1, #4]
 800703c:	4638      	mov	r0, r7
 800703e:	f104 060b 	add.w	r6, r4, #11
 8007042:	f000 fbc5 	bl	80077d0 <__malloc_unlock>
 8007046:	f026 0607 	bic.w	r6, r6, #7
 800704a:	1d23      	adds	r3, r4, #4
 800704c:	1af2      	subs	r2, r6, r3
 800704e:	d0b6      	beq.n	8006fbe <_malloc_r+0x22>
 8007050:	1b9b      	subs	r3, r3, r6
 8007052:	50a3      	str	r3, [r4, r2]
 8007054:	e7b3      	b.n	8006fbe <_malloc_r+0x22>
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	42a3      	cmp	r3, r4
 800705a:	bf0c      	ite	eq
 800705c:	6032      	streq	r2, [r6, #0]
 800705e:	605a      	strne	r2, [r3, #4]
 8007060:	e7ec      	b.n	800703c <_malloc_r+0xa0>
 8007062:	4623      	mov	r3, r4
 8007064:	6864      	ldr	r4, [r4, #4]
 8007066:	e7b2      	b.n	8006fce <_malloc_r+0x32>
 8007068:	4634      	mov	r4, r6
 800706a:	6876      	ldr	r6, [r6, #4]
 800706c:	e7b9      	b.n	8006fe2 <_malloc_r+0x46>
 800706e:	230c      	movs	r3, #12
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	4638      	mov	r0, r7
 8007074:	f000 fbac 	bl	80077d0 <__malloc_unlock>
 8007078:	e7a1      	b.n	8006fbe <_malloc_r+0x22>
 800707a:	6025      	str	r5, [r4, #0]
 800707c:	e7de      	b.n	800703c <_malloc_r+0xa0>
 800707e:	bf00      	nop
 8007080:	200003c8 	.word	0x200003c8

08007084 <__sfputc_r>:
 8007084:	6893      	ldr	r3, [r2, #8]
 8007086:	3b01      	subs	r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	b410      	push	{r4}
 800708c:	6093      	str	r3, [r2, #8]
 800708e:	da08      	bge.n	80070a2 <__sfputc_r+0x1e>
 8007090:	6994      	ldr	r4, [r2, #24]
 8007092:	42a3      	cmp	r3, r4
 8007094:	db01      	blt.n	800709a <__sfputc_r+0x16>
 8007096:	290a      	cmp	r1, #10
 8007098:	d103      	bne.n	80070a2 <__sfputc_r+0x1e>
 800709a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800709e:	f7ff bbf9 	b.w	8006894 <__swbuf_r>
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	1c58      	adds	r0, r3, #1
 80070a6:	6010      	str	r0, [r2, #0]
 80070a8:	7019      	strb	r1, [r3, #0]
 80070aa:	4608      	mov	r0, r1
 80070ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <__sfputs_r>:
 80070b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	18d5      	adds	r5, r2, r3
 80070bc:	42ac      	cmp	r4, r5
 80070be:	d101      	bne.n	80070c4 <__sfputs_r+0x12>
 80070c0:	2000      	movs	r0, #0
 80070c2:	e007      	b.n	80070d4 <__sfputs_r+0x22>
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	463a      	mov	r2, r7
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffda 	bl	8007084 <__sfputc_r>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d1f3      	bne.n	80070bc <__sfputs_r+0xa>
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070d8 <_vfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	460d      	mov	r5, r1
 80070de:	b09d      	sub	sp, #116	; 0x74
 80070e0:	4614      	mov	r4, r2
 80070e2:	4698      	mov	r8, r3
 80070e4:	4606      	mov	r6, r0
 80070e6:	b118      	cbz	r0, 80070f0 <_vfiprintf_r+0x18>
 80070e8:	6983      	ldr	r3, [r0, #24]
 80070ea:	b90b      	cbnz	r3, 80070f0 <_vfiprintf_r+0x18>
 80070ec:	f7ff fdca 	bl	8006c84 <__sinit>
 80070f0:	4b89      	ldr	r3, [pc, #548]	; (8007318 <_vfiprintf_r+0x240>)
 80070f2:	429d      	cmp	r5, r3
 80070f4:	d11b      	bne.n	800712e <_vfiprintf_r+0x56>
 80070f6:	6875      	ldr	r5, [r6, #4]
 80070f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070fa:	07d9      	lsls	r1, r3, #31
 80070fc:	d405      	bmi.n	800710a <_vfiprintf_r+0x32>
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	059a      	lsls	r2, r3, #22
 8007102:	d402      	bmi.n	800710a <_vfiprintf_r+0x32>
 8007104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007106:	f7ff fe6d 	bl	8006de4 <__retarget_lock_acquire_recursive>
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	071b      	lsls	r3, r3, #28
 800710e:	d501      	bpl.n	8007114 <_vfiprintf_r+0x3c>
 8007110:	692b      	ldr	r3, [r5, #16]
 8007112:	b9eb      	cbnz	r3, 8007150 <_vfiprintf_r+0x78>
 8007114:	4629      	mov	r1, r5
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff fc0e 	bl	8006938 <__swsetup_r>
 800711c:	b1c0      	cbz	r0, 8007150 <_vfiprintf_r+0x78>
 800711e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007120:	07dc      	lsls	r4, r3, #31
 8007122:	d50e      	bpl.n	8007142 <_vfiprintf_r+0x6a>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b01d      	add	sp, #116	; 0x74
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	4b7b      	ldr	r3, [pc, #492]	; (800731c <_vfiprintf_r+0x244>)
 8007130:	429d      	cmp	r5, r3
 8007132:	d101      	bne.n	8007138 <_vfiprintf_r+0x60>
 8007134:	68b5      	ldr	r5, [r6, #8]
 8007136:	e7df      	b.n	80070f8 <_vfiprintf_r+0x20>
 8007138:	4b79      	ldr	r3, [pc, #484]	; (8007320 <_vfiprintf_r+0x248>)
 800713a:	429d      	cmp	r5, r3
 800713c:	bf08      	it	eq
 800713e:	68f5      	ldreq	r5, [r6, #12]
 8007140:	e7da      	b.n	80070f8 <_vfiprintf_r+0x20>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	0598      	lsls	r0, r3, #22
 8007146:	d4ed      	bmi.n	8007124 <_vfiprintf_r+0x4c>
 8007148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714a:	f7ff fe4c 	bl	8006de6 <__retarget_lock_release_recursive>
 800714e:	e7e9      	b.n	8007124 <_vfiprintf_r+0x4c>
 8007150:	2300      	movs	r3, #0
 8007152:	9309      	str	r3, [sp, #36]	; 0x24
 8007154:	2320      	movs	r3, #32
 8007156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715a:	f8cd 800c 	str.w	r8, [sp, #12]
 800715e:	2330      	movs	r3, #48	; 0x30
 8007160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007324 <_vfiprintf_r+0x24c>
 8007164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007168:	f04f 0901 	mov.w	r9, #1
 800716c:	4623      	mov	r3, r4
 800716e:	469a      	mov	sl, r3
 8007170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007174:	b10a      	cbz	r2, 800717a <_vfiprintf_r+0xa2>
 8007176:	2a25      	cmp	r2, #37	; 0x25
 8007178:	d1f9      	bne.n	800716e <_vfiprintf_r+0x96>
 800717a:	ebba 0b04 	subs.w	fp, sl, r4
 800717e:	d00b      	beq.n	8007198 <_vfiprintf_r+0xc0>
 8007180:	465b      	mov	r3, fp
 8007182:	4622      	mov	r2, r4
 8007184:	4629      	mov	r1, r5
 8007186:	4630      	mov	r0, r6
 8007188:	f7ff ff93 	bl	80070b2 <__sfputs_r>
 800718c:	3001      	adds	r0, #1
 800718e:	f000 80aa 	beq.w	80072e6 <_vfiprintf_r+0x20e>
 8007192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007194:	445a      	add	r2, fp
 8007196:	9209      	str	r2, [sp, #36]	; 0x24
 8007198:	f89a 3000 	ldrb.w	r3, [sl]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80a2 	beq.w	80072e6 <_vfiprintf_r+0x20e>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ac:	f10a 0a01 	add.w	sl, sl, #1
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	9307      	str	r3, [sp, #28]
 80071b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ba:	4654      	mov	r4, sl
 80071bc:	2205      	movs	r2, #5
 80071be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c2:	4858      	ldr	r0, [pc, #352]	; (8007324 <_vfiprintf_r+0x24c>)
 80071c4:	f7f9 f834 	bl	8000230 <memchr>
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	b9d8      	cbnz	r0, 8007204 <_vfiprintf_r+0x12c>
 80071cc:	06d1      	lsls	r1, r2, #27
 80071ce:	bf44      	itt	mi
 80071d0:	2320      	movmi	r3, #32
 80071d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d6:	0713      	lsls	r3, r2, #28
 80071d8:	bf44      	itt	mi
 80071da:	232b      	movmi	r3, #43	; 0x2b
 80071dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e0:	f89a 3000 	ldrb.w	r3, [sl]
 80071e4:	2b2a      	cmp	r3, #42	; 0x2a
 80071e6:	d015      	beq.n	8007214 <_vfiprintf_r+0x13c>
 80071e8:	9a07      	ldr	r2, [sp, #28]
 80071ea:	4654      	mov	r4, sl
 80071ec:	2000      	movs	r0, #0
 80071ee:	f04f 0c0a 	mov.w	ip, #10
 80071f2:	4621      	mov	r1, r4
 80071f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f8:	3b30      	subs	r3, #48	; 0x30
 80071fa:	2b09      	cmp	r3, #9
 80071fc:	d94e      	bls.n	800729c <_vfiprintf_r+0x1c4>
 80071fe:	b1b0      	cbz	r0, 800722e <_vfiprintf_r+0x156>
 8007200:	9207      	str	r2, [sp, #28]
 8007202:	e014      	b.n	800722e <_vfiprintf_r+0x156>
 8007204:	eba0 0308 	sub.w	r3, r0, r8
 8007208:	fa09 f303 	lsl.w	r3, r9, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	46a2      	mov	sl, r4
 8007212:	e7d2      	b.n	80071ba <_vfiprintf_r+0xe2>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	1d19      	adds	r1, r3, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	9103      	str	r1, [sp, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfbb      	ittet	lt
 8007220:	425b      	neglt	r3, r3
 8007222:	f042 0202 	orrlt.w	r2, r2, #2
 8007226:	9307      	strge	r3, [sp, #28]
 8007228:	9307      	strlt	r3, [sp, #28]
 800722a:	bfb8      	it	lt
 800722c:	9204      	strlt	r2, [sp, #16]
 800722e:	7823      	ldrb	r3, [r4, #0]
 8007230:	2b2e      	cmp	r3, #46	; 0x2e
 8007232:	d10c      	bne.n	800724e <_vfiprintf_r+0x176>
 8007234:	7863      	ldrb	r3, [r4, #1]
 8007236:	2b2a      	cmp	r3, #42	; 0x2a
 8007238:	d135      	bne.n	80072a6 <_vfiprintf_r+0x1ce>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	9203      	str	r2, [sp, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfb8      	it	lt
 8007246:	f04f 33ff 	movlt.w	r3, #4294967295
 800724a:	3402      	adds	r4, #2
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007334 <_vfiprintf_r+0x25c>
 8007252:	7821      	ldrb	r1, [r4, #0]
 8007254:	2203      	movs	r2, #3
 8007256:	4650      	mov	r0, sl
 8007258:	f7f8 ffea 	bl	8000230 <memchr>
 800725c:	b140      	cbz	r0, 8007270 <_vfiprintf_r+0x198>
 800725e:	2340      	movs	r3, #64	; 0x40
 8007260:	eba0 000a 	sub.w	r0, r0, sl
 8007264:	fa03 f000 	lsl.w	r0, r3, r0
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	4303      	orrs	r3, r0
 800726c:	3401      	adds	r4, #1
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	482c      	ldr	r0, [pc, #176]	; (8007328 <_vfiprintf_r+0x250>)
 8007276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800727a:	2206      	movs	r2, #6
 800727c:	f7f8 ffd8 	bl	8000230 <memchr>
 8007280:	2800      	cmp	r0, #0
 8007282:	d03f      	beq.n	8007304 <_vfiprintf_r+0x22c>
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <_vfiprintf_r+0x254>)
 8007286:	bb1b      	cbnz	r3, 80072d0 <_vfiprintf_r+0x1f8>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	3307      	adds	r3, #7
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	443b      	add	r3, r7
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	e767      	b.n	800716c <_vfiprintf_r+0x94>
 800729c:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a0:	460c      	mov	r4, r1
 80072a2:	2001      	movs	r0, #1
 80072a4:	e7a5      	b.n	80071f2 <_vfiprintf_r+0x11a>
 80072a6:	2300      	movs	r3, #0
 80072a8:	3401      	adds	r4, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4620      	mov	r0, r4
 80072b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b8:	3a30      	subs	r2, #48	; 0x30
 80072ba:	2a09      	cmp	r2, #9
 80072bc:	d903      	bls.n	80072c6 <_vfiprintf_r+0x1ee>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0c5      	beq.n	800724e <_vfiprintf_r+0x176>
 80072c2:	9105      	str	r1, [sp, #20]
 80072c4:	e7c3      	b.n	800724e <_vfiprintf_r+0x176>
 80072c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ca:	4604      	mov	r4, r0
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f0      	b.n	80072b2 <_vfiprintf_r+0x1da>
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <_vfiprintf_r+0x258>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4630      	mov	r0, r6
 80072dc:	f3af 8000 	nop.w
 80072e0:	4607      	mov	r7, r0
 80072e2:	1c78      	adds	r0, r7, #1
 80072e4:	d1d6      	bne.n	8007294 <_vfiprintf_r+0x1bc>
 80072e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e8:	07d9      	lsls	r1, r3, #31
 80072ea:	d405      	bmi.n	80072f8 <_vfiprintf_r+0x220>
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	059a      	lsls	r2, r3, #22
 80072f0:	d402      	bmi.n	80072f8 <_vfiprintf_r+0x220>
 80072f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072f4:	f7ff fd77 	bl	8006de6 <__retarget_lock_release_recursive>
 80072f8:	89ab      	ldrh	r3, [r5, #12]
 80072fa:	065b      	lsls	r3, r3, #25
 80072fc:	f53f af12 	bmi.w	8007124 <_vfiprintf_r+0x4c>
 8007300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007302:	e711      	b.n	8007128 <_vfiprintf_r+0x50>
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <_vfiprintf_r+0x258>)
 800730c:	a904      	add	r1, sp, #16
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f880 	bl	8007414 <_printf_i>
 8007314:	e7e4      	b.n	80072e0 <_vfiprintf_r+0x208>
 8007316:	bf00      	nop
 8007318:	08007c10 	.word	0x08007c10
 800731c:	08007c30 	.word	0x08007c30
 8007320:	08007bf0 	.word	0x08007bf0
 8007324:	08007c50 	.word	0x08007c50
 8007328:	08007c5a 	.word	0x08007c5a
 800732c:	00000000 	.word	0x00000000
 8007330:	080070b3 	.word	0x080070b3
 8007334:	08007c56 	.word	0x08007c56

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	68e5      	ldr	r5, [r4, #12]
 80073a2:	6832      	ldr	r2, [r6, #0]
 80073a4:	f003 0306 	and.w	r3, r3, #6
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	bf08      	it	eq
 80073ac:	1aad      	subeq	r5, r5, r2
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	7e0f      	ldrb	r7, [r1, #24]
 800741a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800741c:	2f78      	cmp	r7, #120	; 0x78
 800741e:	4691      	mov	r9, r2
 8007420:	4680      	mov	r8, r0
 8007422:	460c      	mov	r4, r1
 8007424:	469a      	mov	sl, r3
 8007426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d8 	beq.w	80075e6 <_printf_i+0x1d2>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80a3 	beq.w	8007582 <_printf_i+0x16e>
 800743c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a101      	add	r1, pc, #4	; (adr r1, 8007454 <_printf_i+0x40>)
 8007450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075cd 	.word	0x080075cd
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080075af 	.word	0x080075af
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075ef 	.word	0x080075ef
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	080075b7 	.word	0x080075b7
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e0a3      	b.n	8007608 <_printf_i+0x1f4>
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	6829      	ldr	r1, [r5, #0]
 80074c4:	0606      	lsls	r6, r0, #24
 80074c6:	f101 0304 	add.w	r3, r1, #4
 80074ca:	d50a      	bpl.n	80074e2 <_printf_i+0xce>
 80074cc:	680e      	ldr	r6, [r1, #0]
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	da03      	bge.n	80074dc <_printf_i+0xc8>
 80074d4:	232d      	movs	r3, #45	; 0x2d
 80074d6:	4276      	negs	r6, r6
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	485e      	ldr	r0, [pc, #376]	; (8007658 <_printf_i+0x244>)
 80074de:	230a      	movs	r3, #10
 80074e0:	e019      	b.n	8007516 <_printf_i+0x102>
 80074e2:	680e      	ldr	r6, [r1, #0]
 80074e4:	602b      	str	r3, [r5, #0]
 80074e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ea:	bf18      	it	ne
 80074ec:	b236      	sxthne	r6, r6
 80074ee:	e7ef      	b.n	80074d0 <_printf_i+0xbc>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	1d19      	adds	r1, r3, #4
 80074f6:	6029      	str	r1, [r5, #0]
 80074f8:	0601      	lsls	r1, r0, #24
 80074fa:	d501      	bpl.n	8007500 <_printf_i+0xec>
 80074fc:	681e      	ldr	r6, [r3, #0]
 80074fe:	e002      	b.n	8007506 <_printf_i+0xf2>
 8007500:	0646      	lsls	r6, r0, #25
 8007502:	d5fb      	bpl.n	80074fc <_printf_i+0xe8>
 8007504:	881e      	ldrh	r6, [r3, #0]
 8007506:	4854      	ldr	r0, [pc, #336]	; (8007658 <_printf_i+0x244>)
 8007508:	2f6f      	cmp	r7, #111	; 0x6f
 800750a:	bf0c      	ite	eq
 800750c:	2308      	moveq	r3, #8
 800750e:	230a      	movne	r3, #10
 8007510:	2100      	movs	r1, #0
 8007512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007516:	6865      	ldr	r5, [r4, #4]
 8007518:	60a5      	str	r5, [r4, #8]
 800751a:	2d00      	cmp	r5, #0
 800751c:	bfa2      	ittt	ge
 800751e:	6821      	ldrge	r1, [r4, #0]
 8007520:	f021 0104 	bicge.w	r1, r1, #4
 8007524:	6021      	strge	r1, [r4, #0]
 8007526:	b90e      	cbnz	r6, 800752c <_printf_i+0x118>
 8007528:	2d00      	cmp	r5, #0
 800752a:	d04d      	beq.n	80075c8 <_printf_i+0x1b4>
 800752c:	4615      	mov	r5, r2
 800752e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007532:	fb03 6711 	mls	r7, r3, r1, r6
 8007536:	5dc7      	ldrb	r7, [r0, r7]
 8007538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800753c:	4637      	mov	r7, r6
 800753e:	42bb      	cmp	r3, r7
 8007540:	460e      	mov	r6, r1
 8007542:	d9f4      	bls.n	800752e <_printf_i+0x11a>
 8007544:	2b08      	cmp	r3, #8
 8007546:	d10b      	bne.n	8007560 <_printf_i+0x14c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	07de      	lsls	r6, r3, #31
 800754c:	d508      	bpl.n	8007560 <_printf_i+0x14c>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4299      	cmp	r1, r3
 8007554:	bfde      	ittt	le
 8007556:	2330      	movle	r3, #48	; 0x30
 8007558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800755c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007560:	1b52      	subs	r2, r2, r5
 8007562:	6122      	str	r2, [r4, #16]
 8007564:	f8cd a000 	str.w	sl, [sp]
 8007568:	464b      	mov	r3, r9
 800756a:	aa03      	add	r2, sp, #12
 800756c:	4621      	mov	r1, r4
 800756e:	4640      	mov	r0, r8
 8007570:	f7ff fee2 	bl	8007338 <_printf_common>
 8007574:	3001      	adds	r0, #1
 8007576:	d14c      	bne.n	8007612 <_printf_i+0x1fe>
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	b004      	add	sp, #16
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	4835      	ldr	r0, [pc, #212]	; (8007658 <_printf_i+0x244>)
 8007584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007588:	6829      	ldr	r1, [r5, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007590:	6029      	str	r1, [r5, #0]
 8007592:	061d      	lsls	r5, r3, #24
 8007594:	d514      	bpl.n	80075c0 <_printf_i+0x1ac>
 8007596:	07df      	lsls	r7, r3, #31
 8007598:	bf44      	itt	mi
 800759a:	f043 0320 	orrmi.w	r3, r3, #32
 800759e:	6023      	strmi	r3, [r4, #0]
 80075a0:	b91e      	cbnz	r6, 80075aa <_printf_i+0x196>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f023 0320 	bic.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2310      	movs	r3, #16
 80075ac:	e7b0      	b.n	8007510 <_printf_i+0xfc>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	2378      	movs	r3, #120	; 0x78
 80075b8:	4828      	ldr	r0, [pc, #160]	; (800765c <_printf_i+0x248>)
 80075ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075be:	e7e3      	b.n	8007588 <_printf_i+0x174>
 80075c0:	0659      	lsls	r1, r3, #25
 80075c2:	bf48      	it	mi
 80075c4:	b2b6      	uxthmi	r6, r6
 80075c6:	e7e6      	b.n	8007596 <_printf_i+0x182>
 80075c8:	4615      	mov	r5, r2
 80075ca:	e7bb      	b.n	8007544 <_printf_i+0x130>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	6826      	ldr	r6, [r4, #0]
 80075d0:	6961      	ldr	r1, [r4, #20]
 80075d2:	1d18      	adds	r0, r3, #4
 80075d4:	6028      	str	r0, [r5, #0]
 80075d6:	0635      	lsls	r5, r6, #24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0x1cc>
 80075dc:	6019      	str	r1, [r3, #0]
 80075de:	e002      	b.n	80075e6 <_printf_i+0x1d2>
 80075e0:	0670      	lsls	r0, r6, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0x1c8>
 80075e4:	8019      	strh	r1, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	4615      	mov	r5, r2
 80075ec:	e7ba      	b.n	8007564 <_printf_i+0x150>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	681d      	ldr	r5, [r3, #0]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4628      	mov	r0, r5
 80075fc:	f7f8 fe18 	bl	8000230 <memchr>
 8007600:	b108      	cbz	r0, 8007606 <_printf_i+0x1f2>
 8007602:	1b40      	subs	r0, r0, r5
 8007604:	6060      	str	r0, [r4, #4]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	e7a8      	b.n	8007564 <_printf_i+0x150>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	462a      	mov	r2, r5
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d0ab      	beq.n	8007578 <_printf_i+0x164>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	d413      	bmi.n	800764e <_printf_i+0x23a>
 8007626:	68e0      	ldr	r0, [r4, #12]
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4298      	cmp	r0, r3
 800762c:	bfb8      	it	lt
 800762e:	4618      	movlt	r0, r3
 8007630:	e7a4      	b.n	800757c <_printf_i+0x168>
 8007632:	2301      	movs	r3, #1
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d09b      	beq.n	8007578 <_printf_i+0x164>
 8007640:	3501      	adds	r5, #1
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	9903      	ldr	r1, [sp, #12]
 8007646:	1a5b      	subs	r3, r3, r1
 8007648:	42ab      	cmp	r3, r5
 800764a:	dcf2      	bgt.n	8007632 <_printf_i+0x21e>
 800764c:	e7eb      	b.n	8007626 <_printf_i+0x212>
 800764e:	2500      	movs	r5, #0
 8007650:	f104 0619 	add.w	r6, r4, #25
 8007654:	e7f5      	b.n	8007642 <_printf_i+0x22e>
 8007656:	bf00      	nop
 8007658:	08007c61 	.word	0x08007c61
 800765c:	08007c72 	.word	0x08007c72

08007660 <_sbrk_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d06      	ldr	r5, [pc, #24]	; (800767c <_sbrk_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7fa fc48 	bl	8001f00 <_sbrk>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_sbrk_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_sbrk_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	200003d0 	.word	0x200003d0

08007680 <__sread>:
 8007680:	b510      	push	{r4, lr}
 8007682:	460c      	mov	r4, r1
 8007684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007688:	f000 f8a8 	bl	80077dc <_read_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	bfab      	itete	ge
 8007690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007692:	89a3      	ldrhlt	r3, [r4, #12]
 8007694:	181b      	addge	r3, r3, r0
 8007696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800769a:	bfac      	ite	ge
 800769c:	6563      	strge	r3, [r4, #84]	; 0x54
 800769e:	81a3      	strhlt	r3, [r4, #12]
 80076a0:	bd10      	pop	{r4, pc}

080076a2 <__swrite>:
 80076a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a6:	461f      	mov	r7, r3
 80076a8:	898b      	ldrh	r3, [r1, #12]
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	4616      	mov	r6, r2
 80076b2:	d505      	bpl.n	80076c0 <__swrite+0x1e>
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	2302      	movs	r3, #2
 80076ba:	2200      	movs	r2, #0
 80076bc:	f000 f870 	bl	80077a0 <_lseek_r>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	4628      	mov	r0, r5
 80076d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	f000 b817 	b.w	8007708 <_write_r>

080076da <__sseek>:
 80076da:	b510      	push	{r4, lr}
 80076dc:	460c      	mov	r4, r1
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 f85d 	bl	80077a0 <_lseek_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	bf15      	itete	ne
 80076ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076f6:	81a3      	strheq	r3, [r4, #12]
 80076f8:	bf18      	it	ne
 80076fa:	81a3      	strhne	r3, [r4, #12]
 80076fc:	bd10      	pop	{r4, pc}

080076fe <__sclose>:
 80076fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007702:	f000 b81b 	b.w	800773c <_close_r>
	...

08007708 <_write_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d07      	ldr	r5, [pc, #28]	; (8007728 <_write_r+0x20>)
 800770c:	4604      	mov	r4, r0
 800770e:	4608      	mov	r0, r1
 8007710:	4611      	mov	r1, r2
 8007712:	2200      	movs	r2, #0
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f7fa fc28 	bl	8001f6c <_write>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_write_r+0x1e>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	b103      	cbz	r3, 8007726 <_write_r+0x1e>
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	200003d0 	.word	0x200003d0

0800772c <abort>:
 800772c:	b508      	push	{r3, lr}
 800772e:	2006      	movs	r0, #6
 8007730:	f000 f88e 	bl	8007850 <raise>
 8007734:	2001      	movs	r0, #1
 8007736:	f7fa fb87 	bl	8001e48 <_exit>
	...

0800773c <_close_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d06      	ldr	r5, [pc, #24]	; (8007758 <_close_r+0x1c>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	f7fa fba5 	bl	8001e96 <_close>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_close_r+0x1a>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_close_r+0x1a>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200003d0 	.word	0x200003d0

0800775c <_fstat_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_fstat_r+0x20>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f7fa fba0 	bl	8001eae <_fstat>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d102      	bne.n	8007778 <_fstat_r+0x1c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b103      	cbz	r3, 8007778 <_fstat_r+0x1c>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	200003d0 	.word	0x200003d0

08007780 <_isatty_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_isatty_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7fa fb9f 	bl	8001ece <_isatty>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_isatty_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_isatty_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	200003d0 	.word	0x200003d0

080077a0 <_lseek_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d07      	ldr	r5, [pc, #28]	; (80077c0 <_lseek_r+0x20>)
 80077a4:	4604      	mov	r4, r0
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	602a      	str	r2, [r5, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f7fa fb98 	bl	8001ee4 <_lseek>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_lseek_r+0x1e>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_lseek_r+0x1e>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	200003d0 	.word	0x200003d0

080077c4 <__malloc_lock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__malloc_lock+0x8>)
 80077c6:	f7ff bb0d 	b.w	8006de4 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	200003c4 	.word	0x200003c4

080077d0 <__malloc_unlock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_unlock+0x8>)
 80077d2:	f7ff bb08 	b.w	8006de6 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	200003c4 	.word	0x200003c4

080077dc <_read_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	; (80077fc <_read_r+0x20>)
 80077e0:	4604      	mov	r4, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	4611      	mov	r1, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f7fa fb36 	bl	8001e5c <_read>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_read_r+0x1e>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_read_r+0x1e>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	200003d0 	.word	0x200003d0

08007800 <_raise_r>:
 8007800:	291f      	cmp	r1, #31
 8007802:	b538      	push	{r3, r4, r5, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	d904      	bls.n	8007814 <_raise_r+0x14>
 800780a:	2316      	movs	r3, #22
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007816:	b112      	cbz	r2, 800781e <_raise_r+0x1e>
 8007818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800781c:	b94b      	cbnz	r3, 8007832 <_raise_r+0x32>
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f830 	bl	8007884 <_getpid_r>
 8007824:	462a      	mov	r2, r5
 8007826:	4601      	mov	r1, r0
 8007828:	4620      	mov	r0, r4
 800782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782e:	f000 b817 	b.w	8007860 <_kill_r>
 8007832:	2b01      	cmp	r3, #1
 8007834:	d00a      	beq.n	800784c <_raise_r+0x4c>
 8007836:	1c59      	adds	r1, r3, #1
 8007838:	d103      	bne.n	8007842 <_raise_r+0x42>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	2001      	movs	r0, #1
 8007840:	e7e7      	b.n	8007812 <_raise_r+0x12>
 8007842:	2400      	movs	r4, #0
 8007844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007848:	4628      	mov	r0, r5
 800784a:	4798      	blx	r3
 800784c:	2000      	movs	r0, #0
 800784e:	e7e0      	b.n	8007812 <_raise_r+0x12>

08007850 <raise>:
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <raise+0xc>)
 8007852:	4601      	mov	r1, r0
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f7ff bfd3 	b.w	8007800 <_raise_r>
 800785a:	bf00      	nop
 800785c:	2000000c 	.word	0x2000000c

08007860 <_kill_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d07      	ldr	r5, [pc, #28]	; (8007880 <_kill_r+0x20>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7fa fadb 	bl	8001e28 <_kill>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_kill_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_kill_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	200003d0 	.word	0x200003d0

08007884 <_getpid_r>:
 8007884:	f7fa bac8 	b.w	8001e18 <_getpid>

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
