
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a30  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001be4  08001be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf4  08001bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bfc  08001bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000460a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010ec  00000000  00000000  00024646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000488  00000000  00000000  00025738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003e0  00000000  00000000  00025bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027683  00000000  00000000  00025fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006526  00000000  00000000  0004d623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c8d  00000000  00000000  00053b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c7d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001020  00000000  00000000  0013c828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08001bcc 	.word	0x08001bcc

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000010 	.word	0x20000010
 80001f0:	08001bcc 	.word	0x08001bcc

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
     PE15   ------> FMC_D12_DA12
     PE13   ------> FMC_D10_DA10
     PB11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b090      	sub	sp, #64	; 0x40
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
 8000512:	4bad      	ldr	r3, [pc, #692]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4aac      	ldr	r2, [pc, #688]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000518:	f043 0310 	orr.w	r3, r3, #16
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4baa      	ldr	r3, [pc, #680]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0310 	and.w	r3, r3, #16
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
 8000528:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
 800052e:	4ba6      	ldr	r3, [pc, #664]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4aa5      	ldr	r2, [pc, #660]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4ba3      	ldr	r3, [pc, #652]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
 8000544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	4b9f      	ldr	r3, [pc, #636]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a9e      	ldr	r2, [pc, #632]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b9c      	ldr	r3, [pc, #624]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	623b      	str	r3, [r7, #32]
 8000560:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
 8000566:	4b98      	ldr	r3, [pc, #608]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a97      	ldr	r2, [pc, #604]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b95      	ldr	r3, [pc, #596]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	61fb      	str	r3, [r7, #28]
 800057c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b91      	ldr	r3, [pc, #580]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a90      	ldr	r2, [pc, #576]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b8e      	ldr	r3, [pc, #568]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b8a      	ldr	r3, [pc, #552]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a89      	ldr	r2, [pc, #548]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a82      	ldr	r2, [pc, #520]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b80      	ldr	r3, [pc, #512]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b7c      	ldr	r3, [pc, #496]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a7b      	ldr	r2, [pc, #492]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b79      	ldr	r3, [pc, #484]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a74      	ldr	r2, [pc, #464]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 80005f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b72      	ldr	r3, [pc, #456]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b6e      	ldr	r3, [pc, #440]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a6d      	ldr	r2, [pc, #436]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a66      	ldr	r2, [pc, #408]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b64      	ldr	r3, [pc, #400]	; (80007c8 <MX_GPIO_Init+0x2d0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	210c      	movs	r1, #12
 8000646:	4861      	ldr	r0, [pc, #388]	; (80007cc <MX_GPIO_Init+0x2d4>)
 8000648:	f000 fe4a 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2130      	movs	r1, #48	; 0x30
 8000650:	485f      	ldr	r0, [pc, #380]	; (80007d0 <MX_GPIO_Init+0x2d8>)
 8000652:	f000 fe45 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	485e      	ldr	r0, [pc, #376]	; (80007d4 <MX_GPIO_Init+0x2dc>)
 800065c:	f000 fe40 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2140      	movs	r1, #64	; 0x40
 8000664:	485c      	ldr	r0, [pc, #368]	; (80007d8 <MX_GPIO_Init+0x2e0>)
 8000666:	f000 fe3b 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	485b      	ldr	r0, [pc, #364]	; (80007dc <MX_GPIO_Init+0x2e4>)
 8000670:	f000 fe36 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2108      	movs	r1, #8
 8000678:	4859      	ldr	r0, [pc, #356]	; (80007e0 <MX_GPIO_Init+0x2e8>)
 800067a:	f000 fe31 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800067e:	2330      	movs	r3, #48	; 0x30
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800068e:	2306      	movs	r3, #6
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000696:	4619      	mov	r1, r3
 8000698:	484c      	ldr	r0, [pc, #304]	; (80007cc <MX_GPIO_Init+0x2d4>)
 800069a:	f000 fc75 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800069e:	230c      	movs	r3, #12
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4845      	ldr	r0, [pc, #276]	; (80007cc <MX_GPIO_Init+0x2d4>)
 80006b6:	f000 fc67 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80006ba:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80006cc:	2308      	movs	r3, #8
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d4:	4619      	mov	r1, r3
 80006d6:	4840      	ldr	r0, [pc, #256]	; (80007d8 <MX_GPIO_Init+0x2e0>)
 80006d8:	f000 fc56 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80006dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ee:	230c      	movs	r3, #12
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f6:	4619      	mov	r1, r3
 80006f8:	4834      	ldr	r0, [pc, #208]	; (80007cc <MX_GPIO_Init+0x2d4>)
 80006fa:	f000 fc45 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000704:	2312      	movs	r3, #18
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000710:	2304      	movs	r3, #4
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000718:	4619      	mov	r1, r3
 800071a:	4830      	ldr	r0, [pc, #192]	; (80007dc <MX_GPIO_Init+0x2e4>)
 800071c:	f000 fc34 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000720:	2308      	movs	r3, #8
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000730:	2306      	movs	r3, #6
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	4828      	ldr	r0, [pc, #160]	; (80007dc <MX_GPIO_Init+0x2e4>)
 800073c:	f000 fc24 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8000740:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000752:	230c      	movs	r3, #12
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075a:	4619      	mov	r1, r3
 800075c:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_GPIO_Init+0x2ec>)
 800075e:	f000 fc13 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000774:	4619      	mov	r1, r3
 8000776:	4819      	ldr	r0, [pc, #100]	; (80007dc <MX_GPIO_Init+0x2e4>)
 8000778:	f000 fc06 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800078c:	230a      	movs	r3, #10
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_GPIO_Init+0x2e4>)
 8000798:	f000 fbf6 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 800079c:	f248 1333 	movw	r3, #33075	; 0x8133
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ae:	230c      	movs	r3, #12
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_GPIO_Init+0x2e0>)
 80007ba:	f000 fbe5 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	e010      	b.n	80007e8 <MX_GPIO_Init+0x2f0>
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40022800 	.word	0x40022800
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020400 	.word	0x40020400
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80007f2:	2306      	movs	r3, #6
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	4619      	mov	r1, r3
 80007fc:	48ad      	ldr	r0, [pc, #692]	; (8000ab4 <MX_GPIO_Init+0x5bc>)
 80007fe:	f000 fbc3 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8000802:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000814:	230c      	movs	r3, #12
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	4619      	mov	r1, r3
 800081e:	48a5      	ldr	r0, [pc, #660]	; (8000ab4 <MX_GPIO_Init+0x5bc>)
 8000820:	f000 fbb2 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8000824:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000836:	230a      	movs	r3, #10
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	4619      	mov	r1, r3
 8000840:	489d      	ldr	r0, [pc, #628]	; (8000ab8 <MX_GPIO_Init+0x5c0>)
 8000842:	f000 fba1 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin
                           PIPin PIPin PIPin PIPin
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000846:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000858:	230c      	movs	r3, #12
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800085c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000860:	4619      	mov	r1, r3
 8000862:	4896      	ldr	r0, [pc, #600]	; (8000abc <MX_GPIO_Init+0x5c4>)
 8000864:	f000 fb90 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000868:	2330      	movs	r3, #48	; 0x30
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800086c:	2311      	movs	r3, #17
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	488d      	ldr	r0, [pc, #564]	; (8000ab4 <MX_GPIO_Init+0x5bc>)
 8000880:	f000 fb82 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000884:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000896:	230c      	movs	r3, #12
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	4619      	mov	r1, r3
 80008a0:	4887      	ldr	r0, [pc, #540]	; (8000ac0 <MX_GPIO_Init+0x5c8>)
 80008a2:	f000 fb71 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008aa:	2311      	movs	r3, #17
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ba:	4619      	mov	r1, r3
 80008bc:	4881      	ldr	r0, [pc, #516]	; (8000ac4 <MX_GPIO_Init+0x5cc>)
 80008be:	f000 fb63 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80008c2:	2304      	movs	r3, #4
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008d2:	230c      	movs	r3, #12
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008da:	4619      	mov	r1, r3
 80008dc:	4875      	ldr	r0, [pc, #468]	; (8000ab4 <MX_GPIO_Init+0x5bc>)
 80008de:	f000 fb53 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80008e2:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f4:	230c      	movs	r3, #12
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	4872      	ldr	r0, [pc, #456]	; (8000ac8 <MX_GPIO_Init+0x5d0>)
 8000900:	f000 fb42 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8000904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	4867      	ldr	r0, [pc, #412]	; (8000ab8 <MX_GPIO_Init+0x5c0>)
 800091a:	f000 fb35 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800091e:	2330      	movs	r3, #48	; 0x30
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000922:	2312      	movs	r3, #18
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092e:	2304      	movs	r3, #4
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	4863      	ldr	r0, [pc, #396]	; (8000ac8 <MX_GPIO_Init+0x5d0>)
 800093a:	f000 fb25 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800094e:	2306      	movs	r3, #6
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	485c      	ldr	r0, [pc, #368]	; (8000acc <MX_GPIO_Init+0x5d4>)
 800095a:	f000 fb15 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000962:	2311      	movs	r3, #17
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	4855      	ldr	r0, [pc, #340]	; (8000acc <MX_GPIO_Init+0x5d4>)
 8000976:	f000 fb07 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800097a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800098c:	2309      	movs	r3, #9
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <MX_GPIO_Init+0x5c8>)
 8000998:	f000 faf6 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800099c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80009ae:	230a      	movs	r3, #10
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4841      	ldr	r0, [pc, #260]	; (8000ac0 <MX_GPIO_Init+0x5c8>)
 80009ba:	f000 fae5 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ce:	230c      	movs	r3, #12
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d6:	4619      	mov	r1, r3
 80009d8:	483d      	ldr	r0, [pc, #244]	; (8000ad0 <MX_GPIO_Init+0x5d8>)
 80009da:	f000 fad5 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80009de:	2305      	movs	r3, #5
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	4837      	ldr	r0, [pc, #220]	; (8000ad4 <MX_GPIO_Init+0x5dc>)
 80009f6:	f000 fac7 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a14:	4619      	mov	r1, r3
 8000a16:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x5bc>)
 8000a18:	f000 fab6 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4827      	ldr	r0, [pc, #156]	; (8000acc <MX_GPIO_Init+0x5d4>)
 8000a30:	f000 faaa 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a34:	2320      	movs	r3, #32
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0x5e0>)
 8000a4a:	f000 fa9d 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000a5e:	230d      	movs	r3, #13
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0x5e0>)
 8000a6a:	f000 fa8d 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <MX_GPIO_Init+0x5dc>)
 8000a8c:	f000 fa7c 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a90:	2308      	movs	r3, #8
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0x5c0>)
 8000aa8:	f000 fa6e 	bl	8000f88 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3740      	adds	r7, #64	; 0x40
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40021400 	.word	0x40021400
 8000ac4:	40022800 	.word	0x40022800
 8000ac8:	40021c00 	.word	0x40021c00
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40022400 	.word	0x40022400

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 f8fa 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f804 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f7ff fd06 	bl	80004f8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <main+0x10>
	...

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2234      	movs	r2, #52	; 0x34
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f85c 	bl	8001bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <SystemClock_Config+0xb8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <SystemClock_Config+0xb8>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <SystemClock_Config+0xb8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <SystemClock_Config+0xbc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <SystemClock_Config+0xbc>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <SystemClock_Config+0xbc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fd81 	bl	800166c <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b70:	f000 f81e 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fbc0 	bl	8001314 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b9a:	f000 f809 	bl	8000bb0 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	; 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f890 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f000 f813 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f000 ff71 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff ff23 	bl	8000adc <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	08001c04 	.word	0x08001c04
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	2000002c 	.word	0x2000002c

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f90d 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff ff56 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f917 	bl	8000f6e <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f8ed 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000028 	.word	0x20000028

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff47 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff5c 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff8e 	bl	8000e74 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffb0 	bl	8000edc <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e177      	b.n	8001294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8166 	bne.w	800128e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80c0 	beq.w	800128e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b66      	ldr	r3, [pc, #408]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <HAL_GPIO_Init+0x328>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d037      	beq.n	80011c6 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a57      	ldr	r2, [pc, #348]	; (80012b8 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d031      	beq.n	80011c2 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x334>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_GPIO_Init+0x338>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x33c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_GPIO_Init+0x340>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x22a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x344>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x226>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a51      	ldr	r2, [pc, #324]	; (80012d0 <HAL_GPIO_Init+0x348>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x222>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_GPIO_Init+0x34c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x21e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x350>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x21a>
 800119e:	2309      	movs	r3, #9
 80011a0:	e012      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011a2:	230a      	movs	r3, #10
 80011a4:	e010      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00e      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x328>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_GPIO_Init+0x354>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x354>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_GPIO_Init+0x354>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_GPIO_Init+0x354>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae84 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40022400 	.word	0x40022400
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0cc      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d90c      	bls.n	8001350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0b8      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	494d      	ldr	r1, [pc, #308]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d044      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d119      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e07f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e067      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4934      	ldr	r1, [pc, #208]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff fcce 	bl	8000da4 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fcca 	bl	8000da4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e04f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d20c      	bcs.n	800145c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e032      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149a:	f000 f821 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	490a      	ldr	r1, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	5ccb      	ldrb	r3, [r1, r3]
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc2e 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00
 80014d0:	40023800 	.word	0x40023800
 80014d4:	08001be4 	.word	0x08001be4
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e4:	b090      	sub	sp, #64	; 0x40
 80014e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d00d      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x40>
 8001504:	2b08      	cmp	r3, #8
 8001506:	f200 80a1 	bhi.w	800164c <HAL_RCC_GetSysClockFreq+0x16c>
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x34>
 800150e:	2b04      	cmp	r3, #4
 8001510:	d003      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x3a>
 8001512:	e09b      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_GetSysClockFreq+0x184>)
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001518:	e09b      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_GetSysClockFreq+0x188>)
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800151e:	e098      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d028      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	099b      	lsrs	r3, r3, #6
 800153c:	2200      	movs	r2, #0
 800153e:	623b      	str	r3, [r7, #32]
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001548:	2100      	movs	r1, #0
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_GetSysClockFreq+0x188>)
 800154c:	fb03 f201 	mul.w	r2, r3, r1
 8001550:	2300      	movs	r3, #0
 8001552:	fb00 f303 	mul.w	r3, r0, r3
 8001556:	4413      	add	r3, r2
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_RCC_GetSysClockFreq+0x188>)
 800155a:	fba0 1202 	umull	r1, r2, r0, r2
 800155e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001560:	460a      	mov	r2, r1
 8001562:	62ba      	str	r2, [r7, #40]	; 0x28
 8001564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001566:	4413      	add	r3, r2
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	2200      	movs	r2, #0
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	61fa      	str	r2, [r7, #28]
 8001572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800157a:	f7fe fe3b 	bl	80001f4 <__aeabi_uldivmod>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4613      	mov	r3, r2
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	e053      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	2200      	movs	r2, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	617a      	str	r2, [r7, #20]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800159a:	f04f 0b00 	mov.w	fp, #0
 800159e:	4652      	mov	r2, sl
 80015a0:	465b      	mov	r3, fp
 80015a2:	f04f 0000 	mov.w	r0, #0
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	0159      	lsls	r1, r3, #5
 80015ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b0:	0150      	lsls	r0, r2, #5
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ebb2 080a 	subs.w	r8, r2, sl
 80015ba:	eb63 090b 	sbc.w	r9, r3, fp
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015d2:	ebb2 0408 	subs.w	r4, r2, r8
 80015d6:	eb63 0509 	sbc.w	r5, r3, r9
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	00eb      	lsls	r3, r5, #3
 80015e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015e8:	00e2      	lsls	r2, r4, #3
 80015ea:	4614      	mov	r4, r2
 80015ec:	461d      	mov	r5, r3
 80015ee:	eb14 030a 	adds.w	r3, r4, sl
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	eb45 030b 	adc.w	r3, r5, fp
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001606:	4629      	mov	r1, r5
 8001608:	028b      	lsls	r3, r1, #10
 800160a:	4621      	mov	r1, r4
 800160c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001610:	4621      	mov	r1, r4
 8001612:	028a      	lsls	r2, r1, #10
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161a:	2200      	movs	r2, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	60fa      	str	r2, [r7, #12]
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	f7fe fde6 	bl	80001f4 <__aeabi_uldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4613      	mov	r3, r2
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_GetSysClockFreq+0x180>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	0c1b      	lsrs	r3, r3, #16
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	3301      	adds	r3, #1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800164a:	e002      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_GetSysClockFreq+0x184>)
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001654:	4618      	mov	r0, r3
 8001656:	3740      	adds	r7, #64	; 0x40
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	00f42400 	.word	0x00f42400
 8001668:	017d7840 	.word	0x017d7840

0800166c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e273      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d075      	beq.n	8001776 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b04      	cmp	r3, #4
 8001694:	d00c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ae:	d10b      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d05b      	beq.n	8001774 <HAL_RCC_OscConfig+0x108>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d157      	bne.n	8001774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e24e      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x74>
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x98>
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6c      	ldr	r2, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a68      	ldr	r2, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a65      	ldr	r2, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fb3e 	bl	8000da4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fb3a 	bl	8000da4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e213      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xc0>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb2a 	bl	8000da4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fb26 	bl	8000da4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1ff      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b51      	ldr	r3, [pc, #324]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0xe8>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001796:	2b08      	cmp	r3, #8
 8001798:	d11c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b44      	ldr	r3, [pc, #272]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e1d3      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4937      	ldr	r1, [pc, #220]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e03a      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x244>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fadf 	bl	8000da4 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fadb 	bl	8000da4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1b4      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4925      	ldr	r1, [pc, #148]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x244>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fabe 	bl	8000da4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff faba 	bl	8000da4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e193      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d036      	beq.n	80018c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d016      	beq.n	800188c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_RCC_OscConfig+0x248>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fa9e 	bl	8000da4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fa9a 	bl	8000da4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e173      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x200>
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_OscConfig+0x248>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fa87 	bl	8000da4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	e00e      	b.n	80018b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fa83 	bl	8000da4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d907      	bls.n	80018b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e15c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	42470000 	.word	0x42470000
 80018b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b8a      	ldr	r3, [pc, #552]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ea      	bne.n	800189a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8097 	beq.w	8001a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a7e      	ldr	r2, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0x47c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x47c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x47c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa43 	bl	8000da4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fa3f 	bl	8000da4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e118      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b6c      	ldr	r3, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x47c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x2ea>
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a65      	ldr	r2, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x324>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x30c>
 800195e:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a5d      	ldr	r2, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x324>
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 800198a:	f023 0304 	bic.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff fa04 	bl	8000da4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff fa00 	bl	8000da4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0d7      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0ee      	beq.n	80019a0 <HAL_RCC_OscConfig+0x334>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9ee 	bl	8000da4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f9ea 	bl	8000da4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0c1      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80ad 	beq.w	8001b64 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0a:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d060      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d145      	bne.n	8001aaa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_RCC_OscConfig+0x480>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f9be 	bl	8000da4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f9ba 	bl	8000da4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e093      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	019b      	lsls	r3, r3, #6
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	3b01      	subs	r3, #1
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	071b      	lsls	r3, r3, #28
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x480>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f98f 	bl	8000da4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f98b 	bl	8000da4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e064      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x41e>
 8001aa8:	e05c      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x480>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f978 	bl	8000da4 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f974 	bl	8000da4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04d      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x44c>
 8001ad6:	e045      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e040      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d030      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d129      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d122      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d119      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10f      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4d0d      	ldr	r5, [pc, #52]	; (8001bac <__libc_init_array+0x38>)
 8001b78:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7a:	1b64      	subs	r4, r4, r5
 8001b7c:	10a4      	asrs	r4, r4, #2
 8001b7e:	2600      	movs	r6, #0
 8001b80:	42a6      	cmp	r6, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	4d0b      	ldr	r5, [pc, #44]	; (8001bb4 <__libc_init_array+0x40>)
 8001b86:	4c0c      	ldr	r4, [pc, #48]	; (8001bb8 <__libc_init_array+0x44>)
 8001b88:	f000 f820 	bl	8001bcc <_init>
 8001b8c:	1b64      	subs	r4, r4, r5
 8001b8e:	10a4      	asrs	r4, r4, #2
 8001b90:	2600      	movs	r6, #0
 8001b92:	42a6      	cmp	r6, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9c:	4798      	blx	r3
 8001b9e:	3601      	adds	r6, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba6:	4798      	blx	r3
 8001ba8:	3601      	adds	r6, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08001bfc 	.word	0x08001bfc
 8001bb0:	08001bfc 	.word	0x08001bfc
 8001bb4:	08001bfc 	.word	0x08001bfc
 8001bb8:	08001c00 	.word	0x08001c00

08001bbc <memset>:
 8001bbc:	4402      	add	r2, r0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <memset+0xa>
 8001bc4:	4770      	bx	lr
 8001bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bca:	e7f9      	b.n	8001bc0 <memset+0x4>

08001bcc <_init>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	bf00      	nop
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr

08001bd8 <_fini>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr
