
F469I-DISCO_Bring-Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0009654c  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0809e6b0  0809e6b0  000b0074  2**0
                  CONTENTS
  4 .ARM          00000008  0809e6b0  0809e6b0  000ae6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809e6b8  0809e6b8  000b0074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809e6b8  0809e6b8  000ae6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0809e6bc  0809e6bc  000ae6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0809e6c0  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000b0074  2**0
                  CONTENTS
 10 .bss          000003ac  20000074  20000074  000b0074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000b0074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000b0074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014229  00000000  00000000  000b00a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000379b  00000000  00000000  000c42cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  000c7a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e90  00000000  00000000  000c8a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd5e  00000000  00000000  000c9920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180c1  00000000  00000000  000f767e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd34c  00000000  00000000  0010f73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020ca8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b64  00000000  00000000  0020cadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800814c 	.word	0x0800814c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800814c 	.word	0x0800814c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <lcd_control>:
        (void *)0, (void *)0, (void *)0
    }
};

static void lcd_control(uint8_t argc, void **argv)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	623b      	str	r3, [r7, #32]
    char *arg1 = argv[0 + strlen(command)];
 80005e6:	6a38      	ldr	r0, [r7, #32]
 80005e8:	f7ff fe14 	bl	8000214 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	61fb      	str	r3, [r7, #28]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 80005f8:	6a38      	ldr	r0, [r7, #32]
 80005fa:	f7ff fe0b 	bl	8000214 <strlen>
 80005fe:	4604      	mov	r4, r0
 8000600:	69f8      	ldr	r0, [r7, #28]
 8000602:	f7ff fe07 	bl	8000214 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4423      	add	r3, r4
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	61bb      	str	r3, [r7, #24]
    char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];
 8000614:	6a38      	ldr	r0, [r7, #32]
 8000616:	f7ff fdfd 	bl	8000214 <strlen>
 800061a:	4604      	mov	r4, r0
 800061c:	69f8      	ldr	r0, [r7, #28]
 800061e:	f7ff fdf9 	bl	8000214 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	441c      	add	r4, r3
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f7ff fdf4 	bl	8000214 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	4423      	add	r3, r4
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	617b      	str	r3, [r7, #20]
    char *arg4 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2) + strlen(arg3)];
 800063a:	6a38      	ldr	r0, [r7, #32]
 800063c:	f7ff fdea 	bl	8000214 <strlen>
 8000640:	4604      	mov	r4, r0
 8000642:	69f8      	ldr	r0, [r7, #28]
 8000644:	f7ff fde6 	bl	8000214 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	441c      	add	r4, r3
 800064c:	69b8      	ldr	r0, [r7, #24]
 800064e:	f7ff fde1 	bl	8000214 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	441c      	add	r4, r3
 8000656:	6978      	ldr	r0, [r7, #20]
 8000658:	f7ff fddc 	bl	8000214 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	4423      	add	r3, r4
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	613b      	str	r3, [r7, #16]

    if (argc == 1)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d136      	bne.n	80006de <lcd_control+0x10a>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	e027      	b.n	80006c6 <lcd_control+0xf2>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000676:	4989      	ldr	r1, [pc, #548]	; (800089c <lcd_control+0x2c8>)
 8000678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6a39      	ldr	r1, [r7, #32]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdb9 	bl	8000200 <strcmp>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d115      	bne.n	80006c0 <lcd_control+0xec>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000694:	4981      	ldr	r1, [pc, #516]	; (800089c <lcd_control+0x2c8>)
 8000696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	487d      	ldr	r0, [pc, #500]	; (800089c <lcd_control+0x2c8>)
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4403      	add	r3, r0
 80006b2:	3308      	adds	r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4879      	ldr	r0, [pc, #484]	; (80008a0 <lcd_control+0x2cc>)
 80006ba:	f006 fbcf 	bl	8006e5c <iprintf>
                return;
 80006be:	e0e9      	b.n	8000894 <lcd_control+0x2c0>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	3301      	adds	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	4975      	ldr	r1, [pc, #468]	; (800089c <lcd_control+0x2c8>)
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	3304      	adds	r3, #4
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1cc      	bne.n	8000676 <lcd_control+0xa2>
 80006dc:	e0d7      	b.n	800088e <lcd_control+0x2ba>
            }
        }
    }
    else if (argc == 2)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d120      	bne.n	8000726 <lcd_control+0x152>
    {
        if (strcmp(arg1, "err") == 0)
 80006e4:	496f      	ldr	r1, [pc, #444]	; (80008a4 <lcd_control+0x2d0>)
 80006e6:	69f8      	ldr	r0, [r7, #28]
 80006e8:	f7ff fd8a 	bl	8000200 <strcmp>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <lcd_control+0x124>
        {
            ltdc_get_err();
 80006f2:	f001 fa77 	bl	8001be4 <ltdc_get_err>
            return ;
 80006f6:	e0cd      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "start") == 0)
 80006f8:	496b      	ldr	r1, [pc, #428]	; (80008a8 <lcd_control+0x2d4>)
 80006fa:	69f8      	ldr	r0, [r7, #28]
 80006fc:	f7ff fd80 	bl	8000200 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d103      	bne.n	800070e <lcd_control+0x13a>
        {
            dsi_start(true);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc18 	bl	8000f3c <dsi_start>
            return ;
 800070c:	e0c2      	b.n	8000894 <lcd_control+0x2c0>
        }
        else if (strcmp(arg1, "stop") == 0)
 800070e:	4967      	ldr	r1, [pc, #412]	; (80008ac <lcd_control+0x2d8>)
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	f7ff fd75 	bl	8000200 <strcmp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	f040 80b8 	bne.w	800088e <lcd_control+0x2ba>
        {
            dsi_start(false);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fc0c 	bl	8000f3c <dsi_start>
            return ;
 8000724:	e0b6      	b.n	8000894 <lcd_control+0x2c0>
        }

    }
    else if (argc == 3)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d121      	bne.n	8000770 <lcd_control+0x19c>
    {
        if (strcmp(arg1, "layer") == 0)
 800072c:	4960      	ldr	r1, [pc, #384]	; (80008b0 <lcd_control+0x2dc>)
 800072e:	69f8      	ldr	r0, [r7, #28]
 8000730:	f7ff fd66 	bl	8000200 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 80a9 	bne.w	800088e <lcd_control+0x2ba>
        {
            if (strcmp(arg2, "int") == 0)
 800073c:	495d      	ldr	r1, [pc, #372]	; (80008b4 <lcd_control+0x2e0>)
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f7ff fd5e 	bl	8000200 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <lcd_control+0x180>
            {
                ltdc_change_layer(0, LAYER0_ADDRESS);
 800074a:	495b      	ldr	r1, [pc, #364]	; (80008b8 <lcd_control+0x2e4>)
 800074c:	2000      	movs	r0, #0
 800074e:	f001 f9fd 	bl	8001b4c <ltdc_change_layer>
                return;
 8000752:	e09f      	b.n	8000894 <lcd_control+0x2c0>
            }
            else if (strcmp(arg2, "ext") == 0)
 8000754:	4959      	ldr	r1, [pc, #356]	; (80008bc <lcd_control+0x2e8>)
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f7ff fd52 	bl	8000200 <strcmp>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 8095 	bne.w	800088e <lcd_control+0x2ba>
            {
                ltdc_change_layer(0, SDRAM_ADDRESS);
 8000764:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000768:	2000      	movs	r0, #0
 800076a:	f001 f9ef 	bl	8001b4c <ltdc_change_layer>
                return;
 800076e:	e091      	b.n	8000894 <lcd_control+0x2c0>
            }
        }

    }
    else if (argc == 5)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b05      	cmp	r3, #5
 8000774:	f040 808b 	bne.w	800088e <lcd_control+0x2ba>
    {
        if (strcmp(arg1, "ch") == 0)
 8000778:	4951      	ldr	r1, [pc, #324]	; (80008c0 <lcd_control+0x2ec>)
 800077a:	69f8      	ldr	r0, [r7, #28]
 800077c:	f7ff fd40 	bl	8000200 <strcmp>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	f040 8083 	bne.w	800088e <lcd_control+0x2ba>
        {
            uint8_t sector = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
            if (strcmp(arg2, "int") == 0)
 800078c:	4949      	ldr	r1, [pc, #292]	; (80008b4 <lcd_control+0x2e0>)
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f7ff fd36 	bl	8000200 <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d140      	bne.n	800081c <lcd_control+0x248>
            {
                sector = atoi(arg3) - 1;
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f006 fb28 	bl	8006df0 <atoi>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b01      	subs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
                if (sector <= 1)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d86f      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 80007ae:	4945      	ldr	r1, [pc, #276]	; (80008c4 <lcd_control+0x2f0>)
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	f7ff fd25 	bl	8000200 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10a      	bne.n	80007d2 <lcd_control+0x1fe>
                    {
                        lcd_control_change_flash(LCD_COLOR_RED, sector);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	483f      	ldr	r0, [pc, #252]	; (80008c8 <lcd_control+0x2f4>)
 80007cc:	f001 f84e 	bl	800186c <lcd_control_change_flash>
                        return ;
 80007d0:	e060      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 80007d2:	493e      	ldr	r1, [pc, #248]	; (80008cc <lcd_control+0x2f8>)
 80007d4:	6938      	ldr	r0, [r7, #16]
 80007d6:	f7ff fd13 	bl	8000200 <strcmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <lcd_control+0x224>
                    {
                        lcd_control_change_flash(LCD_COLOR_GREEN, sector);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80007f2:	f001 f83b 	bl	800186c <lcd_control_change_flash>
                        return ;
 80007f6:	e04d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 80007f8:	4935      	ldr	r1, [pc, #212]	; (80008d0 <lcd_control+0x2fc>)
 80007fa:	6938      	ldr	r0, [r7, #16]
 80007fc:	f7ff fd00 	bl	8000200 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d143      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_flash(LCD_COLOR_BLUE, sector);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	; (80008d4 <lcd_control+0x300>)
 8000816:	f001 f829 	bl	800186c <lcd_control_change_flash>
                        return ;
 800081a:	e03b      	b.n	8000894 <lcd_control+0x2c0>
                    }
                }
            }
            else if (strcmp(arg2, "ext") == 0)
 800081c:	4927      	ldr	r1, [pc, #156]	; (80008bc <lcd_control+0x2e8>)
 800081e:	69b8      	ldr	r0, [r7, #24]
 8000820:	f7ff fcee 	bl	8000200 <strcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d131      	bne.n	800088e <lcd_control+0x2ba>
            {
                sector = atoi(arg3) - 1;
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f006 fae0 	bl	8006df0 <atoi>
 8000830:	4603      	mov	r3, r0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
                if (sector <= 3)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d827      	bhi.n	800088e <lcd_control+0x2ba>
                {
                    if (strcmp(arg4, "r") == 0)
 800083e:	4921      	ldr	r1, [pc, #132]	; (80008c4 <lcd_control+0x2f0>)
 8000840:	6938      	ldr	r0, [r7, #16]
 8000842:	f7ff fcdd 	bl	8000200 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <lcd_control+0x284>
                    {
                        lcd_control_change_sdram(LCD_COLOR_RED, sector);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4619      	mov	r1, r3
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <lcd_control+0x2f4>)
 8000852:	f000 ffc1 	bl	80017d8 <lcd_control_change_sdram>
                        return ;
 8000856:	e01d      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "g") == 0)
 8000858:	491c      	ldr	r1, [pc, #112]	; (80008cc <lcd_control+0x2f8>)
 800085a:	6938      	ldr	r0, [r7, #16]
 800085c:	f7ff fcd0 	bl	8000200 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d106      	bne.n	8000874 <lcd_control+0x2a0>
                    {
                        lcd_control_change_sdram(LCD_COLOR_GREEN, sector);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800086e:	f000 ffb3 	bl	80017d8 <lcd_control_change_sdram>
                        return ;
 8000872:	e00f      	b.n	8000894 <lcd_control+0x2c0>
                    }
                    else if (strcmp(arg4, "b") == 0)
 8000874:	4916      	ldr	r1, [pc, #88]	; (80008d0 <lcd_control+0x2fc>)
 8000876:	6938      	ldr	r0, [r7, #16]
 8000878:	f7ff fcc2 	bl	8000200 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <lcd_control+0x2ba>
                    {
                        lcd_control_change_sdram(LCD_COLOR_BLUE, sector);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <lcd_control+0x300>)
 8000888:	f000 ffa6 	bl	80017d8 <lcd_control_change_sdram>
                        return ;
 800088c:	e002      	b.n	8000894 <lcd_control+0x2c0>
                }
                
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <lcd_control+0x304>)
 8000890:	f006 fb6a 	bl	8006f68 <puts>
}
 8000894:	372c      	adds	r7, #44	; 0x2c
 8000896:	46bd      	mov	sp, r7
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	bf00      	nop
 800089c:	0800841c 	.word	0x0800841c
 80008a0:	08008270 	.word	0x08008270
 80008a4:	08008280 	.word	0x08008280
 80008a8:	08008284 	.word	0x08008284
 80008ac:	0800828c 	.word	0x0800828c
 80008b0:	08008294 	.word	0x08008294
 80008b4:	0800829c 	.word	0x0800829c
 80008b8:	08020000 	.word	0x08020000
 80008bc:	080082a0 	.word	0x080082a0
 80008c0:	080082a4 	.word	0x080082a4
 80008c4:	080082a8 	.word	0x080082a8
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	080082ac 	.word	0x080082ac
 80008d0:	080082b0 	.word	0x080082b0
 80008d4:	ff0000ff 	.word	0xff0000ff
 80008d8:	080082b4 	.word	0x080082b4

080008dc <led_control>:

static void led_control(uint8_t argc, void **argv)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
    char *command = argv[0];
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	613b      	str	r3, [r7, #16]
    char *arg1 = argv[0 + strlen(command)];
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f7ff fc90 	bl	8000214 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
    char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
 8000900:	6938      	ldr	r0, [r7, #16]
 8000902:	f7ff fc87 	bl	8000214 <strlen>
 8000906:	4604      	mov	r4, r0
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff fc83 	bl	8000214 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	4423      	add	r3, r4
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60bb      	str	r3, [r7, #8]

    if (argc == 1)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d136      	bne.n	8000990 <led_control+0xb4>
    {
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e027      	b.n	8000978 <led_control+0x9c>
        {
            if (strcmp(l_cli_cmds_t[i].cmd, command) == 0)
 8000928:	493f      	ldr	r1, [pc, #252]	; (8000a28 <led_control+0x14c>)
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc60 	bl	8000200 <strcmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d115      	bne.n	8000972 <led_control+0x96>
            {
                printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000946:	4938      	ldr	r1, [pc, #224]	; (8000a28 <led_control+0x14c>)
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <led_control+0x14c>)
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4403      	add	r3, r0
 8000964:	3308      	adds	r3, #8
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4830      	ldr	r0, [pc, #192]	; (8000a2c <led_control+0x150>)
 800096c:	f006 fa76 	bl	8006e5c <iprintf>
                return;
 8000970:	e056      	b.n	8000a20 <led_control+0x144>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	492b      	ldr	r1, [pc, #172]	; (8000a28 <led_control+0x14c>)
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1cc      	bne.n	8000928 <led_control+0x4c>
 800098e:	e044      	b.n	8000a1a <led_control+0x13e>
            }
        }
    }
    else if (argc == 3)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d141      	bne.n	8000a1a <led_control+0x13e>
    {
        if (strcmp(arg1, "on") == 0)
 8000996:	4926      	ldr	r1, [pc, #152]	; (8000a30 <led_control+0x154>)
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fc31 	bl	8000200 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d119      	bne.n	80009d8 <led_control+0xfc>
        {
            if (strcmp(arg2, "1") == 0)
 80009a4:	4923      	ldr	r1, [pc, #140]	; (8000a34 <led_control+0x158>)
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff fc2a 	bl	8000200 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <led_control+0xe2>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <led_control+0x15c>)
 80009b8:	f003 fd2a 	bl	8004410 <HAL_GPIO_WritePin>
                return;
 80009bc:	e030      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 80009be:	491f      	ldr	r1, [pc, #124]	; (8000a3c <led_control+0x160>)
 80009c0:	68b8      	ldr	r0, [r7, #8]
 80009c2:	f7ff fc1d 	bl	8000200 <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d126      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <led_control+0x164>)
 80009d2:	f003 fd1d 	bl	8004410 <HAL_GPIO_WritePin>
                return;
 80009d6:	e023      	b.n	8000a20 <led_control+0x144>
            }
        }
        else if (strcmp(arg1, "off") == 0)
 80009d8:	491a      	ldr	r1, [pc, #104]	; (8000a44 <led_control+0x168>)
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fc10 	bl	8000200 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d119      	bne.n	8000a1a <led_control+0x13e>
        {
            if (strcmp(arg2, "1") == 0)
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <led_control+0x158>)
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff fc09 	bl	8000200 <strcmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <led_control+0x124>
            {
                HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <led_control+0x15c>)
 80009fa:	f003 fd09 	bl	8004410 <HAL_GPIO_WritePin>
                return;
 80009fe:	e00f      	b.n	8000a20 <led_control+0x144>
            }
            else if (strcmp(arg2, "2") == 0)
 8000a00:	490e      	ldr	r1, [pc, #56]	; (8000a3c <led_control+0x160>)
 8000a02:	68b8      	ldr	r0, [r7, #8]
 8000a04:	f7ff fbfc 	bl	8000200 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <led_control+0x13e>
            {
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <led_control+0x164>)
 8000a14:	f003 fcfc 	bl	8004410 <HAL_GPIO_WritePin>
                return;
 8000a18:	e002      	b.n	8000a20 <led_control+0x144>
            }
        }
    }
    printf("\r\nNot registered command \r\n");
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <led_control+0x16c>)
 8000a1c:	f006 faa4 	bl	8006f68 <puts>
    
}
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	0800841c 	.word	0x0800841c
 8000a2c:	08008270 	.word	0x08008270
 8000a30:	080082d0 	.word	0x080082d0
 8000a34:	080082d4 	.word	0x080082d4
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	080082d8 	.word	0x080082d8
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	080082dc 	.word	0x080082dc
 8000a48:	080082b4 	.word	0x080082b4

08000a4c <help_func>:

static void help_func(uint8_t argc, void **argv)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
    // char *command = argv[0];
    // char *arg1 = argv[0 + strlen(command)];
    // char *arg2 = argv[0 + strlen(command) + strlen(arg1)];
    // char *arg3 = argv[0 + strlen(command) + strlen(arg1) + strlen(arg2)];

    if (argc == 1)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d129      	bne.n	8000ab2 <help_func+0x66>
    {
        printf("\r\n ==== Command List ==== \r\n");
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <help_func+0x6c>)
 8000a60:	f006 fa82 	bl	8006f68 <puts>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e017      	b.n	8000a9a <help_func+0x4e>
        {
            printf("[%s] \r\n %s \r\n", l_cli_cmds_t[i].cmd, l_cli_cmds_t[i].cmd_usage);
 8000a6a:	4914      	ldr	r1, [pc, #80]	; (8000abc <help_func+0x70>)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <help_func+0x70>)
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4403      	add	r3, r0
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <help_func+0x74>)
 8000a90:	f006 f9e4 	bl	8006e5c <iprintf>
        for (int i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <help_func+0x70>)
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1dc      	bne.n	8000a6a <help_func+0x1e>
        }
        return;
 8000ab0:	bf00      	nop
    }
}
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	080082e0 	.word	0x080082e0
 8000abc:	0800841c 	.word	0x0800841c
 8000ac0:	08008270 	.word	0x08008270

08000ac4 <shell_get_command_index>:

static uint8_t shell_get_command_index(char *cmd_str)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e011      	b.n	8000afa <shell_get_command_index+0x36>
    {
        if (strcmp(cmd_str, l_cli_cmds_t[i].cmd) == 0)
 8000ad6:	4912      	ldr	r1, [pc, #72]	; (8000b20 <shell_get_command_index+0x5c>)
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fb89 	bl	8000200 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00e      	beq.n	8000b12 <shell_get_command_index+0x4e>
    for (i = 0; l_cli_cmds_t[i].cmd_func != 0; i++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <shell_get_command_index+0x5c>)
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	3304      	adds	r3, #4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e2      	bne.n	8000ad6 <shell_get_command_index+0x12>
 8000b10:	e000      	b.n	8000b14 <shell_get_command_index+0x50>
        {
            break;
 8000b12:	bf00      	nop
        }
    }

    return i;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	0800841c 	.word	0x0800841c

08000b24 <cli_process>:

void cli_process(char* cmd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b30:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b34:	6018      	str	r0, [r3, #0]
    void *argv[128] = {0};
 8000b36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b3a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	461a      	mov	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f006 f980 	bl	8006e4c <memset>
    int i = 0, idx = 0, argc = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    // char *command, *arg1;
    char *command;
    uint8_t cmd_idx;

    char *ptr = strtok(cmd, " \r");
 8000b5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b66:	4939      	ldr	r1, [pc, #228]	; (8000c4c <cli_process+0x128>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f006 fa0d 	bl	8006f88 <strtok>
 8000b6e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    while (ptr != NULL)
 8000b72:	e02c      	b.n	8000bce <cli_process+0xaa>
    {
        for (i = 0; i < strlen(ptr); i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000b7a:	e014      	b.n	8000ba6 <cli_process+0x82>
            argv[idx++] = &ptr[i];
 8000b7c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000b80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b84:	1c59      	adds	r1, r3, #1
 8000b86:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8000b8a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000b8e:	4411      	add	r1, r2
 8000b90:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000b94:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < strlen(ptr); i++)
 8000b9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ba6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000baa:	f7ff fb33 	bl	8000214 <strlen>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8e1      	bhi.n	8000b7c <cli_process+0x58>

        ptr = strtok(NULL, " \r");
 8000bb8:	4924      	ldr	r1, [pc, #144]	; (8000c4c <cli_process+0x128>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f006 f9e4 	bl	8006f88 <strtok>
 8000bc0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        argc++;
 8000bc4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    while (ptr != NULL)
 8000bce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ce      	bne.n	8000b74 <cli_process+0x50>
    }

    command = argv[0];
 8000bd6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000bda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    // arg1 = argv[0 + strlen(command)];
    if (command)
 8000be4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d027      	beq.n	8000c3c <cli_process+0x118>
    {
        cmd_idx = shell_get_command_index(command);
 8000bec:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000bf0:	f7ff ff68 	bl	8000ac4 <shell_get_command_index>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
        if (l_cli_cmds_t[cmd_idx].cmd_func == 0)
 8000bfa:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <cli_process+0x12c>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <cli_process+0xf6>
        {
            printf("\r\n No command found \r\n");
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <cli_process+0x130>)
 8000c14:	f006 f9a8 	bl	8006f68 <puts>
 8000c18:	e013      	b.n	8000c42 <cli_process+0x11e>
            return;
        }
        l_cli_cmds_t[cmd_idx].cmd_func(argc, argv);
 8000c1a:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <cli_process+0x12c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
    }

    printf("\r\n");
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <cli_process+0x134>)
 8000c3e:	f006 f993 	bl	8006f68 <puts>
 8000c42:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080082fc 	.word	0x080082fc
 8000c50:	0800841c 	.word	0x0800841c
 8000c54:	08008300 	.word	0x08008300
 8000c58:	08008318 	.word	0x08008318

08000c5c <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ae      	sub	sp, #184	; 0xb8
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000c62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c72:	2224      	movs	r2, #36	; 0x24
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 f8e8 	bl	8006e4c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	226c      	movs	r2, #108	; 0x6c
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f006 f8d9 	bl	8006e4c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c9a:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000c9c:	4a69      	ldr	r2, [pc, #420]	; (8000e44 <MX_DSIHOST_DSI_Init+0x1e8>)
 8000c9e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000cb2:	237d      	movs	r3, #125	; 0x7d
 8000cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc8:	4619      	mov	r1, r3
 8000cca:	485d      	ldr	r0, [pc, #372]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000ccc:	f001 ff46 	bl	8002b5c <HAL_DSI_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000cd6:	f001 f821 	bl	8001d1c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d14:	4619      	mov	r1, r3
 8000d16:	484a      	ldr	r0, [pc, #296]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d18:	f002 fca2 	bl	8003660 <HAL_DSI_ConfigHostTimeouts>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000d22:	f000 fffb 	bl	8001d1c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000d26:	2323      	movs	r3, #35	; 0x23
 8000d28:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000d2a:	2323      	movs	r3, #35	; 0x23
 8000d2c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 35;
 8000d2e:	2323      	movs	r3, #35	; 0x23
 8000d30:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 35;
 8000d32:	2323      	movs	r3, #35	; 0x23
 8000d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 10;
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d46:	4619      	mov	r1, r3
 8000d48:	483d      	ldr	r0, [pc, #244]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d4a:	f002 fc1f 	bl	800358c <HAL_DSI_ConfigPhyTimer>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000d54:	f000 ffe2 	bl	8001d1c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4839      	ldr	r0, [pc, #228]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d5c:	f002 fbee 	bl	800353c <HAL_DSI_ConfigFlowControl>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8000d66:	f000 ffd9 	bl	8001d1c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d6a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d6e:	4834      	ldr	r0, [pc, #208]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d70:	f002 fe6e 	bl	8003a50 <HAL_DSI_SetLowPowerRXFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000d7a:	f000 ffcf 	bl	8001d1c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_GEN) != HAL_OK)
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	482f      	ldr	r0, [pc, #188]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000d84:	f002 f806 	bl	8002d94 <HAL_DSI_ConfigErrorMonitor>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_DSIHOST_DSI_Init+0x136>
  {
    Error_Handler();
 8000d8e:	f000 ffc5 	bl	8001d1c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000d96:	2305      	movs	r3, #5
 8000d98:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 800;
 8000da2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000da6:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 68;
 8000dc0:	2344      	movs	r3, #68	; 0x44
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1940;
 8000dc4:	f240 7394 	movw	r3, #1940	; 0x794
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 120;
 8000dca:	2378      	movs	r3, #120	; 0x78
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 150;
 8000dce:	2396      	movs	r3, #150	; 0x96
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 150;
 8000dd2:	2396      	movs	r3, #150	; 0x96
 8000dd4:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8000dd6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e04:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e16:	f002 f989 	bl	800312c <HAL_DSI_ConfigVideoMode>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_DSIHOST_DSI_Init+0x1c8>
  {
    Error_Handler();
 8000e20:	f000 ff7c 	bl	8001d1c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000e28:	f002 f958 	bl	80030dc <HAL_DSI_SetGenericVCID>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_DSIHOST_DSI_Init+0x1da>
  {
    Error_Handler();
 8000e32:	f000 ff73 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	37b8      	adds	r7, #184	; 0xb8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000090 	.word	0x20000090
 8000e44:	40016c00 	.word	0x40016c00

08000e48 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_DSI_MspInit+0x94>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d133      	bne.n	8000ed2 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_DSI_MspInit+0x98>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_DSI_MspInit+0x9c>)
 8000ebe:	f003 f8fb 	bl	80040b8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	205c      	movs	r0, #92	; 0x5c
 8000ec8:	f001 fd37 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ecc:	205c      	movs	r0, #92	; 0x5c
 8000ece:	f001 fd50 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40016c00 	.word	0x40016c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40022400 	.word	0x40022400

08000ee8 <DSI_IO_WriteCmd>:
  }
}

/* USER CODE BEGIN 1 */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d80d      	bhi.n	8000f14 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi, (uint32_t) 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4613      	mov	r3, r2
 8000f08:	2215      	movs	r2, #21
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <DSI_IO_WriteCmd+0x50>)
 8000f0e:	f002 fce5 	bl	80038dc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000f12:	e00d      	b.n	8000f30 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi,  (uint32_t) 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2239      	movs	r2, #57	; 0x39
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <DSI_IO_WriteCmd+0x50>)
 8000f2c:	f002 fcf8 	bl	8003920 <HAL_DSI_LongWrite>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000090 	.word	0x20000090

08000f3c <dsi_start>:

void dsi_start(bool start)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if(start)
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <dsi_start+0x20>
  {
      HAL_DSI_Start(&(hdsi));
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <dsi_start+0x30>)
 8000f4e:	f002 fc4d 	bl	80037ec <HAL_DSI_Start>
      ltdc_change_layer(0, LAYER0_ADDRESS);
 8000f52:	4907      	ldr	r1, [pc, #28]	; (8000f70 <dsi_start+0x34>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fdf9 	bl	8001b4c <ltdc_change_layer>
  }
  else
  {
      HAL_DSI_Stop(&(hdsi));
  }
}
 8000f5a:	e002      	b.n	8000f62 <dsi_start+0x26>
      HAL_DSI_Stop(&(hdsi));
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <dsi_start+0x30>)
 8000f5e:	f002 fc81 	bl	8003864 <HAL_DSI_Stop>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000090 	.word	0x20000090
 8000f70:	08020000 	.word	0x08020000

08000f74 <sdram_init>:


static FMC_SDRAM_CommandTypeDef Command;

static void sdram_init(SDRAM_HandleTypeDef * p_hsdram1)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <sdram_init+0xbc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <sdram_init+0xbc>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <sdram_init+0xbc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <sdram_init+0xbc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	4924      	ldr	r1, [pc, #144]	; (8001030 <sdram_init+0xbc>)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f004 fd38 	bl	8005a14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fbc9 	bl	800273c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <sdram_init+0xbc>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <sdram_init+0xbc>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <sdram_init+0xbc>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <sdram_init+0xbc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	491a      	ldr	r1, [pc, #104]	; (8001030 <sdram_init+0xbc>)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f004 fd23 	bl	8005a14 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <sdram_init+0xbc>)
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <sdram_init+0xbc>)
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <sdram_init+0xbc>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <sdram_init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	4911      	ldr	r1, [pc, #68]	; (8001030 <sdram_init+0xbc>)
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f004 fd11 	bl	8005a14 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000ff2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000ff6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <sdram_init+0xbc>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <sdram_init+0xbc>)
 8001000:	2210      	movs	r2, #16
 8001002:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <sdram_init+0xbc>)
 8001006:	2201      	movs	r2, #1
 8001008:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <sdram_init+0xbc>)
 800100e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(p_hsdram1, &Command, SDRAM_TIMEOUT);
 8001010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001014:	4906      	ldr	r1, [pc, #24]	; (8001030 <sdram_init+0xbc>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f004 fcfc 	bl	8005a14 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(p_hsdram1, REFRESH_COUNT);
 800101c:	f240 5169 	movw	r1, #1385	; 0x569
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f004 fd2c 	bl	8005a7e <HAL_SDRAM_ProgramRefreshRate>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000ac 	.word	0x200000ac

08001034 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_FMC_Init+0xa0>)
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <MX_FMC_Init+0xa4>)
 8001050:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_FMC_Init+0xa0>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001060:	2204      	movs	r2, #4
 8001062:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001066:	2220      	movs	r2, #32
 8001068:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_FMC_Init+0xa0>)
 800106c:	2240      	movs	r2, #64	; 0x40
 800106e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001072:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001076:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_FMC_Init+0xa0>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001084:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_FMC_Init+0xa0>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001098:	2307      	movs	r3, #7
 800109a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80010a0:	2307      	movs	r3, #7
 80010a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80010a4:	2303      	movs	r3, #3
 80010a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MX_FMC_Init+0xa0>)
 80010b6:	f004 fc55 	bl	8005964 <HAL_SDRAM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80010c0:	f000 fe2c 	bl	8001d1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  sdram_init(&hsdram1);
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <MX_FMC_Init+0xa0>)
 80010c6:	f7ff ff55 	bl	8000f74 <sdram_init>
  /* USER CODE END FMC_Init 2 */
}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	a0000140 	.word	0xa0000140

080010dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010f0:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HAL_FMC_MspInit+0x138>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 8089 	bne.w	800120c <HAL_FMC_MspInit+0x130>
    return;
  }
  FMC_Initialized = 1;
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_FMC_MspInit+0x138>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4b44      	ldr	r3, [pc, #272]	; (8001218 <HAL_FMC_MspInit+0x13c>)
 8001106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001108:	4a43      	ldr	r2, [pc, #268]	; (8001218 <HAL_FMC_MspInit+0x13c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6393      	str	r3, [r2, #56]	; 0x38
 8001110:	4b41      	ldr	r3, [pc, #260]	; (8001218 <HAL_FMC_MspInit+0x13c>)
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 800111c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001120:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4839      	ldr	r0, [pc, #228]	; (800121c <HAL_FMC_MspInit+0x140>)
 8001138:	f002 ffbe 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 800113c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001140:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <HAL_FMC_MspInit+0x144>)
 8001158:	f002 ffae 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 800115c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001160:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	482b      	ldr	r0, [pc, #172]	; (8001224 <HAL_FMC_MspInit+0x148>)
 8001178:	f002 ff9e 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800117c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001180:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4824      	ldr	r0, [pc, #144]	; (8001228 <HAL_FMC_MspInit+0x14c>)
 8001198:	f002 ff8e 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800119c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80011a0:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	481d      	ldr	r0, [pc, #116]	; (800122c <HAL_FMC_MspInit+0x150>)
 80011b8:	f002 ff7e 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80011bc:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80011c0:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <HAL_FMC_MspInit+0x154>)
 80011d8:	f002 ff6e 	bl	80040b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80011dc:	2301      	movs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ec:	230c      	movs	r3, #12
 80011ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	480f      	ldr	r0, [pc, #60]	; (8001234 <HAL_FMC_MspInit+0x158>)
 80011f6:	f002 ff5f 	bl	80040b8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f001 fb9b 	bl	800293a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001204:	2030      	movs	r0, #48	; 0x30
 8001206:	f001 fbb4 	bl	8002972 <HAL_NVIC_EnableIRQ>
 800120a:	e000      	b.n	800120e <HAL_FMC_MspInit+0x132>
    return;
 800120c:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000f0 	.word	0x200000f0
 8001218:	40023800 	.word	0x40023800
 800121c:	40021000 	.word	0x40021000
 8001220:	40021800 	.word	0x40021800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40022000 	.word	0x40022000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40020800 	.word	0x40020800

08001238 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001240:	f7ff ff4c 	bl	80010dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
     PF9   ------> QUADSPI_BK1_IO1
     PF8   ------> QUADSPI_BK1_IO0
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b090      	sub	sp, #64	; 0x40
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
 8001266:	4bad      	ldr	r3, [pc, #692]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4aac      	ldr	r2, [pc, #688]	; (800151c <MX_GPIO_Init+0x2d0>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4baa      	ldr	r3, [pc, #680]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	4ba6      	ldr	r3, [pc, #664]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4aa5      	ldr	r2, [pc, #660]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4ba3      	ldr	r3, [pc, #652]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	4b9f      	ldr	r3, [pc, #636]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a9e      	ldr	r2, [pc, #632]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b9c      	ldr	r3, [pc, #624]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	4b98      	ldr	r3, [pc, #608]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a97      	ldr	r2, [pc, #604]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b95      	ldr	r3, [pc, #596]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b91      	ldr	r3, [pc, #580]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a90      	ldr	r2, [pc, #576]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b8e      	ldr	r3, [pc, #568]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b8a      	ldr	r3, [pc, #552]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a89      	ldr	r2, [pc, #548]	; (800151c <MX_GPIO_Init+0x2d0>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b87      	ldr	r3, [pc, #540]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b83      	ldr	r3, [pc, #524]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a82      	ldr	r2, [pc, #520]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b80      	ldr	r3, [pc, #512]	; (800151c <MX_GPIO_Init+0x2d0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <MX_GPIO_Init+0x2d0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001330:	f043 0320 	orr.w	r3, r3, #32
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b79      	ldr	r3, [pc, #484]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b75      	ldr	r3, [pc, #468]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a74      	ldr	r2, [pc, #464]	; (800151c <MX_GPIO_Init+0x2d0>)
 800134c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b72      	ldr	r3, [pc, #456]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b6e      	ldr	r3, [pc, #440]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a6d      	ldr	r2, [pc, #436]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b6b      	ldr	r3, [pc, #428]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <MX_GPIO_Init+0x2d0>)
 8001384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b64      	ldr	r3, [pc, #400]	; (800151c <MX_GPIO_Init+0x2d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	210c      	movs	r1, #12
 800139a:	4861      	ldr	r0, [pc, #388]	; (8001520 <MX_GPIO_Init+0x2d4>)
 800139c:	f003 f838 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2130      	movs	r1, #48	; 0x30
 80013a4:	485f      	ldr	r0, [pc, #380]	; (8001524 <MX_GPIO_Init+0x2d8>)
 80013a6:	f003 f833 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2108      	movs	r1, #8
 80013ae:	485e      	ldr	r0, [pc, #376]	; (8001528 <MX_GPIO_Init+0x2dc>)
 80013b0:	f003 f82e 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	485c      	ldr	r0, [pc, #368]	; (800152c <MX_GPIO_Init+0x2e0>)
 80013ba:	f003 f829 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2105      	movs	r1, #5
 80013c2:	485b      	ldr	r0, [pc, #364]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80013c4:	f003 f824 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	4859      	ldr	r0, [pc, #356]	; (8001534 <MX_GPIO_Init+0x2e8>)
 80013ce:	f003 f81f 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2108      	movs	r1, #8
 80013d6:	4858      	ldr	r0, [pc, #352]	; (8001538 <MX_GPIO_Init+0x2ec>)
 80013d8:	f003 f81a 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80013dc:	2330      	movs	r3, #48	; 0x30
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80013ec:	2306      	movs	r3, #6
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	4619      	mov	r1, r3
 80013f6:	484a      	ldr	r0, [pc, #296]	; (8001520 <MX_GPIO_Init+0x2d4>)
 80013f8:	f002 fe5e 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80013fc:	230c      	movs	r3, #12
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4843      	ldr	r0, [pc, #268]	; (8001520 <MX_GPIO_Init+0x2d4>)
 8001414:	f002 fe50 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001418:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800142a:	2308      	movs	r3, #8
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	483d      	ldr	r0, [pc, #244]	; (800152c <MX_GPIO_Init+0x2e0>)
 8001436:	f002 fe3f 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800143a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144c:	2304      	movs	r3, #4
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	4619      	mov	r1, r3
 8001456:	4836      	ldr	r0, [pc, #216]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001458:	f002 fe2e 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800145c:	2308      	movs	r3, #8
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146c:	2306      	movs	r3, #6
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001474:	4619      	mov	r1, r3
 8001476:	482e      	ldr	r0, [pc, #184]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001478:	f002 fe1e 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800147c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800148e:	230c      	movs	r3, #12
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001496:	4619      	mov	r1, r3
 8001498:	4828      	ldr	r0, [pc, #160]	; (800153c <MX_GPIO_Init+0x2f0>)
 800149a:	f002 fe0d 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b0:	4619      	mov	r1, r3
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80014b4:	f002 fe00 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80014b8:	2340      	movs	r3, #64	; 0x40
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80014c8:	230a      	movs	r3, #10
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d0:	4619      	mov	r1, r3
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80014d4:	f002 fdf0 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014e8:	2306      	movs	r3, #6
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_GPIO_Init+0x2d8>)
 80014f4:	f002 fde0 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80014f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800150a:	230a      	movs	r3, #10
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <MX_GPIO_Init+0x2ec>)
 8001516:	f002 fdcf 	bl	80040b8 <HAL_GPIO_Init>
 800151a:	e011      	b.n	8001540 <MX_GPIO_Init+0x2f4>
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40022800 	.word	0x40022800
 800152c:	40021800 	.word	0x40021800
 8001530:	40020400 	.word	0x40020400
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40020000 	.word	0x40020000
 800153c:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001540:	2330      	movs	r3, #48	; 0x30
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001544:	2311      	movs	r3, #17
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	486b      	ldr	r0, [pc, #428]	; (8001704 <MX_GPIO_Init+0x4b8>)
 8001558:	f002 fdae 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800155c:	2308      	movs	r3, #8
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001560:	2311      	movs	r3, #17
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001570:	4619      	mov	r1, r3
 8001572:	4865      	ldr	r0, [pc, #404]	; (8001708 <MX_GPIO_Init+0x4bc>)
 8001574:	f002 fda0 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001578:	2304      	movs	r3, #4
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001588:	230c      	movs	r3, #12
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001590:	4619      	mov	r1, r3
 8001592:	485c      	ldr	r0, [pc, #368]	; (8001704 <MX_GPIO_Init+0x4b8>)
 8001594:	f002 fd90 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8001598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4857      	ldr	r0, [pc, #348]	; (800170c <MX_GPIO_Init+0x4c0>)
 80015ae:	f002 fd83 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80015b2:	2330      	movs	r3, #48	; 0x30
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b6:	2312      	movs	r3, #18
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c2:	2304      	movs	r3, #4
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4850      	ldr	r0, [pc, #320]	; (8001710 <MX_GPIO_Init+0x4c4>)
 80015ce:	f002 fd73 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015e2:	2306      	movs	r3, #6
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ea:	4619      	mov	r1, r3
 80015ec:	4849      	ldr	r0, [pc, #292]	; (8001714 <MX_GPIO_Init+0x4c8>)
 80015ee:	f002 fd63 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015f6:	2311      	movs	r3, #17
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	4842      	ldr	r0, [pc, #264]	; (8001714 <MX_GPIO_Init+0x4c8>)
 800160a:	f002 fd55 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800160e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001620:	2309      	movs	r3, #9
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001628:	4619      	mov	r1, r3
 800162a:	483b      	ldr	r0, [pc, #236]	; (8001718 <MX_GPIO_Init+0x4cc>)
 800162c:	f002 fd44 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001630:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001642:	230a      	movs	r3, #10
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164a:	4619      	mov	r1, r3
 800164c:	4832      	ldr	r0, [pc, #200]	; (8001718 <MX_GPIO_Init+0x4cc>)
 800164e:	f002 fd33 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001652:	2305      	movs	r3, #5
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001666:	4619      	mov	r1, r3
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <MX_GPIO_Init+0x4d0>)
 800166a:	f002 fd25 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800166e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001680:	2302      	movs	r3, #2
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001688:	4619      	mov	r1, r3
 800168a:	481e      	ldr	r0, [pc, #120]	; (8001704 <MX_GPIO_Init+0x4b8>)
 800168c:	f002 fd14 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001690:	2304      	movs	r3, #4
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a0:	4619      	mov	r1, r3
 80016a2:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_GPIO_Init+0x4c8>)
 80016a4:	f002 fd08 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016a8:	2320      	movs	r3, #32
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <MX_GPIO_Init+0x4d4>)
 80016be:	f002 fcfb 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d6:	4619      	mov	r1, r3
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_GPIO_Init+0x4c4>)
 80016da:	f002 fced 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016de:	2308      	movs	r3, #8
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_GPIO_Init+0x4c0>)
 80016f6:	f002 fcdf 	bl	80040b8 <HAL_GPIO_Init>

}
 80016fa:	bf00      	nop
 80016fc:	3740      	adds	r7, #64	; 0x40
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40022800 	.word	0x40022800
 800170c:	40020000 	.word	0x40020000
 8001710:	40021c00 	.word	0x40021c00
 8001714:	40021800 	.word	0x40021800
 8001718:	40021400 	.word	0x40021400
 800171c:	40020400 	.word	0x40020400
 8001720:	40022400 	.word	0x40022400

08001724 <color_write>:
static const uint32_t * my_image = vieworks_logo;



static void color_write(uint8_t sector, uint32_t address, uint32_t color)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	73fb      	strb	r3, [r7, #15]
    printf("sector %d, address 0x%08lx, color 0x%08lx \r\n", sector, address, color);
 8001732:	7bf9      	ldrb	r1, [r7, #15]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4824      	ldr	r0, [pc, #144]	; (80017cc <color_write+0xa8>)
 800173a:	f005 fb8f 	bl	8006e5c <iprintf>
    HAL_StatusTypeDef status;
    uint32_t error = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    FLASH_EraseInitTypeDef eraseInitStruct;

    HAL_FLASH_Unlock();
 8001742:	f002 fa07 	bl	8003b54 <HAL_FLASH_Unlock>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800174a:	2302      	movs	r3, #2
 800174c:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Sector = sector;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbSectors = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &error);
 8001756:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fb69 	bl	8003e38 <HAL_FLASHEx_Erase>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (status != HAL_OK)
 800176c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <color_write+0x5c>
    {
        printf("[Error] Flash Erase \r\n");
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <color_write+0xac>)
 8001776:	f005 fbf7 	bl	8006f68 <puts>
        HAL_FLASH_Lock();
 800177a:	f002 fa0d 	bl	8003b98 <HAL_FLASH_Lock>
 800177e:	e022      	b.n	80017c6 <color_write+0xa2>
        return;
    }

    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001784:	e017      	b.n	80017b6 <color_write+0x92>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, color);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	461c      	mov	r4, r3
 800178c:	4615      	mov	r5, r2
 800178e:	4622      	mov	r2, r4
 8001790:	462b      	mov	r3, r5
 8001792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001794:	2002      	movs	r0, #2
 8001796:	f002 f989 	bl	8003aac <HAL_FLASH_Program>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (status != HAL_OK)
 80017a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <color_write+0x8c>
        {
            printf("[Error] Flash write \r\n");
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <color_write+0xb0>)
 80017aa:	f005 fbdd 	bl	8006f68 <puts>
            break;
 80017ae:	e008      	b.n	80017c2 <color_write+0x9e>
    for (uint32_t addr = address; addr < address + 128 * 1024; addr += 4)
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3304      	adds	r3, #4
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3e1      	bcc.n	8001786 <color_write+0x62>
        }
    }

    HAL_FLASH_Lock();
 80017c2:	f002 f9e9 	bl	8003b98 <HAL_FLASH_Lock>
}
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	0800831c 	.word	0x0800831c
 80017d0:	0800834c 	.word	0x0800834c
 80017d4:	08008364 	.word	0x08008364

080017d8 <lcd_control_change_sdram>:

void lcd_control_change_sdram(uint32_t color, uint8_t sector)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
    uint32_t address_offset = SDRAM_ADDRESS;
 80017e4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80017e8:	613b      	str	r3, [r7, #16]
    address_offset += (uint32_t)((800*(480/2)*(sector/2)+(800/2)*(sector%2))*4);
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <lcd_control_change_sdram+0x90>)
 80017f4:	fb03 f202 	mul.w	r2, r3, r2
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	461a      	mov	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
    uint32_t address = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
    for (uint16_t y=0; y<240*4; y+=4)
 8001816:	2300      	movs	r3, #0
 8001818:	82fb      	strh	r3, [r7, #22]
 800181a:	e01a      	b.n	8001852 <lcd_control_change_sdram+0x7a>
    {
        for (uint16_t x=0; x<400*4; x+=4)
 800181c:	2300      	movs	r3, #0
 800181e:	82bb      	strh	r3, [r7, #20]
 8001820:	e010      	b.n	8001844 <lcd_control_change_sdram+0x6c>
        {
            address = address_offset + 800*y + x;
 8001822:	8afb      	ldrh	r3, [r7, #22]
 8001824:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	461a      	mov	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	441a      	add	r2, r3
 8001832:	8abb      	ldrh	r3, [r7, #20]
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
            *(uint32_t *)address = color;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
        for (uint16_t x=0; x<400*4; x+=4)
 800183e:	8abb      	ldrh	r3, [r7, #20]
 8001840:	3304      	adds	r3, #4
 8001842:	82bb      	strh	r3, [r7, #20]
 8001844:	8abb      	ldrh	r3, [r7, #20]
 8001846:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800184a:	d3ea      	bcc.n	8001822 <lcd_control_change_sdram+0x4a>
    for (uint16_t y=0; y<240*4; y+=4)
 800184c:	8afb      	ldrh	r3, [r7, #22]
 800184e:	3304      	adds	r3, #4
 8001850:	82fb      	strh	r3, [r7, #22]
 8001852:	8afb      	ldrh	r3, [r7, #22]
 8001854:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001858:	d3e0      	bcc.n	800181c <lcd_control_change_sdram+0x44>
        }
    }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	0002ee00 	.word	0x0002ee00

0800186c <lcd_control_change_flash>:


void lcd_control_change_flash(uint32_t color, bool tmp)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
    if (!tmp) // sector 5~11 (128K*7)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01c      	beq.n	80018be <lcd_control_change_flash+0x52>
    {
        uint32_t address_offset = 0x08020000;
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <lcd_control_change_flash+0x94>)
 8001886:	60fb      	str	r3, [r7, #12]
        uint32_t address = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
        for (int sector=5; sector<7; sector+=1)
 800188c:	2305      	movs	r3, #5
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	e011      	b.n	80018b6 <lcd_control_change_flash+0x4a>
        {
            address = address_offset + sector*(0x400*128);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	045b      	lsls	r3, r3, #17
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60bb      	str	r3, [r7, #8]
            color_write(sector+5, address, color);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	3305      	adds	r3, #5
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff3a 	bl	8001724 <color_write>
        for (int sector=5; sector<7; sector+=1)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b06      	cmp	r3, #6
 80018ba:	ddea      	ble.n	8001892 <lcd_control_change_flash+0x26>
        {
            address = address_offset + sector*(0x400*128);
            color_write(sector+17, address, color);
        }
    }
}
 80018bc:	e01b      	b.n	80018f6 <lcd_control_change_flash+0x8a>
        uint32_t address_offset = 0x08120000;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <lcd_control_change_flash+0x98>)
 80018c0:	617b      	str	r3, [r7, #20]
        uint32_t address = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
        for (int sector=0; sector<7; sector+=1)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	e011      	b.n	80018f0 <lcd_control_change_flash+0x84>
            address = address_offset + sector*(0x400*128);
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	045b      	lsls	r3, r3, #17
 80018d0:	461a      	mov	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
            color_write(sector+17, address, color);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3311      	adds	r3, #17
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6939      	ldr	r1, [r7, #16]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff1d 	bl	8001724 <color_write>
        for (int sector=0; sector<7; sector+=1)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	ddea      	ble.n	80018cc <lcd_control_change_flash+0x60>
}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08020000 	.word	0x08020000
 8001904:	08120000 	.word	0x08120000

08001908 <NT35510_IO_Delay>:

void NT35510_IO_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    HAL_Delay(Delay);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 ff13 	bl	800273c <HAL_Delay>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <lcd_reset>:

static void lcd_reset(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <lcd_reset+0x28>)
 800192a:	f002 fd71 	bl	8004410 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800192e:	2014      	movs	r0, #20
 8001930:	f000 ff04 	bl	800273c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <lcd_reset+0x28>)
 800193a:	f002 fd69 	bl	8004410 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800193e:	2014      	movs	r0, #20
 8001940:	f000 fefc 	bl	800273c <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021c00 	.word	0x40021c00

0800194c <lcd_control_init>:

void lcd_control_init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    lcd_reset();
 8001950:	f7ff ffe6 	bl	8001920 <lcd_reset>
    MX_DSIHOST_DSI_Init();
 8001954:	f7ff f982 	bl	8000c5c <MX_DSIHOST_DSI_Init>
    MX_LTDC_Init();
 8001958:	f000 f828 	bl	80019ac <MX_LTDC_Init>
    dsi_start(true);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff faed 	bl	8000f3c <dsi_start>

    NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8001962:	2101      	movs	r1, #1
 8001964:	2000      	movs	r0, #0
 8001966:	f000 f9df 	bl	8001d28 <NT35510_Init>

    MX_FMC_Init();
 800196a:	f7ff fb63 	bl	8001034 <MX_FMC_Init>


    // ltdc_change_layer(0, *(uint32_t *)my_image);
    ltdc_change_layer(0, *(uint32_t *)my_image);
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <lcd_control_init+0x5c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f8e8 	bl	8001b4c <ltdc_change_layer>
    lcd_control_change_sdram(LCD_COLOR_CYAN, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001982:	f7ff ff29 	bl	80017d8 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_MAGENTA, 1);
 8001986:	2101      	movs	r1, #1
 8001988:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800198c:	f7ff ff24 	bl	80017d8 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_YELLOW, 2);
 8001990:	2102      	movs	r1, #2
 8001992:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001996:	f7ff ff1f 	bl	80017d8 <lcd_control_change_sdram>
    lcd_control_change_sdram(LCD_COLOR_BLACK, 3);
 800199a:	2103      	movs	r1, #3
 800199c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019a0:	f7ff ff1a 	bl	80017d8 <lcd_control_change_sdram>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000000 	.word	0x20000000

080019ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2234      	movs	r2, #52	; 0x34
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 fa47 	bl	8006e4c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <MX_LTDC_Init+0x100>)
 80019c0:	4a3b      	ldr	r2, [pc, #236]	; (8001ab0 <MX_LTDC_Init+0x104>)
 80019c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80019c4:	4b39      	ldr	r3, [pc, #228]	; (8001aac <MX_LTDC_Init+0x100>)
 80019c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019ca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <MX_LTDC_Init+0x100>)
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <MX_LTDC_Init+0x100>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <MX_LTDC_Init+0x100>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <MX_LTDC_Init+0x100>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 119;
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <MX_LTDC_Init+0x100>)
 80019e8:	2277      	movs	r2, #119	; 0x77
 80019ea:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 35;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MX_LTDC_Init+0x100>)
 80019ee:	2223      	movs	r2, #35	; 0x23
 80019f0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 269;
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MX_LTDC_Init+0x100>)
 80019f4:	f240 120d 	movw	r2, #269	; 0x10d
 80019f8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 835;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_LTDC_Init+0x100>)
 80019fc:	f240 3243 	movw	r2, #835	; 0x343
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 749;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a04:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 869;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a0c:	f240 3265 	movw	r2, #869	; 0x365
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 899;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a14:	f240 3283 	movw	r2, #899	; 0x383
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a32:	481e      	ldr	r0, [pc, #120]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a34:	f002 fd06 	bl	8004444 <HAL_LTDC_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8001a3e:	f000 f96d 	bl	8001d1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001a46:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a4a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001a50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a54:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a5a:	23ff      	movs	r3, #255	; 0xff
 8001a5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a66:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x08020000;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_LTDC_Init+0x108>)
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001a70:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001a76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_LTDC_Init+0x100>)
 8001a96:	f002 fe5d 	bl	8004754 <HAL_LTDC_ConfigLayer>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001aa0:	f000 f93c 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3738      	adds	r7, #56	; 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000f4 	.word	0x200000f4
 8001ab0:	40016800 	.word	0x40016800
 8001ab4:	08020000 	.word	0x08020000

08001ab8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b092      	sub	sp, #72	; 0x48
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	223c      	movs	r2, #60	; 0x3c
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 f9bf 	bl	8006e4c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_LTDC_MspInit+0x8c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d130      	bne.n	8001b3a <HAL_LTDC_MspInit+0x82>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001adc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ae0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fa76 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001afa:	f000 f90f 	bl	8001d1c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_LTDC_MspInit+0x90>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_LTDC_MspInit+0x90>)
 8001b08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_LTDC_MspInit+0x90>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2058      	movs	r0, #88	; 0x58
 8001b20:	f000 ff0b 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b24:	2058      	movs	r0, #88	; 0x58
 8001b26:	f000 ff24 	bl	8002972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2059      	movs	r0, #89	; 0x59
 8001b30:	f000 ff03 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001b34:	2059      	movs	r0, #89	; 0x59
 8001b36:	f000 ff1c 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3748      	adds	r7, #72	; 0x48
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40016800 	.word	0x40016800
 8001b48:	40023800 	.word	0x40023800

08001b4c <ltdc_change_layer>:
  }
}

/* USER CODE BEGIN 1 */
void ltdc_change_layer(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b090      	sub	sp, #64	; 0x40
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	80fb      	strh	r3, [r7, #6]
    LTDC_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = NT35510_800X480_WIDTH;
 8001b5c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b60:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = NT35510_800X480_HEIGHT;
 8001b66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b6a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001b74:	23ff      	movs	r3, #255	; 0xff
 8001b76:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b94:	2307      	movs	r3, #7
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = NT35510_800X480_WIDTH;
 8001b98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = NT35510_800X480_HEIGHT;
 8001b9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex); 
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <ltdc_change_layer+0x70>)
 8001bae:	f002 fdd1 	bl	8004754 <HAL_LTDC_ConfigLayer>
}
 8001bb2:	bf00      	nop
 8001bb4:	3740      	adds	r7, #64	; 0x40
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000f4 	.word	0x200000f4

08001bc0 <HAL_LTDC_ErrorCallback>:

volatile uint32_t ltdc_err = 0;
void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  ltdc_err = hltdc->ErrorCode;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_LTDC_ErrorCallback+0x20>)
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000019c 	.word	0x2000019c

08001be4 <ltdc_get_err>:

void ltdc_get_err(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  printf("[LTDC] err: 0x%08lx \r\n", ltdc_err);
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <ltdc_get_err+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <ltdc_get_err+0x18>)
 8001bf0:	f005 f934 	bl	8006e5c <iprintf>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	2000019c 	.word	0x2000019c
 8001bfc:	0800837c 	.word	0x0800837c

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c04:	f000 fd28 	bl	8002658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c08:	f000 f814 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0c:	f7ff fb1e 	bl	800124c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c10:	f000 fbc6 	bl	80023a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_control_init();
 8001c14:	f7ff fe9a 	bl	800194c <lcd_control_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n\r\n ======= F469I-DISCO Bring-up Start [%s] ======= \r\n", FW_VERSION);
 8001c18:	4904      	ldr	r1, [pc, #16]	; (8001c2c <main+0x2c>)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <main+0x30>)
 8001c1c:	f005 f91e 	bl	8006e5c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uart_check_cmd_recv();
 8001c20:	f000 fcca 	bl	80025b8 <uart_check_cmd_recv>
    HAL_Delay(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f000 fd89 	bl	800273c <HAL_Delay>
    uart_check_cmd_recv();
 8001c2a:	e7f9      	b.n	8001c20 <main+0x20>
 8001c2c:	08008394 	.word	0x08008394
 8001c30:	0800839c 	.word	0x0800839c

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2234      	movs	r2, #52	; 0x34
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 f902 	bl	8006e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	2300      	movs	r3, #0
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <SystemClock_Config+0xe4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <SystemClock_Config+0xe4>)
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <SystemClock_Config+0xe4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001ca8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fbcc 	bl	800545c <HAL_RCC_OscConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001cca:	f000 f827 	bl	8001d1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cce:	f002 ff17 	bl	8004b00 <HAL_PWREx_EnableOverDrive>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001cd8:	f000 f820 	bl	8001d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 ff50 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001d06:	f000 f809 	bl	8001d1c <Error_Handler>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3750      	adds	r7, #80	; 0x50
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <Error_Handler+0x8>
	...

08001d28 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b2      	sub	sp, #200	; 0xc8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8001d32:	2078      	movs	r0, #120	; 0x78
 8001d34:	f7ff fde8 	bl	8001908 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8001d38:	4ac8      	ldr	r2, [pc, #800]	; (800205c <NT35510_Init+0x334>)
 8001d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d42:	6018      	str	r0, [r3, #0]
 8001d44:	3304      	adds	r3, #4
 8001d46:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8001d48:	4bc5      	ldr	r3, [pc, #788]	; (8002060 <NT35510_Init+0x338>)
 8001d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8001d4e:	4bc5      	ldr	r3, [pc, #788]	; (8002064 <NT35510_Init+0x33c>)
 8001d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8001d54:	4bc4      	ldr	r3, [pc, #784]	; (8002068 <NT35510_Init+0x340>)
 8001d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8001d5a:	4bc4      	ldr	r3, [pc, #784]	; (800206c <NT35510_Init+0x344>)
 8001d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8001d60:	4bc3      	ldr	r3, [pc, #780]	; (8002070 <NT35510_Init+0x348>)
 8001d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8001d66:	4bc3      	ldr	r3, [pc, #780]	; (8002074 <NT35510_Init+0x34c>)
 8001d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8001d6c:	f240 13bf 	movw	r3, #447	; 0x1bf
 8001d70:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8001d74:	4bc0      	ldr	r3, [pc, #768]	; (8002078 <NT35510_Init+0x350>)
 8001d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8001d7a:	4bc0      	ldr	r3, [pc, #768]	; (800207c <NT35510_Init+0x354>)
 8001d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8001d80:	4bbf      	ldr	r3, [pc, #764]	; (8002080 <NT35510_Init+0x358>)
 8001d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8001d86:	4bbf      	ldr	r3, [pc, #764]	; (8002084 <NT35510_Init+0x35c>)
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8001d8c:	4bbe      	ldr	r3, [pc, #760]	; (8002088 <NT35510_Init+0x360>)
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8001d92:	4bbe      	ldr	r3, [pc, #760]	; (800208c <NT35510_Init+0x364>)
 8001d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8001d98:	4abd      	ldr	r2, [pc, #756]	; (8002090 <NT35510_Init+0x368>)
 8001d9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4611      	mov	r1, r2
 8001da2:	8019      	strh	r1, [r3, #0]
 8001da4:	3302      	adds	r3, #2
 8001da6:	0c12      	lsrs	r2, r2, #16
 8001da8:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8001daa:	4aba      	ldr	r2, [pc, #744]	; (8002094 <NT35510_Init+0x36c>)
 8001dac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db4:	6018      	str	r0, [r3, #0]
 8001db6:	3304      	adds	r3, #4
 8001db8:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8001dba:	4ab7      	ldr	r2, [pc, #732]	; (8002098 <NT35510_Init+0x370>)
 8001dbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	8019      	strh	r1, [r3, #0]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	0c12      	lsrs	r2, r2, #16
 8001dca:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8001dcc:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001dd0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8001dd4:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8001dd8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8001ddc:	4aaf      	ldr	r2, [pc, #700]	; (800209c <NT35510_Init+0x374>)
 8001dde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4611      	mov	r1, r2
 8001de6:	8019      	strh	r1, [r3, #0]
 8001de8:	3302      	adds	r3, #2
 8001dea:	0c12      	lsrs	r2, r2, #16
 8001dec:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8001dee:	4aac      	ldr	r2, [pc, #688]	; (80020a0 <NT35510_Init+0x378>)
 8001df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df8:	6018      	str	r0, [r3, #0]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8001dfe:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8001e04:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <NT35510_Init+0x37c>)
 8001e06:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8001e08:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8001e0c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8001e10:	2336      	movs	r3, #54	; 0x36
 8001e12:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8001e16:	4aa4      	ldr	r2, [pc, #656]	; (80020a8 <NT35510_Init+0x380>)
 8001e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	3304      	adds	r3, #4
 8001e24:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8001e26:	4aa1      	ldr	r2, [pc, #644]	; (80020ac <NT35510_Init+0x384>)
 8001e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e30:	6018      	str	r0, [r3, #0]
 8001e32:	3304      	adds	r3, #4
 8001e34:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8001e36:	f246 0336 	movw	r3, #24630	; 0x6036
 8001e3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8001e3e:	4a9c      	ldr	r2, [pc, #624]	; (80020b0 <NT35510_Init+0x388>)
 8001e40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e48:	6018      	str	r0, [r3, #0]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8001e4e:	4a99      	ldr	r2, [pc, #612]	; (80020b4 <NT35510_Init+0x38c>)
 8001e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e58:	6018      	str	r0, [r3, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8001e5e:	2335      	movs	r3, #53	; 0x35
 8001e60:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8001e62:	2311      	movs	r3, #17
 8001e64:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8001e66:	2329      	movs	r3, #41	; 0x29
 8001e68:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8001e6a:	f647 7351 	movw	r3, #32593	; 0x7f51
 8001e6e:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8001e70:	f642 4353 	movw	r3, #11347	; 0x2c53
 8001e74:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8001e76:	f240 2355 	movw	r3, #597	; 0x255
 8001e7a:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8001e7c:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8001e80:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8001e82:	232c      	movs	r3, #44	; 0x2c
 8001e84:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8001e86:	f245 533a 	movw	r3, #21818	; 0x553a
 8001e8a:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8001e8c:	f247 733a 	movw	r3, #30522	; 0x773a
 8001e90:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8001e92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e96:	4619      	mov	r1, r3
 8001e98:	2005      	movs	r0, #5
 8001e9a:	f7ff f825 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8001e9e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f7ff f81f 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8001eaa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001eae:	4619      	mov	r1, r3
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f7ff f819 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8001eb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f7ff f813 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8001ec2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f7ff f80d 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8001ece:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f7ff f807 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8001eda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f7ff f801 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8001ee6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eea:	4619      	mov	r1, r3
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7fe fffb 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8001ef2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f7fe fff5 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8001efe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f02:	4619      	mov	r1, r3
 8001f04:	2003      	movs	r0, #3
 8001f06:	f7fe ffef 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8001f0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7fe ffe9 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8001f16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f7fe ffe3 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8001f22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f26:	4619      	mov	r1, r3
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f7fe ffdd 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8001f2e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f32:	4619      	mov	r1, r3
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7fe ffd7 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8001f3a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7fe ffd1 	bl	8000ee8 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8001f46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	2005      	movs	r0, #5
 8001f4e:	f7fe ffcb 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8001f52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f56:	4619      	mov	r1, r3
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7fe ffc5 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8001f5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f62:	4619      	mov	r1, r3
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe ffbf 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8001f6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7fe ffb9 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8001f76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7fe ffb3 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8001f82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f86:	4619      	mov	r1, r3
 8001f88:	2004      	movs	r0, #4
 8001f8a:	f7fe ffad 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8001f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f92:	4619      	mov	r1, r3
 8001f94:	2003      	movs	r0, #3
 8001f96:	f7fe ffa7 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8001f9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f7fe ffa1 	bl	8000ee8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8001fa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001faa:	4619      	mov	r1, r3
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe ff9b 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8001fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7fe ff95 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7fe ff8f 	bl	8000ee8 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8001fca:	20c8      	movs	r0, #200	; 0xc8
 8001fcc:	f7ff fc9c 	bl	8001908 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d112      	bne.n	8001ffc <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8001fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe ff83 	bl	8000ee8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8001fe2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	2004      	movs	r0, #4
 8001fea:	f7fe ff7d 	bl	8000ee8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8001fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	2004      	movs	r0, #4
 8001ff6:	f7fe ff77 	bl	8000ee8 <DSI_IO_WriteCmd>
 8001ffa:	e011      	b.n	8002020 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8001ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002000:	4619      	mov	r1, r3
 8002002:	2001      	movs	r0, #1
 8002004:	f7fe ff70 	bl	8000ee8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8002008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200c:	4619      	mov	r1, r3
 800200e:	2004      	movs	r0, #4
 8002010:	f7fe ff6a 	bl	8000ee8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8002014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002018:	4619      	mov	r1, r3
 800201a:	2004      	movs	r0, #4
 800201c:	f7fe ff64 	bl	8000ee8 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8002020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002024:	4619      	mov	r1, r3
 8002026:	2000      	movs	r0, #0
 8002028:	f7fe ff5e 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 800202c:	2078      	movs	r0, #120	; 0x78
 800202e:	f7ff fc6b 	bl	8001908 <NT35510_IO_Delay>

  switch(ColorCoding)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <NT35510_Init+0x324>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d13c      	bne.n	80020b8 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe ff4f 	bl	8000ee8 <DSI_IO_WriteCmd>
      break;
 800204a:	e03c      	b.n	80020c6 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe ff48 	bl	8000ee8 <DSI_IO_WriteCmd>
      break;
 8002058:	e035      	b.n	80020c6 <NT35510_Init+0x39e>
 800205a:	bf00      	nop
 800205c:	080083d4 	.word	0x080083d4
 8002060:	b0030303 	.word	0xb0030303
 8002064:	b6464646 	.word	0xb6464646
 8002068:	b1030303 	.word	0xb1030303
 800206c:	b7363636 	.word	0xb7363636
 8002070:	b2020000 	.word	0xb2020000
 8002074:	b8262626 	.word	0xb8262626
 8002078:	b3090909 	.word	0xb3090909
 800207c:	b9363636 	.word	0xb9363636
 8002080:	b5080808 	.word	0xb5080808
 8002084:	ba262626 	.word	0xba262626
 8002088:	bc008000 	.word	0xbc008000
 800208c:	bd008000 	.word	0xbd008000
 8002090:	080083dc 	.word	0x080083dc
 8002094:	080083e0 	.word	0x080083e0
 8002098:	080083e8 	.word	0x080083e8
 800209c:	080083ec 	.word	0x080083ec
 80020a0:	080083f0 	.word	0x080083f0
 80020a4:	cc000003 	.word	0xcc000003
 80020a8:	080083f8 	.word	0x080083f8
 80020ac:	08008400 	.word	0x08008400
 80020b0:	08008408 	.word	0x08008408
 80020b4:	08008410 	.word	0x08008410
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	2001      	movs	r0, #1
 80020c0:	f7fe ff12 	bl	8000ee8 <DSI_IO_WriteCmd>
      break;
 80020c4:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7fe ff0b 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	4619      	mov	r1, r3
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe ff05 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe feff 	bl	8000ee8 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	4619      	mov	r1, r3
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe fef9 	bl	8000ee8 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80020f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fa:	4619      	mov	r1, r3
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe fef3 	bl	8000ee8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	2000      	movs	r0, #0
 800210a:	f7fe feed 	bl	8000ee8 <DSI_IO_WriteCmd>

  return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	37c8      	adds	r7, #200	; 0xc8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 faa2 	bl	80026fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <USART3_IRQHandler+0x10>)
 80021c2:	f003 fd93 	bl	8005cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200003a8 	.word	0x200003a8

080021d0 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <FMC_IRQHandler+0x10>)
 80021d6:	f003 fbf9 	bl	80059cc <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200000bc 	.word	0x200000bc

080021e4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <LTDC_IRQHandler+0x10>)
 80021ea:	f002 f9fb 	bl	80045e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200000f4 	.word	0x200000f4

080021f8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <LTDC_ER_IRQHandler+0x10>)
 80021fe:	f002 f9f1 	bl	80045e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200000f4 	.word	0x200000f4

0800220c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DSI_IRQHandler+0x10>)
 8002212:	f000 fe7c 	bl	8002f0e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000090 	.word	0x20000090

08002220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_kill>:

int _kill(int pid, int sig)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800223a:	f004 fddd 	bl	8006df8 <__errno>
 800223e:	4603      	mov	r3, r0
 8002240:	2216      	movs	r2, #22
 8002242:	601a      	str	r2, [r3, #0]
	return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_exit>:

void _exit (int status)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe7 	bl	8002230 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002262:	e7fe      	b.n	8002262 <_exit+0x12>

08002264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e00a      	b.n	800228c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	4601      	mov	r1, r0
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf0      	blt.n	8002276 <_read+0x12>
	}

return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_close>:
	}
	return len;
}

int _close(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c6:	605a      	str	r2, [r3, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_isatty>:

int _isatty(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	return 1;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f004 fd5e 	bl	8006df8 <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20050000 	.word	0x20050000
 8002368:	00000400 	.word	0x00000400
 800236c:	200001a0 	.word	0x200001a0
 8002370:	20000420 	.word	0x20000420

08002374 <_write>:

volatile bool cmd_ready = false;
char cmd_buf[UART_BUF_SIZE];

int _write(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	b29a      	uxth	r2, r3
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <_write+0x28>)
 800238c:	f003 fbec 	bl	8005b68 <HAL_UART_Transmit>
  return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200003a8 	.word	0x200003a8

080023a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <MX_USART3_UART_Init+0x64>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023d6:	480a      	ldr	r0, [pc, #40]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023d8:	f003 fb79 	bl	8005ace <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023e2:	f7ff fc9b 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_USART3_UART_Init+0x68>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <MX_USART3_UART_Init+0x6c>)
 80023f0:	4413      	add	r3, r2
 80023f2:	2201      	movs	r2, #1
 80023f4:	4619      	mov	r1, r3
 80023f6:	4802      	ldr	r0, [pc, #8]	; (8002400 <MX_USART3_UART_Init+0x60>)
 80023f8:	f003 fc48 	bl	8005c8c <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200003a8 	.word	0x200003a8
 8002404:	40004800 	.word	0x40004800
 8002408:	200002a4 	.word	0x200002a4
 800240c:	200001a4 	.word	0x200001a4

08002410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_UART_MspInit+0x94>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d134      	bne.n	800249c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_UART_MspInit+0x98>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_UART_MspInit+0x98>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_UART_MspInit+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0x98>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0x98>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0x98>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800246a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800247c:	2307      	movs	r3, #7
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4809      	ldr	r0, [pc, #36]	; (80024ac <HAL_UART_MspInit+0x9c>)
 8002488:	f001 fe16 	bl	80040b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2027      	movs	r0, #39	; 0x27
 8002492:	f000 fa52 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002496:	2027      	movs	r0, #39	; 0x27
 8002498:	f000 fa6b 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40004800 	.word	0x40004800
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a37      	ldr	r2, [pc, #220]	; (800259c <HAL_UART_RxCpltCallback+0xec>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d167      	bne.n	8002592 <HAL_UART_RxCpltCallback+0xe2>
  {
    {
      if (uart3_rx_buf[uart3_rx_idx] == '\n' || uart3_rx_buf[uart3_rx_idx] == '\r')
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 80024cc:	5c9b      	ldrb	r3, [r3, r2]
 80024ce:	2b0a      	cmp	r3, #10
 80024d0:	d007      	beq.n	80024e2 <HAL_UART_RxCpltCallback+0x32>
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d111      	bne.n	8002506 <HAL_UART_RxCpltCallback+0x56>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]
        uart3_rx_idx = 0;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	801a      	strh	r2, [r3, #0]
        
        cmd_ready = true;
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_UART_RxCpltCallback+0xf8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
        strcpy(cmd_buf, (char*)uart3_rx_buf);
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 80024fe:	482b      	ldr	r0, [pc, #172]	; (80025ac <HAL_UART_RxCpltCallback+0xfc>)
 8002500:	f004 fd3a 	bl	8006f78 <strcpy>
 8002504:	e03a      	b.n	800257c <HAL_UART_RxCpltCallback+0xcc>
      }
      else if (uart3_rx_buf[uart3_rx_idx] == '\b')
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 8002510:	5c9b      	ldrb	r3, [r3, r2]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11a      	bne.n	800254c <HAL_UART_RxCpltCallback+0x9c>
      {
        uart3_rx_buf[uart3_rx_idx] = '\0';
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 8002520:	2100      	movs	r1, #0
 8002522:	5499      	strb	r1, [r3, r2]
        // printf("\b \b");
        HAL_UART_Transmit(&huart3, (uint8_t*)BACK_SPACE, 3, HAL_MAX_DELAY);
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	2203      	movs	r2, #3
 800252a:	4921      	ldr	r1, [pc, #132]	; (80025b0 <HAL_UART_RxCpltCallback+0x100>)
 800252c:	4821      	ldr	r0, [pc, #132]	; (80025b4 <HAL_UART_RxCpltCallback+0x104>)
 800252e:	f003 fb1b 	bl	8005b68 <HAL_UART_Transmit>
        uart3_rx_idx = (uart3_rx_idx - 1) % UART_BUF_SIZE;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	425a      	negs	r2, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	bf58      	it	pl
 8002542:	4253      	negpl	r3, r2
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e017      	b.n	800257c <HAL_UART_RxCpltCallback+0xcc>
      }
      else
      {
        HAL_UART_Transmit(&huart3, &uart3_rx_buf[uart3_rx_idx], 1, HAL_MAX_DELAY);
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 8002556:	18d1      	adds	r1, r2, r3
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	2201      	movs	r2, #1
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <HAL_UART_RxCpltCallback+0x104>)
 8002560:	f003 fb02 	bl	8005b68 <HAL_UART_Transmit>
        // printf("%c", &uart3_rx_buf[uart3_rx_idx]);
        uart3_rx_idx = (uart3_rx_idx + 1) % UART_BUF_SIZE;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	3301      	adds	r3, #1
 800256c:	425a      	negs	r2, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	bf58      	it	pl
 8002574:	4253      	negpl	r3, r2
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 800257a:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart3, &uart3_rx_buf[uart3_rx_idx], 1);
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_UART_RxCpltCallback+0xf0>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_UART_RxCpltCallback+0xf4>)
 8002586:	4413      	add	r3, r2
 8002588:	2201      	movs	r2, #1
 800258a:	4619      	mov	r1, r3
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <HAL_UART_RxCpltCallback+0x104>)
 800258e:	f003 fb7d 	bl	8005c8c <HAL_UART_Receive_IT>
    } 
  }
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40004800 	.word	0x40004800
 80025a0:	200002a4 	.word	0x200002a4
 80025a4:	200001a4 	.word	0x200001a4
 80025a8:	200002a6 	.word	0x200002a6
 80025ac:	200002a8 	.word	0x200002a8
 80025b0:	08008418 	.word	0x08008418
 80025b4:	200003a8 	.word	0x200003a8

080025b8 <uart_check_cmd_recv>:

void uart_check_cmd_recv(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  if (cmd_ready)
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <uart_check_cmd_recv+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <uart_check_cmd_recv+0x1a>
  {
    cmd_ready = false;
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <uart_check_cmd_recv+0x20>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    cli_process(cmd_buf);
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <uart_check_cmd_recv+0x24>)
 80025ce:	f7fe faa9 	bl	8000b24 <cli_process>
  }
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200002a6 	.word	0x200002a6
 80025dc:	200002a8 	.word	0x200002a8

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025fc:	4c0b      	ldr	r4, [pc, #44]	; (800262c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260a:	f000 f813 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f004 fbf9 	bl	8006e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7ff faf5 	bl	8001c00 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002618:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002624:	0809e6c0 	.word	0x0809e6c0
  ldr r2, =_sbss
 8002628:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800262c:	20000420 	.word	0x20000420

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <SystemInit+0x20>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <SystemInit+0x20>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_Init+0x40>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_Init+0x40>)
 800266e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_Init+0x40>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002680:	2003      	movs	r0, #3
 8002682:	f000 f94f 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f808 	bl	800269c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800268c:	f7ff fd44 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00

0800269c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x54>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_InitTick+0x58>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f967 	bl	800298e <HAL_SYSTICK_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00e      	b.n	80026e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d80a      	bhi.n	80026e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f000 f92f 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_InitTick+0x5c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000004 	.word	0x20000004
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c
 8002720:	200003ec 	.word	0x200003ec

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200003ec 	.word	0x200003ec

0800273c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff ffee 	bl	8002724 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d005      	beq.n	8002762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_Delay+0x44>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002762:	bf00      	nop
 8002764:	f7ff ffde 	bl	8002724 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d8f7      	bhi.n	8002764 <HAL_Delay+0x28>
  {
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000000c 	.word	0x2000000c

08002784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <__NVIC_EnableIRQ+0x38>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff29 	bl	8002784 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff3e 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff8e 	bl	8002878 <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff31 	bl	80027e8 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff feb6 	bl	8002724 <HAL_GetTick>
 80029b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d008      	beq.n	80029d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e052      	b.n	8002a7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0216 	bic.w	r2, r2, #22
 80029e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <HAL_DMA_Abort+0x62>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0208 	bic.w	r2, r2, #8
 8002a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a28:	e013      	b.n	8002a52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2a:	f7ff fe7b 	bl	8002724 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d90c      	bls.n	8002a52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e015      	b.n	8002a7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e4      	bne.n	8002a2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	223f      	movs	r2, #63	; 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00c      	b.n	8002abe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	019a      	lsls	r2, r3, #6
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0a:	f7ff fe0b 	bl	8002724 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b10:	e009      	b.n	8002b26 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b12:	f7ff fe07 	bl	8002724 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b20:	d901      	bls.n	8002b26 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e015      	b.n	8002b52 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	ea42 0103 	orr.w	r1, r2, r3
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e10b      	b.n	8002d88 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7c5b      	ldrb	r3, [r3, #17]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f964 	bl	8000e48 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b9a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bae:	f7ff fdb9 	bl	8002724 <HAL_GetTick>
 8002bb2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002bb4:	e009      	b.n	8002bca <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002bb6:	f7ff fdb5 	bl	8002724 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc4:	d901      	bls.n	8002bca <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0de      	b.n	8002d88 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ed      	beq.n	8002bb6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002bea:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002bee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c06:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c0e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff fd7a 	bl	800273c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c48:	f7ff fd6c 	bl	8002724 <HAL_GetTick>
 8002c4c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c4e:	e009      	b.n	8002c64 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c50:	f7ff fd68 	bl	8002724 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c5e:	d901      	bls.n	8002c64 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e091      	b.n	8002d88 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ed      	beq.n	8002c50 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0206 	orr.w	r2, r2, #6
 8002c84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0203 	bic.w	r2, r2, #3
 8002c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0203 	bic.w	r2, r2, #3
 8002cc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cee:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_DSI_Init+0x1b4>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	e000      	b.n	8002d12 <HAL_DSI_Init+0x1b6>
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_DSI_Init+0x234>)
 8002d18:	fb03 f202 	mul.w	r2, r3, r2
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	409a      	lsls	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d48:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	003d0900 	.word	0x003d0900

08002d94 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7c1b      	ldrb	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_DSI_ConfigErrorMonitor+0x16>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0ab      	b.n	8002f02 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002de4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002de8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002e06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0202 	orr.w	r2, r2, #2
 8002e42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d009      	beq.n	8002e64 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 020c 	orr.w	r2, r2, #12
 8002e60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0210 	orr.w	r2, r2, #16
 8002e7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002ef6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00f      	beq.n	8002f46 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8ad 	bl	80030a0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f89f 	bl	80030b4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 808c 	beq.w	8003098 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f88:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fa0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f043 0208 	orr.w	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f818 	bl	80030c8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7c1b      	ldrb	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_DSI_SetGenericVCID+0x16>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e016      	b.n	8003120 <HAL_DSI_SetGenericVCID+0x44>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0203 	bic.w	r2, r2, #3
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7c1b      	ldrb	r3, [r3, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_DSI_ConfigVideoMode+0x16>
 800313e:	2302      	movs	r3, #2
 8003140:	e1f6      	b.n	8003530 <HAL_DSI_ConfigVideoMode+0x404>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0203 	bic.w	r2, r2, #3
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800319c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80031c2:	f023 031f 	bic.w	r3, r3, #31
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80031e8:	f023 031f 	bic.w	r3, r3, #31
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0203 	bic.w	r2, r2, #3
 800320e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0207 	bic.w	r2, r2, #7
 8003230:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6959      	ldr	r1, [r3, #20]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	431a      	orrs	r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 020f 	bic.w	r2, r2, #15
 800325e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 020e 	bic.w	r2, r2, #14
 8003282:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	005a      	lsls	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d110      	bne.n	80032c8 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80032d6:	f023 030f 	bic.w	r3, r3, #15
 80032da:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003326:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003348:	f023 0303 	bic.w	r3, r3, #3
 800334c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003394:	f023 0303 	bic.w	r3, r3, #3
 8003398:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033be:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003402:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003426:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6999      	ldr	r1, [r3, #24]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7c1b      	ldrb	r3, [r3, #16]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_DSI_ConfigFlowControl+0x16>
 800354e:	2302      	movs	r3, #2
 8003550:	e016      	b.n	8003580 <HAL_DSI_ConfigFlowControl+0x44>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 021f 	bic.w	r2, r2, #31
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7c1b      	ldrb	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_DSI_ConfigPhyTimer+0x16>
 800359e:	2302      	movs	r3, #2
 80035a0:	e058      	b.n	8003654 <HAL_DSI_ConfigPhyTimer+0xc8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf38      	it	cc
 80035b4:	4613      	movcc	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80035c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80035f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003630:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7c1b      	ldrb	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003672:	2302      	movs	r3, #2
 8003674:	e0b4      	b.n	80037e0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800368a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b292      	uxth	r2, r2
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800376a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7c1b      	ldrb	r3, [r3, #16]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_DSI_Start+0x14>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e02b      	b.n	8003858 <HAL_DSI_Start+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0208 	orr.w	r2, r2, #8
 800383c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7c1b      	ldrb	r3, [r3, #16]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_DSI_Stop+0x14>
 8003874:	2302      	movs	r3, #2
 8003876:	e02b      	b.n	80038d0 <HAL_DSI_Stop+0x6c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	7c1b      	ldrb	r3, [r3, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_DSI_ShortWrite+0x1a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e010      	b.n	8003918 <HAL_DSI_ShortWrite+0x3c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff f8f8 	bl	8002afc <DSI_ShortWrite>
 800390c:	4603      	mov	r3, r0
 800390e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	741a      	strb	r2, [r3, #16]

  return status;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	7c1b      	ldrb	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_DSI_LongWrite+0x1e>
 800393a:	2302      	movs	r3, #2
 800393c:	e084      	b.n	8003a48 <HAL_DSI_LongWrite+0x128>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003944:	f7fe feee 	bl	8002724 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800394a:	e00c      	b.n	8003966 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800394c:	f7fe feea 	bl	8002724 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800395a:	d904      	bls.n	8003966 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e070      	b.n	8003a48 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0eb      	beq.n	800394c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b03      	cmp	r3, #3
 800397c:	bf28      	it	cs
 800397e:	2303      	movcs	r3, #3
 8003980:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	e00f      	b.n	80039a8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	4413      	add	r3, r2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	3301      	adds	r3, #1
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	3301      	adds	r3, #1
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3eb      	bcc.n	8003988 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80039c8:	e028      	b.n	8003a1c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	bf28      	it	cs
 80039d0:	2304      	movcs	r3, #4
 80039d2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039d8:	2300      	movs	r3, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	e00e      	b.n	80039fc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	3301      	adds	r3, #1
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3ec      	bcc.n	80039de <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1d3      	bne.n	80039ca <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a2a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	f7ff f845 	bl	8002aca <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7c1b      	ldrb	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e01b      	b.n	8003a9e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003a7c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	065a      	lsls	r2, r3, #25
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_FLASH_Program+0xa0>)
 8003ac0:	7e1b      	ldrb	r3, [r3, #24]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_FLASH_Program+0x1e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e03b      	b.n	8003b42 <HAL_FLASH_Program+0x96>
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_FLASH_Program+0xa0>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ad0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ad4:	f000 f870 	bl	8003bb8 <FLASH_WaitForLastOperation>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d12b      	bne.n	8003b3a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ae8:	783b      	ldrb	r3, [r7, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	68b8      	ldr	r0, [r7, #8]
 8003aee:	f000 f91b 	bl	8003d28 <FLASH_Program_Byte>
 8003af2:	e016      	b.n	8003b22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003afa:	883b      	ldrh	r3, [r7, #0]
 8003afc:	4619      	mov	r1, r3
 8003afe:	68b8      	ldr	r0, [r7, #8]
 8003b00:	f000 f8ee 	bl	8003ce0 <FLASH_Program_HalfWord>
 8003b04:	e00d      	b.n	8003b22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d105      	bne.n	8003b18 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68b8      	ldr	r0, [r7, #8]
 8003b12:	f000 f8c3 	bl	8003c9c <FLASH_Program_Word>
 8003b16:	e004      	b.n	8003b22 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f000 f88b 	bl	8003c38 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b26:	f000 f847 	bl	8003bb8 <FLASH_WaitForLastOperation>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_FLASH_Program+0xa4>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_FLASH_Program+0xa4>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_FLASH_Program+0xa0>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200003f0 	.word	0x200003f0
 8003b50:	40023c00 	.word	0x40023c00

08003b54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_FLASH_Unlock+0x38>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da0b      	bge.n	8003b7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_FLASH_Unlock+0x38>)
 8003b68:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_FLASH_Unlock+0x3c>)
 8003b6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <HAL_FLASH_Unlock+0x38>)
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_FLASH_Unlock+0x40>)
 8003b70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_FLASH_Unlock+0x38>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da01      	bge.n	8003b7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	45670123 	.word	0x45670123
 8003b94:	cdef89ab 	.word	0xcdef89ab

08003b98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_FLASH_Lock+0x1c>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_FLASH_Lock+0x1c>)
 8003ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <FLASH_WaitForLastOperation+0x78>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bca:	f7fe fdab 	bl	8002724 <HAL_GetTick>
 8003bce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bd0:	e010      	b.n	8003bf4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d00c      	beq.n	8003bf4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <FLASH_WaitForLastOperation+0x38>
 8003be0:	f7fe fda0 	bl	8002724 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d201      	bcs.n	8003bf4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e019      	b.n	8003c28 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <FLASH_WaitForLastOperation+0x7c>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e8      	bne.n	8003bd2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <FLASH_WaitForLastOperation+0x7c>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <FLASH_WaitForLastOperation+0x7c>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <FLASH_WaitForLastOperation+0x7c>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c1e:	f000 f8a5 	bl	8003d6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
  
}  
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200003f0 	.word	0x200003f0
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <FLASH_Program_DoubleWord+0x60>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003c6e:	f3bf 8f6f 	isb	sy
}
 8003c72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	000a      	movs	r2, r1
 8003c82:	2300      	movs	r3, #0
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	3104      	adds	r1, #4
 8003c88:	4613      	mov	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <FLASH_Program_Word+0x40>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40023c00 	.word	0x40023c00

08003ce0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <FLASH_Program_HalfWord+0x44>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	801a      	strh	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4a06      	ldr	r2, [pc, #24]	; (8003d68 <FLASH_Program_Byte+0x40>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	701a      	strb	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00

08003d6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003d70:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f043 0310 	orr.w	r3, r3, #16
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003d86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003d8e:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f043 0308 	orr.w	r3, r3, #8
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003da4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003da8:	2220      	movs	r2, #32
 8003daa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003dc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f043 0302 	orr.w	r3, r3, #2
 8003dde:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003de0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003dfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e06:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <FLASH_SetErrorCode+0xc8>)
 8003e1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <FLASH_SetErrorCode+0xc4>)
 8003e22:	2202      	movs	r2, #2
 8003e24:	60da      	str	r2, [r3, #12]
  }
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	200003f0 	.word	0x200003f0

08003e38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <HAL_FLASHEx_Erase+0xdc>)
 8003e4c:	7e1b      	ldrb	r3, [r3, #24]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_FLASHEx_Erase+0x1e>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e05a      	b.n	8003f0c <HAL_FLASHEx_Erase+0xd4>
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_FLASHEx_Erase+0xdc>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e60:	f7ff feaa 	bl	8003bb8 <FLASH_WaitForLastOperation>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d14a      	bne.n	8003f04 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d117      	bne.n	8003eae <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 f846 	bl	8003f1c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e94:	f7ff fe90 	bl	8003bb8 <FLASH_WaitForLastOperation>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <HAL_FLASHEx_Erase+0xe0>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_FLASHEx_Erase+0xe0>)
 8003ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6113      	str	r3, [r2, #16]
 8003eac:	e028      	b.n	8003f00 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	e01c      	b.n	8003ef0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68b8      	ldr	r0, [r7, #8]
 8003ec0:	f000 f866 	bl	8003f90 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ec4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ec8:	f7ff fe76 	bl	8003bb8 <FLASH_WaitForLastOperation>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_FLASHEx_Erase+0xe0>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_FLASHEx_Erase+0xe0>)
 8003ed6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003eda:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	601a      	str	r2, [r3, #0]
          break;
 8003ee8:	e00a      	b.n	8003f00 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3da      	bcc.n	8003eb6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f00:	f000 f894 	bl	800402c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_FLASHEx_Erase+0xdc>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	761a      	strb	r2, [r3, #24]

  return status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200003f0 	.word	0x200003f0
 8003f18:	40023c00 	.word	0x40023c00

08003f1c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d108      	bne.n	8003f4c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6113      	str	r3, [r2, #16]
 8003f4a:	e00f      	b.n	8003f6c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6113      	str	r3, [r2, #16]
 8003f5e:	e005      	b.n	8003f6c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	4313      	orrs	r3, r2
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <FLASH_MassErase+0x70>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6113      	str	r3, [r2, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00

08003f90 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e010      	b.n	8003fce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d103      	bne.n	8003fba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e009      	b.n	8003fce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d103      	bne.n	8003fc8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e002      	b.n	8003fce <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b0b      	cmp	r3, #11
 8003fd2:	d902      	bls.n	8003fda <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	490f      	ldr	r1, [pc, #60]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8003ff8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ffc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4313      	orrs	r3, r2
 8004008:	4a07      	ldr	r2, [pc, #28]	; (8004028 <FLASH_Erase_Sector+0x98>)
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <FLASH_Erase_Sector+0x98>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6113      	str	r3, [r2, #16]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40023c00 	.word	0x40023c00

0800402c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004042:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004046:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800404e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800405a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800405e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d017      	beq.n	80040a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800407e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004082:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800408a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <FLASH_FlushCaches+0x88>)
 8004096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <FLASH_FlushCaches+0x88>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <FLASH_FlushCaches+0x88>)
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a6:	6013      	str	r3, [r2, #0]
  }
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e177      	b.n	80043c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040d4:	2201      	movs	r2, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	f040 8166 	bne.w	80043be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d005      	beq.n	800410a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004106:	2b02      	cmp	r3, #2
 8004108:	d130      	bne.n	800416c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004140:	2201      	movs	r2, #1
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0201 	and.w	r2, r3, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b03      	cmp	r3, #3
 8004176:	d017      	beq.n	80041a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d123      	bne.n	80041fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	220f      	movs	r2, #15
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	08da      	lsrs	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3208      	adds	r2, #8
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80c0 	beq.w	80043be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4b66      	ldr	r3, [pc, #408]	; (80043dc <HAL_GPIO_Init+0x324>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	4a65      	ldr	r2, [pc, #404]	; (80043dc <HAL_GPIO_Init+0x324>)
 8004248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800424c:	6453      	str	r3, [r2, #68]	; 0x44
 800424e:	4b63      	ldr	r3, [pc, #396]	; (80043dc <HAL_GPIO_Init+0x324>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800425a:	4a61      	ldr	r2, [pc, #388]	; (80043e0 <HAL_GPIO_Init+0x328>)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_GPIO_Init+0x32c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d037      	beq.n	80042f6 <HAL_GPIO_Init+0x23e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a57      	ldr	r2, [pc, #348]	; (80043e8 <HAL_GPIO_Init+0x330>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d031      	beq.n	80042f2 <HAL_GPIO_Init+0x23a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a56      	ldr	r2, [pc, #344]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02b      	beq.n	80042ee <HAL_GPIO_Init+0x236>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a55      	ldr	r2, [pc, #340]	; (80043f0 <HAL_GPIO_Init+0x338>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d025      	beq.n	80042ea <HAL_GPIO_Init+0x232>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <HAL_GPIO_Init+0x33c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01f      	beq.n	80042e6 <HAL_GPIO_Init+0x22e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a53      	ldr	r2, [pc, #332]	; (80043f8 <HAL_GPIO_Init+0x340>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d019      	beq.n	80042e2 <HAL_GPIO_Init+0x22a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_GPIO_Init+0x344>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_GPIO_Init+0x226>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a51      	ldr	r2, [pc, #324]	; (8004400 <HAL_GPIO_Init+0x348>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00d      	beq.n	80042da <HAL_GPIO_Init+0x222>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a50      	ldr	r2, [pc, #320]	; (8004404 <HAL_GPIO_Init+0x34c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <HAL_GPIO_Init+0x21e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4f      	ldr	r2, [pc, #316]	; (8004408 <HAL_GPIO_Init+0x350>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <HAL_GPIO_Init+0x21a>
 80042ce:	2309      	movs	r3, #9
 80042d0:	e012      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042d2:	230a      	movs	r3, #10
 80042d4:	e010      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042d6:	2308      	movs	r3, #8
 80042d8:	e00e      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042da:	2307      	movs	r3, #7
 80042dc:	e00c      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042de:	2306      	movs	r3, #6
 80042e0:	e00a      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042e2:	2305      	movs	r3, #5
 80042e4:	e008      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042e6:	2304      	movs	r3, #4
 80042e8:	e006      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042ea:	2303      	movs	r3, #3
 80042ec:	e004      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e002      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_GPIO_Init+0x240>
 80042f6:	2300      	movs	r3, #0
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	f002 0203 	and.w	r2, r2, #3
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	4093      	lsls	r3, r2
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004308:	4935      	ldr	r1, [pc, #212]	; (80043e0 <HAL_GPIO_Init+0x328>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3302      	adds	r3, #2
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_GPIO_Init+0x354>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_GPIO_Init+0x354>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004340:	4b32      	ldr	r3, [pc, #200]	; (800440c <HAL_GPIO_Init+0x354>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004364:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_GPIO_Init+0x354>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_GPIO_Init+0x354>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800438e:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_GPIO_Init+0x354>)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_GPIO_Init+0x354>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <HAL_GPIO_Init+0x354>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3301      	adds	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	f67f ae84 	bls.w	80040d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40013800 	.word	0x40013800
 80043e4:	40020000 	.word	0x40020000
 80043e8:	40020400 	.word	0x40020400
 80043ec:	40020800 	.word	0x40020800
 80043f0:	40020c00 	.word	0x40020c00
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40021400 	.word	0x40021400
 80043fc:	40021800 	.word	0x40021800
 8004400:	40021c00 	.word	0x40021c00
 8004404:	40022000 	.word	0x40022000
 8004408:	40022400 	.word	0x40022400
 800440c:	40013c00 	.word	0x40013c00

08004410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
 800441c:	4613      	mov	r3, r2
 800441e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004420:	787b      	ldrb	r3, [r7, #1]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800442c:	e003      	b.n	8004436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	041a      	lsls	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	619a      	str	r2, [r3, #24]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0bf      	b.n	80045d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd fb24 	bl	8001ab8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004486:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800449c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6899      	ldr	r1, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <HAL_LTDC_Init+0x19c>)
 80044b8:	400b      	ands	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6899      	ldr	r1, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68d9      	ldr	r1, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <HAL_LTDC_Init+0x19c>)
 80044e6:	400b      	ands	r3, r1
 80044e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68d9      	ldr	r1, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6919      	ldr	r1, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_LTDC_Init+0x19c>)
 8004514:	400b      	ands	r3, r1
 8004516:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6919      	ldr	r1, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6959      	ldr	r1, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_LTDC_Init+0x19c>)
 8004542:	400b      	ands	r3, r1
 8004544:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6959      	ldr	r1, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004574:	041b      	lsls	r3, r3, #16
 8004576:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0206 	orr.w	r2, r2, #6
 80045b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	f000f800 	.word	0xf000f800

080045e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d023      	beq.n	800464e <HAL_LTDC_IRQHandler+0x6a>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2204      	movs	r2, #4
 8004626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fd fab9 	bl	8001bc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d023      	beq.n	80046a0 <HAL_LTDC_IRQHandler+0xbc>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d01e      	beq.n	80046a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0202 	bic.w	r2, r2, #2
 8004670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2202      	movs	r2, #2
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004680:	f043 0202 	orr.w	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2204      	movs	r2, #4
 800468e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fa90 	bl	8001bc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_LTDC_IRQHandler+0xfe>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f825 	bl	800472c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01b      	beq.n	8004724 <HAL_LTDC_IRQHandler+0x140>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0208 	bic.w	r2, r2, #8
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2208      	movs	r2, #8
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f80e 	bl	8004740 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_LTDC_ConfigLayer+0x1a>
 800476a:	2302      	movs	r3, #2
 800476c:	e02c      	b.n	80047c8 <HAL_LTDC_ConfigLayer+0x74>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2134      	movs	r1, #52	; 0x34
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f811 	bl	80047d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bdb0      	pop	{r4, r5, r7, pc}

080047d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ec:	4413      	add	r3, r2
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	4611      	mov	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	01d2      	lsls	r2, r2, #7
 800480c:	440a      	add	r2, r1
 800480e:	3284      	adds	r2, #132	; 0x84
 8004810:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004814:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004826:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004828:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4619      	mov	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	01db      	lsls	r3, r3, #7
 8004834:	440b      	add	r3, r1
 8004836:	3384      	adds	r3, #132	; 0x84
 8004838:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800483e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484e:	4413      	add	r3, r2
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	01db      	lsls	r3, r3, #7
 800485e:	4413      	add	r3, r2
 8004860:	3384      	adds	r3, #132	; 0x84
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4611      	mov	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	01d2      	lsls	r2, r2, #7
 800486e:	440a      	add	r2, r1
 8004870:	3284      	adds	r2, #132	; 0x84
 8004872:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004876:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004886:	4413      	add	r3, r2
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	01db      	lsls	r3, r3, #7
 8004894:	440b      	add	r3, r1
 8004896:	3384      	adds	r3, #132	; 0x84
 8004898:	4619      	mov	r1, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	01db      	lsls	r3, r3, #7
 80048aa:	4413      	add	r3, r2
 80048ac:	3384      	adds	r3, #132	; 0x84
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	4611      	mov	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	01d2      	lsls	r2, r2, #7
 80048ba:	440a      	add	r2, r1
 80048bc:	3284      	adds	r2, #132	; 0x84
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	3384      	adds	r3, #132	; 0x84
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	4413      	add	r3, r2
 8004902:	3384      	adds	r3, #132	; 0x84
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	01db      	lsls	r3, r3, #7
 8004910:	4413      	add	r3, r2
 8004912:	3384      	adds	r3, #132	; 0x84
 8004914:	461a      	mov	r2, r3
 8004916:	2300      	movs	r3, #0
 8004918:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004920:	461a      	mov	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	431a      	orrs	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	440b      	add	r3, r1
 8004936:	3384      	adds	r3, #132	; 0x84
 8004938:	4619      	mov	r1, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	01db      	lsls	r3, r3, #7
 800494a:	4413      	add	r3, r2
 800494c:	3384      	adds	r3, #132	; 0x84
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	4611      	mov	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	01d2      	lsls	r2, r2, #7
 800495a:	440a      	add	r2, r1
 800495c:	3284      	adds	r2, #132	; 0x84
 800495e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004962:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	01db      	lsls	r3, r3, #7
 800496e:	4413      	add	r3, r2
 8004970:	3384      	adds	r3, #132	; 0x84
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	4413      	add	r3, r2
 8004986:	3384      	adds	r3, #132	; 0x84
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4611      	mov	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	01d2      	lsls	r2, r2, #7
 8004994:	440a      	add	r2, r1
 8004996:	3284      	adds	r2, #132	; 0x84
 8004998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	6809      	ldr	r1, [r1, #0]
 80049ae:	4608      	mov	r0, r1
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	01c9      	lsls	r1, r1, #7
 80049b4:	4401      	add	r1, r0
 80049b6:	3184      	adds	r1, #132	; 0x84
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	01db      	lsls	r3, r3, #7
 80049c6:	4413      	add	r3, r2
 80049c8:	3384      	adds	r3, #132	; 0x84
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	3384      	adds	r3, #132	; 0x84
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	01db      	lsls	r3, r3, #7
 80049ea:	4413      	add	r3, r2
 80049ec:	3384      	adds	r3, #132	; 0x84
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80049fe:	2304      	movs	r3, #4
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e01b      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d102      	bne.n	8004a12 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e014      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d00b      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d007      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d003      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a2e:	2b07      	cmp	r3, #7
 8004a30:	d102      	bne.n	8004a38 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a32:	2302      	movs	r3, #2
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e001      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	4413      	add	r3, r2
 8004a48:	3384      	adds	r3, #132	; 0x84
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	4611      	mov	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	01d2      	lsls	r2, r2, #7
 8004a56:	440a      	add	r2, r1
 8004a58:	3284      	adds	r2, #132	; 0x84
 8004a5a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1acb      	subs	r3, r1, r3
 8004a76:	69f9      	ldr	r1, [r7, #28]
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	6809      	ldr	r1, [r1, #0]
 8004a82:	4608      	mov	r0, r1
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	01c9      	lsls	r1, r1, #7
 8004a88:	4401      	add	r1, r0
 8004a8a:	3184      	adds	r1, #132	; 0x84
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	01db      	lsls	r3, r3, #7
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3384      	adds	r3, #132	; 0x84
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	01d2      	lsls	r2, r2, #7
 8004aaa:	440a      	add	r2, r1
 8004aac:	3284      	adds	r2, #132	; 0x84
 8004aae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	; 0x84
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	01db      	lsls	r3, r3, #7
 8004ad8:	4413      	add	r3, r2
 8004ada:	3384      	adds	r3, #132	; 0x84
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	01d2      	lsls	r2, r2, #7
 8004ae8:	440a      	add	r2, r1
 8004aea:	3284      	adds	r2, #132	; 0x84
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6013      	str	r3, [r2, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_PWREx_EnableOverDrive+0x94>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b2c:	f7fd fdfa 	bl	8002724 <HAL_GetTick>
 8004b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b32:	e009      	b.n	8004b48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b34:	f7fd fdf6 	bl	8002724 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b42:	d901      	bls.n	8004b48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e01f      	b.n	8004b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d1ee      	bne.n	8004b34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b5c:	f7fd fde2 	bl	8002724 <HAL_GetTick>
 8004b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b62:	e009      	b.n	8004b78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b64:	f7fd fdde 	bl	8002724 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b72:	d901      	bls.n	8004b78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e007      	b.n	8004b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b84:	d1ee      	bne.n	8004b64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	420e0040 	.word	0x420e0040
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	420e0044 	.word	0x420e0044

08004ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0cc      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d90c      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0b8      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a52      	ldr	r2, [pc, #328]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	494d      	ldr	r1, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d044      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d119      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e07f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e06f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e067      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4934      	ldr	r1, [pc, #208]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fd fd48 	bl	8002724 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fd fd44 	bl	8002724 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e04f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d20c      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e032      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d26:	f000 f821 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	490a      	ldr	r1, [pc, #40]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fca8 	bl	800269c <HAL_InitTick>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	0809e44c 	.word	0x0809e44c
 8004d64:	20000004 	.word	0x20000004
 8004d68:	20000008 	.word	0x20000008

08004d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d70:	b094      	sub	sp, #80	; 0x50
 8004d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	2300      	movs	r3, #0
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d84:	4b79      	ldr	r3, [pc, #484]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d00d      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x40>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	f200 80e1 	bhi.w	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d9e:	e0db      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004da4:	e0db      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4b73      	ldr	r3, [pc, #460]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004daa:	e0d8      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	2200      	movs	r2, #0
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	0159      	lsls	r1, r3, #5
 8004dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df0:	0150      	lsls	r0, r2, #5
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4621      	mov	r1, r4
 8004df8:	1a51      	subs	r1, r2, r1
 8004dfa:	6139      	str	r1, [r7, #16]
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e10:	4659      	mov	r1, fp
 8004e12:	018b      	lsls	r3, r1, #6
 8004e14:	4651      	mov	r1, sl
 8004e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	018a      	lsls	r2, r1, #6
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ebb2 0801 	subs.w	r8, r2, r1
 8004e24:	4659      	mov	r1, fp
 8004e26:	eb63 0901 	sbc.w	r9, r3, r1
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb18 0303 	adds.w	r3, r8, r3
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	eb49 0303 	adc.w	r3, r9, r3
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	024b      	lsls	r3, r1, #9
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e68:	4621      	mov	r1, r4
 8004e6a:	024a      	lsls	r2, r1, #9
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e7c:	f7fb fa28 	bl	80002d0 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e88:	e058      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	2200      	movs	r2, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	4611      	mov	r1, r2
 8004e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	0159      	lsls	r1, r3, #5
 8004eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb6:	0150      	lsls	r0, r2, #5
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004edc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	00eb      	lsls	r3, r5, #3
 8004eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef2:	00e2      	lsls	r2, r4, #3
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	4643      	mov	r3, r8
 8004efa:	18e3      	adds	r3, r4, r3
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	464b      	mov	r3, r9
 8004f00:	eb45 0303 	adc.w	r3, r5, r3
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f12:	4629      	mov	r1, r5
 8004f14:	028b      	lsls	r3, r1, #10
 8004f16:	4621      	mov	r1, r4
 8004f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	028a      	lsls	r2, r1, #10
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	2200      	movs	r2, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	61fa      	str	r2, [r7, #28]
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	f7fb f9ce 	bl	80002d0 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f56:	e002      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3750      	adds	r7, #80	; 0x50
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000004 	.word	0x20000004

08004f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f94:	f7ff fff0 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0a9b      	lsrs	r3, r3, #10
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4903      	ldr	r1, [pc, #12]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	0809e45c 	.word	0x0809e45c

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fbc:	f7ff ffdc 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0b5b      	lsrs	r3, r3, #13
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	0809e45c 	.word	0x0809e45c

08004fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005008:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800500a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	4963      	ldr	r1, [pc, #396]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800502a:	4b5e      	ldr	r3, [pc, #376]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800502c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005030:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	495a      	ldr	r1, [pc, #360]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	d075      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506a:	f7fd fb5b 	bl	8002724 <HAL_GetTick>
 800506e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005072:	f7fd fb57 	bl	8002724 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e1dc      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005084:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	019a      	lsls	r2, r3, #6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	071b      	lsls	r3, r3, #28
 80050a8:	493e      	ldr	r1, [pc, #248]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01f      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c2:	0f1b      	lsrs	r3, r3, #28
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	019a      	lsls	r2, r3, #6
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	431a      	orrs	r2, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	071b      	lsls	r3, r3, #28
 80050dc:	4931      	ldr	r1, [pc, #196]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e4:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	f023 021f 	bic.w	r2, r3, #31
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	492b      	ldr	r1, [pc, #172]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	019a      	lsls	r2, r3, #6
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	071b      	lsls	r3, r3, #28
 800511c:	4921      	ldr	r1, [pc, #132]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005124:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800512a:	f7fd fafb 	bl	8002724 <HAL_GetTick>
 800512e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005132:	f7fd faf7 	bl	8002724 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e17c      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d112      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10c      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80ce 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800517a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517e:	f040 80c8 	bne.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005188:	f7fd facc 	bl	8002724 <HAL_GetTick>
 800518c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800518e:	e00f      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005190:	f7fd fac8 	bl	8002724 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d908      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e14d      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	42470068 	.word	0x42470068
 80051ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b0:	4ba5      	ldr	r3, [pc, #660]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051bc:	d0e8      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02e      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80051ca:	4b9f      	ldr	r3, [pc, #636]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	3301      	adds	r3, #1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051dc:	4b9a      	ldr	r3, [pc, #616]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	0f1b      	lsrs	r3, r3, #28
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	019a      	lsls	r2, r3, #6
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	3b01      	subs	r3, #1
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	4990      	ldr	r1, [pc, #576]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800520e:	4b8e      	ldr	r3, [pc, #568]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	3b01      	subs	r3, #1
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	4989      	ldr	r1, [pc, #548]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02c      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005234:	4b84      	ldr	r3, [pc, #528]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	3301      	adds	r3, #1
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005246:	4b80      	ldr	r3, [pc, #512]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	0e1b      	lsrs	r3, r3, #24
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	019a      	lsls	r2, r3, #6
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	061b      	lsls	r3, r3, #24
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	071b      	lsls	r3, r3, #28
 8005270:	4975      	ldr	r1, [pc, #468]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005278:	4b73      	ldr	r3, [pc, #460]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	4970      	ldr	r1, [pc, #448]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d024      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800529e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a2:	d11f      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052a4:	4b68      	ldr	r3, [pc, #416]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	0e1b      	lsrs	r3, r3, #24
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052b2:	4b65      	ldr	r3, [pc, #404]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	0f1b      	lsrs	r3, r3, #28
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	019a      	lsls	r2, r3, #6
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	495a      	ldr	r1, [pc, #360]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052e4:	4b59      	ldr	r3, [pc, #356]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ea:	f7fd fa1b 	bl	8002724 <HAL_GetTick>
 80052ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052f2:	f7fd fa17 	bl	8002724 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e09c      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005304:	4b50      	ldr	r3, [pc, #320]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005310:	d1ef      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8083 	beq.w	8005426 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]
 8005324:	4b48      	ldr	r3, [pc, #288]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4a47      	ldr	r2, [pc, #284]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800532a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
 8005330:	4b45      	ldr	r3, [pc, #276]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800533c:	4b44      	ldr	r3, [pc, #272]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a43      	ldr	r2, [pc, #268]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005348:	f7fd f9ec 	bl	8002724 <HAL_GetTick>
 800534c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fd f9e8 	bl	8002724 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e06d      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005362:	4b3b      	ldr	r3, [pc, #236]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800536e:	4b36      	ldr	r3, [pc, #216]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d02f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	429a      	cmp	r2, r3
 800538a:	d028      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538c:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005394:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005396:	4b2f      	ldr	r3, [pc, #188]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800539c:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053a2:	4a29      	ldr	r2, [pc, #164]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d114      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd f9b6 	bl	8002724 <HAL_GetTick>
 80053b8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ba:	e00a      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fd f9b2 	bl	8002724 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e035      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0ee      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ea:	d10d      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80053ec:	4b16      	ldr	r3, [pc, #88]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	4911      	ldr	r1, [pc, #68]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
 8005406:	e005      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800540e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005412:	6093      	str	r3, [r2, #8]
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	4909      	ldr	r1, [pc, #36]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005422:	4313      	orrs	r3, r2
 8005424:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800543a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	42470070 	.word	0x42470070
 8005450:	40007000 	.word	0x40007000
 8005454:	42470e40 	.word	0x42470e40
 8005458:	424711e0 	.word	0x424711e0

0800545c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e273      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d075      	beq.n	8005566 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800547a:	4b88      	ldr	r3, [pc, #544]	; (800569c <HAL_RCC_OscConfig+0x240>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005486:	4b85      	ldr	r3, [pc, #532]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800548e:	2b08      	cmp	r3, #8
 8005490:	d112      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005492:	4b82      	ldr	r3, [pc, #520]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549e:	d10b      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	4b7e      	ldr	r3, [pc, #504]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05b      	beq.n	8005564 <HAL_RCC_OscConfig+0x108>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d157      	bne.n	8005564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e24e      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x74>
 80054c2:	4b76      	ldr	r3, [pc, #472]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a75      	ldr	r2, [pc, #468]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e01d      	b.n	800550c <HAL_RCC_OscConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x98>
 80054da:	4b70      	ldr	r3, [pc, #448]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6f      	ldr	r2, [pc, #444]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6c      	ldr	r2, [pc, #432]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e00b      	b.n	800550c <HAL_RCC_OscConfig+0xb0>
 80054f4:	4b69      	ldr	r3, [pc, #420]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a68      	ldr	r2, [pc, #416]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b66      	ldr	r3, [pc, #408]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d013      	beq.n	800553c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fd f906 	bl	8002724 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800551c:	f7fd f902 	bl	8002724 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e213      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	4b5b      	ldr	r3, [pc, #364]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0xc0>
 800553a:	e014      	b.n	8005566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd f8f2 	bl	8002724 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005544:	f7fd f8ee 	bl	8002724 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1ff      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005556:	4b51      	ldr	r3, [pc, #324]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0xe8>
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d063      	beq.n	800563a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005572:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557e:	4b47      	ldr	r3, [pc, #284]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005586:	2b08      	cmp	r3, #8
 8005588:	d11c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558a:	4b44      	ldr	r3, [pc, #272]	; (800569c <HAL_RCC_OscConfig+0x240>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d116      	bne.n	80055c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005596:	4b41      	ldr	r3, [pc, #260]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_RCC_OscConfig+0x152>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d001      	beq.n	80055ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e1d3      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ae:	4b3b      	ldr	r3, [pc, #236]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4937      	ldr	r1, [pc, #220]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c2:	e03a      	b.n	800563a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055cc:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <HAL_RCC_OscConfig+0x244>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fd f8a7 	bl	8002724 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055da:	f7fd f8a3 	bl	8002724 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1b4      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ec:	4b2b      	ldr	r3, [pc, #172]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f8:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCC_OscConfig+0x240>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4925      	ldr	r1, [pc, #148]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]
 800560c:	e015      	b.n	800563a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_RCC_OscConfig+0x244>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fd f886 	bl	8002724 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800561c:	f7fd f882 	bl	8002724 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e193      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d036      	beq.n	80056b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_RCC_OscConfig+0x248>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fd f866 	bl	8002724 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800565c:	f7fd f862 	bl	8002724 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e173      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCC_OscConfig+0x240>)
 8005670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x200>
 800567a:	e01b      	b.n	80056b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <HAL_RCC_OscConfig+0x248>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fd f84f 	bl	8002724 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	e00e      	b.n	80056a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568a:	f7fd f84b 	bl	8002724 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d907      	bls.n	80056a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e15c      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
 800569c:	40023800 	.word	0x40023800
 80056a0:	42470000 	.word	0x42470000
 80056a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	4b8a      	ldr	r3, [pc, #552]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80056aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ea      	bne.n	800568a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8097 	beq.w	80057f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c6:	4b83      	ldr	r3, [pc, #524]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a7e      	ldr	r2, [pc, #504]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
 80056e2:	4b7c      	ldr	r3, [pc, #496]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	4b79      	ldr	r3, [pc, #484]	; (80058d8 <HAL_RCC_OscConfig+0x47c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d118      	bne.n	8005730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fe:	4b76      	ldr	r3, [pc, #472]	; (80058d8 <HAL_RCC_OscConfig+0x47c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a75      	ldr	r2, [pc, #468]	; (80058d8 <HAL_RCC_OscConfig+0x47c>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570a:	f7fd f80b 	bl	8002724 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005712:	f7fd f807 	bl	8002724 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e118      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005724:	4b6c      	ldr	r3, [pc, #432]	; (80058d8 <HAL_RCC_OscConfig+0x47c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x2ea>
 8005738:	4b66      	ldr	r3, [pc, #408]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	4a65      	ldr	r2, [pc, #404]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	6713      	str	r3, [r2, #112]	; 0x70
 8005744:	e01c      	b.n	8005780 <HAL_RCC_OscConfig+0x324>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0x30c>
 800574e:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a60      	ldr	r2, [pc, #384]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
 800575a:	4b5e      	ldr	r3, [pc, #376]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a5d      	ldr	r2, [pc, #372]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0x324>
 8005768:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a59      	ldr	r2, [pc, #356]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	4b57      	ldr	r3, [pc, #348]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	4a56      	ldr	r2, [pc, #344]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800577a:	f023 0304 	bic.w	r3, r3, #4
 800577e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fc ffcc 	bl	8002724 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005790:	f7fc ffc8 	bl	8002724 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0d7      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ee      	beq.n	8005790 <HAL_RCC_OscConfig+0x334>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fc ffb6 	bl	8002724 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057bc:	f7fc ffb2 	bl	8002724 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0c1      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d2:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ee      	bne.n	80057bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80057ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80ad 	beq.w	8005954 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b08      	cmp	r3, #8
 8005804:	d060      	beq.n	80058c8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d145      	bne.n	800589a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCC_OscConfig+0x480>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fc ff86 	bl	8002724 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581c:	f7fc ff82 	bl	8002724 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e093      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582e:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	491b      	ldr	r1, [pc, #108]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x480>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005872:	f7fc ff57 	bl	8002724 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fc ff53 	bl	8002724 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e064      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x41e>
 8005898:	e05c      	b.n	8005954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCC_OscConfig+0x480>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fc ff40 	bl	8002724 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fc ff3c 	bl	8002724 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e04d      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCC_OscConfig+0x478>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x44c>
 80058c6:	e045      	b.n	8005954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e040      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40007000 	.word	0x40007000
 80058dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e0:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <HAL_RCC_OscConfig+0x504>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d030      	beq.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d129      	bne.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d122      	bne.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005918:	4293      	cmp	r3, r2
 800591a:	d119      	bne.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	3b01      	subs	r3, #1
 800592a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d10f      	bne.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800

08005964 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e025      	b.n	80059c4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fb fc53 	bl	8001238 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f001 f909 	bl	8006bbc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	f001 f95e 	bl	8006c76 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10a      	bne.n	80059f8 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f80c 	bl	8005a00 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	615a      	str	r2, [r3, #20]
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a26:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d101      	bne.n	8005a32 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e021      	b.n	8005a76 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d002      	beq.n	8005a3e <HAL_SDRAM_SendCommand+0x2a>
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d118      	bne.n	8005a70 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 f97a 	bl	8006d48 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d104      	bne.n	8005a66 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a64:	e006      	b.n	8005a74 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a6e:	e001      	b.n	8005a74 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d101      	bne.n	8005a98 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e016      	b.n	8005ac6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10f      	bne.n	8005ac4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 f985 	bl	8006dc2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e03f      	b.n	8005b60 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc fc8b 	bl	8002410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2224      	movs	r2, #36	; 0x24
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fdde 	bl	80066d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d17c      	bne.n	8005c82 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Transmit+0x2c>
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e075      	b.n	8005c84 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Transmit+0x3e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e06e      	b.n	8005c84 <HAL_UART_Transmit+0x11c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2221      	movs	r2, #33	; 0x21
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bbc:	f7fc fdb2 	bl	8002724 <HAL_GetTick>
 8005bc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d108      	bne.n	8005bea <HAL_UART_Transmit+0x82>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e003      	b.n	8005bf2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bfa:	e02a      	b.n	8005c52 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2200      	movs	r2, #0
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fb1e 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e036      	b.n	8005c84 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3302      	adds	r3, #2
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e007      	b.n	8005c44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1cf      	bne.n	8005bfc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2140      	movs	r1, #64	; 0x40
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 faee 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e006      	b.n	8005c84 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d11d      	bne.n	8005ce2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_Receive_IT+0x26>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e016      	b.n	8005ce4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Receive_IT+0x38>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e00f      	b.n	8005ce4 <HAL_UART_Receive_IT+0x58>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fb23 	bl	8006324 <UART_Start_Receive_IT>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	e000      	b.n	8005ce4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b0ba      	sub	sp, #232	; 0xe8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_UART_IRQHandler+0x66>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fc07 	bl	800655e <UART_Receive_IT>
      return;
 8005d50:	e256      	b.n	8006200 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80de 	beq.w	8005f18 <HAL_UART_IRQHandler+0x22c>
 8005d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80d1 	beq.w	8005f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <HAL_UART_IRQHandler+0xae>
 8005d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <HAL_UART_IRQHandler+0xd2>
 8005da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0202 	orr.w	r2, r3, #2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_UART_IRQHandler+0xf6>
 8005dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0204 	orr.w	r2, r3, #4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d011      	beq.n	8005e12 <HAL_UART_IRQHandler+0x126>
 8005dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d105      	bne.n	8005e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0208 	orr.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 81ed 	beq.w	80061f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_UART_IRQHandler+0x14e>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fb92 	bl	800655e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	bf0c      	ite	eq
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2300      	movne	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <HAL_UART_IRQHandler+0x17a>
 8005e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04f      	beq.n	8005f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fa9a 	bl	80063a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d141      	bne.n	8005efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1d9      	bne.n	8005e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d013      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	4a7d      	ldr	r2, [pc, #500]	; (80060c8 <HAL_UART_IRQHandler+0x3dc>)
 8005ed4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fc fdd3 	bl	8002a86 <HAL_DMA_Abort_IT>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e00e      	b.n	8005f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f990 	bl	800621c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	e00a      	b.n	8005f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f98c 	bl	800621c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	e006      	b.n	8005f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f988 	bl	800621c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f12:	e170      	b.n	80061f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	bf00      	nop
    return;
 8005f16:	e16e      	b.n	80061f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	f040 814a 	bne.w	80061b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8143 	beq.w	80061b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 813c 	beq.w	80061b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	f040 80b4 	bne.w	80060cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8140 	beq.w	80061fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f82:	429a      	cmp	r2, r3
 8005f84:	f080 8139 	bcs.w	80061fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9a:	f000 8088 	beq.w	80060ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1d9      	bne.n	8005f9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3314      	adds	r3, #20
 8005ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800600e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e1      	bne.n	8005fea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800604a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800604c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e3      	bne.n	8006026 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800607c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006090:	65ba      	str	r2, [r7, #88]	; 0x58
 8006092:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e3      	bne.n	800606c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fc fc7c 	bl	80029a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8b6 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060c4:	e099      	b.n	80061fa <HAL_UART_IRQHandler+0x50e>
 80060c6:	bf00      	nop
 80060c8:	08006467 	.word	0x08006467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808b 	beq.w	80061fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8086 	beq.w	80061fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006116:	647a      	str	r2, [r7, #68]	; 0x44
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800611c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e3      	bne.n	80060f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	623b      	str	r3, [r7, #32]
   return(result);
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800614e:	633a      	str	r2, [r7, #48]	; 0x30
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	617b      	str	r3, [r7, #20]
   return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f83e 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061b4:	e023      	b.n	80061fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_UART_IRQHandler+0x4ea>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f95d 	bl	800648e <UART_Transmit_IT>
    return;
 80061d4:	e014      	b.n	8006200 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <HAL_UART_IRQHandler+0x514>
 80061e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f99d 	bl	800652e <UART_EndTransmit_IT>
    return;
 80061f4:	e004      	b.n	8006200 <HAL_UART_IRQHandler+0x514>
    return;
 80061f6:	bf00      	nop
 80061f8:	e002      	b.n	8006200 <HAL_UART_IRQHandler+0x514>
      return;
 80061fa:	bf00      	nop
 80061fc:	e000      	b.n	8006200 <HAL_UART_IRQHandler+0x514>
      return;
 80061fe:	bf00      	nop
  }
}
 8006200:	37e8      	adds	r7, #232	; 0xe8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b090      	sub	sp, #64	; 0x40
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006258:	e050      	b.n	80062fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d04c      	beq.n	80062fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <UART_WaitOnFlagUntilTimeout+0x30>
 8006268:	f7fc fa5c 	bl	8002724 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006274:	429a      	cmp	r2, r3
 8006276:	d241      	bcs.n	80062fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006298:	637a      	str	r2, [r7, #52]	; 0x34
 800629a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800629e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3314      	adds	r3, #20
 80062b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	613b      	str	r3, [r7, #16]
   return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3314      	adds	r3, #20
 80062ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062cc:	623a      	str	r2, [r7, #32]
 80062ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e00f      	b.n	800631c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	429a      	cmp	r2, r3
 8006318:	d09f      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3740      	adds	r7, #64	; 0x40
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2222      	movs	r2, #34	; 0x22
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006370:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0220 	orr.w	r2, r2, #32
 8006390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b095      	sub	sp, #84	; 0x54
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063c8:	643a      	str	r2, [r7, #64]	; 0x40
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3314      	adds	r3, #20
 80063fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	2b01      	cmp	r3, #1
 8006416:	d119      	bne.n	800644c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	60bb      	str	r3, [r7, #8]
   return(result);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f023 0310 	bic.w	r3, r3, #16
 800642e:	647b      	str	r3, [r7, #68]	; 0x44
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006438:	61ba      	str	r2, [r7, #24]
 800643a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6979      	ldr	r1, [r7, #20]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	613b      	str	r3, [r7, #16]
   return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800645a:	bf00      	nop
 800645c:	3754      	adds	r7, #84	; 0x54
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fecb 	bl	800621c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b21      	cmp	r3, #33	; 0x21
 80064a0:	d13e      	bne.n	8006520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d114      	bne.n	80064d6 <UART_Transmit_IT+0x48>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d110      	bne.n	80064d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]
 80064d4:	e008      	b.n	80064e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6211      	str	r1, [r2, #32]
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10f      	bne.n	800651c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800650a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800651a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fe5a 	bl	8006208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b08c      	sub	sp, #48	; 0x30
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	f040 80ab 	bne.w	80066ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d117      	bne.n	80065ae <UART_Receive_IT+0x50>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d113      	bne.n	80065ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	b29a      	uxth	r2, r3
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
 80065ac:	e026      	b.n	80065fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d007      	beq.n	80065d2 <UART_Receive_IT+0x74>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <UART_Receive_IT+0x82>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e008      	b.n	80065f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4619      	mov	r1, r3
 800660a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800660c:	2b00      	cmp	r3, #0
 800660e:	d15a      	bne.n	80066c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0220 	bic.w	r2, r2, #32
 800661e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	2b01      	cmp	r3, #1
 800664e:	d135      	bne.n	80066bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	613b      	str	r3, [r7, #16]
   return(result);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f023 0310 	bic.w	r3, r3, #16
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
 8006674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006676:	623a      	str	r2, [r7, #32]
 8006678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	69f9      	ldr	r1, [r7, #28]
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	61bb      	str	r3, [r7, #24]
   return(result);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e5      	bne.n	8006656 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b10      	cmp	r3, #16
 8006696:	d10a      	bne.n	80066ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff fdbb 	bl	8006230 <HAL_UARTEx_RxEventCallback>
 80066ba:	e002      	b.n	80066c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fb fef7 	bl	80024b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e002      	b.n	80066cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d8:	b0c0      	sub	sp, #256	; 0x100
 80066da:	af00      	add	r7, sp, #0
 80066dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	68d9      	ldr	r1, [r3, #12]
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	ea40 0301 	orr.w	r3, r0, r1
 80066fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	431a      	orrs	r2, r3
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800672c:	f021 010c 	bic.w	r1, r1, #12
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800673a:	430b      	orrs	r3, r1
 800673c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	6999      	ldr	r1, [r3, #24]
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	ea40 0301 	orr.w	r3, r0, r1
 800675a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b8f      	ldr	r3, [pc, #572]	; (80069a0 <UART_SetConfig+0x2cc>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d005      	beq.n	8006774 <UART_SetConfig+0xa0>
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b8d      	ldr	r3, [pc, #564]	; (80069a4 <UART_SetConfig+0x2d0>)
 8006770:	429a      	cmp	r2, r3
 8006772:	d104      	bne.n	800677e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006774:	f7fe fc20 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8006778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800677c:	e003      	b.n	8006786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800677e:	f7fe fc07 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006790:	f040 810c 	bne.w	80069ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006798:	2200      	movs	r2, #0
 800679a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800679e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067a6:	4622      	mov	r2, r4
 80067a8:	462b      	mov	r3, r5
 80067aa:	1891      	adds	r1, r2, r2
 80067ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80067ae:	415b      	adcs	r3, r3
 80067b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067b6:	4621      	mov	r1, r4
 80067b8:	eb12 0801 	adds.w	r8, r2, r1
 80067bc:	4629      	mov	r1, r5
 80067be:	eb43 0901 	adc.w	r9, r3, r1
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d6:	4690      	mov	r8, r2
 80067d8:	4699      	mov	r9, r3
 80067da:	4623      	mov	r3, r4
 80067dc:	eb18 0303 	adds.w	r3, r8, r3
 80067e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067e4:	462b      	mov	r3, r5
 80067e6:	eb49 0303 	adc.w	r3, r9, r3
 80067ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006802:	460b      	mov	r3, r1
 8006804:	18db      	adds	r3, r3, r3
 8006806:	653b      	str	r3, [r7, #80]	; 0x50
 8006808:	4613      	mov	r3, r2
 800680a:	eb42 0303 	adc.w	r3, r2, r3
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
 8006810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006818:	f7f9 fd5a 	bl	80002d0 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4b61      	ldr	r3, [pc, #388]	; (80069a8 <UART_SetConfig+0x2d4>)
 8006822:	fba3 2302 	umull	r2, r3, r3, r2
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	011c      	lsls	r4, r3, #4
 800682a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682e:	2200      	movs	r2, #0
 8006830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	1891      	adds	r1, r2, r2
 8006842:	64b9      	str	r1, [r7, #72]	; 0x48
 8006844:	415b      	adcs	r3, r3
 8006846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800684c:	4641      	mov	r1, r8
 800684e:	eb12 0a01 	adds.w	sl, r2, r1
 8006852:	4649      	mov	r1, r9
 8006854:	eb43 0b01 	adc.w	fp, r3, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800686c:	4692      	mov	sl, r2
 800686e:	469b      	mov	fp, r3
 8006870:	4643      	mov	r3, r8
 8006872:	eb1a 0303 	adds.w	r3, sl, r3
 8006876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800687a:	464b      	mov	r3, r9
 800687c:	eb4b 0303 	adc.w	r3, fp, r3
 8006880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006898:	460b      	mov	r3, r1
 800689a:	18db      	adds	r3, r3, r3
 800689c:	643b      	str	r3, [r7, #64]	; 0x40
 800689e:	4613      	mov	r3, r2
 80068a0:	eb42 0303 	adc.w	r3, r2, r3
 80068a4:	647b      	str	r3, [r7, #68]	; 0x44
 80068a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068ae:	f7f9 fd0f 	bl	80002d0 <__aeabi_uldivmod>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <UART_SetConfig+0x2d4>)
 80068ba:	fba3 2301 	umull	r2, r3, r3, r1
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	2264      	movs	r2, #100	; 0x64
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	1acb      	subs	r3, r1, r3
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068ce:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <UART_SetConfig+0x2d4>)
 80068d0:	fba3 2302 	umull	r2, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068dc:	441c      	add	r4, r3
 80068de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	1891      	adds	r1, r2, r2
 80068f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068f8:	415b      	adcs	r3, r3
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006900:	4641      	mov	r1, r8
 8006902:	1851      	adds	r1, r2, r1
 8006904:	6339      	str	r1, [r7, #48]	; 0x30
 8006906:	4649      	mov	r1, r9
 8006908:	414b      	adcs	r3, r1
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006918:	4659      	mov	r1, fp
 800691a:	00cb      	lsls	r3, r1, #3
 800691c:	4651      	mov	r1, sl
 800691e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006922:	4651      	mov	r1, sl
 8006924:	00ca      	lsls	r2, r1, #3
 8006926:	4610      	mov	r0, r2
 8006928:	4619      	mov	r1, r3
 800692a:	4603      	mov	r3, r0
 800692c:	4642      	mov	r2, r8
 800692e:	189b      	adds	r3, r3, r2
 8006930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006934:	464b      	mov	r3, r9
 8006936:	460a      	mov	r2, r1
 8006938:	eb42 0303 	adc.w	r3, r2, r3
 800693c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800694c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006954:	460b      	mov	r3, r1
 8006956:	18db      	adds	r3, r3, r3
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
 800695a:	4613      	mov	r3, r2
 800695c:	eb42 0303 	adc.w	r3, r2, r3
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800696a:	f7f9 fcb1 	bl	80002d0 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <UART_SetConfig+0x2d4>)
 8006974:	fba3 1302 	umull	r1, r3, r3, r2
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	2164      	movs	r1, #100	; 0x64
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	3332      	adds	r3, #50	; 0x32
 8006986:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <UART_SetConfig+0x2d4>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f003 0207 	and.w	r2, r3, #7
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4422      	add	r2, r4
 800699a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800699c:	e105      	b.n	8006baa <UART_SetConfig+0x4d6>
 800699e:	bf00      	nop
 80069a0:	40011000 	.word	0x40011000
 80069a4:	40011400 	.word	0x40011400
 80069a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069be:	4642      	mov	r2, r8
 80069c0:	464b      	mov	r3, r9
 80069c2:	1891      	adds	r1, r2, r2
 80069c4:	6239      	str	r1, [r7, #32]
 80069c6:	415b      	adcs	r3, r3
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ce:	4641      	mov	r1, r8
 80069d0:	1854      	adds	r4, r2, r1
 80069d2:	4649      	mov	r1, r9
 80069d4:	eb43 0501 	adc.w	r5, r3, r1
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	00eb      	lsls	r3, r5, #3
 80069e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e6:	00e2      	lsls	r2, r4, #3
 80069e8:	4614      	mov	r4, r2
 80069ea:	461d      	mov	r5, r3
 80069ec:	4643      	mov	r3, r8
 80069ee:	18e3      	adds	r3, r4, r3
 80069f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069f4:	464b      	mov	r3, r9
 80069f6:	eb45 0303 	adc.w	r3, r5, r3
 80069fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	008b      	lsls	r3, r1, #2
 8006a1e:	4621      	mov	r1, r4
 8006a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a24:	4621      	mov	r1, r4
 8006a26:	008a      	lsls	r2, r1, #2
 8006a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a2c:	f7f9 fc50 	bl	80002d0 <__aeabi_uldivmod>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4b60      	ldr	r3, [pc, #384]	; (8006bb8 <UART_SetConfig+0x4e4>)
 8006a36:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	011c      	lsls	r4, r3, #4
 8006a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	1891      	adds	r1, r2, r2
 8006a56:	61b9      	str	r1, [r7, #24]
 8006a58:	415b      	adcs	r3, r3
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a60:	4641      	mov	r1, r8
 8006a62:	1851      	adds	r1, r2, r1
 8006a64:	6139      	str	r1, [r7, #16]
 8006a66:	4649      	mov	r1, r9
 8006a68:	414b      	adcs	r3, r1
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a78:	4659      	mov	r1, fp
 8006a7a:	00cb      	lsls	r3, r1, #3
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a82:	4651      	mov	r1, sl
 8006a84:	00ca      	lsls	r2, r1, #3
 8006a86:	4610      	mov	r0, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a94:	464b      	mov	r3, r9
 8006a96:	460a      	mov	r2, r1
 8006a98:	eb42 0303 	adc.w	r3, r2, r3
 8006a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ab8:	4649      	mov	r1, r9
 8006aba:	008b      	lsls	r3, r1, #2
 8006abc:	4641      	mov	r1, r8
 8006abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	008a      	lsls	r2, r1, #2
 8006ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006aca:	f7f9 fc01 	bl	80002d0 <__aeabi_uldivmod>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <UART_SetConfig+0x4e4>)
 8006ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	2164      	movs	r1, #100	; 0x64
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	3332      	adds	r3, #50	; 0x32
 8006ae6:	4a34      	ldr	r2, [pc, #208]	; (8006bb8 <UART_SetConfig+0x4e4>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af2:	441c      	add	r4, r3
 8006af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af8:	2200      	movs	r2, #0
 8006afa:	673b      	str	r3, [r7, #112]	; 0x70
 8006afc:	677a      	str	r2, [r7, #116]	; 0x74
 8006afe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	1891      	adds	r1, r2, r2
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	415b      	adcs	r3, r3
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b12:	4641      	mov	r1, r8
 8006b14:	1851      	adds	r1, r2, r1
 8006b16:	6039      	str	r1, [r7, #0]
 8006b18:	4649      	mov	r1, r9
 8006b1a:	414b      	adcs	r3, r1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	00cb      	lsls	r3, r1, #3
 8006b2e:	4651      	mov	r1, sl
 8006b30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b34:	4651      	mov	r1, sl
 8006b36:	00ca      	lsls	r2, r1, #3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4642      	mov	r2, r8
 8006b40:	189b      	adds	r3, r3, r2
 8006b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b44:	464b      	mov	r3, r9
 8006b46:	460a      	mov	r2, r1
 8006b48:	eb42 0303 	adc.w	r3, r2, r3
 8006b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	663b      	str	r3, [r7, #96]	; 0x60
 8006b58:	667a      	str	r2, [r7, #100]	; 0x64
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b66:	4649      	mov	r1, r9
 8006b68:	008b      	lsls	r3, r1, #2
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b70:	4641      	mov	r1, r8
 8006b72:	008a      	lsls	r2, r1, #2
 8006b74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b78:	f7f9 fbaa 	bl	80002d0 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <UART_SetConfig+0x4e4>)
 8006b82:	fba3 1302 	umull	r1, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	2164      	movs	r1, #100	; 0x64
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	3332      	adds	r3, #50	; 0x32
 8006b94:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <UART_SetConfig+0x4e4>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4422      	add	r2, r4
 8006ba8:	609a      	str	r2, [r3, #8]
}
 8006baa:	bf00      	nop
 8006bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb6:	bf00      	nop
 8006bb8:	51eb851f 	.word	0x51eb851f

08006bbc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d123      	bne.n	8006c16 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	6851      	ldr	r1, [r2, #4]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	6892      	ldr	r2, [r2, #8]
 8006be2:	4311      	orrs	r1, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	68d2      	ldr	r2, [r2, #12]
 8006be8:	4311      	orrs	r1, r2
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	6912      	ldr	r2, [r2, #16]
 8006bee:	4311      	orrs	r1, r2
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	6952      	ldr	r2, [r2, #20]
 8006bf4:	4311      	orrs	r1, r2
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	6992      	ldr	r2, [r2, #24]
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	69d2      	ldr	r2, [r2, #28]
 8006c00:	4311      	orrs	r1, r2
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	6a12      	ldr	r2, [r2, #32]
 8006c06:	4311      	orrs	r1, r2
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e028      	b.n	8006c68 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	69d9      	ldr	r1, [r3, #28]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	4319      	orrs	r1, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	6851      	ldr	r1, [r2, #4]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	6892      	ldr	r2, [r2, #8]
 8006c48:	4311      	orrs	r1, r2
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68d2      	ldr	r2, [r2, #12]
 8006c4e:	4311      	orrs	r1, r2
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	6912      	ldr	r2, [r2, #16]
 8006c54:	4311      	orrs	r1, r2
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	6952      	ldr	r2, [r2, #20]
 8006c5a:	4311      	orrs	r1, r2
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	6992      	ldr	r2, [r2, #24]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d128      	bne.n	8006cda <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	1e59      	subs	r1, r3, #1
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	4319      	orrs	r1, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	4319      	orrs	r1, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	031b      	lsls	r3, r3, #12
 8006cb2:	4319      	orrs	r1, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	4319      	orrs	r1, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	051b      	lsls	r3, r3, #20
 8006cc6:	4319      	orrs	r1, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	061b      	lsls	r3, r3, #24
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	e02f      	b.n	8006d3a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	68d2      	ldr	r2, [r2, #12]
 8006cea:	3a01      	subs	r2, #1
 8006cec:	0311      	lsls	r1, r2, #12
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	6952      	ldr	r2, [r2, #20]
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	0512      	lsls	r2, r2, #20
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	1e59      	subs	r1, r3, #1
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	4319      	orrs	r1, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	4319      	orrs	r1, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	4319      	orrs	r1, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	061b      	lsls	r3, r3, #24
 8006d32:	430b      	orrs	r3, r1
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	0d9b      	lsrs	r3, r3, #22
 8006d5e:	059b      	lsls	r3, r3, #22
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	6811      	ldr	r1, [r2, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	6852      	ldr	r2, [r2, #4]
 8006d68:	4311      	orrs	r1, r2
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	6892      	ldr	r2, [r2, #8]
 8006d6e:	3a01      	subs	r2, #1
 8006d70:	0152      	lsls	r2, r2, #5
 8006d72:	4311      	orrs	r1, r2
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	68d2      	ldr	r2, [r2, #12]
 8006d78:	0252      	lsls	r2, r2, #9
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d82:	f7fb fccf 	bl	8002724 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d88:	e010      	b.n	8006dac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d00c      	beq.n	8006dac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <FMC_SDRAM_SendCommand+0x60>
 8006d98:	f7fb fcc4 	bl	8002724 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d201      	bcs.n	8006dac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e006      	b.n	8006dba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d0e8      	beq.n	8006d8a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006dd4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	0052      	lsls	r2, r2, #1
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <atoi>:
 8006df0:	220a      	movs	r2, #10
 8006df2:	2100      	movs	r1, #0
 8006df4:	f000 b9a6 	b.w	8007144 <strtol>

08006df8 <__errno>:
 8006df8:	4b01      	ldr	r3, [pc, #4]	; (8006e00 <__errno+0x8>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000010 	.word	0x20000010

08006e04 <__libc_init_array>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4d0d      	ldr	r5, [pc, #52]	; (8006e3c <__libc_init_array+0x38>)
 8006e08:	4c0d      	ldr	r4, [pc, #52]	; (8006e40 <__libc_init_array+0x3c>)
 8006e0a:	1b64      	subs	r4, r4, r5
 8006e0c:	10a4      	asrs	r4, r4, #2
 8006e0e:	2600      	movs	r6, #0
 8006e10:	42a6      	cmp	r6, r4
 8006e12:	d109      	bne.n	8006e28 <__libc_init_array+0x24>
 8006e14:	4d0b      	ldr	r5, [pc, #44]	; (8006e44 <__libc_init_array+0x40>)
 8006e16:	4c0c      	ldr	r4, [pc, #48]	; (8006e48 <__libc_init_array+0x44>)
 8006e18:	f001 f998 	bl	800814c <_init>
 8006e1c:	1b64      	subs	r4, r4, r5
 8006e1e:	10a4      	asrs	r4, r4, #2
 8006e20:	2600      	movs	r6, #0
 8006e22:	42a6      	cmp	r6, r4
 8006e24:	d105      	bne.n	8006e32 <__libc_init_array+0x2e>
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2c:	4798      	blx	r3
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7ee      	b.n	8006e10 <__libc_init_array+0xc>
 8006e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e36:	4798      	blx	r3
 8006e38:	3601      	adds	r6, #1
 8006e3a:	e7f2      	b.n	8006e22 <__libc_init_array+0x1e>
 8006e3c:	0809e6b8 	.word	0x0809e6b8
 8006e40:	0809e6b8 	.word	0x0809e6b8
 8006e44:	0809e6b8 	.word	0x0809e6b8
 8006e48:	0809e6bc 	.word	0x0809e6bc

08006e4c <memset>:
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <iprintf>:
 8006e5c:	b40f      	push	{r0, r1, r2, r3}
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <iprintf+0x2c>)
 8006e60:	b513      	push	{r0, r1, r4, lr}
 8006e62:	681c      	ldr	r4, [r3, #0]
 8006e64:	b124      	cbz	r4, 8006e70 <iprintf+0x14>
 8006e66:	69a3      	ldr	r3, [r4, #24]
 8006e68:	b913      	cbnz	r3, 8006e70 <iprintf+0x14>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fb6c 	bl	8007548 <__sinit>
 8006e70:	ab05      	add	r3, sp, #20
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	68a1      	ldr	r1, [r4, #8]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fd8f 	bl	800799c <_vfiprintf_r>
 8006e7e:	b002      	add	sp, #8
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	b004      	add	sp, #16
 8006e86:	4770      	bx	lr
 8006e88:	20000010 	.word	0x20000010

08006e8c <_puts_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	4605      	mov	r5, r0
 8006e92:	b118      	cbz	r0, 8006e9c <_puts_r+0x10>
 8006e94:	6983      	ldr	r3, [r0, #24]
 8006e96:	b90b      	cbnz	r3, 8006e9c <_puts_r+0x10>
 8006e98:	f000 fb56 	bl	8007548 <__sinit>
 8006e9c:	69ab      	ldr	r3, [r5, #24]
 8006e9e:	68ac      	ldr	r4, [r5, #8]
 8006ea0:	b913      	cbnz	r3, 8006ea8 <_puts_r+0x1c>
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fb50 	bl	8007548 <__sinit>
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <_puts_r+0xd0>)
 8006eaa:	429c      	cmp	r4, r3
 8006eac:	d120      	bne.n	8006ef0 <_puts_r+0x64>
 8006eae:	686c      	ldr	r4, [r5, #4]
 8006eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_puts_r+0x36>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_puts_r+0x36>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebe:	f000 fbf3 	bl	80076a8 <__retarget_lock_acquire_recursive>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0719      	lsls	r1, r3, #28
 8006ec6:	d51d      	bpl.n	8006f04 <_puts_r+0x78>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	b1db      	cbz	r3, 8006f04 <_puts_r+0x78>
 8006ecc:	3e01      	subs	r6, #1
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	bb39      	cbnz	r1, 8006f2a <_puts_r+0x9e>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da38      	bge.n	8006f50 <_puts_r+0xc4>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	210a      	movs	r1, #10
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f938 	bl	8007158 <__swbuf_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d011      	beq.n	8006f10 <_puts_r+0x84>
 8006eec:	250a      	movs	r5, #10
 8006eee:	e011      	b.n	8006f14 <_puts_r+0x88>
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <_puts_r+0xd4>)
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	d101      	bne.n	8006efa <_puts_r+0x6e>
 8006ef6:	68ac      	ldr	r4, [r5, #8]
 8006ef8:	e7da      	b.n	8006eb0 <_puts_r+0x24>
 8006efa:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <_puts_r+0xd8>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	bf08      	it	eq
 8006f00:	68ec      	ldreq	r4, [r5, #12]
 8006f02:	e7d5      	b.n	8006eb0 <_puts_r+0x24>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f978 	bl	80071fc <__swsetup_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d0dd      	beq.n	8006ecc <_puts_r+0x40>
 8006f10:	f04f 35ff 	mov.w	r5, #4294967295
 8006f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f16:	07da      	lsls	r2, r3, #31
 8006f18:	d405      	bmi.n	8006f26 <_puts_r+0x9a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	059b      	lsls	r3, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <_puts_r+0x9a>
 8006f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f22:	f000 fbc2 	bl	80076aa <__retarget_lock_release_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	bd70      	pop	{r4, r5, r6, pc}
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da04      	bge.n	8006f38 <_puts_r+0xac>
 8006f2e:	69a2      	ldr	r2, [r4, #24]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	dc06      	bgt.n	8006f42 <_puts_r+0xb6>
 8006f34:	290a      	cmp	r1, #10
 8006f36:	d004      	beq.n	8006f42 <_puts_r+0xb6>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	6022      	str	r2, [r4, #0]
 8006f3e:	7019      	strb	r1, [r3, #0]
 8006f40:	e7c5      	b.n	8006ece <_puts_r+0x42>
 8006f42:	4622      	mov	r2, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f907 	bl	8007158 <__swbuf_r>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d1bf      	bne.n	8006ece <_puts_r+0x42>
 8006f4e:	e7df      	b.n	8006f10 <_puts_r+0x84>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	250a      	movs	r5, #10
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	701d      	strb	r5, [r3, #0]
 8006f5a:	e7db      	b.n	8006f14 <_puts_r+0x88>
 8006f5c:	0809e63c 	.word	0x0809e63c
 8006f60:	0809e65c 	.word	0x0809e65c
 8006f64:	0809e61c 	.word	0x0809e61c

08006f68 <puts>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <puts+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bf8d 	b.w	8006e8c <_puts_r>
 8006f72:	bf00      	nop
 8006f74:	20000010 	.word	0x20000010

08006f78 <strcpy>:
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7e:	f803 2b01 	strb.w	r2, [r3], #1
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d1f9      	bne.n	8006f7a <strcpy+0x2>
 8006f86:	4770      	bx	lr

08006f88 <strtok>:
 8006f88:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <strtok+0x5c>)
 8006f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006f90:	4605      	mov	r5, r0
 8006f92:	b9fc      	cbnz	r4, 8006fd4 <strtok+0x4c>
 8006f94:	2050      	movs	r0, #80	; 0x50
 8006f96:	9101      	str	r1, [sp, #4]
 8006f98:	f000 fbee 	bl	8007778 <malloc>
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	b920      	cbnz	r0, 8006fae <strtok+0x26>
 8006fa4:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <strtok+0x60>)
 8006fa6:	4811      	ldr	r0, [pc, #68]	; (8006fec <strtok+0x64>)
 8006fa8:	2157      	movs	r1, #87	; 0x57
 8006faa:	f000 f995 	bl	80072d8 <__assert_func>
 8006fae:	e9c0 4400 	strd	r4, r4, [r0]
 8006fb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006fb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006fba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006fbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006fc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006fc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006fca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006fce:	6184      	str	r4, [r0, #24]
 8006fd0:	7704      	strb	r4, [r0, #28]
 8006fd2:	6244      	str	r4, [r0, #36]	; 0x24
 8006fd4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4628      	mov	r0, r5
 8006fda:	b002      	add	sp, #8
 8006fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fe0:	f000 b806 	b.w	8006ff0 <__strtok_r>
 8006fe4:	20000010 	.word	0x20000010
 8006fe8:	0809e468 	.word	0x0809e468
 8006fec:	0809e47f 	.word	0x0809e47f

08006ff0 <__strtok_r>:
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	b908      	cbnz	r0, 8006ff8 <__strtok_r+0x8>
 8006ff4:	6810      	ldr	r0, [r2, #0]
 8006ff6:	b188      	cbz	r0, 800701c <__strtok_r+0x2c>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007000:	460f      	mov	r7, r1
 8007002:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007006:	b91e      	cbnz	r6, 8007010 <__strtok_r+0x20>
 8007008:	b965      	cbnz	r5, 8007024 <__strtok_r+0x34>
 800700a:	6015      	str	r5, [r2, #0]
 800700c:	4628      	mov	r0, r5
 800700e:	e005      	b.n	800701c <__strtok_r+0x2c>
 8007010:	42b5      	cmp	r5, r6
 8007012:	d1f6      	bne.n	8007002 <__strtok_r+0x12>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f0      	bne.n	8006ffa <__strtok_r+0xa>
 8007018:	6014      	str	r4, [r2, #0]
 800701a:	7003      	strb	r3, [r0, #0]
 800701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701e:	461c      	mov	r4, r3
 8007020:	e00c      	b.n	800703c <__strtok_r+0x4c>
 8007022:	b915      	cbnz	r5, 800702a <__strtok_r+0x3a>
 8007024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007028:	460e      	mov	r6, r1
 800702a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800702e:	42ab      	cmp	r3, r5
 8007030:	d1f7      	bne.n	8007022 <__strtok_r+0x32>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f3      	beq.n	800701e <__strtok_r+0x2e>
 8007036:	2300      	movs	r3, #0
 8007038:	f804 3c01 	strb.w	r3, [r4, #-1]
 800703c:	6014      	str	r4, [r2, #0]
 800703e:	e7ed      	b.n	800701c <__strtok_r+0x2c>

08007040 <_strtol_l.constprop.0>:
 8007040:	2b01      	cmp	r3, #1
 8007042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007046:	d001      	beq.n	800704c <_strtol_l.constprop.0+0xc>
 8007048:	2b24      	cmp	r3, #36	; 0x24
 800704a:	d906      	bls.n	800705a <_strtol_l.constprop.0+0x1a>
 800704c:	f7ff fed4 	bl	8006df8 <__errno>
 8007050:	2316      	movs	r3, #22
 8007052:	6003      	str	r3, [r0, #0]
 8007054:	2000      	movs	r0, #0
 8007056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007140 <_strtol_l.constprop.0+0x100>
 800705e:	460d      	mov	r5, r1
 8007060:	462e      	mov	r6, r5
 8007062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007066:	f814 700c 	ldrb.w	r7, [r4, ip]
 800706a:	f017 0708 	ands.w	r7, r7, #8
 800706e:	d1f7      	bne.n	8007060 <_strtol_l.constprop.0+0x20>
 8007070:	2c2d      	cmp	r4, #45	; 0x2d
 8007072:	d132      	bne.n	80070da <_strtol_l.constprop.0+0x9a>
 8007074:	782c      	ldrb	r4, [r5, #0]
 8007076:	2701      	movs	r7, #1
 8007078:	1cb5      	adds	r5, r6, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d05b      	beq.n	8007136 <_strtol_l.constprop.0+0xf6>
 800707e:	2b10      	cmp	r3, #16
 8007080:	d109      	bne.n	8007096 <_strtol_l.constprop.0+0x56>
 8007082:	2c30      	cmp	r4, #48	; 0x30
 8007084:	d107      	bne.n	8007096 <_strtol_l.constprop.0+0x56>
 8007086:	782c      	ldrb	r4, [r5, #0]
 8007088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800708c:	2c58      	cmp	r4, #88	; 0x58
 800708e:	d14d      	bne.n	800712c <_strtol_l.constprop.0+0xec>
 8007090:	786c      	ldrb	r4, [r5, #1]
 8007092:	2310      	movs	r3, #16
 8007094:	3502      	adds	r5, #2
 8007096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800709a:	f108 38ff 	add.w	r8, r8, #4294967295
 800709e:	f04f 0c00 	mov.w	ip, #0
 80070a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80070a6:	4666      	mov	r6, ip
 80070a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80070ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070b0:	f1be 0f09 	cmp.w	lr, #9
 80070b4:	d816      	bhi.n	80070e4 <_strtol_l.constprop.0+0xa4>
 80070b6:	4674      	mov	r4, lr
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	dd24      	ble.n	8007106 <_strtol_l.constprop.0+0xc6>
 80070bc:	f1bc 0f00 	cmp.w	ip, #0
 80070c0:	db1e      	blt.n	8007100 <_strtol_l.constprop.0+0xc0>
 80070c2:	45b1      	cmp	r9, r6
 80070c4:	d31c      	bcc.n	8007100 <_strtol_l.constprop.0+0xc0>
 80070c6:	d101      	bne.n	80070cc <_strtol_l.constprop.0+0x8c>
 80070c8:	45a2      	cmp	sl, r4
 80070ca:	db19      	blt.n	8007100 <_strtol_l.constprop.0+0xc0>
 80070cc:	fb06 4603 	mla	r6, r6, r3, r4
 80070d0:	f04f 0c01 	mov.w	ip, #1
 80070d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070d8:	e7e8      	b.n	80070ac <_strtol_l.constprop.0+0x6c>
 80070da:	2c2b      	cmp	r4, #43	; 0x2b
 80070dc:	bf04      	itt	eq
 80070de:	782c      	ldrbeq	r4, [r5, #0]
 80070e0:	1cb5      	addeq	r5, r6, #2
 80070e2:	e7ca      	b.n	800707a <_strtol_l.constprop.0+0x3a>
 80070e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80070e8:	f1be 0f19 	cmp.w	lr, #25
 80070ec:	d801      	bhi.n	80070f2 <_strtol_l.constprop.0+0xb2>
 80070ee:	3c37      	subs	r4, #55	; 0x37
 80070f0:	e7e2      	b.n	80070b8 <_strtol_l.constprop.0+0x78>
 80070f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80070f6:	f1be 0f19 	cmp.w	lr, #25
 80070fa:	d804      	bhi.n	8007106 <_strtol_l.constprop.0+0xc6>
 80070fc:	3c57      	subs	r4, #87	; 0x57
 80070fe:	e7db      	b.n	80070b8 <_strtol_l.constprop.0+0x78>
 8007100:	f04f 3cff 	mov.w	ip, #4294967295
 8007104:	e7e6      	b.n	80070d4 <_strtol_l.constprop.0+0x94>
 8007106:	f1bc 0f00 	cmp.w	ip, #0
 800710a:	da05      	bge.n	8007118 <_strtol_l.constprop.0+0xd8>
 800710c:	2322      	movs	r3, #34	; 0x22
 800710e:	6003      	str	r3, [r0, #0]
 8007110:	4646      	mov	r6, r8
 8007112:	b942      	cbnz	r2, 8007126 <_strtol_l.constprop.0+0xe6>
 8007114:	4630      	mov	r0, r6
 8007116:	e79e      	b.n	8007056 <_strtol_l.constprop.0+0x16>
 8007118:	b107      	cbz	r7, 800711c <_strtol_l.constprop.0+0xdc>
 800711a:	4276      	negs	r6, r6
 800711c:	2a00      	cmp	r2, #0
 800711e:	d0f9      	beq.n	8007114 <_strtol_l.constprop.0+0xd4>
 8007120:	f1bc 0f00 	cmp.w	ip, #0
 8007124:	d000      	beq.n	8007128 <_strtol_l.constprop.0+0xe8>
 8007126:	1e69      	subs	r1, r5, #1
 8007128:	6011      	str	r1, [r2, #0]
 800712a:	e7f3      	b.n	8007114 <_strtol_l.constprop.0+0xd4>
 800712c:	2430      	movs	r4, #48	; 0x30
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1b1      	bne.n	8007096 <_strtol_l.constprop.0+0x56>
 8007132:	2308      	movs	r3, #8
 8007134:	e7af      	b.n	8007096 <_strtol_l.constprop.0+0x56>
 8007136:	2c30      	cmp	r4, #48	; 0x30
 8007138:	d0a5      	beq.n	8007086 <_strtol_l.constprop.0+0x46>
 800713a:	230a      	movs	r3, #10
 800713c:	e7ab      	b.n	8007096 <_strtol_l.constprop.0+0x56>
 800713e:	bf00      	nop
 8007140:	0809e519 	.word	0x0809e519

08007144 <strtol>:
 8007144:	4613      	mov	r3, r2
 8007146:	460a      	mov	r2, r1
 8007148:	4601      	mov	r1, r0
 800714a:	4802      	ldr	r0, [pc, #8]	; (8007154 <strtol+0x10>)
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f7ff bf77 	b.w	8007040 <_strtol_l.constprop.0>
 8007152:	bf00      	nop
 8007154:	20000010 	.word	0x20000010

08007158 <__swbuf_r>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	460e      	mov	r6, r1
 800715c:	4614      	mov	r4, r2
 800715e:	4605      	mov	r5, r0
 8007160:	b118      	cbz	r0, 800716a <__swbuf_r+0x12>
 8007162:	6983      	ldr	r3, [r0, #24]
 8007164:	b90b      	cbnz	r3, 800716a <__swbuf_r+0x12>
 8007166:	f000 f9ef 	bl	8007548 <__sinit>
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <__swbuf_r+0x98>)
 800716c:	429c      	cmp	r4, r3
 800716e:	d12b      	bne.n	80071c8 <__swbuf_r+0x70>
 8007170:	686c      	ldr	r4, [r5, #4]
 8007172:	69a3      	ldr	r3, [r4, #24]
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	071a      	lsls	r2, r3, #28
 800717a:	d52f      	bpl.n	80071dc <__swbuf_r+0x84>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	b36b      	cbz	r3, 80071dc <__swbuf_r+0x84>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	6820      	ldr	r0, [r4, #0]
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	6963      	ldr	r3, [r4, #20]
 8007188:	b2f6      	uxtb	r6, r6
 800718a:	4283      	cmp	r3, r0
 800718c:	4637      	mov	r7, r6
 800718e:	dc04      	bgt.n	800719a <__swbuf_r+0x42>
 8007190:	4621      	mov	r1, r4
 8007192:	4628      	mov	r0, r5
 8007194:	f000 f944 	bl	8007420 <_fflush_r>
 8007198:	bb30      	cbnz	r0, 80071e8 <__swbuf_r+0x90>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	6022      	str	r2, [r4, #0]
 80071a6:	701e      	strb	r6, [r3, #0]
 80071a8:	6963      	ldr	r3, [r4, #20]
 80071aa:	3001      	adds	r0, #1
 80071ac:	4283      	cmp	r3, r0
 80071ae:	d004      	beq.n	80071ba <__swbuf_r+0x62>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	07db      	lsls	r3, r3, #31
 80071b4:	d506      	bpl.n	80071c4 <__swbuf_r+0x6c>
 80071b6:	2e0a      	cmp	r6, #10
 80071b8:	d104      	bne.n	80071c4 <__swbuf_r+0x6c>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 f92f 	bl	8007420 <_fflush_r>
 80071c2:	b988      	cbnz	r0, 80071e8 <__swbuf_r+0x90>
 80071c4:	4638      	mov	r0, r7
 80071c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <__swbuf_r+0x9c>)
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d101      	bne.n	80071d2 <__swbuf_r+0x7a>
 80071ce:	68ac      	ldr	r4, [r5, #8]
 80071d0:	e7cf      	b.n	8007172 <__swbuf_r+0x1a>
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <__swbuf_r+0xa0>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	bf08      	it	eq
 80071d8:	68ec      	ldreq	r4, [r5, #12]
 80071da:	e7ca      	b.n	8007172 <__swbuf_r+0x1a>
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f80c 	bl	80071fc <__swsetup_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d0cb      	beq.n	8007180 <__swbuf_r+0x28>
 80071e8:	f04f 37ff 	mov.w	r7, #4294967295
 80071ec:	e7ea      	b.n	80071c4 <__swbuf_r+0x6c>
 80071ee:	bf00      	nop
 80071f0:	0809e63c 	.word	0x0809e63c
 80071f4:	0809e65c 	.word	0x0809e65c
 80071f8:	0809e61c 	.word	0x0809e61c

080071fc <__swsetup_r>:
 80071fc:	4b32      	ldr	r3, [pc, #200]	; (80072c8 <__swsetup_r+0xcc>)
 80071fe:	b570      	push	{r4, r5, r6, lr}
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	4606      	mov	r6, r0
 8007204:	460c      	mov	r4, r1
 8007206:	b125      	cbz	r5, 8007212 <__swsetup_r+0x16>
 8007208:	69ab      	ldr	r3, [r5, #24]
 800720a:	b913      	cbnz	r3, 8007212 <__swsetup_r+0x16>
 800720c:	4628      	mov	r0, r5
 800720e:	f000 f99b 	bl	8007548 <__sinit>
 8007212:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <__swsetup_r+0xd0>)
 8007214:	429c      	cmp	r4, r3
 8007216:	d10f      	bne.n	8007238 <__swsetup_r+0x3c>
 8007218:	686c      	ldr	r4, [r5, #4]
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007220:	0719      	lsls	r1, r3, #28
 8007222:	d42c      	bmi.n	800727e <__swsetup_r+0x82>
 8007224:	06dd      	lsls	r5, r3, #27
 8007226:	d411      	bmi.n	800724c <__swsetup_r+0x50>
 8007228:	2309      	movs	r3, #9
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	e03e      	b.n	80072b6 <__swsetup_r+0xba>
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <__swsetup_r+0xd4>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d101      	bne.n	8007242 <__swsetup_r+0x46>
 800723e:	68ac      	ldr	r4, [r5, #8]
 8007240:	e7eb      	b.n	800721a <__swsetup_r+0x1e>
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <__swsetup_r+0xd8>)
 8007244:	429c      	cmp	r4, r3
 8007246:	bf08      	it	eq
 8007248:	68ec      	ldreq	r4, [r5, #12]
 800724a:	e7e6      	b.n	800721a <__swsetup_r+0x1e>
 800724c:	0758      	lsls	r0, r3, #29
 800724e:	d512      	bpl.n	8007276 <__swsetup_r+0x7a>
 8007250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007252:	b141      	cbz	r1, 8007266 <__swsetup_r+0x6a>
 8007254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007258:	4299      	cmp	r1, r3
 800725a:	d002      	beq.n	8007262 <__swsetup_r+0x66>
 800725c:	4630      	mov	r0, r6
 800725e:	f000 fa93 	bl	8007788 <_free_r>
 8007262:	2300      	movs	r3, #0
 8007264:	6363      	str	r3, [r4, #52]	; 0x34
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	2300      	movs	r3, #0
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f043 0308 	orr.w	r3, r3, #8
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	b94b      	cbnz	r3, 8007296 <__swsetup_r+0x9a>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728c:	d003      	beq.n	8007296 <__swsetup_r+0x9a>
 800728e:	4621      	mov	r1, r4
 8007290:	4630      	mov	r0, r6
 8007292:	f000 fa31 	bl	80076f8 <__smakebuf_r>
 8007296:	89a0      	ldrh	r0, [r4, #12]
 8007298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800729c:	f010 0301 	ands.w	r3, r0, #1
 80072a0:	d00a      	beq.n	80072b8 <__swsetup_r+0xbc>
 80072a2:	2300      	movs	r3, #0
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	6963      	ldr	r3, [r4, #20]
 80072a8:	425b      	negs	r3, r3
 80072aa:	61a3      	str	r3, [r4, #24]
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	b943      	cbnz	r3, 80072c2 <__swsetup_r+0xc6>
 80072b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072b4:	d1ba      	bne.n	800722c <__swsetup_r+0x30>
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	0781      	lsls	r1, r0, #30
 80072ba:	bf58      	it	pl
 80072bc:	6963      	ldrpl	r3, [r4, #20]
 80072be:	60a3      	str	r3, [r4, #8]
 80072c0:	e7f4      	b.n	80072ac <__swsetup_r+0xb0>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e7f7      	b.n	80072b6 <__swsetup_r+0xba>
 80072c6:	bf00      	nop
 80072c8:	20000010 	.word	0x20000010
 80072cc:	0809e63c 	.word	0x0809e63c
 80072d0:	0809e65c 	.word	0x0809e65c
 80072d4:	0809e61c 	.word	0x0809e61c

080072d8 <__assert_func>:
 80072d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072da:	4614      	mov	r4, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <__assert_func+0x2c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4605      	mov	r5, r0
 80072e4:	68d8      	ldr	r0, [r3, #12]
 80072e6:	b14c      	cbz	r4, 80072fc <__assert_func+0x24>
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <__assert_func+0x30>)
 80072ea:	9100      	str	r1, [sp, #0]
 80072ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072f0:	4906      	ldr	r1, [pc, #24]	; (800730c <__assert_func+0x34>)
 80072f2:	462b      	mov	r3, r5
 80072f4:	f000 f9a6 	bl	8007644 <fiprintf>
 80072f8:	f000 fe7a 	bl	8007ff0 <abort>
 80072fc:	4b04      	ldr	r3, [pc, #16]	; (8007310 <__assert_func+0x38>)
 80072fe:	461c      	mov	r4, r3
 8007300:	e7f3      	b.n	80072ea <__assert_func+0x12>
 8007302:	bf00      	nop
 8007304:	20000010 	.word	0x20000010
 8007308:	0809e4dc 	.word	0x0809e4dc
 800730c:	0809e4e9 	.word	0x0809e4e9
 8007310:	0809e517 	.word	0x0809e517

08007314 <__sflush_r>:
 8007314:	898a      	ldrh	r2, [r1, #12]
 8007316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	0710      	lsls	r0, r2, #28
 800731e:	460c      	mov	r4, r1
 8007320:	d458      	bmi.n	80073d4 <__sflush_r+0xc0>
 8007322:	684b      	ldr	r3, [r1, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dc05      	bgt.n	8007334 <__sflush_r+0x20>
 8007328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	dc02      	bgt.n	8007334 <__sflush_r+0x20>
 800732e:	2000      	movs	r0, #0
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007336:	2e00      	cmp	r6, #0
 8007338:	d0f9      	beq.n	800732e <__sflush_r+0x1a>
 800733a:	2300      	movs	r3, #0
 800733c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007340:	682f      	ldr	r7, [r5, #0]
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	d032      	beq.n	80073ac <__sflush_r+0x98>
 8007346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	075a      	lsls	r2, r3, #29
 800734c:	d505      	bpl.n	800735a <__sflush_r+0x46>
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	1ac0      	subs	r0, r0, r3
 8007352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007354:	b10b      	cbz	r3, 800735a <__sflush_r+0x46>
 8007356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007358:	1ac0      	subs	r0, r0, r3
 800735a:	2300      	movs	r3, #0
 800735c:	4602      	mov	r2, r0
 800735e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007360:	6a21      	ldr	r1, [r4, #32]
 8007362:	4628      	mov	r0, r5
 8007364:	47b0      	blx	r6
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	d106      	bne.n	800737a <__sflush_r+0x66>
 800736c:	6829      	ldr	r1, [r5, #0]
 800736e:	291d      	cmp	r1, #29
 8007370:	d82c      	bhi.n	80073cc <__sflush_r+0xb8>
 8007372:	4a2a      	ldr	r2, [pc, #168]	; (800741c <__sflush_r+0x108>)
 8007374:	40ca      	lsrs	r2, r1
 8007376:	07d6      	lsls	r6, r2, #31
 8007378:	d528      	bpl.n	80073cc <__sflush_r+0xb8>
 800737a:	2200      	movs	r2, #0
 800737c:	6062      	str	r2, [r4, #4]
 800737e:	04d9      	lsls	r1, r3, #19
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	d504      	bpl.n	8007390 <__sflush_r+0x7c>
 8007386:	1c42      	adds	r2, r0, #1
 8007388:	d101      	bne.n	800738e <__sflush_r+0x7a>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	b903      	cbnz	r3, 8007390 <__sflush_r+0x7c>
 800738e:	6560      	str	r0, [r4, #84]	; 0x54
 8007390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007392:	602f      	str	r7, [r5, #0]
 8007394:	2900      	cmp	r1, #0
 8007396:	d0ca      	beq.n	800732e <__sflush_r+0x1a>
 8007398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <__sflush_r+0x92>
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f9f1 	bl	8007788 <_free_r>
 80073a6:	2000      	movs	r0, #0
 80073a8:	6360      	str	r0, [r4, #52]	; 0x34
 80073aa:	e7c1      	b.n	8007330 <__sflush_r+0x1c>
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	2301      	movs	r3, #1
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b0      	blx	r6
 80073b4:	1c41      	adds	r1, r0, #1
 80073b6:	d1c7      	bne.n	8007348 <__sflush_r+0x34>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0c4      	beq.n	8007348 <__sflush_r+0x34>
 80073be:	2b1d      	cmp	r3, #29
 80073c0:	d001      	beq.n	80073c6 <__sflush_r+0xb2>
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0xb6>
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	e7b1      	b.n	800732e <__sflush_r+0x1a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	e7ad      	b.n	8007330 <__sflush_r+0x1c>
 80073d4:	690f      	ldr	r7, [r1, #16]
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d0a9      	beq.n	800732e <__sflush_r+0x1a>
 80073da:	0793      	lsls	r3, r2, #30
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	bf08      	it	eq
 80073e0:	694b      	ldreq	r3, [r1, #20]
 80073e2:	600f      	str	r7, [r1, #0]
 80073e4:	bf18      	it	ne
 80073e6:	2300      	movne	r3, #0
 80073e8:	eba6 0807 	sub.w	r8, r6, r7
 80073ec:	608b      	str	r3, [r1, #8]
 80073ee:	f1b8 0f00 	cmp.w	r8, #0
 80073f2:	dd9c      	ble.n	800732e <__sflush_r+0x1a>
 80073f4:	6a21      	ldr	r1, [r4, #32]
 80073f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073f8:	4643      	mov	r3, r8
 80073fa:	463a      	mov	r2, r7
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b0      	blx	r6
 8007400:	2800      	cmp	r0, #0
 8007402:	dc06      	bgt.n	8007412 <__sflush_r+0xfe>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e78e      	b.n	8007330 <__sflush_r+0x1c>
 8007412:	4407      	add	r7, r0
 8007414:	eba8 0800 	sub.w	r8, r8, r0
 8007418:	e7e9      	b.n	80073ee <__sflush_r+0xda>
 800741a:	bf00      	nop
 800741c:	20400001 	.word	0x20400001

08007420 <_fflush_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b913      	cbnz	r3, 8007430 <_fflush_r+0x10>
 800742a:	2500      	movs	r5, #0
 800742c:	4628      	mov	r0, r5
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	b118      	cbz	r0, 800743a <_fflush_r+0x1a>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <_fflush_r+0x1a>
 8007436:	f000 f887 	bl	8007548 <__sinit>
 800743a:	4b14      	ldr	r3, [pc, #80]	; (800748c <_fflush_r+0x6c>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d11b      	bne.n	8007478 <_fflush_r+0x58>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ef      	beq.n	800742a <_fflush_r+0xa>
 800744a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800744c:	07d0      	lsls	r0, r2, #31
 800744e:	d404      	bmi.n	800745a <_fflush_r+0x3a>
 8007450:	0599      	lsls	r1, r3, #22
 8007452:	d402      	bmi.n	800745a <_fflush_r+0x3a>
 8007454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007456:	f000 f927 	bl	80076a8 <__retarget_lock_acquire_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7ff ff59 	bl	8007314 <__sflush_r>
 8007462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007464:	07da      	lsls	r2, r3, #31
 8007466:	4605      	mov	r5, r0
 8007468:	d4e0      	bmi.n	800742c <_fflush_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d4dd      	bmi.n	800742c <_fflush_r+0xc>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f000 f91a 	bl	80076aa <__retarget_lock_release_recursive>
 8007476:	e7d9      	b.n	800742c <_fflush_r+0xc>
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <_fflush_r+0x70>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <_fflush_r+0x62>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7df      	b.n	8007442 <_fflush_r+0x22>
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <_fflush_r+0x74>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7da      	b.n	8007442 <_fflush_r+0x22>
 800748c:	0809e63c 	.word	0x0809e63c
 8007490:	0809e65c 	.word	0x0809e65c
 8007494:	0809e61c 	.word	0x0809e61c

08007498 <std>:
 8007498:	2300      	movs	r3, #0
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
 800749e:	e9c0 3300 	strd	r3, r3, [r0]
 80074a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074a6:	6083      	str	r3, [r0, #8]
 80074a8:	8181      	strh	r1, [r0, #12]
 80074aa:	6643      	str	r3, [r0, #100]	; 0x64
 80074ac:	81c2      	strh	r2, [r0, #14]
 80074ae:	6183      	str	r3, [r0, #24]
 80074b0:	4619      	mov	r1, r3
 80074b2:	2208      	movs	r2, #8
 80074b4:	305c      	adds	r0, #92	; 0x5c
 80074b6:	f7ff fcc9 	bl	8006e4c <memset>
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <std+0x38>)
 80074bc:	6263      	str	r3, [r4, #36]	; 0x24
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <std+0x3c>)
 80074c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <std+0x40>)
 80074c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <std+0x44>)
 80074c8:	6224      	str	r4, [r4, #32]
 80074ca:	6323      	str	r3, [r4, #48]	; 0x30
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	08007f45 	.word	0x08007f45
 80074d4:	08007f67 	.word	0x08007f67
 80074d8:	08007f9f 	.word	0x08007f9f
 80074dc:	08007fc3 	.word	0x08007fc3

080074e0 <_cleanup_r>:
 80074e0:	4901      	ldr	r1, [pc, #4]	; (80074e8 <_cleanup_r+0x8>)
 80074e2:	f000 b8c1 	b.w	8007668 <_fwalk_reent>
 80074e6:	bf00      	nop
 80074e8:	08007421 	.word	0x08007421

080074ec <__sfmoreglue>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	2268      	movs	r2, #104	; 0x68
 80074f0:	1e4d      	subs	r5, r1, #1
 80074f2:	4355      	muls	r5, r2
 80074f4:	460e      	mov	r6, r1
 80074f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074fa:	f000 f9b1 	bl	8007860 <_malloc_r>
 80074fe:	4604      	mov	r4, r0
 8007500:	b140      	cbz	r0, 8007514 <__sfmoreglue+0x28>
 8007502:	2100      	movs	r1, #0
 8007504:	e9c0 1600 	strd	r1, r6, [r0]
 8007508:	300c      	adds	r0, #12
 800750a:	60a0      	str	r0, [r4, #8]
 800750c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007510:	f7ff fc9c 	bl	8006e4c <memset>
 8007514:	4620      	mov	r0, r4
 8007516:	bd70      	pop	{r4, r5, r6, pc}

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 b8c5 	b.w	80076a8 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20000411 	.word	0x20000411

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b8c0 	b.w	80076aa <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20000411 	.word	0x20000411

08007530 <__sinit_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sinit_lock_acquire+0x8>)
 8007532:	f000 b8b9 	b.w	80076a8 <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	20000412 	.word	0x20000412

0800753c <__sinit_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sinit_lock_release+0x8>)
 800753e:	f000 b8b4 	b.w	80076aa <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	20000412 	.word	0x20000412

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sinit_lock_acquire>
 8007550:	69a3      	ldr	r3, [r4, #24]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sinit_lock_release>
 800755c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007560:	6523      	str	r3, [r4, #80]	; 0x50
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <__sinit+0x68>)
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <__sinit+0x6c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	62a2      	str	r2, [r4, #40]	; 0x28
 800756a:	42a3      	cmp	r3, r4
 800756c:	bf04      	itt	eq
 800756e:	2301      	moveq	r3, #1
 8007570:	61a3      	streq	r3, [r4, #24]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f820 	bl	80075b8 <__sfp>
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f81c 	bl	80075b8 <__sfp>
 8007580:	60a0      	str	r0, [r4, #8]
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f818 	bl	80075b8 <__sfp>
 8007588:	2200      	movs	r2, #0
 800758a:	60e0      	str	r0, [r4, #12]
 800758c:	2104      	movs	r1, #4
 800758e:	6860      	ldr	r0, [r4, #4]
 8007590:	f7ff ff82 	bl	8007498 <std>
 8007594:	68a0      	ldr	r0, [r4, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	2109      	movs	r1, #9
 800759a:	f7ff ff7d 	bl	8007498 <std>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	2202      	movs	r2, #2
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff ff78 	bl	8007498 <std>
 80075a8:	2301      	movs	r3, #1
 80075aa:	61a3      	str	r3, [r4, #24]
 80075ac:	e7d2      	b.n	8007554 <__sinit+0xc>
 80075ae:	bf00      	nop
 80075b0:	0809e464 	.word	0x0809e464
 80075b4:	080074e1 	.word	0x080074e1

080075b8 <__sfp>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	4607      	mov	r7, r0
 80075bc:	f7ff ffac 	bl	8007518 <__sfp_lock_acquire>
 80075c0:	4b1e      	ldr	r3, [pc, #120]	; (800763c <__sfp+0x84>)
 80075c2:	681e      	ldr	r6, [r3, #0]
 80075c4:	69b3      	ldr	r3, [r6, #24]
 80075c6:	b913      	cbnz	r3, 80075ce <__sfp+0x16>
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffbd 	bl	8007548 <__sinit>
 80075ce:	3648      	adds	r6, #72	; 0x48
 80075d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	d503      	bpl.n	80075e0 <__sfp+0x28>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	b30b      	cbz	r3, 8007620 <__sfp+0x68>
 80075dc:	6836      	ldr	r6, [r6, #0]
 80075de:	e7f7      	b.n	80075d0 <__sfp+0x18>
 80075e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075e4:	b9d5      	cbnz	r5, 800761c <__sfp+0x64>
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <__sfp+0x88>)
 80075e8:	60e3      	str	r3, [r4, #12]
 80075ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ee:	6665      	str	r5, [r4, #100]	; 0x64
 80075f0:	f000 f859 	bl	80076a6 <__retarget_lock_init_recursive>
 80075f4:	f7ff ff96 	bl	8007524 <__sfp_lock_release>
 80075f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007600:	6025      	str	r5, [r4, #0]
 8007602:	61a5      	str	r5, [r4, #24]
 8007604:	2208      	movs	r2, #8
 8007606:	4629      	mov	r1, r5
 8007608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800760c:	f7ff fc1e 	bl	8006e4c <memset>
 8007610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007618:	4620      	mov	r0, r4
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	3468      	adds	r4, #104	; 0x68
 800761e:	e7d9      	b.n	80075d4 <__sfp+0x1c>
 8007620:	2104      	movs	r1, #4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff62 	bl	80074ec <__sfmoreglue>
 8007628:	4604      	mov	r4, r0
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	2800      	cmp	r0, #0
 800762e:	d1d5      	bne.n	80075dc <__sfp+0x24>
 8007630:	f7ff ff78 	bl	8007524 <__sfp_lock_release>
 8007634:	230c      	movs	r3, #12
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	e7ee      	b.n	8007618 <__sfp+0x60>
 800763a:	bf00      	nop
 800763c:	0809e464 	.word	0x0809e464
 8007640:	ffff0001 	.word	0xffff0001

08007644 <fiprintf>:
 8007644:	b40e      	push	{r1, r2, r3}
 8007646:	b503      	push	{r0, r1, lr}
 8007648:	4601      	mov	r1, r0
 800764a:	ab03      	add	r3, sp, #12
 800764c:	4805      	ldr	r0, [pc, #20]	; (8007664 <fiprintf+0x20>)
 800764e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007652:	6800      	ldr	r0, [r0, #0]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f000 f9a1 	bl	800799c <_vfiprintf_r>
 800765a:	b002      	add	sp, #8
 800765c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007660:	b003      	add	sp, #12
 8007662:	4770      	bx	lr
 8007664:	20000010 	.word	0x20000010

08007668 <_fwalk_reent>:
 8007668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800766c:	4606      	mov	r6, r0
 800766e:	4688      	mov	r8, r1
 8007670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007674:	2700      	movs	r7, #0
 8007676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800767a:	f1b9 0901 	subs.w	r9, r9, #1
 800767e:	d505      	bpl.n	800768c <_fwalk_reent+0x24>
 8007680:	6824      	ldr	r4, [r4, #0]
 8007682:	2c00      	cmp	r4, #0
 8007684:	d1f7      	bne.n	8007676 <_fwalk_reent+0xe>
 8007686:	4638      	mov	r0, r7
 8007688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768c:	89ab      	ldrh	r3, [r5, #12]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d907      	bls.n	80076a2 <_fwalk_reent+0x3a>
 8007692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007696:	3301      	adds	r3, #1
 8007698:	d003      	beq.n	80076a2 <_fwalk_reent+0x3a>
 800769a:	4629      	mov	r1, r5
 800769c:	4630      	mov	r0, r6
 800769e:	47c0      	blx	r8
 80076a0:	4307      	orrs	r7, r0
 80076a2:	3568      	adds	r5, #104	; 0x68
 80076a4:	e7e9      	b.n	800767a <_fwalk_reent+0x12>

080076a6 <__retarget_lock_init_recursive>:
 80076a6:	4770      	bx	lr

080076a8 <__retarget_lock_acquire_recursive>:
 80076a8:	4770      	bx	lr

080076aa <__retarget_lock_release_recursive>:
 80076aa:	4770      	bx	lr

080076ac <__swhatbuf_r>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	2900      	cmp	r1, #0
 80076b6:	b096      	sub	sp, #88	; 0x58
 80076b8:	4614      	mov	r4, r2
 80076ba:	461d      	mov	r5, r3
 80076bc:	da08      	bge.n	80076d0 <__swhatbuf_r+0x24>
 80076be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	061a      	lsls	r2, r3, #24
 80076c8:	d410      	bmi.n	80076ec <__swhatbuf_r+0x40>
 80076ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ce:	e00e      	b.n	80076ee <__swhatbuf_r+0x42>
 80076d0:	466a      	mov	r2, sp
 80076d2:	f000 fca5 	bl	8008020 <_fstat_r>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dbf1      	blt.n	80076be <__swhatbuf_r+0x12>
 80076da:	9a01      	ldr	r2, [sp, #4]
 80076dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076e4:	425a      	negs	r2, r3
 80076e6:	415a      	adcs	r2, r3
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	e7ee      	b.n	80076ca <__swhatbuf_r+0x1e>
 80076ec:	2340      	movs	r3, #64	; 0x40
 80076ee:	2000      	movs	r0, #0
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	b016      	add	sp, #88	; 0x58
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080076f8 <__smakebuf_r>:
 80076f8:	898b      	ldrh	r3, [r1, #12]
 80076fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076fc:	079d      	lsls	r5, r3, #30
 80076fe:	4606      	mov	r6, r0
 8007700:	460c      	mov	r4, r1
 8007702:	d507      	bpl.n	8007714 <__smakebuf_r+0x1c>
 8007704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	6123      	str	r3, [r4, #16]
 800770c:	2301      	movs	r3, #1
 800770e:	6163      	str	r3, [r4, #20]
 8007710:	b002      	add	sp, #8
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	ab01      	add	r3, sp, #4
 8007716:	466a      	mov	r2, sp
 8007718:	f7ff ffc8 	bl	80076ac <__swhatbuf_r>
 800771c:	9900      	ldr	r1, [sp, #0]
 800771e:	4605      	mov	r5, r0
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f89d 	bl	8007860 <_malloc_r>
 8007726:	b948      	cbnz	r0, 800773c <__smakebuf_r+0x44>
 8007728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d4ef      	bmi.n	8007710 <__smakebuf_r+0x18>
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	f043 0302 	orr.w	r3, r3, #2
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	e7e3      	b.n	8007704 <__smakebuf_r+0xc>
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <__smakebuf_r+0x7c>)
 800773e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	6020      	str	r0, [r4, #0]
 8007744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007748:	81a3      	strh	r3, [r4, #12]
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	6163      	str	r3, [r4, #20]
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	6120      	str	r0, [r4, #16]
 8007752:	b15b      	cbz	r3, 800776c <__smakebuf_r+0x74>
 8007754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007758:	4630      	mov	r0, r6
 800775a:	f000 fc73 	bl	8008044 <_isatty_r>
 800775e:	b128      	cbz	r0, 800776c <__smakebuf_r+0x74>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	f043 0301 	orr.w	r3, r3, #1
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	89a0      	ldrh	r0, [r4, #12]
 800776e:	4305      	orrs	r5, r0
 8007770:	81a5      	strh	r5, [r4, #12]
 8007772:	e7cd      	b.n	8007710 <__smakebuf_r+0x18>
 8007774:	080074e1 	.word	0x080074e1

08007778 <malloc>:
 8007778:	4b02      	ldr	r3, [pc, #8]	; (8007784 <malloc+0xc>)
 800777a:	4601      	mov	r1, r0
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f000 b86f 	b.w	8007860 <_malloc_r>
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010

08007788 <_free_r>:
 8007788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800778a:	2900      	cmp	r1, #0
 800778c:	d044      	beq.n	8007818 <_free_r+0x90>
 800778e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007792:	9001      	str	r0, [sp, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f1a1 0404 	sub.w	r4, r1, #4
 800779a:	bfb8      	it	lt
 800779c:	18e4      	addlt	r4, r4, r3
 800779e:	f000 fc73 	bl	8008088 <__malloc_lock>
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <_free_r+0x94>)
 80077a4:	9801      	ldr	r0, [sp, #4]
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x30>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	b003      	add	sp, #12
 80077b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077b4:	f000 bc6e 	b.w	8008094 <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x46>
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1961      	adds	r1, r4, r5
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x22>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x50>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x46>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1855      	adds	r5, r2, r1
 80077dc:	42a5      	cmp	r5, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x70>
 80077e0:	6824      	ldr	r4, [r4, #0]
 80077e2:	4421      	add	r1, r4
 80077e4:	1854      	adds	r4, r2, r1
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x26>
 80077ec:	681c      	ldr	r4, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	4421      	add	r1, r4
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x26>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x78>
 80077fa:	230c      	movs	r3, #12
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x26>
 8007800:	6825      	ldr	r5, [r4, #0]
 8007802:	1961      	adds	r1, r4, r5
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1949      	addeq	r1, r1, r5
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x26>
 8007818:	b003      	add	sp, #12
 800781a:	bd30      	pop	{r4, r5, pc}
 800781c:	20000414 	.word	0x20000414

08007820 <sbrk_aligned>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0e      	ldr	r6, [pc, #56]	; (800785c <sbrk_aligned+0x3c>)
 8007824:	460c      	mov	r4, r1
 8007826:	6831      	ldr	r1, [r6, #0]
 8007828:	4605      	mov	r5, r0
 800782a:	b911      	cbnz	r1, 8007832 <sbrk_aligned+0x12>
 800782c:	f000 fb7a 	bl	8007f24 <_sbrk_r>
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fb75 	bl	8007f24 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d00a      	beq.n	8007854 <sbrk_aligned+0x34>
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d007      	beq.n	8007858 <sbrk_aligned+0x38>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4628      	mov	r0, r5
 800784c:	f000 fb6a 	bl	8007f24 <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d101      	bne.n	8007858 <sbrk_aligned+0x38>
 8007854:	f04f 34ff 	mov.w	r4, #4294967295
 8007858:	4620      	mov	r0, r4
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	20000418 	.word	0x20000418

08007860 <_malloc_r>:
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	1ccd      	adds	r5, r1, #3
 8007866:	f025 0503 	bic.w	r5, r5, #3
 800786a:	3508      	adds	r5, #8
 800786c:	2d0c      	cmp	r5, #12
 800786e:	bf38      	it	cc
 8007870:	250c      	movcc	r5, #12
 8007872:	2d00      	cmp	r5, #0
 8007874:	4607      	mov	r7, r0
 8007876:	db01      	blt.n	800787c <_malloc_r+0x1c>
 8007878:	42a9      	cmp	r1, r5
 800787a:	d905      	bls.n	8007888 <_malloc_r+0x28>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2600      	movs	r6, #0
 8007882:	4630      	mov	r0, r6
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	4e2e      	ldr	r6, [pc, #184]	; (8007944 <_malloc_r+0xe4>)
 800788a:	f000 fbfd 	bl	8008088 <__malloc_lock>
 800788e:	6833      	ldr	r3, [r6, #0]
 8007890:	461c      	mov	r4, r3
 8007892:	bb34      	cbnz	r4, 80078e2 <_malloc_r+0x82>
 8007894:	4629      	mov	r1, r5
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ffc2 	bl	8007820 <sbrk_aligned>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	4604      	mov	r4, r0
 80078a0:	d14d      	bne.n	800793e <_malloc_r+0xde>
 80078a2:	6834      	ldr	r4, [r6, #0]
 80078a4:	4626      	mov	r6, r4
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	d140      	bne.n	800792c <_malloc_r+0xcc>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	4631      	mov	r1, r6
 80078ae:	4638      	mov	r0, r7
 80078b0:	eb04 0803 	add.w	r8, r4, r3
 80078b4:	f000 fb36 	bl	8007f24 <_sbrk_r>
 80078b8:	4580      	cmp	r8, r0
 80078ba:	d13a      	bne.n	8007932 <_malloc_r+0xd2>
 80078bc:	6821      	ldr	r1, [r4, #0]
 80078be:	3503      	adds	r5, #3
 80078c0:	1a6d      	subs	r5, r5, r1
 80078c2:	f025 0503 	bic.w	r5, r5, #3
 80078c6:	3508      	adds	r5, #8
 80078c8:	2d0c      	cmp	r5, #12
 80078ca:	bf38      	it	cc
 80078cc:	250c      	movcc	r5, #12
 80078ce:	4629      	mov	r1, r5
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff ffa5 	bl	8007820 <sbrk_aligned>
 80078d6:	3001      	adds	r0, #1
 80078d8:	d02b      	beq.n	8007932 <_malloc_r+0xd2>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	442b      	add	r3, r5
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	e00e      	b.n	8007900 <_malloc_r+0xa0>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	1b52      	subs	r2, r2, r5
 80078e6:	d41e      	bmi.n	8007926 <_malloc_r+0xc6>
 80078e8:	2a0b      	cmp	r2, #11
 80078ea:	d916      	bls.n	800791a <_malloc_r+0xba>
 80078ec:	1961      	adds	r1, r4, r5
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	6025      	str	r5, [r4, #0]
 80078f2:	bf18      	it	ne
 80078f4:	6059      	strne	r1, [r3, #4]
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	bf08      	it	eq
 80078fa:	6031      	streq	r1, [r6, #0]
 80078fc:	5162      	str	r2, [r4, r5]
 80078fe:	604b      	str	r3, [r1, #4]
 8007900:	4638      	mov	r0, r7
 8007902:	f104 060b 	add.w	r6, r4, #11
 8007906:	f000 fbc5 	bl	8008094 <__malloc_unlock>
 800790a:	f026 0607 	bic.w	r6, r6, #7
 800790e:	1d23      	adds	r3, r4, #4
 8007910:	1af2      	subs	r2, r6, r3
 8007912:	d0b6      	beq.n	8007882 <_malloc_r+0x22>
 8007914:	1b9b      	subs	r3, r3, r6
 8007916:	50a3      	str	r3, [r4, r2]
 8007918:	e7b3      	b.n	8007882 <_malloc_r+0x22>
 800791a:	6862      	ldr	r2, [r4, #4]
 800791c:	42a3      	cmp	r3, r4
 800791e:	bf0c      	ite	eq
 8007920:	6032      	streq	r2, [r6, #0]
 8007922:	605a      	strne	r2, [r3, #4]
 8007924:	e7ec      	b.n	8007900 <_malloc_r+0xa0>
 8007926:	4623      	mov	r3, r4
 8007928:	6864      	ldr	r4, [r4, #4]
 800792a:	e7b2      	b.n	8007892 <_malloc_r+0x32>
 800792c:	4634      	mov	r4, r6
 800792e:	6876      	ldr	r6, [r6, #4]
 8007930:	e7b9      	b.n	80078a6 <_malloc_r+0x46>
 8007932:	230c      	movs	r3, #12
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	4638      	mov	r0, r7
 8007938:	f000 fbac 	bl	8008094 <__malloc_unlock>
 800793c:	e7a1      	b.n	8007882 <_malloc_r+0x22>
 800793e:	6025      	str	r5, [r4, #0]
 8007940:	e7de      	b.n	8007900 <_malloc_r+0xa0>
 8007942:	bf00      	nop
 8007944:	20000414 	.word	0x20000414

08007948 <__sfputc_r>:
 8007948:	6893      	ldr	r3, [r2, #8]
 800794a:	3b01      	subs	r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	b410      	push	{r4}
 8007950:	6093      	str	r3, [r2, #8]
 8007952:	da08      	bge.n	8007966 <__sfputc_r+0x1e>
 8007954:	6994      	ldr	r4, [r2, #24]
 8007956:	42a3      	cmp	r3, r4
 8007958:	db01      	blt.n	800795e <__sfputc_r+0x16>
 800795a:	290a      	cmp	r1, #10
 800795c:	d103      	bne.n	8007966 <__sfputc_r+0x1e>
 800795e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007962:	f7ff bbf9 	b.w	8007158 <__swbuf_r>
 8007966:	6813      	ldr	r3, [r2, #0]
 8007968:	1c58      	adds	r0, r3, #1
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	7019      	strb	r1, [r3, #0]
 800796e:	4608      	mov	r0, r1
 8007970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007974:	4770      	bx	lr

08007976 <__sfputs_r>:
 8007976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4614      	mov	r4, r2
 800797e:	18d5      	adds	r5, r2, r3
 8007980:	42ac      	cmp	r4, r5
 8007982:	d101      	bne.n	8007988 <__sfputs_r+0x12>
 8007984:	2000      	movs	r0, #0
 8007986:	e007      	b.n	8007998 <__sfputs_r+0x22>
 8007988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798c:	463a      	mov	r2, r7
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ffda 	bl	8007948 <__sfputc_r>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d1f3      	bne.n	8007980 <__sfputs_r+0xa>
 8007998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800799c <_vfiprintf_r>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	460d      	mov	r5, r1
 80079a2:	b09d      	sub	sp, #116	; 0x74
 80079a4:	4614      	mov	r4, r2
 80079a6:	4698      	mov	r8, r3
 80079a8:	4606      	mov	r6, r0
 80079aa:	b118      	cbz	r0, 80079b4 <_vfiprintf_r+0x18>
 80079ac:	6983      	ldr	r3, [r0, #24]
 80079ae:	b90b      	cbnz	r3, 80079b4 <_vfiprintf_r+0x18>
 80079b0:	f7ff fdca 	bl	8007548 <__sinit>
 80079b4:	4b89      	ldr	r3, [pc, #548]	; (8007bdc <_vfiprintf_r+0x240>)
 80079b6:	429d      	cmp	r5, r3
 80079b8:	d11b      	bne.n	80079f2 <_vfiprintf_r+0x56>
 80079ba:	6875      	ldr	r5, [r6, #4]
 80079bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079be:	07d9      	lsls	r1, r3, #31
 80079c0:	d405      	bmi.n	80079ce <_vfiprintf_r+0x32>
 80079c2:	89ab      	ldrh	r3, [r5, #12]
 80079c4:	059a      	lsls	r2, r3, #22
 80079c6:	d402      	bmi.n	80079ce <_vfiprintf_r+0x32>
 80079c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ca:	f7ff fe6d 	bl	80076a8 <__retarget_lock_acquire_recursive>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	071b      	lsls	r3, r3, #28
 80079d2:	d501      	bpl.n	80079d8 <_vfiprintf_r+0x3c>
 80079d4:	692b      	ldr	r3, [r5, #16]
 80079d6:	b9eb      	cbnz	r3, 8007a14 <_vfiprintf_r+0x78>
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff fc0e 	bl	80071fc <__swsetup_r>
 80079e0:	b1c0      	cbz	r0, 8007a14 <_vfiprintf_r+0x78>
 80079e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e4:	07dc      	lsls	r4, r3, #31
 80079e6:	d50e      	bpl.n	8007a06 <_vfiprintf_r+0x6a>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	b01d      	add	sp, #116	; 0x74
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f2:	4b7b      	ldr	r3, [pc, #492]	; (8007be0 <_vfiprintf_r+0x244>)
 80079f4:	429d      	cmp	r5, r3
 80079f6:	d101      	bne.n	80079fc <_vfiprintf_r+0x60>
 80079f8:	68b5      	ldr	r5, [r6, #8]
 80079fa:	e7df      	b.n	80079bc <_vfiprintf_r+0x20>
 80079fc:	4b79      	ldr	r3, [pc, #484]	; (8007be4 <_vfiprintf_r+0x248>)
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf08      	it	eq
 8007a02:	68f5      	ldreq	r5, [r6, #12]
 8007a04:	e7da      	b.n	80079bc <_vfiprintf_r+0x20>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	0598      	lsls	r0, r3, #22
 8007a0a:	d4ed      	bmi.n	80079e8 <_vfiprintf_r+0x4c>
 8007a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a0e:	f7ff fe4c 	bl	80076aa <__retarget_lock_release_recursive>
 8007a12:	e7e9      	b.n	80079e8 <_vfiprintf_r+0x4c>
 8007a14:	2300      	movs	r3, #0
 8007a16:	9309      	str	r3, [sp, #36]	; 0x24
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a22:	2330      	movs	r3, #48	; 0x30
 8007a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007be8 <_vfiprintf_r+0x24c>
 8007a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a2c:	f04f 0901 	mov.w	r9, #1
 8007a30:	4623      	mov	r3, r4
 8007a32:	469a      	mov	sl, r3
 8007a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a38:	b10a      	cbz	r2, 8007a3e <_vfiprintf_r+0xa2>
 8007a3a:	2a25      	cmp	r2, #37	; 0x25
 8007a3c:	d1f9      	bne.n	8007a32 <_vfiprintf_r+0x96>
 8007a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a42:	d00b      	beq.n	8007a5c <_vfiprintf_r+0xc0>
 8007a44:	465b      	mov	r3, fp
 8007a46:	4622      	mov	r2, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ff93 	bl	8007976 <__sfputs_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	f000 80aa 	beq.w	8007baa <_vfiprintf_r+0x20e>
 8007a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a58:	445a      	add	r2, fp
 8007a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80a2 	beq.w	8007baa <_vfiprintf_r+0x20e>
 8007a66:	2300      	movs	r3, #0
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a70:	f10a 0a01 	add.w	sl, sl, #1
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	9307      	str	r3, [sp, #28]
 8007a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a7e:	4654      	mov	r4, sl
 8007a80:	2205      	movs	r2, #5
 8007a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a86:	4858      	ldr	r0, [pc, #352]	; (8007be8 <_vfiprintf_r+0x24c>)
 8007a88:	f7f8 fbd2 	bl	8000230 <memchr>
 8007a8c:	9a04      	ldr	r2, [sp, #16]
 8007a8e:	b9d8      	cbnz	r0, 8007ac8 <_vfiprintf_r+0x12c>
 8007a90:	06d1      	lsls	r1, r2, #27
 8007a92:	bf44      	itt	mi
 8007a94:	2320      	movmi	r3, #32
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	0713      	lsls	r3, r2, #28
 8007a9c:	bf44      	itt	mi
 8007a9e:	232b      	movmi	r3, #43	; 0x2b
 8007aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aaa:	d015      	beq.n	8007ad8 <_vfiprintf_r+0x13c>
 8007aac:	9a07      	ldr	r2, [sp, #28]
 8007aae:	4654      	mov	r4, sl
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f04f 0c0a 	mov.w	ip, #10
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007abc:	3b30      	subs	r3, #48	; 0x30
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d94e      	bls.n	8007b60 <_vfiprintf_r+0x1c4>
 8007ac2:	b1b0      	cbz	r0, 8007af2 <_vfiprintf_r+0x156>
 8007ac4:	9207      	str	r2, [sp, #28]
 8007ac6:	e014      	b.n	8007af2 <_vfiprintf_r+0x156>
 8007ac8:	eba0 0308 	sub.w	r3, r0, r8
 8007acc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	46a2      	mov	sl, r4
 8007ad6:	e7d2      	b.n	8007a7e <_vfiprintf_r+0xe2>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	1d19      	adds	r1, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9103      	str	r1, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfbb      	ittet	lt
 8007ae4:	425b      	neglt	r3, r3
 8007ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8007aea:	9307      	strge	r3, [sp, #28]
 8007aec:	9307      	strlt	r3, [sp, #28]
 8007aee:	bfb8      	it	lt
 8007af0:	9204      	strlt	r2, [sp, #16]
 8007af2:	7823      	ldrb	r3, [r4, #0]
 8007af4:	2b2e      	cmp	r3, #46	; 0x2e
 8007af6:	d10c      	bne.n	8007b12 <_vfiprintf_r+0x176>
 8007af8:	7863      	ldrb	r3, [r4, #1]
 8007afa:	2b2a      	cmp	r3, #42	; 0x2a
 8007afc:	d135      	bne.n	8007b6a <_vfiprintf_r+0x1ce>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9203      	str	r2, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b0e:	3402      	adds	r4, #2
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bf8 <_vfiprintf_r+0x25c>
 8007b16:	7821      	ldrb	r1, [r4, #0]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f7f8 fb88 	bl	8000230 <memchr>
 8007b20:	b140      	cbz	r0, 8007b34 <_vfiprintf_r+0x198>
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	eba0 000a 	sub.w	r0, r0, sl
 8007b28:	fa03 f000 	lsl.w	r0, r3, r0
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	4303      	orrs	r3, r0
 8007b30:	3401      	adds	r4, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b38:	482c      	ldr	r0, [pc, #176]	; (8007bec <_vfiprintf_r+0x250>)
 8007b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b3e:	2206      	movs	r2, #6
 8007b40:	f7f8 fb76 	bl	8000230 <memchr>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d03f      	beq.n	8007bc8 <_vfiprintf_r+0x22c>
 8007b48:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <_vfiprintf_r+0x254>)
 8007b4a:	bb1b      	cbnz	r3, 8007b94 <_vfiprintf_r+0x1f8>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	3307      	adds	r3, #7
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	3308      	adds	r3, #8
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	443b      	add	r3, r7
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	e767      	b.n	8007a30 <_vfiprintf_r+0x94>
 8007b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b64:	460c      	mov	r4, r1
 8007b66:	2001      	movs	r0, #1
 8007b68:	e7a5      	b.n	8007ab6 <_vfiprintf_r+0x11a>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f04f 0c0a 	mov.w	ip, #10
 8007b76:	4620      	mov	r0, r4
 8007b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b7c:	3a30      	subs	r2, #48	; 0x30
 8007b7e:	2a09      	cmp	r2, #9
 8007b80:	d903      	bls.n	8007b8a <_vfiprintf_r+0x1ee>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c5      	beq.n	8007b12 <_vfiprintf_r+0x176>
 8007b86:	9105      	str	r1, [sp, #20]
 8007b88:	e7c3      	b.n	8007b12 <_vfiprintf_r+0x176>
 8007b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b8e:	4604      	mov	r4, r0
 8007b90:	2301      	movs	r3, #1
 8007b92:	e7f0      	b.n	8007b76 <_vfiprintf_r+0x1da>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <_vfiprintf_r+0x258>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f3af 8000 	nop.w
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	1c78      	adds	r0, r7, #1
 8007ba8:	d1d6      	bne.n	8007b58 <_vfiprintf_r+0x1bc>
 8007baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	d405      	bmi.n	8007bbc <_vfiprintf_r+0x220>
 8007bb0:	89ab      	ldrh	r3, [r5, #12]
 8007bb2:	059a      	lsls	r2, r3, #22
 8007bb4:	d402      	bmi.n	8007bbc <_vfiprintf_r+0x220>
 8007bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb8:	f7ff fd77 	bl	80076aa <__retarget_lock_release_recursive>
 8007bbc:	89ab      	ldrh	r3, [r5, #12]
 8007bbe:	065b      	lsls	r3, r3, #25
 8007bc0:	f53f af12 	bmi.w	80079e8 <_vfiprintf_r+0x4c>
 8007bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bc6:	e711      	b.n	80079ec <_vfiprintf_r+0x50>
 8007bc8:	ab03      	add	r3, sp, #12
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_vfiprintf_r+0x258>)
 8007bd0:	a904      	add	r1, sp, #16
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f880 	bl	8007cd8 <_printf_i>
 8007bd8:	e7e4      	b.n	8007ba4 <_vfiprintf_r+0x208>
 8007bda:	bf00      	nop
 8007bdc:	0809e63c 	.word	0x0809e63c
 8007be0:	0809e65c 	.word	0x0809e65c
 8007be4:	0809e61c 	.word	0x0809e61c
 8007be8:	0809e67c 	.word	0x0809e67c
 8007bec:	0809e686 	.word	0x0809e686
 8007bf0:	00000000 	.word	0x00000000
 8007bf4:	08007977 	.word	0x08007977
 8007bf8:	0809e682 	.word	0x0809e682

08007bfc <_printf_common>:
 8007bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	4616      	mov	r6, r2
 8007c02:	4699      	mov	r9, r3
 8007c04:	688a      	ldr	r2, [r1, #8]
 8007c06:	690b      	ldr	r3, [r1, #16]
 8007c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	bfb8      	it	lt
 8007c10:	4613      	movlt	r3, r2
 8007c12:	6033      	str	r3, [r6, #0]
 8007c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c18:	4607      	mov	r7, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b10a      	cbz	r2, 8007c22 <_printf_common+0x26>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	6033      	str	r3, [r6, #0]
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	0699      	lsls	r1, r3, #26
 8007c26:	bf42      	ittt	mi
 8007c28:	6833      	ldrmi	r3, [r6, #0]
 8007c2a:	3302      	addmi	r3, #2
 8007c2c:	6033      	strmi	r3, [r6, #0]
 8007c2e:	6825      	ldr	r5, [r4, #0]
 8007c30:	f015 0506 	ands.w	r5, r5, #6
 8007c34:	d106      	bne.n	8007c44 <_printf_common+0x48>
 8007c36:	f104 0a19 	add.w	sl, r4, #25
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	6832      	ldr	r2, [r6, #0]
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	42ab      	cmp	r3, r5
 8007c42:	dc26      	bgt.n	8007c92 <_printf_common+0x96>
 8007c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c48:	1e13      	subs	r3, r2, #0
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	bf18      	it	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	0692      	lsls	r2, r2, #26
 8007c52:	d42b      	bmi.n	8007cac <_printf_common+0xb0>
 8007c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	47c0      	blx	r8
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d01e      	beq.n	8007ca0 <_printf_common+0xa4>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	68e5      	ldr	r5, [r4, #12]
 8007c66:	6832      	ldr	r2, [r6, #0]
 8007c68:	f003 0306 	and.w	r3, r3, #6
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	bf08      	it	eq
 8007c70:	1aad      	subeq	r5, r5, r2
 8007c72:	68a3      	ldr	r3, [r4, #8]
 8007c74:	6922      	ldr	r2, [r4, #16]
 8007c76:	bf0c      	ite	eq
 8007c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c7c:	2500      	movne	r5, #0
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	bfc4      	itt	gt
 8007c82:	1a9b      	subgt	r3, r3, r2
 8007c84:	18ed      	addgt	r5, r5, r3
 8007c86:	2600      	movs	r6, #0
 8007c88:	341a      	adds	r4, #26
 8007c8a:	42b5      	cmp	r5, r6
 8007c8c:	d11a      	bne.n	8007cc4 <_printf_common+0xc8>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e008      	b.n	8007ca4 <_printf_common+0xa8>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4652      	mov	r2, sl
 8007c96:	4649      	mov	r1, r9
 8007c98:	4638      	mov	r0, r7
 8007c9a:	47c0      	blx	r8
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d103      	bne.n	8007ca8 <_printf_common+0xac>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca8:	3501      	adds	r5, #1
 8007caa:	e7c6      	b.n	8007c3a <_printf_common+0x3e>
 8007cac:	18e1      	adds	r1, r4, r3
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	2030      	movs	r0, #48	; 0x30
 8007cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cb6:	4422      	add	r2, r4
 8007cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	e7c7      	b.n	8007c54 <_printf_common+0x58>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	4649      	mov	r1, r9
 8007cca:	4638      	mov	r0, r7
 8007ccc:	47c0      	blx	r8
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d0e6      	beq.n	8007ca0 <_printf_common+0xa4>
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7d9      	b.n	8007c8a <_printf_common+0x8e>
	...

08007cd8 <_printf_i>:
 8007cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	7e0f      	ldrb	r7, [r1, #24]
 8007cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce0:	2f78      	cmp	r7, #120	; 0x78
 8007ce2:	4691      	mov	r9, r2
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	469a      	mov	sl, r3
 8007cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cee:	d807      	bhi.n	8007d00 <_printf_i+0x28>
 8007cf0:	2f62      	cmp	r7, #98	; 0x62
 8007cf2:	d80a      	bhi.n	8007d0a <_printf_i+0x32>
 8007cf4:	2f00      	cmp	r7, #0
 8007cf6:	f000 80d8 	beq.w	8007eaa <_printf_i+0x1d2>
 8007cfa:	2f58      	cmp	r7, #88	; 0x58
 8007cfc:	f000 80a3 	beq.w	8007e46 <_printf_i+0x16e>
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d08:	e03a      	b.n	8007d80 <_printf_i+0xa8>
 8007d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d0e:	2b15      	cmp	r3, #21
 8007d10:	d8f6      	bhi.n	8007d00 <_printf_i+0x28>
 8007d12:	a101      	add	r1, pc, #4	; (adr r1, 8007d18 <_printf_i+0x40>)
 8007d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d85 	.word	0x08007d85
 8007d20:	08007d01 	.word	0x08007d01
 8007d24:	08007d01 	.word	0x08007d01
 8007d28:	08007d01 	.word	0x08007d01
 8007d2c:	08007d01 	.word	0x08007d01
 8007d30:	08007d85 	.word	0x08007d85
 8007d34:	08007d01 	.word	0x08007d01
 8007d38:	08007d01 	.word	0x08007d01
 8007d3c:	08007d01 	.word	0x08007d01
 8007d40:	08007d01 	.word	0x08007d01
 8007d44:	08007e91 	.word	0x08007e91
 8007d48:	08007db5 	.word	0x08007db5
 8007d4c:	08007e73 	.word	0x08007e73
 8007d50:	08007d01 	.word	0x08007d01
 8007d54:	08007d01 	.word	0x08007d01
 8007d58:	08007eb3 	.word	0x08007eb3
 8007d5c:	08007d01 	.word	0x08007d01
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007d01 	.word	0x08007d01
 8007d68:	08007d01 	.word	0x08007d01
 8007d6c:	08007e7b 	.word	0x08007e7b
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	1d1a      	adds	r2, r3, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	602a      	str	r2, [r5, #0]
 8007d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0a3      	b.n	8007ecc <_printf_i+0x1f4>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	6829      	ldr	r1, [r5, #0]
 8007d88:	0606      	lsls	r6, r0, #24
 8007d8a:	f101 0304 	add.w	r3, r1, #4
 8007d8e:	d50a      	bpl.n	8007da6 <_printf_i+0xce>
 8007d90:	680e      	ldr	r6, [r1, #0]
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	da03      	bge.n	8007da0 <_printf_i+0xc8>
 8007d98:	232d      	movs	r3, #45	; 0x2d
 8007d9a:	4276      	negs	r6, r6
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da0:	485e      	ldr	r0, [pc, #376]	; (8007f1c <_printf_i+0x244>)
 8007da2:	230a      	movs	r3, #10
 8007da4:	e019      	b.n	8007dda <_printf_i+0x102>
 8007da6:	680e      	ldr	r6, [r1, #0]
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dae:	bf18      	it	ne
 8007db0:	b236      	sxthne	r6, r6
 8007db2:	e7ef      	b.n	8007d94 <_printf_i+0xbc>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1d19      	adds	r1, r3, #4
 8007dba:	6029      	str	r1, [r5, #0]
 8007dbc:	0601      	lsls	r1, r0, #24
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_i+0xec>
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <_printf_i+0xf2>
 8007dc4:	0646      	lsls	r6, r0, #25
 8007dc6:	d5fb      	bpl.n	8007dc0 <_printf_i+0xe8>
 8007dc8:	881e      	ldrh	r6, [r3, #0]
 8007dca:	4854      	ldr	r0, [pc, #336]	; (8007f1c <_printf_i+0x244>)
 8007dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dce:	bf0c      	ite	eq
 8007dd0:	2308      	moveq	r3, #8
 8007dd2:	230a      	movne	r3, #10
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dda:	6865      	ldr	r5, [r4, #4]
 8007ddc:	60a5      	str	r5, [r4, #8]
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	bfa2      	ittt	ge
 8007de2:	6821      	ldrge	r1, [r4, #0]
 8007de4:	f021 0104 	bicge.w	r1, r1, #4
 8007de8:	6021      	strge	r1, [r4, #0]
 8007dea:	b90e      	cbnz	r6, 8007df0 <_printf_i+0x118>
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d04d      	beq.n	8007e8c <_printf_i+0x1b4>
 8007df0:	4615      	mov	r5, r2
 8007df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007df6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dfa:	5dc7      	ldrb	r7, [r0, r7]
 8007dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e00:	4637      	mov	r7, r6
 8007e02:	42bb      	cmp	r3, r7
 8007e04:	460e      	mov	r6, r1
 8007e06:	d9f4      	bls.n	8007df2 <_printf_i+0x11a>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d10b      	bne.n	8007e24 <_printf_i+0x14c>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	07de      	lsls	r6, r3, #31
 8007e10:	d508      	bpl.n	8007e24 <_printf_i+0x14c>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	6861      	ldr	r1, [r4, #4]
 8007e16:	4299      	cmp	r1, r3
 8007e18:	bfde      	ittt	le
 8007e1a:	2330      	movle	r3, #48	; 0x30
 8007e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e24:	1b52      	subs	r2, r2, r5
 8007e26:	6122      	str	r2, [r4, #16]
 8007e28:	f8cd a000 	str.w	sl, [sp]
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	aa03      	add	r2, sp, #12
 8007e30:	4621      	mov	r1, r4
 8007e32:	4640      	mov	r0, r8
 8007e34:	f7ff fee2 	bl	8007bfc <_printf_common>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d14c      	bne.n	8007ed6 <_printf_i+0x1fe>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	b004      	add	sp, #16
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	4835      	ldr	r0, [pc, #212]	; (8007f1c <_printf_i+0x244>)
 8007e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e54:	6029      	str	r1, [r5, #0]
 8007e56:	061d      	lsls	r5, r3, #24
 8007e58:	d514      	bpl.n	8007e84 <_printf_i+0x1ac>
 8007e5a:	07df      	lsls	r7, r3, #31
 8007e5c:	bf44      	itt	mi
 8007e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e62:	6023      	strmi	r3, [r4, #0]
 8007e64:	b91e      	cbnz	r6, 8007e6e <_printf_i+0x196>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	f023 0320 	bic.w	r3, r3, #32
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	2310      	movs	r3, #16
 8007e70:	e7b0      	b.n	8007dd4 <_printf_i+0xfc>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	f043 0320 	orr.w	r3, r3, #32
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	2378      	movs	r3, #120	; 0x78
 8007e7c:	4828      	ldr	r0, [pc, #160]	; (8007f20 <_printf_i+0x248>)
 8007e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e82:	e7e3      	b.n	8007e4c <_printf_i+0x174>
 8007e84:	0659      	lsls	r1, r3, #25
 8007e86:	bf48      	it	mi
 8007e88:	b2b6      	uxthmi	r6, r6
 8007e8a:	e7e6      	b.n	8007e5a <_printf_i+0x182>
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	e7bb      	b.n	8007e08 <_printf_i+0x130>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	6826      	ldr	r6, [r4, #0]
 8007e94:	6961      	ldr	r1, [r4, #20]
 8007e96:	1d18      	adds	r0, r3, #4
 8007e98:	6028      	str	r0, [r5, #0]
 8007e9a:	0635      	lsls	r5, r6, #24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_i+0x1cc>
 8007ea0:	6019      	str	r1, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <_printf_i+0x1d2>
 8007ea4:	0670      	lsls	r0, r6, #25
 8007ea6:	d5fb      	bpl.n	8007ea0 <_printf_i+0x1c8>
 8007ea8:	8019      	strh	r1, [r3, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	4615      	mov	r5, r2
 8007eb0:	e7ba      	b.n	8007e28 <_printf_i+0x150>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	681d      	ldr	r5, [r3, #0]
 8007eba:	6862      	ldr	r2, [r4, #4]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f7f8 f9b6 	bl	8000230 <memchr>
 8007ec4:	b108      	cbz	r0, 8007eca <_printf_i+0x1f2>
 8007ec6:	1b40      	subs	r0, r0, r5
 8007ec8:	6060      	str	r0, [r4, #4]
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed4:	e7a8      	b.n	8007e28 <_printf_i+0x150>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4649      	mov	r1, r9
 8007edc:	4640      	mov	r0, r8
 8007ede:	47d0      	blx	sl
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d0ab      	beq.n	8007e3c <_printf_i+0x164>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	079b      	lsls	r3, r3, #30
 8007ee8:	d413      	bmi.n	8007f12 <_printf_i+0x23a>
 8007eea:	68e0      	ldr	r0, [r4, #12]
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	4298      	cmp	r0, r3
 8007ef0:	bfb8      	it	lt
 8007ef2:	4618      	movlt	r0, r3
 8007ef4:	e7a4      	b.n	8007e40 <_printf_i+0x168>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4632      	mov	r2, r6
 8007efa:	4649      	mov	r1, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	47d0      	blx	sl
 8007f00:	3001      	adds	r0, #1
 8007f02:	d09b      	beq.n	8007e3c <_printf_i+0x164>
 8007f04:	3501      	adds	r5, #1
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	9903      	ldr	r1, [sp, #12]
 8007f0a:	1a5b      	subs	r3, r3, r1
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dcf2      	bgt.n	8007ef6 <_printf_i+0x21e>
 8007f10:	e7eb      	b.n	8007eea <_printf_i+0x212>
 8007f12:	2500      	movs	r5, #0
 8007f14:	f104 0619 	add.w	r6, r4, #25
 8007f18:	e7f5      	b.n	8007f06 <_printf_i+0x22e>
 8007f1a:	bf00      	nop
 8007f1c:	0809e68d 	.word	0x0809e68d
 8007f20:	0809e69e 	.word	0x0809e69e

08007f24 <_sbrk_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_sbrk_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7fa f9ea 	bl	8002308 <_sbrk>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_sbrk_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_sbrk_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	2000041c 	.word	0x2000041c

08007f44 <__sread>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	f000 f8a8 	bl	80080a0 <_read_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	bfab      	itete	ge
 8007f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f56:	89a3      	ldrhlt	r3, [r4, #12]
 8007f58:	181b      	addge	r3, r3, r0
 8007f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f5e:	bfac      	ite	ge
 8007f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f62:	81a3      	strhlt	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__swrite>:
 8007f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	05db      	lsls	r3, r3, #23
 8007f70:	4605      	mov	r5, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4616      	mov	r6, r2
 8007f76:	d505      	bpl.n	8007f84 <__swrite+0x1e>
 8007f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f000 f870 	bl	8008064 <_lseek_r>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	4632      	mov	r2, r6
 8007f92:	463b      	mov	r3, r7
 8007f94:	4628      	mov	r0, r5
 8007f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9a:	f000 b817 	b.w	8007fcc <_write_r>

08007f9e <__sseek>:
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa6:	f000 f85d 	bl	8008064 <_lseek_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	bf15      	itete	ne
 8007fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fba:	81a3      	strheq	r3, [r4, #12]
 8007fbc:	bf18      	it	ne
 8007fbe:	81a3      	strhne	r3, [r4, #12]
 8007fc0:	bd10      	pop	{r4, pc}

08007fc2 <__sclose>:
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 b81b 	b.w	8008000 <_close_r>
	...

08007fcc <_write_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_write_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7fa f9ca 	bl	8002374 <_write>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_write_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_write_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	2000041c 	.word	0x2000041c

08007ff0 <abort>:
 8007ff0:	b508      	push	{r3, lr}
 8007ff2:	2006      	movs	r0, #6
 8007ff4:	f000 f88e 	bl	8008114 <raise>
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f7fa f929 	bl	8002250 <_exit>
	...

08008000 <_close_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	; (800801c <_close_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7fa f947 	bl	800229e <_close>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_close_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_close_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	2000041c 	.word	0x2000041c

08008020 <_fstat_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	; (8008040 <_fstat_r+0x20>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	f7fa f942 	bl	80022b6 <_fstat>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	d102      	bne.n	800803c <_fstat_r+0x1c>
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	b103      	cbz	r3, 800803c <_fstat_r+0x1c>
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	bd38      	pop	{r3, r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	2000041c 	.word	0x2000041c

08008044 <_isatty_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d06      	ldr	r5, [pc, #24]	; (8008060 <_isatty_r+0x1c>)
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fa f941 	bl	80022d6 <_isatty>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_isatty_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_isatty_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	2000041c 	.word	0x2000041c

08008064 <_lseek_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_lseek_r+0x20>)
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	2200      	movs	r2, #0
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7fa f93a 	bl	80022ec <_lseek>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_lseek_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_lseek_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	2000041c 	.word	0x2000041c

08008088 <__malloc_lock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_lock+0x8>)
 800808a:	f7ff bb0d 	b.w	80076a8 <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	20000410 	.word	0x20000410

08008094 <__malloc_unlock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_unlock+0x8>)
 8008096:	f7ff bb08 	b.w	80076aa <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	20000410 	.word	0x20000410

080080a0 <_read_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	; (80080c0 <_read_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7fa f8d8 	bl	8002264 <_read>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_read_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_read_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	2000041c 	.word	0x2000041c

080080c4 <_raise_r>:
 80080c4:	291f      	cmp	r1, #31
 80080c6:	b538      	push	{r3, r4, r5, lr}
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	d904      	bls.n	80080d8 <_raise_r+0x14>
 80080ce:	2316      	movs	r3, #22
 80080d0:	6003      	str	r3, [r0, #0]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080da:	b112      	cbz	r2, 80080e2 <_raise_r+0x1e>
 80080dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080e0:	b94b      	cbnz	r3, 80080f6 <_raise_r+0x32>
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 f830 	bl	8008148 <_getpid_r>
 80080e8:	462a      	mov	r2, r5
 80080ea:	4601      	mov	r1, r0
 80080ec:	4620      	mov	r0, r4
 80080ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f2:	f000 b817 	b.w	8008124 <_kill_r>
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d00a      	beq.n	8008110 <_raise_r+0x4c>
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	d103      	bne.n	8008106 <_raise_r+0x42>
 80080fe:	2316      	movs	r3, #22
 8008100:	6003      	str	r3, [r0, #0]
 8008102:	2001      	movs	r0, #1
 8008104:	e7e7      	b.n	80080d6 <_raise_r+0x12>
 8008106:	2400      	movs	r4, #0
 8008108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800810c:	4628      	mov	r0, r5
 800810e:	4798      	blx	r3
 8008110:	2000      	movs	r0, #0
 8008112:	e7e0      	b.n	80080d6 <_raise_r+0x12>

08008114 <raise>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <raise+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f7ff bfd3 	b.w	80080c4 <_raise_r>
 800811e:	bf00      	nop
 8008120:	20000010 	.word	0x20000010

08008124 <_kill_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d07      	ldr	r5, [pc, #28]	; (8008144 <_kill_r+0x20>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	f7fa f87d 	bl	8002230 <_kill>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d102      	bne.n	8008140 <_kill_r+0x1c>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	b103      	cbz	r3, 8008140 <_kill_r+0x1c>
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	bd38      	pop	{r3, r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	2000041c 	.word	0x2000041c

08008148 <_getpid_r>:
 8008148:	f7fa b86a 	b.w	8002220 <_getpid>

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
